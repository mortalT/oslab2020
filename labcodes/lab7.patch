Binary files _lab7/bin/bootblock and lab7/bin/bootblock differ
Binary files _lab7/bin/kernel and lab7/bin/kernel differ
Binary files _lab7/bin/sign and lab7/bin/sign differ
Binary files _lab7/bin/swap.img and lab7/bin/swap.img differ
Binary files _lab7/bin/ucore.img and lab7/bin/ucore.img differ
diff -r -u -P _lab7/.gdb.in lab7/.gdb.in
--- _lab7/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.gdb.in	2020-05-28 05:04:00.357519207 +0800
@@ -0,0 +1,3 @@
+target remote localhost:1234
+break *0xc010024f
+continue
diff -r -u -P _lab7/kern/debug/kdebug.c lab7/kern/debug/kdebug.c
--- _lab7/kern/debug/kdebug.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/debug/kdebug.c	2020-05-28 03:21:54.089519207 +0800
@@ -340,12 +340,23 @@
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
       *    (3.1) printf value of ebp, eip
-      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
       *    (3.3) cprintf("\n");
       *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
       *    (3.5) popup a calling stackframe
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+	eip = read_eip();
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+		cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, *((uintptr_t*)ebp+2), *((uintptr_t*)ebp+3), *((uintptr_t*)ebp+4), *((uintptr_t*)ebp+5));
+		print_debuginfo(eip - 1);
+		eip = *((uintptr_t*)ebp+1);
+		ebp = *((uintptr_t*)ebp);
+		if(ebp == 0)
+			break;
+	}
 }
 
diff -r -u -P _lab7/kern/debug/kdebug.c~ lab7/kern/debug/kdebug.c~
--- _lab7/kern/debug/kdebug.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/debug/kdebug.c~	2020-05-28 03:21:54.089519207 +0800
@@ -0,0 +1,309 @@
+#include <defs.h>
+#include <x86.h>
+#include <stab.h>
+#include <stdio.h>
+#include <string.h>
+#include <sync.h>
+#include <kdebug.h>
+#include <kmonitor.h>
+#include <assert.h>
+
+#define STACKFRAME_DEPTH 20
+
+extern const struct stab __STAB_BEGIN__[];  // beginning of stabs table
+extern const struct stab __STAB_END__[];    // end of stabs table
+extern const char __STABSTR_BEGIN__[];      // beginning of string table
+extern const char __STABSTR_END__[];        // end of string table
+
+/* debug information about a particular instruction pointer */
+struct eipdebuginfo {
+    const char *eip_file;                   // source code filename for eip
+    int eip_line;                           // source code line number for eip
+    const char *eip_fn_name;                // name of function containing eip
+    int eip_fn_namelen;                     // length of function's name
+    uintptr_t eip_fn_addr;                  // start address of function
+    int eip_fn_narg;                        // number of function arguments
+};
+
+/* *
+ * stab_binsearch - according to the input, the initial value of
+ * range [*@region_left, *@region_right], find a single stab entry
+ * that includes the address @addr and matches the type @type,
+ * and then save its boundary to the locations that pointed
+ * by @region_left and @region_right.
+ *
+ * Some stab types are arranged in increasing order by instruction address.
+ * For example, N_FUN stabs (stab entries with n_type == N_FUN), which
+ * mark functions, and N_SO stabs, which mark source files.
+ *
+ * Given an instruction address, this function finds the single stab entry
+ * of type @type that contains that address.
+ *
+ * The search takes place within the range [*@region_left, *@region_right].
+ * Thus, to search an entire set of N stabs, you might do:
+ *
+ *      left = 0;
+ *      right = N - 1;    (rightmost stab)
+ *      stab_binsearch(stabs, &left, &right, type, addr);
+ *
+ * The search modifies *region_left and *region_right to bracket the @addr.
+ * *@region_left points to the matching stab that contains @addr,
+ * and *@region_right points just before the next stab.
+ * If *@region_left > *region_right, then @addr is not contained in any
+ * matching stab.
+ *
+ * For example, given these N_SO stabs:
+ *      Index  Type   Address
+ *      0      SO     f0100000
+ *      13     SO     f0100040
+ *      117    SO     f0100176
+ *      118    SO     f0100178
+ *      555    SO     f0100652
+ *      556    SO     f0100654
+ *      657    SO     f0100849
+ * this code:
+ *      left = 0, right = 657;
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+            l = true_m + 1;
+            continue;
+        }
+
+        // actual binary search
+        any_matches = 1;
+        if (stabs[m].n_value < addr) {
+            *region_left = m;
+            l = true_m + 1;
+        } else if (stabs[m].n_value > addr) {
+            *region_right = m - 1;
+            r = m - 1;
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+
+/* *
+ * debuginfo_eip - Fill in the @info structure with information about
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+    info->eip_line = 0;
+    info->eip_fn_name = "<unknown>";
+    info->eip_fn_namelen = 9;
+    info->eip_fn_addr = addr;
+    info->eip_fn_narg = 0;
+
+    stabs = __STAB_BEGIN__;
+    stab_end = __STAB_END__;
+    stabstr = __STABSTR_BEGIN__;
+    stabstr_end = __STABSTR_END__;
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+        return -1;
+    }
+
+    // Now we find the right stabs that define the function containing
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+    if (lfile == 0)
+        return -1;
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+
+    if (lfun <= rfun) {
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+        addr -= info->eip_fn_addr;
+        // Search within the function definition for the line number.
+        lline = lfun;
+        rline = rfun;
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+        lline = lfile;
+        rline = rfile;
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+    }
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+        info->eip_file = stabstr + stabs[lline].n_strx;
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+}
+
+/* *
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+    cprintf("  etext  0x%08x (phys)\n", etext);
+    cprintf("  edata  0x%08x (phys)\n", edata);
+    cprintf("  end    0x%08x (phys)\n", end);
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+}
+
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+
+static __noinline uint32_t
+read_eip(void) {
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+    return eip;
+}
+
+/* *
+ * print_stackframe - print a list of the saved eip values from the nested 'call'
+ * instructions that led to the current point of execution
+ *
+ * The x86 stack pointer, namely esp, points to the lowest location on the stack
+ * that is currently in use. Everything below that location in stack is free. Pushing
+ * a value onto the stack will invole decreasing the stack pointer and then writing
+ * the value to the place that stack pointer pointes to. And popping a value do the
+ * opposite.
+ *
+ * The ebp (base pointer) register, in contrast, is associated with the stack
+ * primarily by software convention. On entry to a C function, the function's
+ * prologue code normally saves the previous function's base pointer by pushing
+ * it onto the stack, and then copies the current esp value into ebp for the duration
+ * of the function. If all the functions in a program obey this convention,
+ * then at any given point during the program's execution, it is possible to trace
+ * back through the stack by following the chain of saved ebp pointers and determining
+ * exactly what nested sequence of function calls caused this particular point in the
+ * program to be reached. This capability can be particularly useful, for example,
+ * when a particular function causes an assert failure or panic because bad arguments
+ * were passed to it, but you aren't sure who passed the bad arguments. A stack
+ * backtrace lets you find the offending function.
+ *
+ * The inline function read_ebp() can tell us the value of current ebp. And the
+ * non-inline function read_eip() is useful, it can read the value of current eip,
+ * since while calling this function, read_eip() can read the caller's eip from
+ * stack easily.
+ *
+ * In print_debuginfo(), the function debuginfo_eip() can get enough information about
+ * calling-chain. Finally print_stackframe() will trace and print them for debugging.
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+     /* LAB1 YOUR CODE : STEP 1 */
+     /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
+      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
+      * (3) from 0 .. STACKFRAME_DEPTH
+      *    (3.1) printf value of ebp, eip
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
+      *    (3.3) cprintf("\n");
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+}
+
diff -r -u -P _lab7/kern/debug/panic.c lab7/kern/debug/panic.c
--- _lab7/kern/debug/panic.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/debug/panic.c	2020-05-28 03:21:54.089519207 +0800
@@ -22,10 +22,6 @@
     cprintf("kernel panic at %s:%d:\n    ", file, line);
     vcprintf(fmt, ap);
     cprintf("\n");
-    
-    cprintf("stack trackback:\n");
-    print_stackframe();
-    
     va_end(ap);
 
 panic_dead:
diff -r -u -P _lab7/kern/init/entry.S lab7/kern/init/entry.S
--- _lab7/kern/init/entry.S	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/init/entry.S	2020-05-28 03:21:54.089519207 +0800
@@ -6,26 +6,17 @@
 .text
 .globl kern_entry
 kern_entry:
-    # load pa of boot pgdir
-    movl $REALLOC(__boot_pgdir), %eax
-    movl %eax, %cr3
-
-    # enable paging
-    movl %cr0, %eax
-    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
-    andl $~(CR0_TS | CR0_EM), %eax
-    movl %eax, %cr0
-
-    # update eip
-    # now, eip = 0x1.....
-    leal next, %eax
-    # set eip = KERNBASE + 0x1.....
-    jmp *%eax
-next:
-
-    # unmap va 0 ~ 4M, it's temporary mapping
-    xorl %eax, %eax
-    movl %eax, __boot_pgdir
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+    movl $KERNEL_DS, %eax
+    movw %ax, %ds
+    movw %ax, %es
+    movw %ax, %ss
+
+    ljmp $KERNEL_CS, $relocated
+
+relocated:
 
     # set ebp, esp
     movl $0x0, %ebp
@@ -47,24 +38,12 @@
     .globl bootstacktop
 bootstacktop:
 
-# kernel builtin pgdir
-# an initial page directory (Page Directory Table, PDT)
-# These page directory table and page table can be reused!
-.section .data.pgdir
-.align PGSIZE
-__boot_pgdir:
-.globl __boot_pgdir
-    # map va 0 ~ 4M to pa 0 ~ 4M (temporary)
-    .long REALLOC(__boot_pt1) + (PTE_P | PTE_U | PTE_W)
-    .space (KERNBASE >> PGSHIFT >> 10 << 2) - (. - __boot_pgdir) # pad to PDE of KERNBASE
-    # map va KERNBASE + (0 ~ 4M) to pa 0 ~ 4M
-    .long REALLOC(__boot_pt1) + (PTE_P | PTE_U | PTE_W)
-    .space PGSIZE - (. - __boot_pgdir) # pad to PGSIZE
-
-.set i, 0
-__boot_pt1:
-.rept 1024
-    .long i * PGSIZE + (PTE_P | PTE_W)
-    .set i, i + 1
-.endr
+.align 4
+__gdt:
+    SEG_NULL
+    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment
+    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment
+__gdtdesc:
+    .word 0x17                                          # sizeof(__gdt) - 1
+    .long REALLOC(__gdt)
 
diff -r -u -P _lab7/kern/mm/default_pmm.c lab7/kern/mm/default_pmm.c
--- _lab7/kern/mm/default_pmm.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/mm/default_pmm.c	2020-05-28 03:21:54.089519207 +0800
@@ -3,95 +3,56 @@
 #include <string.h>
 #include <default_pmm.h>
 
-/*  In the First Fit algorithm, the allocator keeps a list of free blocks
- * (known as the free list). Once receiving a allocation request for memory,
- * it scans along the list for the first block that is large enough to satisfy
- * the request. If the chosen block is significantly larger than requested, it
- * is usually splitted, and the remainder will be added into the list as
- * another free block.
- *  Please refer to Page 196~198, Section 8.2 of Yan Wei Min's Chinese book
- * "Data Structure -- C programming language".
+/* In the first fit algorithm, the allocator keeps a list of free blocks (known as the free list) and,
+   on receiving a request for memory, scans along the list for the first block that is large enough to
+   satisfy the request. If the chosen block is significantly larger than that requested, then it is 
+   usually split, and the remainder added to the list as another free block.
+   Please see Page 196~198, Section 8.2 of Yan Wei Ming's chinese book "Data Structure -- C programming language"
 */
-// LAB2 EXERCISE 1: YOUR CODE
-// you should rewrite functions: `default_init`, `default_init_memmap`,
-// `default_alloc_pages`, `default_free_pages`.
+// LAB2 EXERCISE 1: 2012011268
+// you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
 /*
  * Details of FFMA
- * (1) Preparation:
- *  In order to implement the First-Fit Memory Allocation (FFMA), we should
- * manage the free memory blocks using a list. The struct `free_area_t` is used
- * for the management of free memory blocks.
- *  First, you should get familiar with the struct `list` in list.h. Struct
- * `list` is a simple doubly linked list implementation. You should know how to
- * USE `list_init`, `list_add`(`list_add_after`), `list_add_before`, `list_del`,
- * `list_next`, `list_prev`.
- *  There's a tricky method that is to transform a general `list` struct to a
- * special struct (such as struct `page`), using the following MACROs: `le2page`
- * (in memlayout.h), (and in future labs: `le2vma` (in vmm.h), `le2proc` (in
- * proc.h), etc).
- * (2) `default_init`:
- *  You can reuse the demo `default_init` function to initialize the `free_list`
- * and set `nr_free` to 0. `free_list` is used to record the free memory blocks.
- * `nr_free` is the total number of the free memory blocks.
- * (3) `default_init_memmap`:
- *  CALL GRAPH: `kern_init` --> `pmm_init` --> `page_init` --> `init_memmap` -->
- * `pmm_manager` --> `init_memmap`.
- *  This function is used to initialize a free block (with parameter `addr_base`,
- * `page_number`). In order to initialize a free block, firstly, you should
- * initialize each page (defined in memlayout.h) in this free block. This
- * procedure includes:
- *  - Setting the bit `PG_property` of `p->flags`, which means this page is
- * valid. P.S. In function `pmm_init` (in pmm.c), the bit `PG_reserved` of
- * `p->flags` is already set.
- *  - If this page is free and is not the first page of a free block,
- * `p->property` should be set to 0.
- *  - If this page is free and is the first page of a free block, `p->property`
- * should be set to be the total number of pages in the block.
- *  - `p->ref` should be 0, because now `p` is free and has no reference.
- *  After that, We can use `p->page_link` to link this page into `free_list`.
- * (e.g.: `list_add_before(&free_list, &(p->page_link));` )
- *  Finally, we should update the sum of the free memory blocks: `nr_free += n`.
- * (4) `default_alloc_pages`:
- *  Search for the first free block (block size >= n) in the free list and reszie
- * the block found, returning the address of this block as the address required by
- * `malloc`.
- *  (4.1)
- *      So you should search the free list like this:
- *          list_entry_t le = &free_list;
- *          while((le=list_next(le)) != &free_list) {
- *          ...
- *      (4.1.1)
- *          In the while loop, get the struct `page` and check if `p->property`
- *      (recording the num of free pages in this block) >= n.
- *              struct Page *p = le2page(le, page_link);
- *              if(p->property >= n){ ...
- *      (4.1.2)
- *          If we find this `p`, it means we've found a free block with its size
- *      >= n, whose first `n` pages can be malloced. Some flag bits of this page
- *      should be set as the following: `PG_reserved = 1`, `PG_property = 0`.
- *      Then, unlink the pages from `free_list`.
- *          (4.1.2.1)
- *              If `p->property > n`, we should re-calculate number of the rest
- *          pages of this free block. (e.g.: `le2page(le,page_link))->property
- *          = p->property - n;`)
- *          (4.1.3)
- *              Re-caluclate `nr_free` (number of the the rest of all free block).
- *          (4.1.4)
- *              return `p`.
- *      (4.2)
- *          If we can not find a free block with its size >=n, then return NULL.
- * (5) `default_free_pages`:
- *  re-link the pages into the free list, and may merge small free blocks into
- * the big ones.
- *  (5.1)
- *      According to the base address of the withdrawed blocks, search the free
- *  list for its correct position (with address from low to high), and insert
- *  the pages. (May use `list_next`, `le2page`, `list_add_before`)
- *  (5.2)
- *      Reset the fields of the pages, such as `p->ref` and `p->flags` (PageProperty)
- *  (5.3)
- *      Try to merge blocks at lower or higher addresses. Notice: This should
- *  change some pages' `p->property` correctly.
+ * (1) Prepare: In order to implement the First-Fit Mem Alloc (FFMA), we should manage the free mem block use some list.
+ *              The struct free_area_t is used for the management of free mem blocks. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list implementation.
+ *              You should know howto USE: list_init, list_add(list_add_after), list_add_before, list_del, list_next, list_prev
+ *              Another tricky method is to transform a general list struct to a special struct (such as struct page):
+ *              you can find some MACRO: le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.)
+ * (2) default_init: you can reuse the  demo default_init fun to init the free_list and set nr_free to 0.
+ *              free_list is used to record the free mem blocks. nr_free is the total number for free mem blocks.
+ * (3) default_init_memmap:  CALL GRAPH: kern_init --> pmm_init-->page_init-->init_memmap--> pmm_manager->init_memmap
+ *              This fun is used to init a free block (with parameter: addr_base, page_number).
+ *              First you should init each page (in memlayout.h) in this free block, include:
+ *                  p->flags should be set bit PG_property (means this page is valid. In pmm_init fun (in pmm.c),
+ *                  the bit PG_reserved is setted in p->flags)
+ *                  if this page  is free and is not the first page of free block, p->property should be set to 0.
+ *                  if this page  is free and is the first page of free block, p->property should be set to total num of block.
+ *                  p->ref should be 0, because now p is free and no reference.
+ *                  We can use p->page_link to link this page to free_list, (such as: list_add_before(&free_list, &(p->page_link)); )
+ *              Finally, we should sum the number of free mem block: nr_free+=n
+ * (4) default_alloc_pages: search find a first free block (block size >=n) in free list and reszie the free block, return the addr
+ *              of malloced block.
+ *              (4.1) So you should search freelist like this:
+ *                       list_entry_t le = &free_list;
+ *                       while((le=list_next(le)) != &free_list) {
+ *                       ....
+ *                 (4.1.1) In while loop, get the struct page and check the p->property (record the num of free block) >=n?
+ *                       struct Page *p = le2page(le, page_link);
+ *                       if(p->property >= n){ ...
+ *                 (4.1.2) If we find this p, then it' means we find a free block(block size >=n), and the first n pages can be malloced.
+ *                     Some flag bits of this page should be setted: PG_reserved =1, PG_property =0
+ *                     unlink the pages from free_list
+ *                     (4.1.2.1) If (p->property >n), we should re-caluclate number of the the rest of this free block,
+ *                           (such as: le2page(le,page_link))->property = p->property - n;)
+ *                 (4.1.3)  re-caluclate nr_free (number of the the rest of all free block)
+ *                 (4.1.4)  return p
+ *               (4.2) If we can not find a free block (block size >=n), then return NULL
+ * (5) default_free_pages: relink the pages into  free list, maybe merge small free blocks into big free blocks.
+ *               (5.1) according the base addr of withdrawed blocks, search free list, find the correct position
+ *                     (from low to high addr), and insert the pages. (may use list_next, le2page, list_add_before)
+ *               (5.2) reset the fields of pages, such as p->ref, p->flags (PageProperty)
+ *               (5.3) try to merge low addr or high addr blocks. Notice: should change some pages's p->property correctly.
  */
 free_area_t free_area;
 
@@ -135,12 +96,14 @@
         }
     }
     if (page != NULL) {
-        list_del(&(page->page_link));
+        //list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
+	    SetPageProperty(p);
             list_add(&free_list, &(p->page_link));
-    }
+        }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -174,8 +137,9 @@
             list_del(&(p->page_link));
         }
     }
+    for (le = list_next(&free_list); le != &free_list && base + base->property >= le2page(le, page_link); le = list_next(le));
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
diff -r -u -P _lab7/kern/mm/default_pmm.c~ lab7/kern/mm/default_pmm.c~
--- _lab7/kern/mm/default_pmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/mm/default_pmm.c~	2020-05-28 03:21:54.089519207 +0800
@@ -0,0 +1,272 @@
+#include <pmm.h>
+#include <list.h>
+#include <string.h>
+#include <default_pmm.h>
+
+/* In the first fit algorithm, the allocator keeps a list of free blocks (known as the free list) and,
+   on receiving a request for memory, scans along the list for the first block that is large enough to
+   satisfy the request. If the chosen block is significantly larger than that requested, then it is 
+   usually split, and the remainder added to the list as another free block.
+   Please see Page 196~198, Section 8.2 of Yan Wei Ming's chinese book "Data Structure -- C programming language"
+*/
+// LAB2 EXERCISE 1: YOUR CODE
+// you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
+/*
+ * Details of FFMA
+ * (1) Prepare: In order to implement the First-Fit Mem Alloc (FFMA), we should manage the free mem block use some list.
+ *              The struct free_area_t is used for the management of free mem blocks. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list implementation.
+ *              You should know howto USE: list_init, list_add(list_add_after), list_add_before, list_del, list_next, list_prev
+ *              Another tricky method is to transform a general list struct to a special struct (such as struct page):
+ *              you can find some MACRO: le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.)
+ * (2) default_init: you can reuse the  demo default_init fun to init the free_list and set nr_free to 0.
+ *              free_list is used to record the free mem blocks. nr_free is the total number for free mem blocks.
+ * (3) default_init_memmap:  CALL GRAPH: kern_init --> pmm_init-->page_init-->init_memmap--> pmm_manager->init_memmap
+ *              This fun is used to init a free block (with parameter: addr_base, page_number).
+ *              First you should init each page (in memlayout.h) in this free block, include:
+ *                  p->flags should be set bit PG_property (means this page is valid. In pmm_init fun (in pmm.c),
+ *                  the bit PG_reserved is setted in p->flags)
+ *                  if this page  is free and is not the first page of free block, p->property should be set to 0.
+ *                  if this page  is free and is the first page of free block, p->property should be set to total num of block.
+ *                  p->ref should be 0, because now p is free and no reference.
+ *                  We can use p->page_link to link this page to free_list, (such as: list_add_before(&free_list, &(p->page_link)); )
+ *              Finally, we should sum the number of free mem block: nr_free+=n
+ * (4) default_alloc_pages: search find a first free block (block size >=n) in free list and reszie the free block, return the addr
+ *              of malloced block.
+ *              (4.1) So you should search freelist like this:
+ *                       list_entry_t le = &free_list;
+ *                       while((le=list_next(le)) != &free_list) {
+ *                       ....
+ *                 (4.1.1) In while loop, get the struct page and check the p->property (record the num of free block) >=n?
+ *                       struct Page *p = le2page(le, page_link);
+ *                       if(p->property >= n){ ...
+ *                 (4.1.2) If we find this p, then it' means we find a free block(block size >=n), and the first n pages can be malloced.
+ *                     Some flag bits of this page should be setted: PG_reserved =1, PG_property =0
+ *                     unlink the pages from free_list
+ *                     (4.1.2.1) If (p->property >n), we should re-caluclate number of the the rest of this free block,
+ *                           (such as: le2page(le,page_link))->property = p->property - n;)
+ *                 (4.1.3)  re-caluclate nr_free (number of the the rest of all free block)
+ *                 (4.1.4)  return p
+ *               (4.2) If we can not find a free block (block size >=n), then return NULL
+ * (5) default_free_pages: relink the pages into  free list, maybe merge small free blocks into big free blocks.
+ *               (5.1) according the base addr of withdrawed blocks, search free list, find the correct position
+ *                     (from low to high addr), and insert the pages. (may use list_next, le2page, list_add_before)
+ *               (5.2) reset the fields of pages, such as p->ref, p->flags (PageProperty)
+ *               (5.3) try to merge low addr or high addr blocks. Notice: should change some pages's p->property correctly.
+ */
+free_area_t free_area;
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+    list_init(&free_list);
+    nr_free = 0;
+}
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static struct Page *
+default_alloc_pages(size_t n) {
+    assert(n > 0);
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+        list_del(&(page->page_link));
+        if (page->property > n) {
+            struct Page *p = page + n;
+            p->property = page->property - n;
+            list_add(&free_list, &(p->page_link));
+    }
+        nr_free -= n;
+        ClearPageProperty(page);
+    }
+    return page;
+}
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+        p = le2page(le, page_link);
+        le = list_next(le);
+        if (base + base->property == p) {
+            base->property += p->property;
+            ClearPageProperty(p);
+            list_del(&(p->page_link));
+        }
+        else if (p + p->property == base) {
+            p->property += base->property;
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static size_t
+default_nr_free_pages(void) {
+    return nr_free;
+}
+
+static void
+basic_check(void) {
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+
+    assert(page2pa(p0) < npage * PGSIZE);
+    assert(page2pa(p1) < npage * PGSIZE);
+    assert(page2pa(p2) < npage * PGSIZE);
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    free_page(p1);
+    free_page(p2);
+    assert(nr_free == 3);
+
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    assert(!list_empty(&free_list));
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    free_list = free_list_store;
+    nr_free = nr_free_store;
+
+    free_page(p);
+    free_page(p1);
+    free_page(p2);
+}
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+
+    basic_check();
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+    assert(p0 != NULL);
+    assert(!PageProperty(p0));
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+    assert(alloc_page() == NULL);
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    free_pages(p0 + 2, 3);
+    assert(alloc_pages(4) == NULL);
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+    assert((p1 = alloc_pages(3)) != NULL);
+    assert(alloc_page() == NULL);
+    assert(p0 + 2 == p1);
+
+    p2 = p0 + 1;
+    free_page(p0);
+    free_pages(p1, 3);
+    assert(PageProperty(p0) && p0->property == 1);
+    assert(PageProperty(p1) && p1->property == 3);
+
+    assert((p0 = alloc_page()) == p2 - 1);
+    free_page(p0);
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+
+    free_pages(p0, 2);
+    free_page(p2);
+
+    assert((p0 = alloc_pages(5)) != NULL);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    nr_free = nr_free_store;
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+    assert(total == 0);
+}
+
+const struct pmm_manager default_pmm_manager = {
+    .name = "default_pmm_manager",
+    .init = default_init,
+    .init_memmap = default_init_memmap,
+    .alloc_pages = default_alloc_pages,
+    .free_pages = default_free_pages,
+    .nr_free_pages = default_nr_free_pages,
+    .check = default_check,
+};
+
diff -r -u -P _lab7/kern/mm/pmm.c lab7/kern/mm/pmm.c
--- _lab7/kern/mm/pmm.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/mm/pmm.c	2020-05-28 03:21:54.097519207 +0800
@@ -40,8 +40,7 @@
 size_t npage = 0;
 
 // virtual address of boot-time page directory
-extern pde_t __boot_pgdir;
-pde_t *boot_pgdir = &__boot_pgdir;
+pde_t *boot_pgdir = NULL;
 // physical address of boot-time page directory
 uintptr_t boot_cr3;
 
@@ -253,6 +252,17 @@
     }
 }
 
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
 //boot_map_segment - setup&enable the paging mechanism
 // parameters
 //  la:   linear address of this memory need to map (after x86 segment map)
@@ -288,9 +298,6 @@
 //         - check the correctness of pmm & paging mechanism, print PDT&PT
 void
 pmm_init(void) {
-    // We've already enabled paging
-    boot_cr3 = PADDR(boot_pgdir);
-
     //We need to alloc/free the physical memory (granularity is 4KB or other size). 
     //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
     //First we should init a physical memory manager(pmm) based on the framework.
@@ -305,6 +312,11 @@
     //use pmm->check to verify the correctness of the alloc/free function in a pmm
     check_alloc_page();
 
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
     check_pgdir();
 
     static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
@@ -314,15 +326,24 @@
     boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
 
     // map all physical memory to linear memory with base linear addr KERNBASE
-    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
     boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
 
-    // Since we are using bootloader's GDT,
-    // we should reload gdt (second time, the last time) to get user segments and the TSS
-    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
-    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
     gdt_init();
 
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
     //now the basic virtual memory map(see memalyout.h) is established.
     //check the correctness of the basic virtual memory map.
     check_boot_pgdir();
@@ -342,7 +363,7 @@
 // return vaule: the kernel virtual address of this pte
 pte_t *
 get_pte(pde_t *pgdir, uintptr_t la, bool create) {
-    /* LAB2 EXERCISE 2: YOUR CODE
+    /* LAB2 EXERCISE 2: 2012011268
      *
      * If you need to visit a physical address, please use KADDR()
      * please read pmm.h for useful macros
@@ -363,18 +384,20 @@
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
-                          // (3) check if creating is needed, then alloc page for page table
-                          // CAUTION: this page is used for page table, not for common data page
-                          // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
-                          // (6) clear page content using memset
-                          // (7) set page directory entry's permission
+
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P)) {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
     }
-    return NULL;          // (8) return page table entry
-#endif
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -385,7 +408,7 @@
         *ptep_store = ptep;
     }
     if (ptep != NULL && *ptep & PTE_P) {
-        return pte2page(*ptep);
+        return pa2page(*ptep);
     }
     return NULL;
 }
@@ -395,7 +418,7 @@
 //note: PT is changed, so the TLB need to be invalidate 
 static inline void
 page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
-    /* LAB2 EXERCISE 3: YOUR CODE
+    /* LAB2 EXERCISE 3: 2012011268
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
      *
@@ -411,15 +434,21 @@
      * DEFINEs:
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
-#if 0
-    if (0) {                      //(1) check if this page table entry is present
-        struct Page *page = NULL; //(2) find corresponding page to pte
-                                  //(3) decrease page reference
-                                  //(4) and free this page when page reference reachs 0
-                                  //(5) clear second page table entry
-                                  //(6) flush tlb
+
+    if(*ptep & PTE_P) {               
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+	 free_page(page);
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+    //(6) flush tlb
     }
-#endif
 }
 
 void
@@ -487,7 +516,7 @@
         assert(page!=NULL);
         assert(npage!=NULL);
         int ret=0;
-        /* LAB5:EXERCISE2 YOUR CODE
+        /* LAB5:EXERCISE2 2012011268
          * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
          *
          * Some Useful MACROs and DEFINEs, you can use them in below implementation.
@@ -501,6 +530,10 @@
          * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
          * (4) build the map of phy addr of  nage with the linear addr start
          */
+	char *src_kvaddr = page2kva(page);
+	char *dst_kvaddr = page2kva(npage);
+	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+	page_insert(to, npage, start, perm);
         assert(ret == 0);
         }
         start += PGSIZE;
@@ -604,7 +637,7 @@
 
     pte_t *ptep;
     assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
-    assert(pte2page(*ptep) == p1);
+    assert(pa2page(*ptep) == p1);
     assert(page_ref(p1) == 1);
 
     ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
@@ -622,7 +655,7 @@
     assert(page_ref(p1) == 2);
     assert(page_ref(p2) == 0);
     assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
-    assert(pte2page(*ptep) == p1);
+    assert(pa2page(*ptep) == p1);
     assert((*ptep & PTE_U) == 0);
 
     page_remove(boot_pgdir, 0x0);
@@ -633,8 +666,8 @@
     assert(page_ref(p1) == 0);
     assert(page_ref(p2) == 0);
 
-    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
-    free_page(pde2page(boot_pgdir[0]));
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+    free_page(pa2page(boot_pgdir[0]));
     boot_pgdir[0] = 0;
 
     cprintf("check_pgdir() succeeded!\n");
@@ -668,7 +701,7 @@
     assert(strlen((const char *)0x100) == 0);
 
     free_page(p);
-    free_page(pde2page(boot_pgdir[0]));
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
     boot_pgdir[0] = 0;
 
     cprintf("check_boot_pgdir() succeeded!\n");
diff -r -u -P _lab7/kern/mm/pmm.c~ lab7/kern/mm/pmm.c~
--- _lab7/kern/mm/pmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/mm/pmm.c~	2020-05-28 03:21:54.101519207 +0800
@@ -0,0 +1,767 @@
+#include <defs.h>
+#include <x86.h>
+#include <stdio.h>
+#include <string.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <pmm.h>
+#include <default_pmm.h>
+#include <sync.h>
+#include <error.h>
+#include <swap.h>
+#include <vmm.h>
+#include <kmalloc.h>
+
+/* *
+ * Task State Segment:
+ *
+ * The TSS may reside anywhere in memory. A special segment register called
+ * the Task Register (TR) holds a segment selector that points a valid TSS
+ * segment descriptor which resides in the GDT. Therefore, to use a TSS
+ * the following must be done in function gdt_init:
+ *   - create a TSS descriptor entry in GDT
+ *   - add enough information to the TSS in memory as needed
+ *   - load the TR register with a segment selector for that segment
+ *
+ * There are several fileds in TSS for specifying the new stack pointer when a
+ * privilege level change happens. But only the fields SS0 and ESP0 are useful
+ * in our os kernel.
+ *
+ * The field SS0 contains the stack segment selector for CPL = 0, and the ESP0
+ * contains the new ESP value for CPL = 0. When an interrupt happens in protected
+ * mode, the x86 CPU will look in the TSS for SS0 and ESP0 and load their value
+ * into SS and ESP respectively.
+ * */
+static struct taskstate ts = {0};
+
+// virtual address of physicall page array
+struct Page *pages;
+// amount of physical memory (in pages)
+size_t npage = 0;
+
+// virtual address of boot-time page directory
+pde_t *boot_pgdir = NULL;
+// physical address of boot-time page directory
+uintptr_t boot_cr3;
+
+// physical memory management
+const struct pmm_manager *pmm_manager;
+
+/* *
+ * The page directory entry corresponding to the virtual address range
+ * [VPT, VPT + PTSIZE) points to the page directory itself. Thus, the page
+ * directory is treated as a page table as well as a page directory.
+ *
+ * One result of treating the page directory as a page table is that all PTEs
+ * can be accessed though a "virtual page table" at virtual address VPT. And the
+ * PTE for number n is stored in vpt[n].
+ *
+ * A second consequence is that the contents of the current page directory will
+ * always available at virtual address PGADDR(PDX(VPT), PDX(VPT), 0), to which
+ * vpd is set bellow.
+ * */
+pte_t * const vpt = (pte_t *)VPT;
+pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
+
+/* *
+ * Global Descriptor Table:
+ *
+ * The kernel and user segments are identical (except for the DPL). To load
+ * the %ss register, the CPL must equal the DPL. Thus, we must duplicate the
+ * segments for the user and the kernel. Defined as follows:
+ *   - 0x0 :  unused (always faults -- for trapping NULL far pointers)
+ *   - 0x8 :  kernel code segment
+ *   - 0x10:  kernel data segment
+ *   - 0x18:  user code segment
+ *   - 0x20:  user data segment
+ *   - 0x28:  defined for tss, initialized in gdt_init
+ * */
+static struct segdesc gdt[] = {
+    SEG_NULL,
+    [SEG_KTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_TSS]   = SEG_NULL,
+};
+
+static struct pseudodesc gdt_pd = {
+    sizeof(gdt) - 1, (uintptr_t)gdt
+};
+
+static void check_alloc_page(void);
+static void check_pgdir(void);
+static void check_boot_pgdir(void);
+
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+}
+
+/* *
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+    ts.ts_esp0 = esp0;
+}
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+    ts.ts_ss0 = KERNEL_DS;
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+    pmm_manager = &default_pmm_manager;
+    cprintf("memory management: %s\n", pmm_manager->name);
+    pmm_manager->init();
+}
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+    pmm_manager->init_memmap(base, n);
+}
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+    struct Page *page=NULL;
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+         {
+              page = pmm_manager->alloc_pages(n);
+         }
+         local_intr_restore(intr_flag);
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+    }
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+}
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        pmm_manager->free_pages(base, n);
+    }
+    local_intr_restore(intr_flag);
+}
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        ret = pmm_manager->nr_free_pages();
+    }
+    local_intr_restore(intr_flag);
+    return ret;
+}
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+        maxpa = KMEMSIZE;
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        if (memmap->map[i].type == E820_ARM) {
+            if (begin < freemem) {
+                begin = freemem;
+            }
+            if (end > KMEMSIZE) {
+                end = KMEMSIZE;
+            }
+            if (begin < end) {
+                begin = ROUNDUP(begin, PGSIZE);
+                end = ROUNDDOWN(end, PGSIZE);
+                if (begin < end) {
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
+//boot_map_segment - setup&enable the paging mechanism
+// parameters
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+    struct Page *p = alloc_page();
+    if (p == NULL) {
+        panic("boot_alloc_page failed.\n");
+    }
+    return page2kva(p);
+}
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
+    check_pgdir();
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+
+    print_pgdir();
+    
+    kmalloc_init();
+
+}
+
+//get_pte - get pte and return the kernel virtual address of this pte for la
+//        - if the PT contians this pte didn't exist, alloc a page for PT
+// parameter:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+    /* LAB2 EXERCISE 2: 2012011268
+     *
+     * If you need to visit a physical address, please use KADDR()
+     * please read pmm.h for useful macros
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   PDX(la) = the index of page directory entry of VIRTUAL ADDRESS la.
+     *   KADDR(pa) : takes a physical address and returns the corresponding kernel virtual address.
+     *   set_page_ref(page,1) : means the page be referenced by one time
+     *   page2pa(page): get the physical address of memory which this (struct Page *) page  manages
+     *   struct Page * alloc_page() : allocation a page
+     *   memset(void *s, char c, size_t n) : sets the first n bytes of the memory area pointed by s
+     *                                       to the specified value c.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P)) {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+
+}
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep_store != NULL) {
+        *ptep_store = ptep;
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+        return pa2page(*ptep);
+    }
+    return NULL;
+}
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+    /* LAB2 EXERCISE 3: 2012011268
+     *
+     * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   struct Page *page pte2page(*ptep): get the according page from the value of a ptep
+     *   free_page : free a page
+     *   page_ref_dec(page) : decrease page->ref. NOTICE: ff page->ref == 0 , then this page should be free.
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+
+    if(*ptep & PTE_P) {               
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+	 free_page(page);
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+    //(6) flush tlb
+    }
+}
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+        if (ptep == NULL) {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+            continue ;
+        }
+        if (*ptep != 0) {
+            page_remove_pte(pgdir, start, ptep);
+        }
+        start += PGSIZE;
+    } while (start != 0 && start < end);
+}
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+
+    start = ROUNDDOWN(start, PTSIZE);
+    do {
+        int pde_idx = PDX(start);
+        if (pgdir[pde_idx] & PTE_P) {
+            free_page(pde2page(pgdir[pde_idx]));
+            pgdir[pde_idx] = 0;
+        }
+        start += PTSIZE;
+    } while (start != 0 && start < end);
+}
+/* copy_range - copy content of memory (start, end) of one process A to another process B
+ * @to:    the addr of process B's Page Directory
+ * @from:  the addr of process A's Page Directory
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+        if (ptep == NULL) {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+            continue ;
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+            if ((nptep = get_pte(to, start, 1)) == NULL) {
+                return -E_NO_MEM;
+            }
+        uint32_t perm = (*ptep & PTE_USER);
+        //get page from ptep
+        struct Page *page = pte2page(*ptep);
+        // alloc a page for process B
+        struct Page *npage=alloc_page();
+        assert(page!=NULL);
+        assert(npage!=NULL);
+        int ret=0;
+        /* LAB5:EXERCISE2 YOUR CODE
+         * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
+         *
+         * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+         * MACROs or Functions:
+         *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
+         *    page_insert: build the map of phy addr of an Page with the linear addr la
+         *    memcpy: typical memory copy function
+         *
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+        assert(ret == 0);
+        }
+        start += PGSIZE;
+    } while (start != 0 && start < end);
+    return 0;
+}
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep != NULL) {
+        page_remove_pte(pgdir, la, ptep);
+    }
+}
+
+//page_insert - build the map of phy addr of an Page with the linear addr la
+// paramemters:
+//  pgdir: the kernel virtual base address of PDT
+//  page:  the Page which need to map
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+    pte_t *ptep = get_pte(pgdir, la, 1);
+    if (ptep == NULL) {
+        return -E_NO_MEM;
+    }
+    page_ref_inc(page);
+    if (*ptep & PTE_P) {
+        struct Page *p = pte2page(*ptep);
+        if (p == page) {
+            page_ref_dec(page);
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+    tlb_invalidate(pgdir, la);
+    return 0;
+}
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+    if (rcr3() == PADDR(pgdir)) {
+        invlpg((void *)la);
+    }
+}
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+    struct Page *page = alloc_page();
+    if (page != NULL) {
+        if (page_insert(pgdir, page, la, perm) != 0) {
+            free_page(page);
+            return NULL;
+        }
+        if (swap_init_ok){
+            if(check_mm_struct!=NULL) {
+                swap_map_swappable(check_mm_struct, la, page, 0);
+                page->pra_vaddr=la;
+                assert(page_ref(page) == 1);
+                //cprintf("get No. %d  page: pra_vaddr %x, pra_link.prev %x, pra_link_next %x in pgdir_alloc_page\n", (page-pages), page->pra_vaddr,page->pra_page_link.prev, page->pra_page_link.next);
+            } 
+            else  {  //now current is existed, should fix it in the future
+                //swap_map_swappable(current->mm, la, page, 0);
+                //page->pra_vaddr=la;
+                //assert(page_ref(page) == 1);
+                //panic("pgdir_alloc_page: no pages. now current is existed, should fix it in the future\n");
+            }
+        }
+
+    }
+
+    return page;
+}
+
+static void
+check_alloc_page(void) {
+    pmm_manager->check();
+    cprintf("check_alloc_page() succeeded!\n");
+}
+
+static void
+check_pgdir(void) {
+    assert(npage <= KMEMSIZE / PGSIZE);
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+    assert(pa2page(*ptep) == p1);
+    assert(page_ref(p1) == 1);
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+
+    p2 = alloc_page();
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(*ptep & PTE_U);
+    assert(*ptep & PTE_W);
+    assert(boot_pgdir[0] & PTE_U);
+    assert(page_ref(p2) == 1);
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+    assert(page_ref(p1) == 2);
+    assert(page_ref(p2) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(pa2page(*ptep) == p1);
+    assert((*ptep & PTE_U) == 0);
+
+    page_remove(boot_pgdir, 0x0);
+    assert(page_ref(p1) == 1);
+    assert(page_ref(p2) == 0);
+
+    page_remove(boot_pgdir, PGSIZE);
+    assert(page_ref(p1) == 0);
+    assert(page_ref(p2) == 0);
+
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+    free_page(pa2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_pgdir() succeeded!\n");
+}
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+
+    assert(boot_pgdir[0] == 0);
+
+    struct Page *p;
+    p = alloc_page();
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+    assert(page_ref(p) == 1);
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+    assert(page_ref(p) == 2);
+
+    const char *str = "ucore: Hello world!!";
+    strcpy((void *)0x100, str);
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+    assert(strlen((const char *)0x100) == 0);
+
+    free_page(p);
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+}
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+    str[1] = 'r';
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+    str[3] = '\0';
+    return str;
+}
+
+//get_pgtable_items - In [left, right] range of PDT or PT, find a continuous linear addr space
+//                  - (left_store*X_SIZE~right_store*X_SIZE) for PDT or PT
+//                  - X_SIZE=PTSIZE=4M, if PDT; X_SIZE=PGSIZE=4K, if PT
+// paramemters:
+//  left:        no use ???
+//  right:       the high side of table's range
+//  start:       the low side of table's range
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+    }
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+            start ++;
+        }
+        if (right_store != NULL) {
+            *right_store = start;
+        }
+        return perm;
+    }
+    return 0;
+}
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+}
diff -r -u -P _lab7/kern/mm/swap_fifo.c lab7/kern/mm/swap_fifo.c
--- _lab7/kern/mm/swap_fifo.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/mm/swap_fifo.c	2020-05-28 03:21:54.101519207 +0800
@@ -49,8 +49,9 @@
  
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: 2012011268*/ 
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
     return 0;
 }
 /*
@@ -64,9 +65,14 @@
          assert(head != NULL);
      assert(in_tick==0);
      /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     /*LAB3 EXERCISE 2: 2012011268*/ 
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = list_next(head);
+     assert(le != head);
+     struct Page *page = le2page(le, pra_page_link);
+     list_del(le);
+     *ptr_page = page;
      return 0;
 }
 
diff -r -u -P _lab7/kern/mm/swap_fifo.c~ lab7/kern/mm/swap_fifo.c~
--- _lab7/kern/mm/swap_fifo.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/mm/swap_fifo.c~	2020-05-28 03:21:54.105519207 +0800
@@ -0,0 +1,143 @@
+#include <defs.h>
+#include <x86.h>
+#include <stdio.h>
+#include <string.h>
+#include <swap.h>
+#include <swap_fifo.h>
+#include <list.h>
+
+/* [wikipedia]The simplest Page Replacement Algorithm(PRA) is a FIFO algorithm. The first-in, first-out
+ * page replacement algorithm is a low-overhead algorithm that requires little book-keeping on
+ * the part of the operating system. The idea is obvious from the name - the operating system
+ * keeps track of all the pages in memory in a queue, with the most recent arrival at the back,
+ * and the earliest arrival in front. When a page needs to be replaced, the page at the front
+ * of the queue (the oldest page) is selected. While FIFO is cheap and intuitive, it performs
+ * poorly in practical application. Thus, it is rarely used in its unmodified form. This
+ * algorithm experiences Belady's anomaly.
+ *
+ * Details of FIFO PRA
+ * (1) Prepare: In order to implement FIFO PRA, we should manage all swappable pages, so we can
+ *              link these pages into pra_list_head according the time order. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list
+ *              implementation. You should know howto USE: list_init, list_add(list_add_after),
+ *              list_add_before, list_del, list_next, list_prev. Another tricky method is to transform
+ *              a general list struct to a special struct (such as struct page). You can find some MACRO:
+ *              le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.
+ */
+
+list_entry_t pra_list_head;
+/*
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+}
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+    list_entry_t *entry=&(page->pra_page_link);
+ 
+    assert(entry != NULL && head != NULL);
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    return 0;
+}
+/*
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+         assert(head != NULL);
+     assert(in_tick==0);
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  assign the value of *ptr_page to the addr of this page
+     return 0;
+}
+
+static int
+_fifo_check_swap(void) {
+    cprintf("write Virt Page c in fifo_check_swap\n");
+    *(unsigned char *)0x3000 = 0x0c;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page d in fifo_check_swap\n");
+    *(unsigned char *)0x4000 = 0x0d;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page e in fifo_check_swap\n");
+    *(unsigned char *)0x5000 = 0x0e;
+    assert(pgfault_num==5);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==5);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==6);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==7);
+    cprintf("write Virt Page c in fifo_check_swap\n");
+    *(unsigned char *)0x3000 = 0x0c;
+    assert(pgfault_num==8);
+    cprintf("write Virt Page d in fifo_check_swap\n");
+    *(unsigned char *)0x4000 = 0x0d;
+    assert(pgfault_num==9);
+    cprintf("write Virt Page e in fifo_check_swap\n");
+    *(unsigned char *)0x5000 = 0x0e;
+    assert(pgfault_num==10);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    assert(*(unsigned char *)0x1000 == 0x0a);
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==11);
+    return 0;
+}
+
+
+static int
+_fifo_init(void)
+{
+    return 0;
+}
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+    return 0;
+}
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+
+
+struct swap_manager swap_manager_fifo =
+{
+     .name            = "fifo swap manager",
+     .init            = &_fifo_init,
+     .init_mm         = &_fifo_init_mm,
+     .tick_event      = &_fifo_tick_event,
+     .map_swappable   = &_fifo_map_swappable,
+     .set_unswappable = &_fifo_set_unswappable,
+     .swap_out_victim = &_fifo_swap_out_victim,
+     .check_swap      = &_fifo_check_swap,
+};
diff -r -u -P _lab7/kern/mm/vmm.c lab7/kern/mm/vmm.c
--- _lab7/kern/mm/vmm.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/mm/vmm.c	2020-05-28 03:21:54.105519207 +0800
@@ -434,7 +434,7 @@
     ret = -E_NO_MEM;
 
     pte_t *ptep=NULL;
-    /*LAB3 EXERCISE 1: YOUR CODE
+    /*LAB3 EXERCISE 1: 2012011268
     * Maybe you want help comment, BELOW comments can help you finish the code
     *
     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
@@ -493,6 +493,23 @@
         }
    }
 #endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (ptep == NULL) goto failed;
+    if (*ptep == 0) {
+	    if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) goto failed;
+    } else {
+	    if (swap_init_ok) {
+		    struct Page *page = NULL;
+		    swap_in(mm, addr, &page);
+		    page_insert(mm->pgdir, page, addr, perm);
+		    swap_map_swappable(mm, addr, page, 1);
+		    page->pra_vaddr = addr; 
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            	goto failed;
+	    }
+    }
+
    ret = 0;
 failed:
     return ret;
diff -r -u -P _lab7/kern/mm/vmm.c~ lab7/kern/mm/vmm.c~
--- _lab7/kern/mm/vmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/mm/vmm.c~	2020-05-28 03:21:54.105519207 +0800
@@ -0,0 +1,419 @@
+#include <vmm.h>
+#include <sync.h>
+#include <string.h>
+#include <assert.h>
+#include <stdio.h>
+#include <error.h>
+#include <pmm.h>
+#include <x86.h>
+#include <swap.h>
+
+/* 
+  vmm design include two parts: mm_struct (mm) & vma_struct (vma)
+  mm is the memory manager for the set of continuous virtual memory  
+  area which have the same PDT. vma is a continuous virtual memory area.
+  There a linear link list for vma & a redblack link list for vma in mm.
+---------------
+  mm related functions:
+   golbal functions
+     struct mm_struct * mm_create(void)
+     void mm_destroy(struct mm_struct *mm)
+     int do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr)
+--------------
+  vma related functions:
+   global functions
+     struct vma_struct * vma_create (uintptr_t vm_start, uintptr_t vm_end,...)
+     void insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma)
+     struct vma_struct * find_vma(struct mm_struct *mm, uintptr_t addr)
+   local functions
+     inline void check_vma_overlap(struct vma_struct *prev, struct vma_struct *next)
+---------------
+   check correctness functions
+     void check_vmm(void);
+     void check_vma_struct(void);
+     void check_pgfault(void);
+*/
+
+static void check_vmm(void);
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+
+    if (mm != NULL) {
+        list_init(&(mm->mmap_list));
+        mm->mmap_cache = NULL;
+        mm->pgdir = NULL;
+        mm->map_count = 0;
+
+        if (swap_init_ok) swap_init_mm(mm);
+        else mm->sm_priv = NULL;
+    }
+    return mm;
+}
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+
+    if (vma != NULL) {
+        vma->vm_start = vm_start;
+        vma->vm_end = vm_end;
+        vma->vm_flags = vm_flags;
+    }
+    return vma;
+}
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+    struct vma_struct *vma = NULL;
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+                    vma = le2vma(le, list_link);
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+                    vma = NULL;
+                }
+        }
+        if (vma != NULL) {
+            mm->mmap_cache = vma;
+        }
+    }
+    return vma;
+}
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+    assert(prev->vm_start < prev->vm_end);
+    assert(prev->vm_end <= next->vm_start);
+    assert(next->vm_start < next->vm_end);
+}
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+            if (mmap_prev->vm_start > vma->vm_start) {
+                break;
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+
+    /* check overlap */
+    if (le_prev != list) {
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+    }
+    if (le_next != list) {
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+    }
+
+    vma->vm_mm = mm;
+    list_add_after(le_prev, &(vma->list_link));
+
+    mm->map_count ++;
+}
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+        list_del(le);
+        kfree(le2vma(le, list_link),sizeof(struct vma_struct));  //kfree vma        
+    }
+    kfree(mm, sizeof(struct mm_struct)); //kfree mm
+    mm=NULL;
+}
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+    check_vmm();
+}
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+    
+    check_vma_struct();
+    check_pgfault();
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_vmm() succeeded.\n");
+}
+
+static void
+check_vma_struct(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+
+    struct mm_struct *mm = mm_create();
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+        assert(le != &(mm->mmap_list));
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+        struct vma_struct *vma1 = find_vma(mm, i);
+        assert(vma1 != NULL);
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+        assert(vma2 != NULL);
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+        assert(vma3 == NULL);
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+        assert(vma4 == NULL);
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+        assert(vma5 == NULL);
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+        if (vma_below_5 != NULL ) {
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_vma_struct() succeeded!\n");
+}
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+
+    check_mm_struct = mm_create();
+    assert(check_mm_struct != NULL);
+
+    struct mm_struct *mm = check_mm_struct;
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+    assert(pgdir[0] == 0);
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+    assert(vma != NULL);
+
+    insert_vma_struct(mm, vma);
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+    free_page(pde2page(pgdir[0]));
+    pgdir[0] = 0;
+
+    mm->pgdir = NULL;
+    mm_destroy(mm);
+    check_mm_struct = NULL;
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_pgfault() succeeded!\n");
+}
+//page fault number
+volatile unsigned int pgfault_num=0;
+
+/* do_pgfault - interrupt handler to process the page fault execption
+ * @mm         : the control struct for a set of vma using the same PDT
+ * @error_code : the error code recorded in trapframe->tf_err which is setted by x86 hardware
+ * @addr       : the addr which causes a memory access exception, (the contents of the CR2 register)
+ *
+ * CALL GRAPH: trap--> trap_dispatch-->pgfault_handler-->do_pgfault
+ * The processor provides ucore's do_pgfault function with two items of information to aid in diagnosing
+ * the exception and recovering from it.
+ *   (1) The contents of the CR2 register. The processor loads the CR2 register with the
+ *       32-bit linear address that generated the exception. The do_pgfault fun can
+ *       use this address to locate the corresponding page directory and page-table
+ *       entries.
+ *   (2) An error code on the kernel stack. The error code for a page fault has a format different from
+ *       that for other exceptions. The error code tells the exception handler three things:
+ *         -- The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)
+ *            or to either an access rights violation or the use of a reserved bit (1).
+ *         -- The W/R flag (bit 1) indicates whether the memory access that caused the exception
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+    int ret = -E_INVAL;
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+
+    pgfault_num++;
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+        goto failed;
+    }
+    //check the error_code
+    switch (error_code & 3) {
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+            goto failed;
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+        goto failed;
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+            goto failed;
+        }
+    }
+    /* IF (write an existed addr ) OR
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+    if (vma->vm_flags & VM_WRITE) {
+        perm |= PTE_W;
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+
+    ret = -E_NO_MEM;
+
+    pte_t *ptep=NULL;
+    /*LAB3 EXERCISE 1: 2012011268
+    * Maybe you want help comment, BELOW comments can help you finish the code
+    *
+    * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+    * MACROs or Functions:
+    *   get_pte : get an pte and return the kernel virtual address of this pte for la
+    *             if the PT contians this pte didn't exist, alloc a page for PT (notice the 3th parameter '1')
+    *   pgdir_alloc_page : call alloc_page & page_insert functions to allocate a page size memory & setup
+    *             an addr map pa<--->la with linear address la and the PDT pgdir
+    * DEFINES:
+    *   VM_WRITE  : If vma->vm_flags & VM_WRITE == 1/0, then the vma is writable/non writable
+    *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+    *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+    * VARIABLES:
+    *   mm->pgdir : the PDT of these vma
+    *
+    */
+#if 0
+    /*LAB3 EXERCISE 1: YOUR CODE*/
+    ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    if (*ptep == 0) {
+                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+
+    }
+    else {
+    /*LAB3 EXERCISE 2: YOUR CODE
+    * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,
+    * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.
+    *
+    *  Some Useful MACROs and DEFINEs, you can use them in below implementation.
+    *  MACROs or Functions:
+    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
+    *                               find the addr of disk page, read the content of disk page into this memroy page
+    *    page_insert ： build the map of phy addr of an Page with the linear addr la
+    *    swap_map_swappable ： set the page swappable
+    */
+        if(swap_init_ok) {
+            struct Page *page=NULL;
+                                    //(1）According to the mm AND addr, try to load the content of right disk page
+                                    //    into the memory which page managed.
+                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
+                                    //(3) make the page swappable.
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (*ptep == 0) {
+	    struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
+    } else {
+	    if (swap_init_ok) {
+		    struct Page *page = NULL;
+		    swap_in(mm, addr, &page);
+		    page_insert(mm->pgdir, page, addr, perm);
+		    swap_map_swappable(mm, addr, page, 1);
+		    page->pra_vaddr = addr; 
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            	goto failed;
+	    }
+    }
+
+   ret = 0;
+failed:
+    return ret;
+}
+
diff -r -u -P _lab7/kern/process/proc.c lab7/kern/process/proc.c
--- _lab7/kern/process/proc.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/process/proc.c	2020-05-28 05:09:50.073519207 +0800
@@ -87,7 +87,7 @@
 alloc_proc(void) {
     struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
     if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
+    //LAB4:EXERCISE1 2012011268
     /*
      * below fields in proc_struct need to be initialized
      *       enum proc_state state;                      // Process state
@@ -119,6 +119,25 @@
      *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
      *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
      */
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+        proc->wait_state = 0;
+        proc->cptr = proc->yptr = proc->optr = NULL;
+        proc->rq = NULL;
+        list_init(&(proc->run_link));
+        proc->time_slice = 0;
+        proc->lab6_run_pool.parent = proc->lab6_run_pool.left = proc->lab6_run_pool.right = NULL;
+        proc->lab6_stride = proc->lab6_priority = 0;
     }
     return proc;
 }
@@ -380,7 +399,7 @@
         goto fork_out;
     }
     ret = -E_NO_MEM;
-    //LAB4:EXERCISE2 YOUR CODE
+    //LAB4:EXERCISE2 2012011268
     /*
      * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
      * MACROs or Functions:
@@ -399,19 +418,35 @@
      */
 
     //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+    assert(current->wait_state == 0);
+    proc->parent = current;
     //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
     //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
     //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
     //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
     //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
     //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
 
-	//LAB5 YOUR CODE : (update LAB4 steps)
+    //LAB5 2012011268 : (update LAB4 steps)
    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
     *    -------------------
-	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
-	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
 	
 fork_out:
@@ -603,7 +638,7 @@
     //(6) setup trapframe for user environment
     struct trapframe *tf = current->tf;
     memset(tf, 0, sizeof(struct trapframe));
-    /* LAB5:EXERCISE1 YOUR CODE
+    /* LAB5:EXERCISE1 2012011268
      * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
      * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
      *          tf_cs should be USER_CS segment (see memlayout.h)
@@ -612,6 +647,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
     ret = 0;
 out:
     return ret;
diff -r -u -P _lab7/kern/process/proc.c~ lab7/kern/process/proc.c~
--- _lab7/kern/process/proc.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/process/proc.c~	2020-05-28 03:21:54.113519207 +0800
@@ -0,0 +1,908 @@
+#include <proc.h>
+#include <kmalloc.h>
+#include <string.h>
+#include <sync.h>
+#include <pmm.h>
+#include <error.h>
+#include <sched.h>
+#include <elf.h>
+#include <vmm.h>
+#include <trap.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <unistd.h>
+
+/* ------------- process/thread mechanism design&implementation -------------
+(an simplified Linux process/thread mechanism )
+introduction:
+  ucore implements a simple process/thread mechanism. process contains the independent memory sapce, at least one threads
+for execution, the kernel data(for management), processor state (for context switch), files(in lab6), etc. ucore needs to
+manage all these details efficiently. In ucore, a thread is just a special kind of process(share process's memory).
+------------------------------
+process state       :     meaning               -- reason
+    PROC_UNINIT     :   uninitialized           -- alloc_proc
+    PROC_SLEEPING   :   sleeping                -- try_free_pages, do_wait, do_sleep
+    PROC_RUNNABLE   :   runnable(maybe running) -- proc_init, wakeup_proc, 
+    PROC_ZOMBIE     :   almost dead             -- do_exit
+
+-----------------------------
+process state changing:
+                                            
+  alloc_proc                                 RUNNING
+      +                                   +--<----<--+
+      +                                   + proc_run +
+      V                                   +-->---->--+ 
+PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING --
+                                           A      +                                                           +
+                                           |      +--- do_exit --> PROC_ZOMBIE                                +
+                                           +                                                                  + 
+                                           -----------------------wakeup_proc----------------------------------
+-----------------------------
+process relations
+parent:           proc->parent  (proc is children)
+children:         proc->cptr    (proc is parent)
+older sibling:    proc->optr    (proc is younger sibling)
+younger sibling:  proc->yptr    (proc is older sibling)
+-----------------------------
+related syscall for process:
+SYS_exit        : process exit,                           -->do_exit
+SYS_fork        : create child process, dup mm            -->do_fork-->wakeup_proc
+SYS_wait        : wait process                            -->do_wait
+SYS_exec        : after fork, process execute a program   -->load a program and refresh the mm
+SYS_clone       : create child thread                     -->do_fork-->wakeup_proc
+SYS_yield       : process flag itself need resecheduling, -- proc->need_sched=1, then scheduler will rescheule this process
+SYS_sleep       : process sleep                           -->do_sleep 
+SYS_kill        : kill process                            -->do_kill-->proc->flags |= PF_EXITING
+                                                                 -->wakeup_proc-->do_wait-->do_exit   
+SYS_getpid      : get the process's pid
+
+*/
+
+// the process set's list
+list_entry_t proc_list;
+
+#define HASH_SHIFT          10
+#define HASH_LIST_SIZE      (1 << HASH_SHIFT)
+#define pid_hashfn(x)       (hash32(x, HASH_SHIFT))
+
+// has list for process set based on pid
+static list_entry_t hash_list[HASH_LIST_SIZE];
+
+// idle proc
+struct proc_struct *idleproc = NULL;
+// init proc
+struct proc_struct *initproc = NULL;
+// current proc
+struct proc_struct *current = NULL;
+
+static int nr_process = 0;
+
+void kernel_thread_entry(void);
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+    if (proc != NULL) {
+    //LAB4:EXERCISE1 2012011268
+    /*
+     * below fields in proc_struct need to be initialized
+     *       enum proc_state state;                      // Process state
+     *       int pid;                                    // Process ID
+     *       int runs;                                   // the running times of Proces
+     *       uintptr_t kstack;                           // Process kernel stack
+     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+     *       struct proc_struct *parent;                 // the parent process
+     *       struct mm_struct *mm;                       // Process's memory management field
+     *       struct context context;                     // Switch here to run process
+     *       struct trapframe *tf;                       // Trap frame for current interrupt
+     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+     *       uint32_t flags;                             // Process flag
+     *       char name[PROC_NAME_LEN + 1];               // Process name
+     */
+     //LAB5 YOUR CODE : (update LAB4 steps)
+    /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+     //LAB6 YOUR CODE : (update LAB5 steps)
+    /*
+     * below fields(add in LAB6) in proc_struct need to be initialized
+     *     struct run_queue *rq;                       // running queue contains Process
+     *     list_entry_t run_link;                      // the entry linked in run queue
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+        proc->wait_state = 0;
+        proc->cptr = proc->yptr = proc->optr = NULL;
+    }
+    return proc;
+}
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+    memset(proc->name, 0, sizeof(proc->name));
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+}
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+}
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+    list_add(&proc_list, &(proc->list_link));
+    proc->yptr = NULL;
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+        proc->optr->yptr = proc;
+    }
+    proc->parent->cptr = proc;
+    nr_process ++;
+}
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+    list_del(&(proc->list_link));
+    if (proc->optr != NULL) {
+        proc->optr->yptr = proc->yptr;
+    }
+    if (proc->yptr != NULL) {
+        proc->yptr->optr = proc->optr;
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+    }
+    nr_process --;
+}
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+        last_pid = 1;
+        goto inside;
+    }
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+            proc = le2proc(le, list_link);
+            if (proc->pid == last_pid) {
+                if (++ last_pid >= next_safe) {
+                    if (last_pid >= MAX_PID) {
+                        last_pid = 1;
+                    }
+                    next_safe = MAX_PID;
+                    goto repeat;
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+}
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+    if (proc != current) {
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+        local_intr_save(intr_flag);
+        {
+            current = proc;
+            load_esp0(next->kstack + KSTACKSIZE);
+            lcr3(next->cr3);
+            switch_to(&(prev->context), &(next->context));
+        }
+        local_intr_restore(intr_flag);
+    }
+}
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+    forkrets(current->tf);
+}
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+}
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+    list_del(&(proc->hash_link));
+}
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+            struct proc_struct *proc = le2proc(le, hash_link);
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+}
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+    tf.tf_cs = KERNEL_CS;
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+}
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+    struct Page *page = alloc_pages(KSTACKPAGE);
+    if (page != NULL) {
+        proc->kstack = (uintptr_t)page2kva(page);
+        return 0;
+    }
+    return -E_NO_MEM;
+}
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+}
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+        return -E_NO_MEM;
+    }
+    pde_t *pgdir = page2kva(page);
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+    mm->pgdir = pgdir;
+    return 0;
+}
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+    free_page(kva2page(mm->pgdir));
+}
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+    struct mm_struct *mm, *oldmm = current->mm;
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+        return 0;
+    }
+    if (clone_flags & CLONE_VM) {
+        mm = oldmm;
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+    {
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+}
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+    *(proc->tf) = *tf;
+    proc->tf->tf_regs.reg_eax = 0;
+    proc->tf->tf_esp = esp;
+    proc->tf->tf_eflags |= FL_IF;
+
+    proc->context.eip = (uintptr_t)forkret;
+    proc->context.esp = (uintptr_t)(proc->tf);
+}
+
+/* do_fork -     parent process for a new child process
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+    //LAB4:EXERCISE2 2012011268
+    /*
+     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)
+     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack
+     *   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags
+     *                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+     *   copy_thread:  setup the trapframe on the  process's kernel stack top and
+     *                 setup the kernel entry point and stack of process
+     *   hash_proc:    add proc into proc hash_list
+     *   get_pid:      alloc a unique pid for process
+     *   wakeup_proc:  set proc->state = PROC_RUNNABLE
+     * VARIABLES:
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+    assert(current->wait_state == 0);
+    proc->parent = current;
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+    //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
+    //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
+    //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
+
+    //LAB5 2012011268 : (update LAB4 steps)
+   /* Some Functions
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+    goto fork_out;
+}
+
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+    if (current == idleproc) {
+        panic("idleproc exit.\n");
+    }
+    if (current == initproc) {
+        panic("initproc exit.\n");
+    }
+    
+    struct mm_struct *mm = current->mm;
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    current->state = PROC_ZOMBIE;
+    current->exit_code = error_code;
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+            proc = current->cptr;
+            current->cptr = proc->optr;
+    
+            proc->yptr = NULL;
+            if ((proc->optr = initproc->cptr) != NULL) {
+                initproc->cptr->yptr = proc;
+            }
+            proc->parent = initproc;
+            initproc->cptr = proc;
+            if (proc->state == PROC_ZOMBIE) {
+                if (initproc->wait_state == WT_CHILD) {
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+    
+    schedule();
+    panic("do_exit will not return!! %d.\n", current->pid);
+}
+
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+    if (current->mm != NULL) {
+        panic("load_icode: current->mm must be empty.\n");
+    }
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+        ret = -E_INVAL_ELF;
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+    current->mm = mm;
+    current->cr3 = PADDR(mm->pgdir);
+    lcr3(PADDR(mm->pgdir));
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+    memset(tf, 0, sizeof(struct trapframe));
+    /* LAB5:EXERCISE1 2012011268
+     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
+     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
+     *          tf_cs should be USER_CS segment (see memlayout.h)
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+}
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+    struct mm_struct *mm = current->mm;
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+        return -E_INVAL;
+    }
+    if (len > PROC_NAME_LEN) {
+        len = PROC_NAME_LEN;
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+    memcpy(local_name, name, len);
+
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+    current->need_resched = 1;
+    return 0;
+}
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+    struct mm_struct *mm = current->mm;
+    if (code_store != NULL) {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+            return -E_INVAL;
+        }
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+    if (pid != 0) {
+        proc = find_proc(pid);
+        if (proc != NULL && proc->parent == current) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+        current->state = PROC_SLEEPING;
+        current->wait_state = WT_CHILD;
+        schedule();
+        if (current->flags & PF_EXITING) {
+            do_exit(-E_KILLED);
+        }
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+        panic("wait idleproc or initproc.\n");
+    }
+    if (code_store != NULL) {
+        *code_store = proc->exit_code;
+    }
+    local_intr_save(intr_flag);
+    {
+        unhash_proc(proc);
+        remove_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    put_kstack(proc);
+    kfree(proc);
+    return 0;
+}
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+        if (!(proc->flags & PF_EXITING)) {
+            proc->flags |= PF_EXITING;
+            if (proc->wait_state & WT_INTERRUPTED) {
+                wakeup_proc(proc);
+            }
+            return 0;
+        }
+        return -E_KILLED;
+    }
+    return -E_INVAL;
+}
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+    int ret, len = strlen(name);
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+}
+
+#define __KERNEL_EXECVE(name, binary, size) ({                          \
+            cprintf("kernel_execve: pid = %d, name = \"%s\".\n",        \
+                    current->pid, name);                                \
+            kernel_execve(name, binary, (size_t)(size));                \
+        })
+
+#define KERNEL_EXECVE(x) ({                                             \
+            extern unsigned char _binary_obj___user_##x##_out_start[],  \
+                _binary_obj___user_##x##_out_size[];                    \
+            __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,     \
+                            _binary_obj___user_##x##_out_size);         \
+        })
+
+#define __KERNEL_EXECVE2(x, xstart, xsize) ({                           \
+            extern unsigned char xstart[], xsize[];                     \
+            __KERNEL_EXECVE(#x, xstart, (size_t)xsize);                 \
+        })
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+    size_t nr_free_pages_store = nr_free_pages();
+    size_t kernel_allocated_store = kallocated();
+
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+    assert(nr_process == 2);
+    assert(list_next(&proc_list) == &(initproc->list_link));
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+
+    cprintf("init check memory pass.\n");
+    return 0;
+}
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+        panic("cannot alloc idleproc.\n");
+    }
+
+    idleproc->pid = 0;
+    idleproc->state = PROC_RUNNABLE;
+    idleproc->kstack = (uintptr_t)bootstack;
+    idleproc->need_resched = 1;
+    set_proc_name(idleproc, "idle");
+    nr_process ++;
+
+    current = idleproc;
+
+    int pid = kernel_thread(init_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create init_main failed.\n");
+    }
+
+    initproc = find_proc(pid);
+    set_proc_name(initproc, "init");
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+    assert(initproc != NULL && initproc->pid == 1);
+}
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+    while (1) {
+        if (current->need_resched) {
+            schedule();
+        }
+    }
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+}
diff -r -u -P _lab7/kern/process/proc.c.orig lab7/kern/process/proc.c.orig
--- _lab7/kern/process/proc.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/process/proc.c.orig	2020-05-28 03:21:54.113519207 +0800
@@ -0,0 +1,873 @@
+#include <proc.h>
+#include <kmalloc.h>
+#include <string.h>
+#include <sync.h>
+#include <pmm.h>
+#include <error.h>
+#include <sched.h>
+#include <elf.h>
+#include <vmm.h>
+#include <trap.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <unistd.h>
+
+/* ------------- process/thread mechanism design&implementation -------------
+(an simplified Linux process/thread mechanism )
+introduction:
+  ucore implements a simple process/thread mechanism. process contains the independent memory sapce, at least one threads
+for execution, the kernel data(for management), processor state (for context switch), files(in lab6), etc. ucore needs to
+manage all these details efficiently. In ucore, a thread is just a special kind of process(share process's memory).
+------------------------------
+process state       :     meaning               -- reason
+    PROC_UNINIT     :   uninitialized           -- alloc_proc
+    PROC_SLEEPING   :   sleeping                -- try_free_pages, do_wait, do_sleep
+    PROC_RUNNABLE   :   runnable(maybe running) -- proc_init, wakeup_proc, 
+    PROC_ZOMBIE     :   almost dead             -- do_exit
+
+-----------------------------
+process state changing:
+                                            
+  alloc_proc                                 RUNNING
+      +                                   +--<----<--+
+      +                                   + proc_run +
+      V                                   +-->---->--+ 
+PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING --
+                                           A      +                                                           +
+                                           |      +--- do_exit --> PROC_ZOMBIE                                +
+                                           +                                                                  + 
+                                           -----------------------wakeup_proc----------------------------------
+-----------------------------
+process relations
+parent:           proc->parent  (proc is children)
+children:         proc->cptr    (proc is parent)
+older sibling:    proc->optr    (proc is younger sibling)
+younger sibling:  proc->yptr    (proc is older sibling)
+-----------------------------
+related syscall for process:
+SYS_exit        : process exit,                           -->do_exit
+SYS_fork        : create child process, dup mm            -->do_fork-->wakeup_proc
+SYS_wait        : wait process                            -->do_wait
+SYS_exec        : after fork, process execute a program   -->load a program and refresh the mm
+SYS_clone       : create child thread                     -->do_fork-->wakeup_proc
+SYS_yield       : process flag itself need resecheduling, -- proc->need_sched=1, then scheduler will rescheule this process
+SYS_sleep       : process sleep                           -->do_sleep 
+SYS_kill        : kill process                            -->do_kill-->proc->flags |= PF_EXITING
+                                                                 -->wakeup_proc-->do_wait-->do_exit   
+SYS_getpid      : get the process's pid
+
+*/
+
+// the process set's list
+list_entry_t proc_list;
+
+#define HASH_SHIFT          10
+#define HASH_LIST_SIZE      (1 << HASH_SHIFT)
+#define pid_hashfn(x)       (hash32(x, HASH_SHIFT))
+
+// has list for process set based on pid
+static list_entry_t hash_list[HASH_LIST_SIZE];
+
+// idle proc
+struct proc_struct *idleproc = NULL;
+// init proc
+struct proc_struct *initproc = NULL;
+// current proc
+struct proc_struct *current = NULL;
+
+static int nr_process = 0;
+
+void kernel_thread_entry(void);
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+    if (proc != NULL) {
+    //LAB4:EXERCISE1 YOUR CODE
+    /*
+     * below fields in proc_struct need to be initialized
+     *       enum proc_state state;                      // Process state
+     *       int pid;                                    // Process ID
+     *       int runs;                                   // the running times of Proces
+     *       uintptr_t kstack;                           // Process kernel stack
+     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+     *       struct proc_struct *parent;                 // the parent process
+     *       struct mm_struct *mm;                       // Process's memory management field
+     *       struct context context;                     // Switch here to run process
+     *       struct trapframe *tf;                       // Trap frame for current interrupt
+     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+     *       uint32_t flags;                             // Process flag
+     *       char name[PROC_NAME_LEN + 1];               // Process name
+     */
+     //LAB5 YOUR CODE : (update LAB4 steps)
+    /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+     //LAB6 YOUR CODE : (update LAB5 steps)
+    /*
+     * below fields(add in LAB6) in proc_struct need to be initialized
+     *     struct run_queue *rq;                       // running queue contains Process
+     *     list_entry_t run_link;                      // the entry linked in run queue
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+    }
+    return proc;
+}
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+    memset(proc->name, 0, sizeof(proc->name));
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+}
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+}
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+    list_add(&proc_list, &(proc->list_link));
+    proc->yptr = NULL;
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+        proc->optr->yptr = proc;
+    }
+    proc->parent->cptr = proc;
+    nr_process ++;
+}
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+    list_del(&(proc->list_link));
+    if (proc->optr != NULL) {
+        proc->optr->yptr = proc->yptr;
+    }
+    if (proc->yptr != NULL) {
+        proc->yptr->optr = proc->optr;
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+    }
+    nr_process --;
+}
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+        last_pid = 1;
+        goto inside;
+    }
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+            proc = le2proc(le, list_link);
+            if (proc->pid == last_pid) {
+                if (++ last_pid >= next_safe) {
+                    if (last_pid >= MAX_PID) {
+                        last_pid = 1;
+                    }
+                    next_safe = MAX_PID;
+                    goto repeat;
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+}
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+    if (proc != current) {
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+        local_intr_save(intr_flag);
+        {
+            current = proc;
+            load_esp0(next->kstack + KSTACKSIZE);
+            lcr3(next->cr3);
+            switch_to(&(prev->context), &(next->context));
+        }
+        local_intr_restore(intr_flag);
+    }
+}
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+    forkrets(current->tf);
+}
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+}
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+    list_del(&(proc->hash_link));
+}
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+            struct proc_struct *proc = le2proc(le, hash_link);
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+}
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+    tf.tf_cs = KERNEL_CS;
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+}
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+    struct Page *page = alloc_pages(KSTACKPAGE);
+    if (page != NULL) {
+        proc->kstack = (uintptr_t)page2kva(page);
+        return 0;
+    }
+    return -E_NO_MEM;
+}
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+}
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+        return -E_NO_MEM;
+    }
+    pde_t *pgdir = page2kva(page);
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+    mm->pgdir = pgdir;
+    return 0;
+}
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+    free_page(kva2page(mm->pgdir));
+}
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+    struct mm_struct *mm, *oldmm = current->mm;
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+        return 0;
+    }
+    if (clone_flags & CLONE_VM) {
+        mm = oldmm;
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+    {
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+}
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+    *(proc->tf) = *tf;
+    proc->tf->tf_regs.reg_eax = 0;
+    proc->tf->tf_esp = esp;
+    proc->tf->tf_eflags |= FL_IF;
+
+    proc->context.eip = (uintptr_t)forkret;
+    proc->context.esp = (uintptr_t)(proc->tf);
+}
+
+/* do_fork -     parent process for a new child process
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+    //LAB4:EXERCISE2 YOUR CODE
+    /*
+     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)
+     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack
+     *   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags
+     *                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+     *   copy_thread:  setup the trapframe on the  process's kernel stack top and
+     *                 setup the kernel entry point and stack of process
+     *   hash_proc:    add proc into proc hash_list
+     *   get_pid:      alloc a unique pid for process
+     *   wakeup_proc:  set proc->state = PROC_RUNNABLE
+     * VARIABLES:
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    //    4. call copy_thread to setup tf & context in proc_struct
+    //    5. insert proc_struct into hash_list && proc_list
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    //    7. set ret vaule using child proc's pid
+
+	//LAB5 YOUR CODE : (update LAB4 steps)
+   /* Some Functions
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+    goto fork_out;
+}
+
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+    if (current == idleproc) {
+        panic("idleproc exit.\n");
+    }
+    if (current == initproc) {
+        panic("initproc exit.\n");
+    }
+    
+    struct mm_struct *mm = current->mm;
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    current->state = PROC_ZOMBIE;
+    current->exit_code = error_code;
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+            proc = current->cptr;
+            current->cptr = proc->optr;
+    
+            proc->yptr = NULL;
+            if ((proc->optr = initproc->cptr) != NULL) {
+                initproc->cptr->yptr = proc;
+            }
+            proc->parent = initproc;
+            initproc->cptr = proc;
+            if (proc->state == PROC_ZOMBIE) {
+                if (initproc->wait_state == WT_CHILD) {
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+    
+    schedule();
+    panic("do_exit will not return!! %d.\n", current->pid);
+}
+
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+    if (current->mm != NULL) {
+        panic("load_icode: current->mm must be empty.\n");
+    }
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+        ret = -E_INVAL_ELF;
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+    current->mm = mm;
+    current->cr3 = PADDR(mm->pgdir);
+    lcr3(PADDR(mm->pgdir));
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+    memset(tf, 0, sizeof(struct trapframe));
+    /* LAB5:EXERCISE1 YOUR CODE
+     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
+     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
+     *          tf_cs should be USER_CS segment (see memlayout.h)
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+}
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+    struct mm_struct *mm = current->mm;
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+        return -E_INVAL;
+    }
+    if (len > PROC_NAME_LEN) {
+        len = PROC_NAME_LEN;
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+    memcpy(local_name, name, len);
+
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+    current->need_resched = 1;
+    return 0;
+}
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+    struct mm_struct *mm = current->mm;
+    if (code_store != NULL) {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+            return -E_INVAL;
+        }
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+    if (pid != 0) {
+        proc = find_proc(pid);
+        if (proc != NULL && proc->parent == current) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+        current->state = PROC_SLEEPING;
+        current->wait_state = WT_CHILD;
+        schedule();
+        if (current->flags & PF_EXITING) {
+            do_exit(-E_KILLED);
+        }
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+        panic("wait idleproc or initproc.\n");
+    }
+    if (code_store != NULL) {
+        *code_store = proc->exit_code;
+    }
+    local_intr_save(intr_flag);
+    {
+        unhash_proc(proc);
+        remove_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    put_kstack(proc);
+    kfree(proc);
+    return 0;
+}
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+        if (!(proc->flags & PF_EXITING)) {
+            proc->flags |= PF_EXITING;
+            if (proc->wait_state & WT_INTERRUPTED) {
+                wakeup_proc(proc);
+            }
+            return 0;
+        }
+        return -E_KILLED;
+    }
+    return -E_INVAL;
+}
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+    int ret, len = strlen(name);
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+}
+
+#define __KERNEL_EXECVE(name, binary, size) ({                          \
+            cprintf("kernel_execve: pid = %d, name = \"%s\".\n",        \
+                    current->pid, name);                                \
+            kernel_execve(name, binary, (size_t)(size));                \
+        })
+
+#define KERNEL_EXECVE(x) ({                                             \
+            extern unsigned char _binary_obj___user_##x##_out_start[],  \
+                _binary_obj___user_##x##_out_size[];                    \
+            __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,     \
+                            _binary_obj___user_##x##_out_size);         \
+        })
+
+#define __KERNEL_EXECVE2(x, xstart, xsize) ({                           \
+            extern unsigned char xstart[], xsize[];                     \
+            __KERNEL_EXECVE(#x, xstart, (size_t)xsize);                 \
+        })
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+    size_t nr_free_pages_store = nr_free_pages();
+    size_t kernel_allocated_store = kallocated();
+
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+    assert(nr_process == 2);
+    assert(list_next(&proc_list) == &(initproc->list_link));
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+
+    cprintf("init check memory pass.\n");
+    return 0;
+}
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+        panic("cannot alloc idleproc.\n");
+    }
+
+    idleproc->pid = 0;
+    idleproc->state = PROC_RUNNABLE;
+    idleproc->kstack = (uintptr_t)bootstack;
+    idleproc->need_resched = 1;
+    set_proc_name(idleproc, "idle");
+    nr_process ++;
+
+    current = idleproc;
+
+    int pid = kernel_thread(init_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create init_main failed.\n");
+    }
+
+    initproc = find_proc(pid);
+    set_proc_name(initproc, "init");
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+    assert(initproc != NULL && initproc->pid == 1);
+}
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+    while (1) {
+        if (current->need_resched) {
+            schedule();
+        }
+    }
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+}
diff -r -u -P _lab7/kern/process/proc.c.rej lab7/kern/process/proc.c.rej
--- _lab7/kern/process/proc.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/process/proc.c.rej	2020-05-28 03:21:54.113519207 +0800
@@ -0,0 +1,30 @@
+--- kern/process/proc.c	2020-05-26 17:16:54.402663000 +0800
++++ kern/process/proc.c	2020-05-27 15:18:05.708583848 +0800
+@@ -103,12 +103,26 @@
+      *       uint32_t flags;                             // Process flag
+      *       char name[PROC_NAME_LEN + 1];               // Process name
+      */
+-     //LAB5 YOUR CODE : (update LAB4 steps)
++     //LAB5 2012011268 : (update LAB4 steps)
+     /*
+      * below fields(add in LAB5) in proc_struct need to be initialized	
+      *       uint32_t wait_state;                        // waiting state
+      *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+ 	 */
++        proc->state = PROC_UNINIT;
++        proc->pid = -1;
++        proc->runs = 0;
++        proc->kstack = 0;
++        proc->need_resched = 0;
++        proc->parent = NULL;
++        proc->mm = NULL;
++        memset(&(proc->context), 0, sizeof(struct context));
++        proc->tf = NULL;
++        proc->cr3 = boot_cr3;
++        proc->flags = 0;
++        memset(proc->name, 0, PROC_NAME_LEN + 1);
++        proc->wait_state = 0;
++        proc->cptr = proc->yptr = proc->optr = NULL;
+     }
+     return proc;
+ }
diff -r -u -P _lab7/kern/schedule/default_sched.c~ lab7/kern/schedule/default_sched.c~
--- _lab7/kern/schedule/default_sched.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/schedule/default_sched.c~	2020-05-28 03:21:54.113519207 +0800
@@ -0,0 +1,150 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: 2016011446 */
+#define BIG_STRIDE 0x7fffffff /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
+}
+
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+     /* LAB6: 2016011446 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+    list_init(&(rq->run_list));
+    rq->lab6_run_pool = NULL;
+    rq->proc_num = 0;
+}
+
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    ++rq->proc_num;
+}
+
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    --rq->proc_num;
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: 2016011446 
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_pool
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+    struct proc_struct* p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+    if (p->lab6_priority == 0) p->lab6_stride += BIG_STRIDE;
+    else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+    return p;
+}
+
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 */
+    if (proc->time_slice > 0) --proc->time_slice;
+    if (proc->time_slice == 0) proc->need_resched = 1;
+}
+
+struct sched_class default_sched_class = {
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
+};
diff -r -u -P _lab7/kern/schedule/default_sched_stride_c lab7/kern/schedule/default_sched_stride_c
--- _lab7/kern/schedule/default_sched_stride_c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/schedule/default_sched_stride_c	2020-05-28 03:21:54.117519207 +0800
@@ -7,8 +7,8 @@
 #define USE_SKEW_HEAP 1
 
 /* You should define the BigStride constant here*/
-/* LAB6: YOUR CODE */
-#define BIG_STRIDE    /* you should give a value, and is ??? */
+/* LAB6: 2012011268 */
+#define BIG_STRIDE ((uint32_t) 2012011268)   /* you should give a value, and is ??? */
 
 /* The compare function for two skew_heap_node_t's and the
  * corresponding procs*/
@@ -36,11 +36,14 @@
  */
 static void
 stride_init(struct run_queue *rq) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) init the ready process list: rq->run_list
       * (2) init the run pool: rq->lab6_run_pool
       * (3) set number of process: rq->proc_num to 0       
       */
+	list_init(&rq->run_list);
+	rq->lab6_run_pool = NULL;
+	rq->proc_num = 0;
 }
 
 /*
@@ -58,7 +61,7 @@
  */
 static void
 stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268
       * (1) insert the proc into rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
       *         skew_heap_insert: insert a entry into skew_heap
@@ -67,6 +70,12 @@
       * (3) set proc->rq pointer to rq
       * (4) increase rq->proc_num
       */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+		proc->time_slice = rq->max_time_slice;
+	}
+	proc->rq = rq;
+	rq->proc_num ++;
 }
 
 /*
@@ -79,12 +88,14 @@
  */
 static void
 stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) remove the proc from rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
       *         skew_heap_remove: remove a entry from skew_heap
       *         list_del_init: remove a entry from the  list
       */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
+	rq->proc_num --;
 }
 /*
  * stride_pick_next pick the element from the ``run-queue'', with the
@@ -101,13 +112,17 @@
  */
 static struct proc_struct *
 stride_pick_next(struct run_queue *rq) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) get a  proc_struct pointer p  with the minimum value of stride
              (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
              (1.2) If using list, we have to search list to find the p with minimum stride value
       * (2) update p;s stride value: p->lab6_stride
       * (3) return p
       */
+    struct proc_struct* p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+    if (p->lab6_priority == 0) p->lab6_stride += BIG_STRIDE;
+    else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+    return p;
 }
 
 /*
@@ -120,7 +135,9 @@
  */
 static void
 stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE */
+     /* LAB6: 2012011268 */
+    if (proc->time_slice > 0) --proc->time_slice;
+    if (proc->time_slice == 0) proc->need_resched = 1;
 }
 
 struct sched_class default_sched_class = {
diff -r -u -P _lab7/kern/schedule/default_sched_stride_c~ lab7/kern/schedule/default_sched_stride_c~
--- _lab7/kern/schedule/default_sched_stride_c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/schedule/default_sched_stride_c~	2020-05-28 03:21:54.117519207 +0800
@@ -0,0 +1,133 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: YOUR CODE */
+#define BIG_STRIDE    /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
+}
+
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+     /* LAB6: YOUR CODE 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+}
+
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE 
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+}
+
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE 
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: YOUR CODE 
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+}
+
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE */
+}
+
+struct sched_class default_sched_class = {
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
+};
diff -r -u -P _lab7/kern/sync/monitor.c lab7/kern/sync/monitor.c
--- _lab7/kern/sync/monitor.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/sync/monitor.c	2020-05-28 04:50:52.881519207 +0800
@@ -25,7 +25,7 @@
 // Unlock one of threads waiting on the condition variable. 
 void 
 cond_signal (condvar_t *cvp) {
-   //LAB7 EXERCISE1: YOUR CODE
+   //LAB7 EXERCISE1: 2012011268
    cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
   /*
    *      cond_signal(cv) {
@@ -37,6 +37,12 @@
    *          }
    *       }
    */
+    if (cvp->count > 0) {
+        ++cvp->owner->next_count;
+        up(&(cvp->sem));
+        down(&(cvp->owner->next));
+        --cvp->owner->next_count;
+    }
    cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
 }
 
@@ -44,7 +50,7 @@
 // mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
 void
 cond_wait (condvar_t *cvp) {
-    //LAB7 EXERCISE1: YOUR CODE
+    //LAB7 EXERCISE1: 2012011268
     cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
    /*
     *         cv.count ++;
@@ -55,5 +61,12 @@
     *         wait(cv.sem);
     *         cv.count --;
     */
+    ++cvp->count;
+    if (cvp->owner->next_count > 0)
+        up(&(cvp->owner->next));
+    else
+        up(&(cvp->owner->mutex));
+    down(&(cvp->sem));
+    --cvp->count;
     cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
 }
diff -r -u -P _lab7/kern/sync/monitor.c~ lab7/kern/sync/monitor.c~
--- _lab7/kern/sync/monitor.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/sync/monitor.c~	2020-05-26 17:16:54.414663000 +0800
@@ -0,0 +1,59 @@
+#include <stdio.h>
+#include <monitor.h>
+#include <kmalloc.h>
+#include <assert.h>
+
+
+// Initialize monitor.
+void     
+monitor_init (monitor_t * mtp, size_t num_cv) {
+    int i;
+    assert(num_cv>0);
+    mtp->next_count = 0;
+    mtp->cv = NULL;
+    sem_init(&(mtp->mutex), 1); //unlocked
+    sem_init(&(mtp->next), 0);
+    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
+    assert(mtp->cv!=NULL);
+    for(i=0; i<num_cv; i++){
+        mtp->cv[i].count=0;
+        sem_init(&(mtp->cv[i].sem),0);
+        mtp->cv[i].owner=mtp;
+    }
+}
+
+// Unlock one of threads waiting on the condition variable. 
+void 
+cond_signal (condvar_t *cvp) {
+   //LAB7 EXERCISE1: YOUR CODE
+   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
+  /*
+   *      cond_signal(cv) {
+   *          if(cv.count>0) {
+   *             mt.next_count ++;
+   *             signal(cv.sem);
+   *             wait(mt.next);
+   *             mt.next_count--;
+   *          }
+   *       }
+   */
+   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+}
+
+// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
+// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
+void
+cond_wait (condvar_t *cvp) {
+    //LAB7 EXERCISE1: YOUR CODE
+    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+   /*
+    *         cv.count ++;
+    *         if(mt.next_count>0)
+    *            signal(mt.next)
+    *         else
+    *            signal(mt.mutex);
+    *         wait(cv.sem);
+    *         cv.count --;
+    */
+    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+}
diff -r -u -P _lab7/kern/trap/trap.c lab7/kern/trap/trap.c
--- _lab7/kern/trap/trap.c	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/trap/trap.c	2020-05-28 03:24:15.801519207 +0800
@@ -42,7 +42,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
+     /* LAB1 2012011268 : STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -54,9 +54,21 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-     /* LAB5 YOUR CODE */ 
+     /* LAB5 2012011268 */ 
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+		if (i == T_SYSCALL) {
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
 }
 
 static const char *
@@ -234,6 +246,8 @@
          * IMPORTANT FUNCTIONS:
 	     * run_timer_list
          */
+        ticks ++;
+        run_timer_list();
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
diff -r -u -P _lab7/kern/trap/trap.c~ lab7/kern/trap/trap.c~
--- _lab7/kern/trap/trap.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c~	2020-05-28 03:21:54.117519207 +0800
@@ -0,0 +1,311 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 2012011268 : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 2012011268 */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+		if (i == T_SYSCALL) {
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */         
+        /* LAB7 YOUR CODE */
+        /* you should upate you lab6 code
+         * IMPORTANT FUNCTIONS:
+	     * run_timer_list
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab7/kern/trap/trap.c.orig lab7/kern/trap/trap.c.orig
--- _lab7/kern/trap/trap.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c.orig	2020-05-26 17:16:54.414663000 +0800
@@ -0,0 +1,299 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */         
+        /* LAB7 YOUR CODE */
+        /* you should upate you lab6 code
+         * IMPORTANT FUNCTIONS:
+	     * run_timer_list
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab7/kern/trap/trap.c.orig~ lab7/kern/trap/trap.c.orig~
--- _lab7/kern/trap/trap.c.orig~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c.orig~	2020-05-28 03:22:08.309519207 +0800
@@ -0,0 +1,289 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+  
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab7/kern/trap/trap.c.rej lab7/kern/trap/trap.c.rej
--- _lab7/kern/trap/trap.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c.rej	2020-05-28 03:21:54.117519207 +0800
@@ -0,0 +1,17 @@
+--- kern/trap/trap.c	2020-05-26 17:16:54.406663000 +0800
++++ kern/trap/trap.c	2020-05-28 03:06:54.321519207 +0800
+@@ -236,11 +248,13 @@
+         /* you should upate you lab1 code (just add ONE or TWO lines of code):
+          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+          */
+-        /* LAB6 YOUR CODE */
++        /* LAB6 2012011268 */
+         /* you should upate you lab5 code
+          * IMPORTANT FUNCTIONS:
+ 	     * sched_class_proc_tick
+          */
++	    ticks ++;
++	    sched_class_proc_tick(current);
+         break;
+     case IRQ_OFFSET + IRQ_COM1:
+         c = cons_getc();
diff -r -u -P _lab7/kern/trap/vectors.S lab7/kern/trap/vectors.S
--- _lab7/kern/trap/vectors.S	2020-05-26 17:16:54.414663000 +0800
+++ lab7/kern/trap/vectors.S	2020-05-28 03:22:11.241519207 +0800
@@ -47,7 +47,6 @@
   jmp __alltraps
 .globl vector9
 vector9:
-  pushl $0
   pushl $9
   jmp __alltraps
 .globl vector10
diff -r -u -P _lab7/Makefile lab7/Makefile
--- _lab7/Makefile	2020-05-26 17:16:54.414663000 +0800
+++ lab7/Makefile	2020-05-28 03:22:11.241519207 +0800
@@ -48,13 +48,13 @@
 HOSTCC		:= gcc
 HOSTCFLAGS	:= -g -Wall -O2
 CC		:= $(GCCPREFIX)gcc
-CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
+CFLAGS	:= -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
 CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 else
 HOSTCC		:= clang
 HOSTCFLAGS	:= -g -Wall -O2
 CC		:= clang
-CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -g -m32 -nostdinc $(DEFS)
+CFLAGS	:= -fno-builtin -fno-PIC -Wall -g -m32 -mno-sse -nostdinc $(DEFS)
 CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 endif
 
@@ -62,7 +62,7 @@
 CTYPE	:= c S
 
 LD      := $(GCCPREFIX)ld
-LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
+LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
 LDFLAGS	+= -nostdlib
 
 OBJCOPY := $(GCCPREFIX)objcopy
diff -r -u -P _lab7/Makefile~ lab7/Makefile~
--- _lab7/Makefile~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/Makefile~	2020-05-28 03:22:11.241519207 +0800
@@ -0,0 +1,343 @@
+PROJ	:= 5
+EMPTY	:=
+SPACE	:= $(EMPTY) $(EMPTY)
+SLASH	:= /
+
+V       := @
+#need llvm/cang-3.5+
+#USELLVM := 1
+# try to infer the correct GCCPREFX
+ifndef GCCPREFIX
+GCCPREFIX := $(shell if i386-ucore-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-ucore-elf-'; \
+	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
+	then echo ''; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find an i386-ucore-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-ucore-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-ucore-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-ucore-elf-', set your GCCPREFIX" 1>&2; \
+	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
+	echo "*** To turn off this error, run 'gmake GCCPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# try to infer the correct QEMU
+ifndef QEMU
+QEMU := $(shell if which qemu-system-i386 > /dev/null; \
+	then echo 'qemu-system-i386'; exit; \
+	elif which i386-elf-qemu > /dev/null; \
+	then echo 'i386-elf-qemu'; exit; \
+	elif which qemu > /dev/null; \
+	then echo 'qemu'; exit; \
+	else \
+	echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
+	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# eliminate default suffix rules
+.SUFFIXES: .c .S .h
+
+# delete target files if there is an error (or make is interrupted)
+.DELETE_ON_ERROR:
+
+# define compiler and flags
+ifndef  USELLVM
+HOSTCC		:= gcc
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= $(GCCPREFIX)gcc
+CFLAGS	:= -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+else
+HOSTCC		:= clang
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= $(GCCPREFIX)clang
+CFLAGS	:= -fno-builtin -Wall -g -m32 -mno-sse -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+endif
+
+GDB		:= $(GCCPREFIX)gdb
+CTYPE	:= c S
+
+LD      := $(GCCPREFIX)ld
+LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
+LDFLAGS	+= -nostdlib
+
+OBJCOPY := $(GCCPREFIX)objcopy
+OBJDUMP := $(GCCPREFIX)objdump
+
+COPY	:= cp
+MKDIR   := mkdir -p
+MV		:= mv
+RM		:= rm -f
+AWK		:= awk
+SED		:= sed
+SH		:= sh
+TR		:= tr
+TOUCH	:= touch -c
+
+OBJDIR	:= obj
+BINDIR	:= bin
+
+ALLOBJS	:=
+ALLDEPS	:=
+TARGETS	:=
+
+include tools/function.mk
+
+listf_cc = $(call listf,$(1),$(CTYPE))
+
+USER_PREFIX	:= __user_
+
+# for cc
+add_files_cc = $(call add_files,$(1),$(CC),$(CFLAGS) $(3),$(2),$(4))
+create_target_cc = $(call create_target,$(1),$(2),$(3),$(CC),$(CFLAGS))
+
+# for hostcc
+add_files_host = $(call add_files,$(1),$(HOSTCC),$(HOSTCFLAGS),$(2),$(3))
+create_target_host = $(call create_target,$(1),$(2),$(3),$(HOSTCC),$(HOSTCFLAGS))
+
+cgtype = $(patsubst %.$(2),%.$(3),$(1))
+objfile = $(call toobj,$(1))
+asmfile = $(call cgtype,$(call toobj,$(1)),o,asm)
+outfile = $(call cgtype,$(call toobj,$(1)),o,out)
+symfile = $(call cgtype,$(call toobj,$(1)),o,sym)
+filename = $(basename $(notdir $(1)))
+ubinfile = $(call outfile,$(addprefix $(USER_PREFIX),$(call filename,$(1))))
+
+# for match pattern
+match = $(shell echo $(2) | $(AWK) '{for(i=1;i<=NF;i++){if(match("$(1)","^"$$(i)"$$")){exit 1;}}}'; echo $$?)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+# include kernel/user
+
+INCLUDE	+= libs/
+
+CFLAGS	+= $(addprefix -I,$(INCLUDE))
+
+LIBDIR	+= libs
+
+$(call add_files_cc,$(call listf_cc,$(LIBDIR)),libs,)
+
+# -------------------------------------------------------------------
+# user programs
+
+UINCLUDE	+= user/include/ \
+			   user/libs/
+
+USRCDIR		+= user
+
+ULIBDIR		+= user/libs
+
+UCFLAGS		+= $(addprefix -I,$(UINCLUDE))
+USER_BINS	:=
+
+$(call add_files_cc,$(call listf_cc,$(ULIBDIR)),ulibs,$(UCFLAGS))
+$(call add_files_cc,$(call listf_cc,$(USRCDIR)),uprog,$(UCFLAGS))
+
+UOBJS	:= $(call read_packet,ulibs libs)
+
+define uprog_ld
+__user_bin__ := $$(call ubinfile,$(1))
+USER_BINS += $$(__user_bin__)
+$$(__user_bin__): tools/user.ld
+$$(__user_bin__): $$(UOBJS)
+$$(__user_bin__): $(1) | $$$$(dir $$$$@)
+	$(V)$(LD) $(LDFLAGS) -T tools/user.ld -o $$@ $$(UOBJS) $(1)
+	@$(OBJDUMP) -S $$@ > $$(call cgtype,$$<,o,asm)
+	@$(OBJDUMP) -t $$@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$$$/d' > $$(call cgtype,$$<,o,sym)
+endef
+
+$(foreach p,$(call read_packet,uprog),$(eval $(call uprog_ld,$(p))))
+
+# -------------------------------------------------------------------
+# kernel
+
+KINCLUDE	+= kern/debug/ \
+			   kern/driver/ \
+			   kern/trap/ \
+			   kern/mm/ \
+			   kern/libs/ \
+			   kern/sync/ \
+			   kern/fs/    \
+			   kern/process \
+			   kern/schedule \
+			   kern/syscall
+
+KSRCDIR		+= kern/init \
+			   kern/libs \
+			   kern/debug \
+			   kern/driver \
+			   kern/trap \
+			   kern/mm \
+			   kern/sync \
+			   kern/fs    \
+			   kern/process \
+			   kern/schedule \
+			   kern/syscall
+
+KCFLAGS		+= $(addprefix -I,$(KINCLUDE))
+
+$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,$(KCFLAGS))
+
+KOBJS	= $(call read_packet,kernel libs)
+
+# create kernel target
+kernel = $(call totarget,kernel)
+
+$(kernel): tools/kernel.ld
+
+$(kernel): $(KOBJS) $(USER_BINS)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) -b binary $(USER_BINS)
+	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
+	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel)
+
+$(call create_target,kernel)
+
+# -------------------------------------------------------------------
+
+# create bootblock
+bootfiles = $(call listf_cc,boot)
+$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))
+
+bootblock = $(call totarget,bootblock)
+
+$(bootblock): $(call toobj,boot/bootasm.S) $(call toobj,$(bootfiles)) | $(call totarget,sign)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -N -T tools/boot.ld $^ -o $(call toobj,bootblock)
+	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
+	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
+	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
+
+$(call create_target,bootblock)
+
+# -------------------------------------------------------------------
+
+# create 'sign' tools
+$(call add_files_host,tools/sign.c,sign,sign)
+$(call create_target_host,sign,sign)
+
+# -------------------------------------------------------------------
+
+# create ucore.img
+UCOREIMG	:= $(call totarget,ucore.img)
+
+$(UCOREIMG): $(kernel) $(bootblock)
+	$(V)dd if=/dev/zero of=$@ count=10000
+	$(V)dd if=$(bootblock) of=$@ conv=notrunc
+	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
+
+$(call create_target,ucore.img)
+
+# -------------------------------------------------------------------
+
+# create swap.img
+SWAPIMG		:= $(call totarget,swap.img)
+
+$(SWAPIMG):
+	$(V)dd if=/dev/zero of=$@ bs=1024k count=128
+
+$(call create_target,swap.img)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+
+$(call finish_all)
+
+IGNORE_ALLDEPS	= clean \
+				  dist-clean \
+				  grade \
+				  touch \
+				  print-.+ \
+				  run-.+ \
+				  build-.+ \
+				  handin
+
+ifeq ($(call match,$(MAKECMDGOALS),$(IGNORE_ALLDEPS)),0)
+-include $(ALLDEPS)
+endif
+
+# files for grade script
+
+TARGETS: $(TARGETS)
+
+.DEFAULT_GOAL := TARGETS
+
+QEMUOPTS = -hda $(UCOREIMG) -drive file=$(SWAPIMG),media=disk,cache=writeback
+
+.PHONY: qemu qemu-nox debug debug-nox
+qemu-mon: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -monitor stdio $(QEMUOPTS) -serial null
+qemu: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -parallel stdio $(QEMUOPTS) -serial null
+
+qemu-nox: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -serial mon:stdio $(QEMUOPTS) -nographic
+
+TERMINAL := gnome-terminal
+
+debug: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU) -S -s -parallel stdio $(QEMUOPTS) -serial null &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
+
+debug-nox: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU) -S -s -serial mon:stdio $(QEMUOPTS) -nographic &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
+
+RUN_PREFIX	:= _binary_$(OBJDIR)_$(USER_PREFIX)
+MAKEOPTS	:= --quiet --no-print-directory
+
+run-%: build-%
+	$(V)$(QEMU) -parallel stdio $(QEMUOPTS) -serial null
+
+run-nox-%: build-%
+	$(V)$(QEMU) -serial mon:stdio $(QEMUOPTS) -nographic
+
+build-%: touch
+	$(V)$(MAKE) $(MAKEOPTS) "DEFS+=-DTEST=$* -DTESTSTART=$(RUN_PREFIX)$*_out_start -DTESTSIZE=$(RUN_PREFIX)$*_out_size"
+
+.PHONY: grade touch
+
+GRADE_GDB_IN	:= .gdb.in
+GRADE_QEMU_OUT	:= .qemu.out
+HANDIN			:= proj$(PROJ)-handin.tar.gz
+
+TOUCH_FILES		:= kern/process/proc.c
+
+MAKEOPTS		:= --quiet --no-print-directory
+
+grade:
+	$(V)$(MAKE) $(MAKEOPTS) clean
+	$(V)$(SH) tools/grade.sh
+
+touch:
+	$(V)$(foreach f,$(TOUCH_FILES),$(TOUCH) $(f))
+
+print-%:
+	@echo $($(shell echo $(patsubst print-%,%,$@) | $(TR) [a-z] [A-Z]))
+
+.PHONY: clean dist-clean handin packall tags
+clean:
+	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT) cscope* tags
+	-$(RM) -r $(OBJDIR) $(BINDIR)
+
+dist-clean: clean
+	-$(RM) $(HANDIN)
+
+handin: packall
+	@echo Please visit http://learn.tsinghua.edu.cn and upload $(HANDIN). Thanks!
+
+packall: clean
+	@$(RM) -f $(HANDIN)
+	@tar -czf $(HANDIN) `find . -type f -o -type d | grep -v '^\.*$$' | grep -vF '$(HANDIN)'`
+
+tags:
+	@echo TAGS ALL
+	$(V)rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
+	$(V)find . -type f -name "*.[chS]" >cscope.files
+	$(V)cscope -bq 
+	$(V)ctags -L cscope.files
diff -r -u -P _lab7/obj/boot/bootasm.d lab7/obj/boot/bootasm.d
--- _lab7/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/boot/bootasm.d	2020-05-28 05:02:21.693519207 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files _lab7/obj/boot/bootasm.o and lab7/obj/boot/bootasm.o differ
diff -r -u -P _lab7/obj/boot/bootmain.d lab7/obj/boot/bootmain.d
--- _lab7/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/boot/bootmain.d	2020-05-28 05:02:21.641519207 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files _lab7/obj/boot/bootmain.o and lab7/obj/boot/bootmain.o differ
diff -r -u -P _lab7/obj/bootblock.asm lab7/obj/bootblock.asm
--- _lab7/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/bootblock.asm	2020-05-28 05:02:26.857519207 +0800
@@ -0,0 +1,433 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf 04 80 66 b8       	mov    $0xb8668004,%edi
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	ac                   	lods   %ds:(%esi),%al
+    7c5d:	7d 0f                	jge    7c6e <protcseg+0x1>
+    movl %cr0, %eax
+    7c5f:	20 c0                	and    %al,%al
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea 6d 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c6d
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 61 00 00 00       	call   7ceb <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readsect>:
+        /* do nothing */;
+}
+
+/* readsect - read a single sector at @secno into @dst */
+static void
+readsect(void *dst, uint32_t secno) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 d1                	mov    %edx,%ecx
+    7c8f:	89 e5                	mov    %esp,%ebp
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7c91:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c96:	57                   	push   %edi
+    7c97:	89 c7                	mov    %eax,%edi
+    7c99:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7c9a:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c9d:	3c 40                	cmp    $0x40,%al
+    7c9f:	75 f8                	jne    7c99 <readsect+0xd>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7ca1:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca6:	b0 01                	mov    $0x1,%al
+    7ca8:	ee                   	out    %al,(%dx)
+    7ca9:	0f b6 c1             	movzbl %cl,%eax
+    7cac:	b2 f3                	mov    $0xf3,%dl
+    7cae:	ee                   	out    %al,(%dx)
+    7caf:	0f b6 c5             	movzbl %ch,%eax
+    7cb2:	b2 f4                	mov    $0xf4,%dl
+    7cb4:	ee                   	out    %al,(%dx)
+    waitdisk();
+
+    outb(0x1F2, 1);                         // count = 1
+    outb(0x1F3, secno & 0xFF);
+    outb(0x1F4, (secno >> 8) & 0xFF);
+    outb(0x1F5, (secno >> 16) & 0xFF);
+    7cb5:	89 c8                	mov    %ecx,%eax
+    7cb7:	b2 f5                	mov    $0xf5,%dl
+    7cb9:	c1 e8 10             	shr    $0x10,%eax
+    7cbc:	0f b6 c0             	movzbl %al,%eax
+    7cbf:	ee                   	out    %al,(%dx)
+    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
+    7cc0:	c1 e9 18             	shr    $0x18,%ecx
+    7cc3:	b2 f6                	mov    $0xf6,%dl
+    7cc5:	88 c8                	mov    %cl,%al
+    7cc7:	83 e0 0f             	and    $0xf,%eax
+    7cca:	83 c8 e0             	or     $0xffffffe0,%eax
+    7ccd:	ee                   	out    %al,(%dx)
+    7cce:	b0 20                	mov    $0x20,%al
+    7cd0:	b2 f7                	mov    $0xf7,%dl
+    7cd2:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cd3:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cd4:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cd7:	3c 40                	cmp    $0x40,%al
+    7cd9:	75 f8                	jne    7cd3 <readsect+0x47>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7cdb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7ce0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7ce5:	fc                   	cld    
+    7ce6:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    // wait for disk to be ready
+    waitdisk();
+
+    // read a sector
+    insl(0x1F0, dst, SECTSIZE / 4);
+}
+    7ce8:	5f                   	pop    %edi
+    7ce9:	5d                   	pop    %ebp
+    7cea:	c3                   	ret    
+
+00007ceb <bootmain>:
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7ceb:	55                   	push   %ebp
+    7cec:	89 e5                	mov    %esp,%ebp
+    7cee:	57                   	push   %edi
+    7cef:	56                   	push   %esi
+    7cf0:	53                   	push   %ebx
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7cf1:	bb 01 00 00 00       	mov    $0x1,%ebx
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7cf6:	83 ec 1c             	sub    $0x1c,%esp
+    7cf9:	8d 43 7f             	lea    0x7f(%ebx),%eax
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+        readsect((void *)va, secno);
+    7cfc:	89 da                	mov    %ebx,%edx
+    7cfe:	c1 e0 09             	shl    $0x9,%eax
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d01:	43                   	inc    %ebx
+        readsect((void *)va, secno);
+    7d02:	e8 85 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d07:	83 fb 09             	cmp    $0x9,%ebx
+    7d0a:	75 ed                	jne    7cf9 <bootmain+0xe>
+bootmain(void) {
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d0c:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d13:	45 4c 46 
+    7d16:	75 6a                	jne    7d82 <bootmain+0x97>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d18:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d1d:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d23:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
+    7d2a:	c1 e0 05             	shl    $0x5,%eax
+    7d2d:	01 d8                	add    %ebx,%eax
+    7d2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for (; ph < eph; ph ++) {
+    7d32:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+    7d35:	73 3f                	jae    7d76 <bootmain+0x8b>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d37:	8b 73 08             	mov    0x8(%ebx),%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d3a:	8b 43 14             	mov    0x14(%ebx),%eax
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d3d:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    7d40:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d46:	01 f0                	add    %esi,%eax
+    7d48:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d4b:	89 c8                	mov    %ecx,%eax
+    7d4d:	25 ff 01 00 00       	and    $0x1ff,%eax
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d52:	c1 e9 09             	shr    $0x9,%ecx
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d55:	29 c6                	sub    %eax,%esi
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d57:	8d 79 01             	lea    0x1(%ecx),%edi
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d5a:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+    7d5d:	73 12                	jae    7d71 <bootmain+0x86>
+        readsect((void *)va, secno);
+    7d5f:	89 fa                	mov    %edi,%edx
+    7d61:	89 f0                	mov    %esi,%eax
+    7d63:	e8 24 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d68:	81 c6 00 02 00 00    	add    $0x200,%esi
+    7d6e:	47                   	inc    %edi
+    7d6f:	eb e9                	jmp    7d5a <bootmain+0x6f>
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d71:	83 c3 20             	add    $0x20,%ebx
+    7d74:	eb bc                	jmp    7d32 <bootmain+0x47>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d76:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d7b:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d80:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d82:	b8 00 8a ff ff       	mov    $0xffff8a00,%eax
+    7d87:	89 c2                	mov    %eax,%edx
+    7d89:	66 ef                	out    %ax,(%dx)
+    7d8b:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d90:	66 ef                	out    %ax,(%dx)
+    7d92:	eb fe                	jmp    7d92 <bootmain+0xa7>
Binary files _lab7/obj/bootblock.o and lab7/obj/bootblock.o differ
Binary files _lab7/obj/bootblock.out and lab7/obj/bootblock.out differ
diff -r -u -P _lab7/obj/kern/debug/kdebug.d lab7/obj/kern/debug/kdebug.d
--- _lab7/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/kdebug.d	2020-05-28 05:02:22.193519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h kern/mm/vmm.h kern/process/proc.h \
+ kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h kern/debug/kdebug.h \
+ kern/debug/kmonitor.h
Binary files _lab7/obj/kern/debug/kdebug.o and lab7/obj/kern/debug/kdebug.o differ
diff -r -u -P _lab7/obj/kern/debug/kmonitor.d lab7/obj/kern/debug/kmonitor.d
--- _lab7/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/kmonitor.d	2020-05-28 05:02:22.205519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files _lab7/obj/kern/debug/kmonitor.o and lab7/obj/kern/debug/kmonitor.o differ
diff -r -u -P _lab7/obj/kern/debug/panic.d lab7/obj/kern/debug/panic.d
--- _lab7/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/panic.d	2020-05-28 05:02:22.181519207 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files _lab7/obj/kern/debug/panic.o and lab7/obj/kern/debug/panic.o differ
diff -r -u -P _lab7/obj/kern/driver/clock.d lab7/obj/kern/driver/clock.d
--- _lab7/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/clock.d	2020-05-28 05:02:22.109519207 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files _lab7/obj/kern/driver/clock.o and lab7/obj/kern/driver/clock.o differ
diff -r -u -P _lab7/obj/kern/driver/console.d lab7/obj/kern/driver/console.d
--- _lab7/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/console.d	2020-05-28 05:02:22.185519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h
Binary files _lab7/obj/kern/driver/console.o and lab7/obj/kern/driver/console.o differ
diff -r -u -P _lab7/obj/kern/driver/ide.d lab7/obj/kern/driver/ide.d
--- _lab7/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/ide.d	2020-05-28 05:02:22.137519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files _lab7/obj/kern/driver/ide.o and lab7/obj/kern/driver/ide.o differ
diff -r -u -P _lab7/obj/kern/driver/intr.d lab7/obj/kern/driver/intr.d
--- _lab7/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/intr.d	2020-05-28 05:02:22.033519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files _lab7/obj/kern/driver/intr.o and lab7/obj/kern/driver/intr.o differ
diff -r -u -P _lab7/obj/kern/driver/picirq.d lab7/obj/kern/driver/picirq.d
--- _lab7/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/picirq.d	2020-05-28 05:02:22.101519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files _lab7/obj/kern/driver/picirq.o and lab7/obj/kern/driver/picirq.o differ
diff -r -u -P _lab7/obj/kern/fs/swapfs.d lab7/obj/kern/fs/swapfs.d
--- _lab7/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/fs/swapfs.d	2020-05-28 05:02:21.957519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/trap/trap.h kern/sync/sem.h \
+ kern/sync/wait.h kern/fs/swapfs.h kern/fs/fs.h kern/driver/ide.h
Binary files _lab7/obj/kern/fs/swapfs.o and lab7/obj/kern/fs/swapfs.o differ
diff -r -u -P _lab7/obj/kern/init/entry.d lab7/obj/kern/init/entry.d
--- _lab7/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/init/entry.d	2020-05-28 05:02:22.189519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files _lab7/obj/kern/init/entry.o and lab7/obj/kern/init/entry.o differ
diff -r -u -P _lab7/obj/kern/init/init.d lab7/obj/kern/init/init.d
--- _lab7/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/init/init.d	2020-05-28 05:02:22.225519207 +0800
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/sync/sem.h kern/sync/wait.h \
+ kern/driver/ide.h kern/mm/swap.h kern/debug/kmonitor.h
Binary files _lab7/obj/kern/init/init.o and lab7/obj/kern/init/init.o differ
diff -r -u -P _lab7/obj/kern/libs/readline.d lab7/obj/kern/libs/readline.d
--- _lab7/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/libs/readline.d	2020-05-28 05:02:22.205519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files _lab7/obj/kern/libs/readline.o and lab7/obj/kern/libs/readline.o differ
diff -r -u -P _lab7/obj/kern/libs/stdio.d lab7/obj/kern/libs/stdio.d
--- _lab7/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/libs/stdio.d	2020-05-28 05:02:22.209519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files _lab7/obj/kern/libs/stdio.o and lab7/obj/kern/libs/stdio.o differ
diff -r -u -P _lab7/obj/kern/mm/default_pmm.d lab7/obj/kern/mm/default_pmm.d
--- _lab7/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/default_pmm.d	2020-05-28 05:02:22.057519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files _lab7/obj/kern/mm/default_pmm.o and lab7/obj/kern/mm/default_pmm.o differ
diff -r -u -P _lab7/obj/kern/mm/kmalloc.d lab7/obj/kern/mm/kmalloc.d
--- _lab7/obj/kern/mm/kmalloc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/kmalloc.d	2020-05-28 05:02:22.069519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/mm/pmm.h libs/stdio.h libs/stdarg.h
Binary files _lab7/obj/kern/mm/kmalloc.o and lab7/obj/kern/mm/kmalloc.o differ
diff -r -u -P _lab7/obj/kern/mm/pmm.d lab7/obj/kern/mm/pmm.d
--- _lab7/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/pmm.d	2020-05-28 05:02:22.081519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h libs/error.h \
+ kern/mm/swap.h kern/mm/vmm.h kern/process/proc.h kern/trap/trap.h \
+ kern/sync/sem.h kern/sync/wait.h kern/mm/kmalloc.h
Binary files _lab7/obj/kern/mm/pmm.o and lab7/obj/kern/mm/pmm.o differ
diff -r -u -P _lab7/obj/kern/mm/swap.d lab7/obj/kern/mm/swap.d
--- _lab7/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/swap.d	2020-05-28 05:02:22.041519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/process/proc.h kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h \
+ kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h
diff -r -u -P _lab7/obj/kern/mm/swap_fifo.d lab7/obj/kern/mm/swap_fifo.d
--- _lab7/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/swap_fifo.d	2020-05-28 05:02:22.053519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/trap/trap.h kern/sync/sem.h \
+ kern/sync/wait.h kern/mm/swap_fifo.h
Binary files _lab7/obj/kern/mm/swap_fifo.o and lab7/obj/kern/mm/swap_fifo.o differ
Binary files _lab7/obj/kern/mm/swap.o and lab7/obj/kern/mm/swap.o differ
diff -r -u -P _lab7/obj/kern/mm/vmm.d lab7/obj/kern/mm/vmm.d
--- _lab7/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/vmm.d	2020-05-28 05:02:21.973519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/process/proc.h kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h \
+ libs/string.h libs/stdio.h libs/stdarg.h libs/error.h kern/mm/pmm.h \
+ kern/mm/swap.h kern/mm/kmalloc.h
Binary files _lab7/obj/kern/mm/vmm.o and lab7/obj/kern/mm/vmm.o differ
diff -r -u -P _lab7/obj/kern/process/entry.d lab7/obj/kern/process/entry.d
--- _lab7/obj/kern/process/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/entry.d	2020-05-28 05:02:21.857519207 +0800
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
Binary files _lab7/obj/kern/process/entry.o and lab7/obj/kern/process/entry.o differ
diff -r -u -P _lab7/obj/kern/process/proc.d lab7/obj/kern/process/proc.d
--- _lab7/obj/kern/process/proc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/proc.d	2020-05-28 05:09:50.177519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/skew_heap.h kern/mm/kmalloc.h \
+ libs/string.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h \
+ libs/error.h libs/elf.h kern/mm/vmm.h kern/sync/sem.h kern/sync/wait.h \
+ libs/stdio.h libs/stdarg.h libs/stdlib.h libs/unistd.h
Binary files _lab7/obj/kern/process/proc.o and lab7/obj/kern/process/proc.o differ
diff -r -u -P _lab7/obj/kern/process/switch.d lab7/obj/kern/process/switch.d
--- _lab7/obj/kern/process/switch.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/switch.d	2020-05-28 05:02:21.801519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
Binary files _lab7/obj/kern/process/switch.o and lab7/obj/kern/process/switch.o differ
diff -r -u -P _lab7/obj/kern/schedule/default_sched.d lab7/obj/kern/schedule/default_sched.d
--- _lab7/obj/kern/schedule/default_sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/schedule/default_sched.d	2020-05-28 05:02:21.781519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched.o obj/kern/schedule/default_sched.d: \
+ kern/schedule/default_sched.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
Binary files _lab7/obj/kern/schedule/default_sched.o and lab7/obj/kern/schedule/default_sched.o differ
diff -r -u -P _lab7/obj/kern/schedule/sched.d lab7/obj/kern/schedule/sched.d
--- _lab7/obj/kern/schedule/sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/schedule/sched.d	2020-05-28 05:02:21.849519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h libs/skew_heap.h kern/process/proc.h \
+ kern/trap/trap.h kern/mm/memlayout.h libs/stdio.h libs/stdarg.h \
+ kern/schedule/default_sched.h
Binary files _lab7/obj/kern/schedule/sched.o and lab7/obj/kern/schedule/sched.o differ
diff -r -u -P _lab7/obj/kern/sync/check_sync.d lab7/obj/kern/sync/check_sync.d
--- _lab7/obj/kern/sync/check_sync.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/check_sync.d	2020-05-28 05:02:21.965519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/check_sync.o obj/kern/sync/check_sync.d: \
+ kern/sync/check_sync.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ kern/process/proc.h libs/list.h kern/trap/trap.h kern/mm/memlayout.h \
+ libs/atomic.h libs/skew_heap.h kern/sync/sem.h kern/sync/wait.h \
+ kern/sync/monitor.h kern/debug/assert.h
Binary files _lab7/obj/kern/sync/check_sync.o and lab7/obj/kern/sync/check_sync.o differ
diff -r -u -P _lab7/obj/kern/sync/monitor.d lab7/obj/kern/sync/monitor.d
--- _lab7/obj/kern/sync/monitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/monitor.d	2020-05-28 05:02:21.857519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/sync/monitor.o obj/kern/sync/monitor.d: kern/sync/monitor.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h kern/sync/monitor.h \
+ kern/sync/sem.h libs/atomic.h kern/sync/wait.h libs/list.h \
+ kern/mm/kmalloc.h kern/debug/assert.h
Binary files _lab7/obj/kern/sync/monitor.o and lab7/obj/kern/sync/monitor.o differ
diff -r -u -P _lab7/obj/kern/sync/sem.d lab7/obj/kern/sync/sem.d
--- _lab7/obj/kern/sync/sem.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/sem.d	2020-05-28 05:02:21.965519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/sem.o obj/kern/sync/sem.d: kern/sync/sem.c libs/defs.h \
+ kern/sync/wait.h libs/list.h libs/atomic.h kern/mm/kmalloc.h \
+ kern/sync/sem.h kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h \
+ libs/skew_heap.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h
Binary files _lab7/obj/kern/sync/sem.o and lab7/obj/kern/sync/sem.o differ
diff -r -u -P _lab7/obj/kern/sync/wait.d lab7/obj/kern/sync/wait.d
--- _lab7/obj/kern/sync/wait.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/wait.d	2020-05-28 05:02:21.949519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/wait.o obj/kern/sync/wait.d: kern/sync/wait.c libs/defs.h \
+ libs/list.h kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h libs/atomic.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/sync/wait.h kern/process/proc.h kern/trap/trap.h \
+ kern/mm/memlayout.h
Binary files _lab7/obj/kern/sync/wait.o and lab7/obj/kern/sync/wait.o differ
diff -r -u -P _lab7/obj/kern/syscall/syscall.d lab7/obj/kern/syscall/syscall.d
--- _lab7/obj/kern/syscall/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/syscall/syscall.d	2020-05-28 05:02:21.789519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/syscall/syscall.h libs/stdio.h libs/stdarg.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/driver/clock.h
Binary files _lab7/obj/kern/syscall/syscall.o and lab7/obj/kern/syscall/syscall.o differ
diff -r -u -P _lab7/obj/kern/trap/trap.d lab7/obj/kern/trap/trap.d
--- _lab7/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/trap.d	2020-05-28 05:02:22.181519207 +0800
@@ -0,0 +1,8 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/sync/sem.h kern/sync/wait.h \
+ kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h libs/unistd.h \
+ kern/syscall/syscall.h libs/error.h
diff -r -u -P _lab7/obj/kern/trap/trapentry.d lab7/obj/kern/trap/trapentry.d
--- _lab7/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/trapentry.d	2020-05-28 05:02:22.053519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files _lab7/obj/kern/trap/trapentry.o and lab7/obj/kern/trap/trapentry.o differ
Binary files _lab7/obj/kern/trap/trap.o and lab7/obj/kern/trap/trap.o differ
diff -r -u -P _lab7/obj/kern/trap/vectors.d lab7/obj/kern/trap/vectors.d
--- _lab7/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/vectors.d	2020-05-28 05:02:22.061519207 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files _lab7/obj/kern/trap/vectors.o and lab7/obj/kern/trap/vectors.o differ
diff -r -u -P _lab7/obj/kernel.asm lab7/obj/kernel.asm
--- _lab7/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kernel.asm	2020-05-28 05:09:50.737519207 +0800
@@ -0,0 +1,26143 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
+    movl $KERNEL_DS, %eax
+c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c010000c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c010000e:	8e c0                	mov    %eax,%es
+    movw %ax, %ss
+c0100010:	8e d0                	mov    %eax,%ss
+
+    ljmp $KERNEL_CS, $relocated
+c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019
+
+c0100019 <relocated>:
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>
+
+c0100028 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100028:	eb fe                	jmp    c0100028 <spin>
+
+c010002a <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c010002a:	55                   	push   %ebp
+c010002b:	89 e5                	mov    %esp,%ebp
+c010002d:	83 ec 28             	sub    $0x28,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c0100030:	ba c4 56 1c c0       	mov    $0xc01c56c4,%edx
+c0100035:	b8 f9 23 1c c0       	mov    $0xc01c23f9,%eax
+c010003a:	29 c2                	sub    %eax,%edx
+c010003c:	89 d0                	mov    %edx,%eax
+c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100049:	00 
+c010004a:	c7 04 24 f9 23 1c c0 	movl   $0xc01c23f9,(%esp)
+c0100051:	e8 6d d4 00 00       	call   c010d4c3 <memset>
+
+    cons_init();                // init the console
+c0100056:	e8 6c 16 00 00       	call   c01016c7 <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c010005b:	c7 45 f4 60 d6 10 c0 	movl   $0xc010d660,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100069:	c7 04 24 7c d6 10 c0 	movl   $0xc010d67c,(%esp)
+c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>
+
+    print_kerninfo();
+c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>
+
+    grade_backtrace();
+c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010007f:	e8 67 57 00 00       	call   c01057eb <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c0100084:	e8 1c 20 00 00       	call   c01020a5 <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100089:	e8 94 21 00 00       	call   c0102222 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c010008e:	e8 13 87 00 00       	call   c01087a6 <vmm_init>
+    sched_init();               // init scheduler
+c0100093:	e8 69 c2 00 00       	call   c010c301 <sched_init>
+    proc_init();                // init process table
+c0100098:	e8 a1 bc 00 00       	call   c010bd3e <proc_init>
+    
+    ide_init();                 // init ide devices
+c010009d:	e8 56 17 00 00       	call   c01017f8 <ide_init>
+    swap_init();                // init swap
+c01000a2:	e8 07 6e 00 00       	call   c0106eae <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000a7:	e8 d1 0d 00 00       	call   c0100e7d <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000ac:	e8 62 1f 00 00       	call   c0102013 <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000b1:	e8 47 be 00 00       	call   c010befd <cpu_idle>
+
+c01000b6 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000b6:	55                   	push   %ebp
+c01000b7:	89 e5                	mov    %esp,%ebp
+c01000b9:	83 ec 18             	sub    $0x18,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01000c3:	00 
+c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01000cb:	00 
+c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01000d3:	e8 d7 0c 00 00       	call   c0100daf <mon_backtrace>
+}
+c01000d8:	c9                   	leave  
+c01000d9:	c3                   	ret    
+
+c01000da <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000da:	55                   	push   %ebp
+c01000db:	89 e5                	mov    %esp,%ebp
+c01000dd:	53                   	push   %ebx
+c01000de:	83 ec 14             	sub    $0x14,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
+c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01000f9:	89 04 24             	mov    %eax,(%esp)
+c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
+}
+c0100101:	83 c4 14             	add    $0x14,%esp
+c0100104:	5b                   	pop    %ebx
+c0100105:	5d                   	pop    %ebp
+c0100106:	c3                   	ret    
+
+c0100107 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c0100107:	55                   	push   %ebp
+c0100108:	89 e5                	mov    %esp,%ebp
+c010010a:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace1(arg0, arg2);
+c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100117:	89 04 24             	mov    %eax,(%esp)
+c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
+}
+c010011f:	c9                   	leave  
+c0100120:	c3                   	ret    
+
+c0100121 <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c0100121:	55                   	push   %ebp
+c0100122:	89 e5                	mov    %esp,%ebp
+c0100124:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
+c0100133:	ff 
+c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
+}
+c0100144:	c9                   	leave  
+c0100145:	c3                   	ret    
+
+c0100146 <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c0100146:	55                   	push   %ebp
+c0100147:	89 e5                	mov    %esp,%ebp
+c0100149:	83 ec 28             	sub    $0x28,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010015c:	0f b7 c0             	movzwl %ax,%eax
+c010015f:	83 e0 03             	and    $0x3,%eax
+c0100162:	89 c2                	mov    %eax,%edx
+c0100164:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100171:	c7 04 24 81 d6 10 c0 	movl   $0xc010d681,(%esp)
+c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  cs = %x\n", round, reg1);
+c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100181:	0f b7 d0             	movzwl %ax,%edx
+c0100184:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100191:	c7 04 24 8f d6 10 c0 	movl   $0xc010d68f,(%esp)
+c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  ds = %x\n", round, reg2);
+c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c01001a1:	0f b7 d0             	movzwl %ax,%edx
+c01001a4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001b1:	c7 04 24 9d d6 10 c0 	movl   $0xc010d69d,(%esp)
+c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  es = %x\n", round, reg3);
+c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001c1:	0f b7 d0             	movzwl %ax,%edx
+c01001c4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001d1:	c7 04 24 ab d6 10 c0 	movl   $0xc010d6ab,(%esp)
+c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001e1:	0f b7 d0             	movzwl %ax,%edx
+c01001e4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001f1:	c7 04 24 b9 d6 10 c0 	movl   $0xc010d6b9,(%esp)
+c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
+    round ++;
+c01001fd:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
+c0100202:	83 c0 01             	add    $0x1,%eax
+c0100205:	a3 00 24 1c c0       	mov    %eax,0xc01c2400
+}
+c010020a:	c9                   	leave  
+c010020b:	c3                   	ret    
+
+c010020c <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c010020c:	55                   	push   %ebp
+c010020d:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+}
+c010020f:	5d                   	pop    %ebp
+c0100210:	c3                   	ret    
+
+c0100211 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c0100211:	55                   	push   %ebp
+c0100212:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+}
+c0100214:	5d                   	pop    %ebp
+c0100215:	c3                   	ret    
+
+c0100216 <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c0100216:	55                   	push   %ebp
+c0100217:	89 e5                	mov    %esp,%ebp
+c0100219:	83 ec 18             	sub    $0x18,%esp
+    lab1_print_cur_status();
+c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c0100221:	c7 04 24 c8 d6 10 c0 	movl   $0xc010d6c8,(%esp)
+c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
+    lab1_switch_to_user();
+c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
+    lab1_print_cur_status();
+c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c0100237:	c7 04 24 e8 d6 10 c0 	movl   $0xc010d6e8,(%esp)
+c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
+    lab1_switch_to_kernel();
+c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
+}
+c010024d:	c9                   	leave  
+c010024e:	c3                   	ret    
+
+c010024f <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c010024f:	55                   	push   %ebp
+c0100250:	89 e5                	mov    %esp,%ebp
+c0100252:	83 ec 28             	sub    $0x28,%esp
+    if (prompt != NULL) {
+c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100259:	74 13                	je     c010026e <readline+0x1f>
+        cprintf("%s", prompt);
+c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100262:	c7 04 24 07 d7 10 c0 	movl   $0xc010d707,(%esp)
+c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
+    }
+    int i = 0, c;
+c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
+c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100281:	79 07                	jns    c010028a <readline+0x3b>
+            return NULL;
+c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
+c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
+            cputchar(c);
+c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010029c:	89 04 24             	mov    %eax,(%esp)
+c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
+            buf[i ++] = c;
+c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
+c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01002b0:	88 90 20 24 1c c0    	mov    %dl,-0x3fe3dbe0(%eax)
+c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
+        }
+        else if (c == '\b' && i > 0) {
+c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
+c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
+            cputchar(c);
+c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002c7:	89 04 24             	mov    %eax,(%esp)
+c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
+            i --;
+c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
+        }
+        else if (c == '\n' || c == '\r') {
+c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01002d9:	74 06                	je     c01002e1 <readline+0x92>
+c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
+            cputchar(c);
+c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002e4:	89 04 24             	mov    %eax,(%esp)
+c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
+            buf[i] = '\0';
+c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002ef:	05 20 24 1c c0       	add    $0xc01c2420,%eax
+c01002f4:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01002f7:	b8 20 24 1c c0       	mov    $0xc01c2420,%eax
+c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
+        }
+    }
+c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
+}
+c0100303:	c9                   	leave  
+c0100304:	c3                   	ret    
+
+c0100305 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c0100305:	55                   	push   %ebp
+c0100306:	89 e5                	mov    %esp,%ebp
+c0100308:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010030e:	89 04 24             	mov    %eax,(%esp)
+c0100311:	e8 dd 13 00 00       	call   c01016f3 <cons_putc>
+    (*cnt) ++;
+c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100319:	8b 00                	mov    (%eax),%eax
+c010031b:	8d 50 01             	lea    0x1(%eax),%edx
+c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100321:	89 10                	mov    %edx,(%eax)
+}
+c0100323:	c9                   	leave  
+c0100324:	c3                   	ret    
+
+c0100325 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c0100325:	55                   	push   %ebp
+c0100326:	89 e5                	mov    %esp,%ebp
+c0100328:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
+c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
+c010034e:	e8 b1 c8 00 00       	call   c010cc04 <vprintfmt>
+    return cnt;
+c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100356:	c9                   	leave  
+c0100357:	c3                   	ret    
+
+c0100358 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c0100358:	55                   	push   %ebp
+c0100359:	89 e5                	mov    %esp,%ebp
+c010035b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
+c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010036e:	89 04 24             	mov    %eax,(%esp)
+c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
+c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010037c:	c9                   	leave  
+c010037d:	c3                   	ret    
+
+c010037e <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c010037e:	55                   	push   %ebp
+c010037f:	89 e5                	mov    %esp,%ebp
+c0100381:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100387:	89 04 24             	mov    %eax,(%esp)
+c010038a:	e8 64 13 00 00       	call   c01016f3 <cons_putc>
+}
+c010038f:	c9                   	leave  
+c0100390:	c3                   	ret    
+
+c0100391 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c0100391:	55                   	push   %ebp
+c0100392:	89 e5                	mov    %esp,%ebp
+c0100394:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
+        cputch(c, &cnt);
+c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01003ab:	89 04 24             	mov    %eax,(%esp)
+c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
+c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
+c01003bc:	0f b6 00             	movzbl (%eax),%eax
+c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
+    return cnt;
+c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c01003de:	c9                   	leave  
+c01003df:	c3                   	ret    
+
+c01003e0 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c01003e0:	55                   	push   %ebp
+c01003e1:	89 e5                	mov    %esp,%ebp
+c01003e3:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c01003e6:	e8 44 13 00 00       	call   c010172f <cons_getc>
+c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
+        /* do nothing */;
+    return c;
+c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01003f7:	c9                   	leave  
+c01003f8:	c3                   	ret    
+
+c01003f9 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c01003f9:	55                   	push   %ebp
+c01003fa:	89 e5                	mov    %esp,%ebp
+c01003fc:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100402:	8b 00                	mov    (%eax),%eax
+c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
+c010040a:	8b 00                	mov    (%eax),%eax
+c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100421:	01 d0                	add    %edx,%eax
+c0100423:	89 c2                	mov    %eax,%edx
+c0100425:	c1 ea 1f             	shr    $0x1f,%edx
+c0100428:	01 d0                	add    %edx,%eax
+c010042a:	d1 f8                	sar    %eax
+c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
+            m --;
+c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
+c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100446:	89 d0                	mov    %edx,%eax
+c0100448:	01 c0                	add    %eax,%eax
+c010044a:	01 d0                	add    %edx,%eax
+c010044c:	c1 e0 02             	shl    $0x2,%eax
+c010044f:	89 c2                	mov    %eax,%edx
+c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100454:	01 d0                	add    %edx,%eax
+c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010045a:	0f b6 c0             	movzbl %al,%eax
+c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
+            l = true_m + 1;
+c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010046d:	83 c0 01             	add    $0x1,%eax
+c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010047f:	89 d0                	mov    %edx,%eax
+c0100481:	01 c0                	add    %eax,%eax
+c0100483:	01 d0                	add    %edx,%eax
+c0100485:	c1 e0 02             	shl    $0x2,%eax
+c0100488:	89 c2                	mov    %eax,%edx
+c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010048d:	01 d0                	add    %edx,%eax
+c010048f:	8b 40 08             	mov    0x8(%eax),%eax
+c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
+c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
+            *region_left = m;
+c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010049d:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004a2:	83 c0 01             	add    $0x1,%eax
+c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004ad:	89 d0                	mov    %edx,%eax
+c01004af:	01 c0                	add    %eax,%eax
+c01004b1:	01 d0                	add    %edx,%eax
+c01004b3:	c1 e0 02             	shl    $0x2,%eax
+c01004b6:	89 c2                	mov    %eax,%edx
+c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01004bb:	01 d0                	add    %edx,%eax
+c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
+c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
+c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004ce:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004d3:	83 e8 01             	sub    $0x1,%eax
+c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004e1:	89 10                	mov    %edx,(%eax)
+            l = m;
+c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100502:	8b 00                	mov    (%eax),%eax
+c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
+c010050a:	89 10                	mov    %edx,(%eax)
+c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100511:	8b 00                	mov    (%eax),%eax
+c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
+c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010051f:	8b 00                	mov    (%eax),%eax
+c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
+c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100529:	89 d0                	mov    %edx,%eax
+c010052b:	01 c0                	add    %eax,%eax
+c010052d:	01 d0                	add    %edx,%eax
+c010052f:	c1 e0 02             	shl    $0x2,%eax
+c0100532:	89 c2                	mov    %eax,%edx
+c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100537:	01 d0                	add    %edx,%eax
+c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010053d:	0f b6 c0             	movzbl %al,%eax
+c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010054b:	89 10                	mov    %edx,(%eax)
+    }
+}
+c010054d:	c9                   	leave  
+c010054e:	c3                   	ret    
+
+c010054f <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c010054f:	55                   	push   %ebp
+c0100550:	89 e5                	mov    %esp,%ebp
+c0100552:	83 ec 58             	sub    $0x58,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100558:	c7 00 0c d7 10 c0    	movl   $0xc010d70c,(%eax)
+    info->eip_line = 0;
+c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010056b:	c7 40 08 0c d7 10 c0 	movl   $0xc010d70c,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100582:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c0100598:	c7 45 f4 a0 03 11 c0 	movl   $0xc01103a0,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c010059f:	c7 45 f0 54 75 12 c0 	movl   $0xc0127554,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c01005a6:	c7 45 ec 55 75 12 c0 	movl   $0xc0127555,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c01005ad:	c7 45 e8 9d e3 12 c0 	movl   $0xc012e39d,-0x18(%ebp)
+c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c01005c0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c01005c5:	85 c0                	test   %eax,%eax
+c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
+c01005c9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
+c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
+            return -1;
+c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01005ee:	00 
+c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01005f6:	00 
+c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01005fe:	89 04 24             	mov    %eax,(%esp)
+c0100601:	e8 96 8a 00 00       	call   c010909c <user_mem_check>
+c0100606:	85 c0                	test   %eax,%eax
+c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
+            return -1;
+c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+
+        stabs = usd->stabs;
+c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100617:	8b 00                	mov    (%eax),%eax
+c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010061f:	8b 40 04             	mov    0x4(%eax),%eax
+c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100628:	8b 40 08             	mov    0x8(%eax),%eax
+c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
+c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010063d:	29 c2                	sub    %eax,%edx
+c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100649:	00 
+c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100655:	89 04 24             	mov    %eax,(%esp)
+c0100658:	e8 3f 8a 00 00       	call   c010909c <user_mem_check>
+c010065d:	85 c0                	test   %eax,%eax
+c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
+            return -1;
+c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100671:	29 c2                	sub    %eax,%edx
+c0100673:	89 d0                	mov    %edx,%eax
+c0100675:	89 c2                	mov    %eax,%edx
+c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100681:	00 
+c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010068d:	89 04 24             	mov    %eax,(%esp)
+c0100690:	e8 07 8a 00 00       	call   c010909c <user_mem_check>
+c0100695:	85 c0                	test   %eax,%eax
+c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
+            return -1;
+c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
+c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006ae:	83 e8 01             	sub    $0x1,%eax
+c01006b1:	0f b6 00             	movzbl (%eax),%eax
+c01006b4:	84 c0                	test   %al,%al
+c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
+        return -1;
+c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006cf:	29 c2                	sub    %eax,%edx
+c01006d1:	89 d0                	mov    %edx,%eax
+c01006d3:	c1 f8 02             	sar    $0x2,%eax
+c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c01006dc:	83 e8 01             	sub    $0x1,%eax
+c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
+c01006f0:	00 
+c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100702:	89 04 24             	mov    %eax,(%esp)
+c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
+    if (lfile == 0)
+c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010070d:	85 c0                	test   %eax,%eax
+c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
+        return -1;
+c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
+c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
+c0100735:	00 
+c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100747:	89 04 24             	mov    %eax,(%esp)
+c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>
+
+    if (lfun <= rfun) {
+c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0100755:	39 c2                	cmp    %eax,%edx
+c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010075c:	89 c2                	mov    %eax,%edx
+c010075e:	89 d0                	mov    %edx,%eax
+c0100760:	01 c0                	add    %eax,%eax
+c0100762:	01 d0                	add    %edx,%eax
+c0100764:	c1 e0 02             	shl    $0x2,%eax
+c0100767:	89 c2                	mov    %eax,%edx
+c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010076c:	01 d0                	add    %edx,%eax
+c010076e:	8b 10                	mov    (%eax),%edx
+c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100776:	29 c1                	sub    %eax,%ecx
+c0100778:	89 c8                	mov    %ecx,%eax
+c010077a:	39 c2                	cmp    %eax,%edx
+c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100781:	89 c2                	mov    %eax,%edx
+c0100783:	89 d0                	mov    %edx,%eax
+c0100785:	01 c0                	add    %eax,%eax
+c0100787:	01 d0                	add    %edx,%eax
+c0100789:	c1 e0 02             	shl    $0x2,%eax
+c010078c:	89 c2                	mov    %eax,%edx
+c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100791:	01 d0                	add    %edx,%eax
+c0100793:	8b 10                	mov    (%eax),%edx
+c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100798:	01 c2                	add    %eax,%edx
+c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010079d:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007a3:	89 c2                	mov    %eax,%edx
+c01007a5:	89 d0                	mov    %edx,%eax
+c01007a7:	01 c0                	add    %eax,%eax
+c01007a9:	01 d0                	add    %edx,%eax
+c01007ab:	c1 e0 02             	shl    $0x2,%eax
+c01007ae:	89 c2                	mov    %eax,%edx
+c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007b3:	01 d0                	add    %edx,%eax
+c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
+c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
+c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
+c01007db:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
+c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
+c01007f7:	00 
+c01007f8:	89 04 24             	mov    %eax,(%esp)
+c01007fb:	e8 37 cb 00 00       	call   c010d337 <strfind>
+c0100800:	89 c2                	mov    %eax,%edx
+c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100805:	8b 40 08             	mov    0x8(%eax),%eax
+c0100808:	29 c2                	sub    %eax,%edx
+c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010080d:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
+c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
+c010081e:	00 
+c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100830:	89 04 24             	mov    %eax,(%esp)
+c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
+    if (lline <= rline) {
+c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010083e:	39 c2                	cmp    %eax,%edx
+c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
+        info->eip_line = stabs[rline].n_desc;
+c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0100845:	89 c2                	mov    %eax,%edx
+c0100847:	89 d0                	mov    %edx,%eax
+c0100849:	01 c0                	add    %eax,%eax
+c010084b:	01 d0                	add    %edx,%eax
+c010084d:	c1 e0 02             	shl    $0x2,%eax
+c0100850:	89 c2                	mov    %eax,%edx
+c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100855:	01 d0                	add    %edx,%eax
+c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c010085b:	0f b7 d0             	movzwl %ax,%edx
+c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100861:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100873:	83 e8 01             	sub    $0x1,%eax
+c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010087f:	39 c2                	cmp    %eax,%edx
+c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
+           && stabs[lline].n_type != N_SOL
+c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100886:	89 c2                	mov    %eax,%edx
+c0100888:	89 d0                	mov    %edx,%eax
+c010088a:	01 c0                	add    %eax,%eax
+c010088c:	01 d0                	add    %edx,%eax
+c010088e:	c1 e0 02             	shl    $0x2,%eax
+c0100891:	89 c2                	mov    %eax,%edx
+c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100896:	01 d0                	add    %edx,%eax
+c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010089c:	3c 84                	cmp    $0x84,%al
+c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008a3:	89 c2                	mov    %eax,%edx
+c01008a5:	89 d0                	mov    %edx,%eax
+c01008a7:	01 c0                	add    %eax,%eax
+c01008a9:	01 d0                	add    %edx,%eax
+c01008ab:	c1 e0 02             	shl    $0x2,%eax
+c01008ae:	89 c2                	mov    %eax,%edx
+c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008b3:	01 d0                	add    %edx,%eax
+c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01008b9:	3c 64                	cmp    $0x64,%al
+c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
+c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008c0:	89 c2                	mov    %eax,%edx
+c01008c2:	89 d0                	mov    %edx,%eax
+c01008c4:	01 c0                	add    %eax,%eax
+c01008c6:	01 d0                	add    %edx,%eax
+c01008c8:	c1 e0 02             	shl    $0x2,%eax
+c01008cb:	89 c2                	mov    %eax,%edx
+c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008d0:	01 d0                	add    %edx,%eax
+c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
+c01008d5:	85 c0                	test   %eax,%eax
+c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008df:	39 c2                	cmp    %eax,%edx
+c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
+c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008e6:	89 c2                	mov    %eax,%edx
+c01008e8:	89 d0                	mov    %edx,%eax
+c01008ea:	01 c0                	add    %eax,%eax
+c01008ec:	01 d0                	add    %edx,%eax
+c01008ee:	c1 e0 02             	shl    $0x2,%eax
+c01008f1:	89 c2                	mov    %eax,%edx
+c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008f6:	01 d0                	add    %edx,%eax
+c01008f8:	8b 10                	mov    (%eax),%edx
+c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100900:	29 c1                	sub    %eax,%ecx
+c0100902:	89 c8                	mov    %ecx,%eax
+c0100904:	39 c2                	cmp    %eax,%edx
+c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010090b:	89 c2                	mov    %eax,%edx
+c010090d:	89 d0                	mov    %edx,%eax
+c010090f:	01 c0                	add    %eax,%eax
+c0100911:	01 d0                	add    %edx,%eax
+c0100913:	c1 e0 02             	shl    $0x2,%eax
+c0100916:	89 c2                	mov    %eax,%edx
+c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010091b:	01 d0                	add    %edx,%eax
+c010091d:	8b 10                	mov    (%eax),%edx
+c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100922:	01 c2                	add    %eax,%edx
+c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100927:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010092f:	39 c2                	cmp    %eax,%edx
+c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
+        for (lline = lfun + 1;
+c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100936:	83 c0 01             	add    $0x1,%eax
+c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100941:	8b 40 14             	mov    0x14(%eax),%eax
+c0100944:	8d 50 01             	lea    0x1(%eax),%edx
+c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010094a:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100950:	83 c0 01             	add    $0x1,%eax
+c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c010095c:	39 c2                	cmp    %eax,%edx
+c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100963:	89 c2                	mov    %eax,%edx
+c0100965:	89 d0                	mov    %edx,%eax
+c0100967:	01 c0                	add    %eax,%eax
+c0100969:	01 d0                	add    %edx,%eax
+c010096b:	c1 e0 02             	shl    $0x2,%eax
+c010096e:	89 c2                	mov    %eax,%edx
+c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100973:	01 d0                	add    %edx,%eax
+c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100979:	3c a0                	cmp    $0xa0,%al
+c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100982:	c9                   	leave  
+c0100983:	c3                   	ret    
+
+c0100984 <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c0100984:	55                   	push   %ebp
+c0100985:	89 e5                	mov    %esp,%ebp
+c0100987:	83 ec 18             	sub    $0x18,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c010098a:	c7 04 24 16 d7 10 c0 	movl   $0xc010d716,(%esp)
+c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
+c010099d:	c0 
+c010099e:	c7 04 24 2f d7 10 c0 	movl   $0xc010d72f,(%esp)
+c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c01009aa:	c7 44 24 04 4c d6 10 	movl   $0xc010d64c,0x4(%esp)
+c01009b1:	c0 
+c01009b2:	c7 04 24 47 d7 10 c0 	movl   $0xc010d747,(%esp)
+c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c01009be:	c7 44 24 04 f9 23 1c 	movl   $0xc01c23f9,0x4(%esp)
+c01009c5:	c0 
+c01009c6:	c7 04 24 5f d7 10 c0 	movl   $0xc010d75f,(%esp)
+c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  end    0x%08x (phys)\n", end);
+c01009d2:	c7 44 24 04 c4 56 1c 	movl   $0xc01c56c4,0x4(%esp)
+c01009d9:	c0 
+c01009da:	c7 04 24 77 d7 10 c0 	movl   $0xc010d777,(%esp)
+c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c01009e6:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
+c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c01009f6:	29 c2                	sub    %eax,%edx
+c01009f8:	89 d0                	mov    %edx,%eax
+c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100a00:	85 c0                	test   %eax,%eax
+c0100a02:	0f 48 c2             	cmovs  %edx,%eax
+c0100a05:	c1 f8 0a             	sar    $0xa,%eax
+c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a0c:	c7 04 24 90 d7 10 c0 	movl   $0xc010d790,(%esp)
+c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
+}
+c0100a18:	c9                   	leave  
+c0100a19:	c3                   	ret    
+
+c0100a1a <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100a1a:	55                   	push   %ebp
+c0100a1b:	89 e5                	mov    %esp,%ebp
+c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a2d:	89 04 24             	mov    %eax,(%esp)
+c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
+c0100a35:	85 c0                	test   %eax,%eax
+c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a40:	c7 04 24 ba d7 10 c0 	movl   $0xc010d7ba,(%esp)
+c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
+c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a5d:	01 d0                	add    %edx,%eax
+c0100a5f:	0f b6 00             	movzbl (%eax),%eax
+c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100a6b:	01 ca                	add    %ecx,%edx
+c0100a6d:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a84:	01 d0                	add    %edx,%eax
+c0100a86:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100a8f:	89 d1                	mov    %edx,%ecx
+c0100a91:	29 c1                	sub    %eax,%ecx
+c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100aaf:	c7 04 24 d6 d7 10 c0 	movl   $0xc010d7d6,(%esp)
+c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100abb:	c9                   	leave  
+c0100abc:	c3                   	ret    
+
+c0100abd <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100abd:	55                   	push   %ebp
+c0100abe:	89 e5                	mov    %esp,%ebp
+c0100ac0:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100acc:	c9                   	leave  
+c0100acd:	c3                   	ret    
+
+c0100ace <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100ace:	55                   	push   %ebp
+c0100acf:	89 e5                	mov    %esp,%ebp
+c0100ad1:	53                   	push   %ebx
+c0100ad2:	83 ec 34             	sub    $0x34,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100ad5:	89 e8                	mov    %ebp,%eax
+c0100ad7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return ebp;
+c0100ada:	8b 45 e8             	mov    -0x18(%ebp),%eax
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+c0100add:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	eip = read_eip();
+c0100ae0:	e8 d8 ff ff ff       	call   c0100abd <read_eip>
+c0100ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+c0100ae8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100aef:	eb 77                	jmp    c0100b68 <print_stackframe+0x9a>
+		cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, *((uintptr_t*)ebp+2), *((uintptr_t*)ebp+3), *((uintptr_t*)ebp+4), *((uintptr_t*)ebp+5));
+c0100af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100af4:	83 c0 14             	add    $0x14,%eax
+c0100af7:	8b 18                	mov    (%eax),%ebx
+c0100af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100afc:	83 c0 10             	add    $0x10,%eax
+c0100aff:	8b 08                	mov    (%eax),%ecx
+c0100b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b04:	83 c0 0c             	add    $0xc,%eax
+c0100b07:	8b 10                	mov    (%eax),%edx
+c0100b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b0c:	83 c0 08             	add    $0x8,%eax
+c0100b0f:	8b 00                	mov    (%eax),%eax
+c0100b11:	89 5c 24 18          	mov    %ebx,0x18(%esp)
+c0100b15:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0100b19:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0100b1d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0100b21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100b24:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b2b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b2f:	c7 04 24 e8 d7 10 c0 	movl   $0xc010d7e8,(%esp)
+c0100b36:	e8 1d f8 ff ff       	call   c0100358 <cprintf>
+		print_debuginfo(eip - 1);
+c0100b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100b3e:	83 e8 01             	sub    $0x1,%eax
+c0100b41:	89 04 24             	mov    %eax,(%esp)
+c0100b44:	e8 d1 fe ff ff       	call   c0100a1a <print_debuginfo>
+		eip = *((uintptr_t*)ebp+1);
+c0100b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b4c:	83 c0 04             	add    $0x4,%eax
+c0100b4f:	8b 00                	mov    (%eax),%eax
+c0100b51:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		ebp = *((uintptr_t*)ebp);
+c0100b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b57:	8b 00                	mov    (%eax),%eax
+c0100b59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		if(ebp == 0)
+c0100b5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100b60:	75 02                	jne    c0100b64 <print_stackframe+0x96>
+			break;
+c0100b62:	eb 0a                	jmp    c0100b6e <print_stackframe+0xa0>
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+	eip = read_eip();
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+c0100b64:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0100b68:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100b6c:	76 83                	jbe    c0100af1 <print_stackframe+0x23>
+		eip = *((uintptr_t*)ebp+1);
+		ebp = *((uintptr_t*)ebp);
+		if(ebp == 0)
+			break;
+	}
+}
+c0100b6e:	83 c4 34             	add    $0x34,%esp
+c0100b71:	5b                   	pop    %ebx
+c0100b72:	5d                   	pop    %ebp
+c0100b73:	c3                   	ret    
+
+c0100b74 <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100b74:	55                   	push   %ebp
+c0100b75:	89 e5                	mov    %esp,%ebp
+c0100b77:	83 ec 28             	sub    $0x28,%esp
+    int argc = 0;
+c0100b7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b81:	eb 0c                	jmp    c0100b8f <parse+0x1b>
+            *buf ++ = '\0';
+c0100b83:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b86:	8d 50 01             	lea    0x1(%eax),%edx
+c0100b89:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100b8c:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b8f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b92:	0f b6 00             	movzbl (%eax),%eax
+c0100b95:	84 c0                	test   %al,%al
+c0100b97:	74 1d                	je     c0100bb6 <parse+0x42>
+c0100b99:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b9c:	0f b6 00             	movzbl (%eax),%eax
+c0100b9f:	0f be c0             	movsbl %al,%eax
+c0100ba2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ba6:	c7 04 24 a0 d8 10 c0 	movl   $0xc010d8a0,(%esp)
+c0100bad:	e8 52 c7 00 00       	call   c010d304 <strchr>
+c0100bb2:	85 c0                	test   %eax,%eax
+c0100bb4:	75 cd                	jne    c0100b83 <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bb9:	0f b6 00             	movzbl (%eax),%eax
+c0100bbc:	84 c0                	test   %al,%al
+c0100bbe:	75 02                	jne    c0100bc2 <parse+0x4e>
+            break;
+c0100bc0:	eb 67                	jmp    c0100c29 <parse+0xb5>
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100bc2:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100bc6:	75 14                	jne    c0100bdc <parse+0x68>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100bc8:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+c0100bcf:	00 
+c0100bd0:	c7 04 24 a5 d8 10 c0 	movl   $0xc010d8a5,(%esp)
+c0100bd7:	e8 7c f7 ff ff       	call   c0100358 <cprintf>
+        }
+        argv[argc ++] = buf;
+c0100bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bdf:	8d 50 01             	lea    0x1(%eax),%edx
+c0100be2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100bec:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100bef:	01 c2                	add    %eax,%edx
+c0100bf1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bf4:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100bf6:	eb 04                	jmp    c0100bfc <parse+0x88>
+            buf ++;
+c0100bf8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100bfc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bff:	0f b6 00             	movzbl (%eax),%eax
+c0100c02:	84 c0                	test   %al,%al
+c0100c04:	74 1d                	je     c0100c23 <parse+0xaf>
+c0100c06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c09:	0f b6 00             	movzbl (%eax),%eax
+c0100c0c:	0f be c0             	movsbl %al,%eax
+c0100c0f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c13:	c7 04 24 a0 d8 10 c0 	movl   $0xc010d8a0,(%esp)
+c0100c1a:	e8 e5 c6 00 00       	call   c010d304 <strchr>
+c0100c1f:	85 c0                	test   %eax,%eax
+c0100c21:	74 d5                	je     c0100bf8 <parse+0x84>
+            buf ++;
+        }
+    }
+c0100c23:	90                   	nop
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c24:	e9 66 ff ff ff       	jmp    c0100b8f <parse+0x1b>
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100c2c:	c9                   	leave  
+c0100c2d:	c3                   	ret    
+
+c0100c2e <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100c2e:	55                   	push   %ebp
+c0100c2f:	89 e5                	mov    %esp,%ebp
+c0100c31:	83 ec 68             	sub    $0x68,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100c34:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100c37:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c3e:	89 04 24             	mov    %eax,(%esp)
+c0100c41:	e8 2e ff ff ff       	call   c0100b74 <parse>
+c0100c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100c49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100c4d:	75 0a                	jne    c0100c59 <runcmd+0x2b>
+        return 0;
+c0100c4f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100c54:	e9 85 00 00 00       	jmp    c0100cde <runcmd+0xb0>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100c59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100c60:	eb 5c                	jmp    c0100cbe <runcmd+0x90>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100c62:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100c65:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c68:	89 d0                	mov    %edx,%eax
+c0100c6a:	01 c0                	add    %eax,%eax
+c0100c6c:	01 d0                	add    %edx,%eax
+c0100c6e:	c1 e0 02             	shl    $0x2,%eax
+c0100c71:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100c76:	8b 00                	mov    (%eax),%eax
+c0100c78:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0100c7c:	89 04 24             	mov    %eax,(%esp)
+c0100c7f:	e8 e1 c5 00 00       	call   c010d265 <strcmp>
+c0100c84:	85 c0                	test   %eax,%eax
+c0100c86:	75 32                	jne    c0100cba <runcmd+0x8c>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100c88:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c8b:	89 d0                	mov    %edx,%eax
+c0100c8d:	01 c0                	add    %eax,%eax
+c0100c8f:	01 d0                	add    %edx,%eax
+c0100c91:	c1 e0 02             	shl    $0x2,%eax
+c0100c94:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100c99:	8b 40 08             	mov    0x8(%eax),%eax
+c0100c9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100c9f:	8d 4a ff             	lea    -0x1(%edx),%ecx
+c0100ca2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0100ca5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100ca9:	8d 55 b0             	lea    -0x50(%ebp),%edx
+c0100cac:	83 c2 04             	add    $0x4,%edx
+c0100caf:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0100cb3:	89 0c 24             	mov    %ecx,(%esp)
+c0100cb6:	ff d0                	call   *%eax
+c0100cb8:	eb 24                	jmp    c0100cde <runcmd+0xb0>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100cc1:	83 f8 02             	cmp    $0x2,%eax
+c0100cc4:	76 9c                	jbe    c0100c62 <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100cc6:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100cc9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ccd:	c7 04 24 c3 d8 10 c0 	movl   $0xc010d8c3,(%esp)
+c0100cd4:	e8 7f f6 ff ff       	call   c0100358 <cprintf>
+    return 0;
+c0100cd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100cde:	c9                   	leave  
+c0100cdf:	c3                   	ret    
+
+c0100ce0 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100ce0:	55                   	push   %ebp
+c0100ce1:	89 e5                	mov    %esp,%ebp
+c0100ce3:	83 ec 28             	sub    $0x28,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100ce6:	c7 04 24 dc d8 10 c0 	movl   $0xc010d8dc,(%esp)
+c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
+    cprintf("Type 'help' for a list of commands.\n");
+c0100cf2:	c7 04 24 04 d9 10 c0 	movl   $0xc010d904,(%esp)
+c0100cf9:	e8 5a f6 ff ff       	call   c0100358 <cprintf>
+
+    if (tf != NULL) {
+c0100cfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100d02:	74 0b                	je     c0100d0f <kmonitor+0x2f>
+        print_trapframe(tf);
+c0100d04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d07:	89 04 24             	mov    %eax,(%esp)
+c0100d0a:	e8 a2 17 00 00       	call   c01024b1 <print_trapframe>
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100d0f:	c7 04 24 29 d9 10 c0 	movl   $0xc010d929,(%esp)
+c0100d16:	e8 34 f5 ff ff       	call   c010024f <readline>
+c0100d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100d1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100d22:	74 18                	je     c0100d3c <kmonitor+0x5c>
+            if (runcmd(buf, tf) < 0) {
+c0100d24:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d27:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d2e:	89 04 24             	mov    %eax,(%esp)
+c0100d31:	e8 f8 fe ff ff       	call   c0100c2e <runcmd>
+c0100d36:	85 c0                	test   %eax,%eax
+c0100d38:	79 02                	jns    c0100d3c <kmonitor+0x5c>
+                break;
+c0100d3a:	eb 02                	jmp    c0100d3e <kmonitor+0x5e>
+            }
+        }
+    }
+c0100d3c:	eb d1                	jmp    c0100d0f <kmonitor+0x2f>
+}
+c0100d3e:	c9                   	leave  
+c0100d3f:	c3                   	ret    
+
+c0100d40 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100d40:	55                   	push   %ebp
+c0100d41:	89 e5                	mov    %esp,%ebp
+c0100d43:	83 ec 28             	sub    $0x28,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100d4d:	eb 3f                	jmp    c0100d8e <mon_help+0x4e>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100d4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d52:	89 d0                	mov    %edx,%eax
+c0100d54:	01 c0                	add    %eax,%eax
+c0100d56:	01 d0                	add    %edx,%eax
+c0100d58:	c1 e0 02             	shl    $0x2,%eax
+c0100d5b:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100d60:	8b 48 04             	mov    0x4(%eax),%ecx
+c0100d63:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d66:	89 d0                	mov    %edx,%eax
+c0100d68:	01 c0                	add    %eax,%eax
+c0100d6a:	01 d0                	add    %edx,%eax
+c0100d6c:	c1 e0 02             	shl    $0x2,%eax
+c0100d6f:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100d74:	8b 00                	mov    (%eax),%eax
+c0100d76:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0100d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d7e:	c7 04 24 2d d9 10 c0 	movl   $0xc010d92d,(%esp)
+c0100d85:	e8 ce f5 ff ff       	call   c0100358 <cprintf>
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d91:	83 f8 02             	cmp    $0x2,%eax
+c0100d94:	76 b9                	jbe    c0100d4f <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100d96:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d9b:	c9                   	leave  
+c0100d9c:	c3                   	ret    
+
+c0100d9d <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100d9d:	55                   	push   %ebp
+c0100d9e:	89 e5                	mov    %esp,%ebp
+c0100da0:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100da3:	e8 dc fb ff ff       	call   c0100984 <print_kerninfo>
+    return 0;
+c0100da8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dad:	c9                   	leave  
+c0100dae:	c3                   	ret    
+
+c0100daf <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100daf:	55                   	push   %ebp
+c0100db0:	89 e5                	mov    %esp,%ebp
+c0100db2:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100db5:	e8 14 fd ff ff       	call   c0100ace <print_stackframe>
+    return 0;
+c0100dba:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dbf:	c9                   	leave  
+c0100dc0:	c3                   	ret    
+
+c0100dc1 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c0100dc1:	55                   	push   %ebp
+c0100dc2:	89 e5                	mov    %esp,%ebp
+c0100dc4:	83 ec 28             	sub    $0x28,%esp
+    if (is_panic) {
+c0100dc7:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
+c0100dcc:	85 c0                	test   %eax,%eax
+c0100dce:	74 02                	je     c0100dd2 <__panic+0x11>
+        goto panic_dead;
+c0100dd0:	eb 48                	jmp    c0100e1a <__panic+0x59>
+    }
+    is_panic = 1;
+c0100dd2:	c7 05 20 28 1c c0 01 	movl   $0x1,0xc01c2820
+c0100dd9:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c0100ddc:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100ddf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100de2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100de5:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100de9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100dec:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100df0:	c7 04 24 36 d9 10 c0 	movl   $0xc010d936,(%esp)
+c0100df7:	e8 5c f5 ff ff       	call   c0100358 <cprintf>
+    vcprintf(fmt, ap);
+c0100dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100dff:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e03:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e06:	89 04 24             	mov    %eax,(%esp)
+c0100e09:	e8 17 f5 ff ff       	call   c0100325 <vcprintf>
+    cprintf("\n");
+c0100e0e:	c7 04 24 52 d9 10 c0 	movl   $0xc010d952,(%esp)
+c0100e15:	e8 3e f5 ff ff       	call   c0100358 <cprintf>
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c0100e1a:	e8 fa 11 00 00       	call   c0102019 <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100e1f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100e26:	e8 b5 fe ff ff       	call   c0100ce0 <kmonitor>
+    }
+c0100e2b:	eb f2                	jmp    c0100e1f <__panic+0x5e>
+
+c0100e2d <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100e2d:	55                   	push   %ebp
+c0100e2e:	89 e5                	mov    %esp,%ebp
+c0100e30:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100e33:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c0100e39:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100e3c:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100e40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e43:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e47:	c7 04 24 54 d9 10 c0 	movl   $0xc010d954,(%esp)
+c0100e4e:	e8 05 f5 ff ff       	call   c0100358 <cprintf>
+    vcprintf(fmt, ap);
+c0100e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e56:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e5a:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e5d:	89 04 24             	mov    %eax,(%esp)
+c0100e60:	e8 c0 f4 ff ff       	call   c0100325 <vcprintf>
+    cprintf("\n");
+c0100e65:	c7 04 24 52 d9 10 c0 	movl   $0xc010d952,(%esp)
+c0100e6c:	e8 e7 f4 ff ff       	call   c0100358 <cprintf>
+    va_end(ap);
+}
+c0100e71:	c9                   	leave  
+c0100e72:	c3                   	ret    
+
+c0100e73 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c0100e73:	55                   	push   %ebp
+c0100e74:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c0100e76:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
+}
+c0100e7b:	5d                   	pop    %ebp
+c0100e7c:	c3                   	ret    
+
+c0100e7d <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c0100e7d:	55                   	push   %ebp
+c0100e7e:	89 e5                	mov    %esp,%ebp
+c0100e80:	83 ec 28             	sub    $0x28,%esp
+c0100e83:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c0100e89:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100e8d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0100e91:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0100e95:	ee                   	out    %al,(%dx)
+c0100e96:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c0100e9c:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
+c0100ea0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100ea4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0100ea8:	ee                   	out    %al,(%dx)
+c0100ea9:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
+c0100eaf:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
+c0100eb3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0100eb7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0100ebb:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c0100ebc:	c7 05 d8 54 1c c0 00 	movl   $0x0,0xc01c54d8
+c0100ec3:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c0100ec6:	c7 04 24 72 d9 10 c0 	movl   $0xc010d972,(%esp)
+c0100ecd:	e8 86 f4 ff ff       	call   c0100358 <cprintf>
+    pic_enable(IRQ_TIMER);
+c0100ed2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100ed9:	e8 99 11 00 00       	call   c0102077 <pic_enable>
+}
+c0100ede:	c9                   	leave  
+c0100edf:	c3                   	ret    
+
+c0100ee0 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0100ee0:	55                   	push   %ebp
+c0100ee1:	89 e5                	mov    %esp,%ebp
+c0100ee3:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0100ee6:	9c                   	pushf  
+c0100ee7:	58                   	pop    %eax
+c0100ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0100eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0100eee:	25 00 02 00 00       	and    $0x200,%eax
+c0100ef3:	85 c0                	test   %eax,%eax
+c0100ef5:	74 0c                	je     c0100f03 <__intr_save+0x23>
+        intr_disable();
+c0100ef7:	e8 1d 11 00 00       	call   c0102019 <intr_disable>
+        return 1;
+c0100efc:	b8 01 00 00 00       	mov    $0x1,%eax
+c0100f01:	eb 05                	jmp    c0100f08 <__intr_save+0x28>
+    }
+    return 0;
+c0100f03:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100f08:	c9                   	leave  
+c0100f09:	c3                   	ret    
+
+c0100f0a <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0100f0a:	55                   	push   %ebp
+c0100f0b:	89 e5                	mov    %esp,%ebp
+c0100f0d:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0100f10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100f14:	74 05                	je     c0100f1b <__intr_restore+0x11>
+        intr_enable();
+c0100f16:	e8 f8 10 00 00       	call   c0102013 <intr_enable>
+    }
+}
+c0100f1b:	c9                   	leave  
+c0100f1c:	c3                   	ret    
+
+c0100f1d <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0100f1d:	55                   	push   %ebp
+c0100f1e:	89 e5                	mov    %esp,%ebp
+c0100f20:	83 ec 10             	sub    $0x10,%esp
+c0100f23:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100f29:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0100f2d:	89 c2                	mov    %eax,%edx
+c0100f2f:	ec                   	in     (%dx),%al
+c0100f30:	88 45 fd             	mov    %al,-0x3(%ebp)
+c0100f33:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0100f39:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100f3d:	89 c2                	mov    %eax,%edx
+c0100f3f:	ec                   	in     (%dx),%al
+c0100f40:	88 45 f9             	mov    %al,-0x7(%ebp)
+c0100f43:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
+c0100f49:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f4d:	89 c2                	mov    %eax,%edx
+c0100f4f:	ec                   	in     (%dx),%al
+c0100f50:	88 45 f5             	mov    %al,-0xb(%ebp)
+c0100f53:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
+c0100f59:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0100f5d:	89 c2                	mov    %eax,%edx
+c0100f5f:	ec                   	in     (%dx),%al
+c0100f60:	88 45 f1             	mov    %al,-0xf(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c0100f63:	c9                   	leave  
+c0100f64:	c3                   	ret    
+
+c0100f65 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c0100f65:	55                   	push   %ebp
+c0100f66:	89 e5                	mov    %esp,%ebp
+c0100f68:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0100f6b:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c0100f72:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f75:	0f b7 00             	movzwl (%eax),%eax
+c0100f78:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c0100f7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f7f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c0100f84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f87:	0f b7 00             	movzwl (%eax),%eax
+c0100f8a:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c0100f8e:	74 12                	je     c0100fa2 <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c0100f90:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c0100f97:	66 c7 05 46 28 1c c0 	movw   $0x3b4,0xc01c2846
+c0100f9e:	b4 03 
+c0100fa0:	eb 13                	jmp    c0100fb5 <cga_init+0x50>
+    } else {
+        *cp = was;
+c0100fa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fa5:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0100fa9:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c0100fac:	66 c7 05 46 28 1c c0 	movw   $0x3d4,0xc01c2846
+c0100fb3:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c0100fb5:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c0100fbc:	0f b7 c0             	movzwl %ax,%eax
+c0100fbf:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0100fc3:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100fc7:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100fcb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0100fcf:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c0100fd0:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c0100fd7:	83 c0 01             	add    $0x1,%eax
+c0100fda:	0f b7 c0             	movzwl %ax,%eax
+c0100fdd:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100fe1:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0100fe5:	89 c2                	mov    %eax,%edx
+c0100fe7:	ec                   	in     (%dx),%al
+c0100fe8:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c0100feb:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0100fef:	0f b6 c0             	movzbl %al,%eax
+c0100ff2:	c1 e0 08             	shl    $0x8,%eax
+c0100ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0100ff8:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c0100fff:	0f b7 c0             	movzwl %ax,%eax
+c0101002:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101006:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010100a:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c010100e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101012:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101013:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c010101a:	83 c0 01             	add    $0x1,%eax
+c010101d:	0f b7 c0             	movzwl %ax,%eax
+c0101020:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101024:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c0101028:	89 c2                	mov    %eax,%edx
+c010102a:	ec                   	in     (%dx),%al
+c010102b:	88 45 e5             	mov    %al,-0x1b(%ebp)
+    return data;
+c010102e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101032:	0f b6 c0             	movzbl %al,%eax
+c0101035:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101038:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010103b:	a3 40 28 1c c0       	mov    %eax,0xc01c2840
+    crt_pos = pos;
+c0101040:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101043:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
+}
+c0101049:	c9                   	leave  
+c010104a:	c3                   	ret    
+
+c010104b <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c010104b:	55                   	push   %ebp
+c010104c:	89 e5                	mov    %esp,%ebp
+c010104e:	83 ec 48             	sub    $0x48,%esp
+c0101051:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101057:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010105b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010105f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101063:	ee                   	out    %al,(%dx)
+c0101064:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
+c010106a:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
+c010106e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101072:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101076:	ee                   	out    %al,(%dx)
+c0101077:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
+c010107d:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
+c0101081:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101085:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101089:	ee                   	out    %al,(%dx)
+c010108a:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c0101090:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
+c0101094:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101098:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010109c:	ee                   	out    %al,(%dx)
+c010109d:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
+c01010a3:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
+c01010a7:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01010ab:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01010af:	ee                   	out    %al,(%dx)
+c01010b0:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
+c01010b6:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+c01010ba:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c01010be:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01010c2:	ee                   	out    %al,(%dx)
+c01010c3:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
+c01010c9:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
+c01010cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01010d1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01010d5:	ee                   	out    %al,(%dx)
+c01010d6:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01010dc:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
+c01010e0:	89 c2                	mov    %eax,%edx
+c01010e2:	ec                   	in     (%dx),%al
+c01010e3:	88 45 d9             	mov    %al,-0x27(%ebp)
+    return data;
+c01010e6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c01010ea:	3c ff                	cmp    $0xff,%al
+c01010ec:	0f 95 c0             	setne  %al
+c01010ef:	0f b6 c0             	movzbl %al,%eax
+c01010f2:	a3 48 28 1c c0       	mov    %eax,0xc01c2848
+c01010f7:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01010fd:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
+c0101101:	89 c2                	mov    %eax,%edx
+c0101103:	ec                   	in     (%dx),%al
+c0101104:	88 45 d5             	mov    %al,-0x2b(%ebp)
+c0101107:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
+c010110d:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
+c0101111:	89 c2                	mov    %eax,%edx
+c0101113:	ec                   	in     (%dx),%al
+c0101114:	88 45 d1             	mov    %al,-0x2f(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101117:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
+c010111c:	85 c0                	test   %eax,%eax
+c010111e:	74 0c                	je     c010112c <serial_init+0xe1>
+        pic_enable(IRQ_COM1);
+c0101120:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0101127:	e8 4b 0f 00 00       	call   c0102077 <pic_enable>
+    }
+}
+c010112c:	c9                   	leave  
+c010112d:	c3                   	ret    
+
+c010112e <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010112e:	55                   	push   %ebp
+c010112f:	89 e5                	mov    %esp,%ebp
+c0101131:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010113b:	eb 09                	jmp    c0101146 <lpt_putc_sub+0x18>
+        delay();
+c010113d:	e8 db fd ff ff       	call   c0100f1d <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101142:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101146:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
+c010114c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101150:	89 c2                	mov    %eax,%edx
+c0101152:	ec                   	in     (%dx),%al
+c0101153:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101156:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c010115a:	84 c0                	test   %al,%al
+c010115c:	78 09                	js     c0101167 <lpt_putc_sub+0x39>
+c010115e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101165:	7e d6                	jle    c010113d <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101167:	8b 45 08             	mov    0x8(%ebp),%eax
+c010116a:	0f b6 c0             	movzbl %al,%eax
+c010116d:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
+c0101173:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101176:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010117a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010117e:	ee                   	out    %al,(%dx)
+c010117f:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
+c0101185:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c0101189:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010118d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101191:	ee                   	out    %al,(%dx)
+c0101192:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
+c0101198:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
+c010119c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c01011a0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01011a4:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01011a5:	c9                   	leave  
+c01011a6:	c3                   	ret    
+
+c01011a7 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01011a7:	55                   	push   %ebp
+c01011a8:	89 e5                	mov    %esp,%ebp
+c01011aa:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c01011ad:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01011b1:	74 0d                	je     c01011c0 <lpt_putc+0x19>
+        lpt_putc_sub(c);
+c01011b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011b6:	89 04 24             	mov    %eax,(%esp)
+c01011b9:	e8 70 ff ff ff       	call   c010112e <lpt_putc_sub>
+c01011be:	eb 24                	jmp    c01011e4 <lpt_putc+0x3d>
+    }
+    else {
+        lpt_putc_sub('\b');
+c01011c0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c01011c7:	e8 62 ff ff ff       	call   c010112e <lpt_putc_sub>
+        lpt_putc_sub(' ');
+c01011cc:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c01011d3:	e8 56 ff ff ff       	call   c010112e <lpt_putc_sub>
+        lpt_putc_sub('\b');
+c01011d8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c01011df:	e8 4a ff ff ff       	call   c010112e <lpt_putc_sub>
+    }
+}
+c01011e4:	c9                   	leave  
+c01011e5:	c3                   	ret    
+
+c01011e6 <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c01011e6:	55                   	push   %ebp
+c01011e7:	89 e5                	mov    %esp,%ebp
+c01011e9:	53                   	push   %ebx
+c01011ea:	83 ec 34             	sub    $0x34,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c01011ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011f0:	b0 00                	mov    $0x0,%al
+c01011f2:	85 c0                	test   %eax,%eax
+c01011f4:	75 07                	jne    c01011fd <cga_putc+0x17>
+        c |= 0x0700;
+c01011f6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c01011fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101200:	0f b6 c0             	movzbl %al,%eax
+c0101203:	83 f8 0a             	cmp    $0xa,%eax
+c0101206:	74 4c                	je     c0101254 <cga_putc+0x6e>
+c0101208:	83 f8 0d             	cmp    $0xd,%eax
+c010120b:	74 57                	je     c0101264 <cga_putc+0x7e>
+c010120d:	83 f8 08             	cmp    $0x8,%eax
+c0101210:	0f 85 88 00 00 00    	jne    c010129e <cga_putc+0xb8>
+    case '\b':
+        if (crt_pos > 0) {
+c0101216:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c010121d:	66 85 c0             	test   %ax,%ax
+c0101220:	74 30                	je     c0101252 <cga_putc+0x6c>
+            crt_pos --;
+c0101222:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c0101229:	83 e8 01             	sub    $0x1,%eax
+c010122c:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101232:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
+c0101237:	0f b7 15 44 28 1c c0 	movzwl 0xc01c2844,%edx
+c010123e:	0f b7 d2             	movzwl %dx,%edx
+c0101241:	01 d2                	add    %edx,%edx
+c0101243:	01 c2                	add    %eax,%edx
+c0101245:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101248:	b0 00                	mov    $0x0,%al
+c010124a:	83 c8 20             	or     $0x20,%eax
+c010124d:	66 89 02             	mov    %ax,(%edx)
+        }
+        break;
+c0101250:	eb 72                	jmp    c01012c4 <cga_putc+0xde>
+c0101252:	eb 70                	jmp    c01012c4 <cga_putc+0xde>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101254:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c010125b:	83 c0 50             	add    $0x50,%eax
+c010125e:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101264:	0f b7 1d 44 28 1c c0 	movzwl 0xc01c2844,%ebx
+c010126b:	0f b7 0d 44 28 1c c0 	movzwl 0xc01c2844,%ecx
+c0101272:	0f b7 c1             	movzwl %cx,%eax
+c0101275:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c010127b:	c1 e8 10             	shr    $0x10,%eax
+c010127e:	89 c2                	mov    %eax,%edx
+c0101280:	66 c1 ea 06          	shr    $0x6,%dx
+c0101284:	89 d0                	mov    %edx,%eax
+c0101286:	c1 e0 02             	shl    $0x2,%eax
+c0101289:	01 d0                	add    %edx,%eax
+c010128b:	c1 e0 04             	shl    $0x4,%eax
+c010128e:	29 c1                	sub    %eax,%ecx
+c0101290:	89 ca                	mov    %ecx,%edx
+c0101292:	89 d8                	mov    %ebx,%eax
+c0101294:	29 d0                	sub    %edx,%eax
+c0101296:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
+        break;
+c010129c:	eb 26                	jmp    c01012c4 <cga_putc+0xde>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c010129e:	8b 0d 40 28 1c c0    	mov    0xc01c2840,%ecx
+c01012a4:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c01012ab:	8d 50 01             	lea    0x1(%eax),%edx
+c01012ae:	66 89 15 44 28 1c c0 	mov    %dx,0xc01c2844
+c01012b5:	0f b7 c0             	movzwl %ax,%eax
+c01012b8:	01 c0                	add    %eax,%eax
+c01012ba:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c01012bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01012c0:	66 89 02             	mov    %ax,(%edx)
+        break;
+c01012c3:	90                   	nop
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c01012c4:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c01012cb:	66 3d cf 07          	cmp    $0x7cf,%ax
+c01012cf:	76 5b                	jbe    c010132c <cga_putc+0x146>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c01012d1:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
+c01012d6:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c01012dc:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
+c01012e1:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
+c01012e8:	00 
+c01012e9:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01012ed:	89 04 24             	mov    %eax,(%esp)
+c01012f0:	e8 0d c2 00 00       	call   c010d502 <memmove>
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c01012f5:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c01012fc:	eb 15                	jmp    c0101313 <cga_putc+0x12d>
+            crt_buf[i] = 0x0700 | ' ';
+c01012fe:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
+c0101303:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101306:	01 d2                	add    %edx,%edx
+c0101308:	01 d0                	add    %edx,%eax
+c010130a:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c010130f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101313:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c010131a:	7e e2                	jle    c01012fe <cga_putc+0x118>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c010131c:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c0101323:	83 e8 50             	sub    $0x50,%eax
+c0101326:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c010132c:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c0101333:	0f b7 c0             	movzwl %ax,%eax
+c0101336:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c010133a:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+c010133e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101342:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101346:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101347:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c010134e:	66 c1 e8 08          	shr    $0x8,%ax
+c0101352:	0f b6 c0             	movzbl %al,%eax
+c0101355:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
+c010135c:	83 c2 01             	add    $0x1,%edx
+c010135f:	0f b7 d2             	movzwl %dx,%edx
+c0101362:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
+c0101366:	88 45 ed             	mov    %al,-0x13(%ebp)
+c0101369:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010136d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101371:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101372:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
+c0101379:	0f b7 c0             	movzwl %ax,%eax
+c010137c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101380:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+c0101384:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101388:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010138c:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c010138d:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
+c0101394:	0f b6 c0             	movzbl %al,%eax
+c0101397:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
+c010139e:	83 c2 01             	add    $0x1,%edx
+c01013a1:	0f b7 d2             	movzwl %dx,%edx
+c01013a4:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c01013a8:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c01013ab:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01013af:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01013b3:	ee                   	out    %al,(%dx)
+}
+c01013b4:	83 c4 34             	add    $0x34,%esp
+c01013b7:	5b                   	pop    %ebx
+c01013b8:	5d                   	pop    %ebp
+c01013b9:	c3                   	ret    
+
+c01013ba <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c01013ba:	55                   	push   %ebp
+c01013bb:	89 e5                	mov    %esp,%ebp
+c01013bd:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01013c7:	eb 09                	jmp    c01013d2 <serial_putc_sub+0x18>
+        delay();
+c01013c9:	e8 4f fb ff ff       	call   c0100f1d <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01013d2:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01013d8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01013dc:	89 c2                	mov    %eax,%edx
+c01013de:	ec                   	in     (%dx),%al
+c01013df:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01013e2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01013e6:	0f b6 c0             	movzbl %al,%eax
+c01013e9:	83 e0 20             	and    $0x20,%eax
+c01013ec:	85 c0                	test   %eax,%eax
+c01013ee:	75 09                	jne    c01013f9 <serial_putc_sub+0x3f>
+c01013f0:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c01013f7:	7e d0                	jle    c01013c9 <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c01013f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01013fc:	0f b6 c0             	movzbl %al,%eax
+c01013ff:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+c0101405:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101408:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010140c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101410:	ee                   	out    %al,(%dx)
+}
+c0101411:	c9                   	leave  
+c0101412:	c3                   	ret    
+
+c0101413 <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101413:	55                   	push   %ebp
+c0101414:	89 e5                	mov    %esp,%ebp
+c0101416:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c0101419:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c010141d:	74 0d                	je     c010142c <serial_putc+0x19>
+        serial_putc_sub(c);
+c010141f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101422:	89 04 24             	mov    %eax,(%esp)
+c0101425:	e8 90 ff ff ff       	call   c01013ba <serial_putc_sub>
+c010142a:	eb 24                	jmp    c0101450 <serial_putc+0x3d>
+    }
+    else {
+        serial_putc_sub('\b');
+c010142c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101433:	e8 82 ff ff ff       	call   c01013ba <serial_putc_sub>
+        serial_putc_sub(' ');
+c0101438:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010143f:	e8 76 ff ff ff       	call   c01013ba <serial_putc_sub>
+        serial_putc_sub('\b');
+c0101444:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c010144b:	e8 6a ff ff ff       	call   c01013ba <serial_putc_sub>
+    }
+}
+c0101450:	c9                   	leave  
+c0101451:	c3                   	ret    
+
+c0101452 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101452:	55                   	push   %ebp
+c0101453:	89 e5                	mov    %esp,%ebp
+c0101455:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101458:	eb 33                	jmp    c010148d <cons_intr+0x3b>
+        if (c != 0) {
+c010145a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010145e:	74 2d                	je     c010148d <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101460:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
+c0101465:	8d 50 01             	lea    0x1(%eax),%edx
+c0101468:	89 15 64 2a 1c c0    	mov    %edx,0xc01c2a64
+c010146e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101471:	88 90 60 28 1c c0    	mov    %dl,-0x3fe3d7a0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101477:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
+c010147c:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101481:	75 0a                	jne    c010148d <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101483:	c7 05 64 2a 1c c0 00 	movl   $0x0,0xc01c2a64
+c010148a:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c010148d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101490:	ff d0                	call   *%eax
+c0101492:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101495:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101499:	75 bf                	jne    c010145a <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c010149b:	c9                   	leave  
+c010149c:	c3                   	ret    
+
+c010149d <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c010149d:	55                   	push   %ebp
+c010149e:	89 e5                	mov    %esp,%ebp
+c01014a0:	83 ec 10             	sub    $0x10,%esp
+c01014a3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014a9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01014ad:	89 c2                	mov    %eax,%edx
+c01014af:	ec                   	in     (%dx),%al
+c01014b0:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01014b3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c01014b7:	0f b6 c0             	movzbl %al,%eax
+c01014ba:	83 e0 01             	and    $0x1,%eax
+c01014bd:	85 c0                	test   %eax,%eax
+c01014bf:	75 07                	jne    c01014c8 <serial_proc_data+0x2b>
+        return -1;
+c01014c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01014c6:	eb 2a                	jmp    c01014f2 <serial_proc_data+0x55>
+c01014c8:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014ce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01014d2:	89 c2                	mov    %eax,%edx
+c01014d4:	ec                   	in     (%dx),%al
+c01014d5:	88 45 f5             	mov    %al,-0xb(%ebp)
+    return data;
+c01014d8:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c01014dc:	0f b6 c0             	movzbl %al,%eax
+c01014df:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c01014e2:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c01014e6:	75 07                	jne    c01014ef <serial_proc_data+0x52>
+        c = '\b';
+c01014e8:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c01014ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01014f2:	c9                   	leave  
+c01014f3:	c3                   	ret    
+
+c01014f4 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c01014f4:	55                   	push   %ebp
+c01014f5:	89 e5                	mov    %esp,%ebp
+c01014f7:	83 ec 18             	sub    $0x18,%esp
+    if (serial_exists) {
+c01014fa:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
+c01014ff:	85 c0                	test   %eax,%eax
+c0101501:	74 0c                	je     c010150f <serial_intr+0x1b>
+        cons_intr(serial_proc_data);
+c0101503:	c7 04 24 9d 14 10 c0 	movl   $0xc010149d,(%esp)
+c010150a:	e8 43 ff ff ff       	call   c0101452 <cons_intr>
+    }
+}
+c010150f:	c9                   	leave  
+c0101510:	c3                   	ret    
+
+c0101511 <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101511:	55                   	push   %ebp
+c0101512:	89 e5                	mov    %esp,%ebp
+c0101514:	83 ec 38             	sub    $0x38,%esp
+c0101517:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010151d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101521:	89 c2                	mov    %eax,%edx
+c0101523:	ec                   	in     (%dx),%al
+c0101524:	88 45 ef             	mov    %al,-0x11(%ebp)
+    return data;
+c0101527:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c010152b:	0f b6 c0             	movzbl %al,%eax
+c010152e:	83 e0 01             	and    $0x1,%eax
+c0101531:	85 c0                	test   %eax,%eax
+c0101533:	75 0a                	jne    c010153f <kbd_proc_data+0x2e>
+        return -1;
+c0101535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010153a:	e9 59 01 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+c010153f:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101545:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101549:	89 c2                	mov    %eax,%edx
+c010154b:	ec                   	in     (%dx),%al
+c010154c:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c010154f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101553:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101556:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c010155a:	75 17                	jne    c0101573 <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c010155c:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c0101561:	83 c8 40             	or     $0x40,%eax
+c0101564:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
+        return 0;
+c0101569:	b8 00 00 00 00       	mov    $0x0,%eax
+c010156e:	e9 25 01 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+    } else if (data & 0x80) {
+c0101573:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101577:	84 c0                	test   %al,%al
+c0101579:	79 47                	jns    c01015c2 <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c010157b:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c0101580:	83 e0 40             	and    $0x40,%eax
+c0101583:	85 c0                	test   %eax,%eax
+c0101585:	75 09                	jne    c0101590 <kbd_proc_data+0x7f>
+c0101587:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010158b:	83 e0 7f             	and    $0x7f,%eax
+c010158e:	eb 04                	jmp    c0101594 <kbd_proc_data+0x83>
+c0101590:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101594:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101597:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010159b:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
+c01015a2:	83 c8 40             	or     $0x40,%eax
+c01015a5:	0f b6 c0             	movzbl %al,%eax
+c01015a8:	f7 d0                	not    %eax
+c01015aa:	89 c2                	mov    %eax,%edx
+c01015ac:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c01015b1:	21 d0                	and    %edx,%eax
+c01015b3:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
+        return 0;
+c01015b8:	b8 00 00 00 00       	mov    $0x0,%eax
+c01015bd:	e9 d6 00 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+    } else if (shift & E0ESC) {
+c01015c2:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c01015c7:	83 e0 40             	and    $0x40,%eax
+c01015ca:	85 c0                	test   %eax,%eax
+c01015cc:	74 11                	je     c01015df <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c01015ce:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c01015d2:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c01015d7:	83 e0 bf             	and    $0xffffffbf,%eax
+c01015da:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
+    }
+
+    shift |= shiftcode[data];
+c01015df:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015e3:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
+c01015ea:	0f b6 d0             	movzbl %al,%edx
+c01015ed:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c01015f2:	09 d0                	or     %edx,%eax
+c01015f4:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
+    shift ^= togglecode[data];
+c01015f9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015fd:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
+c0101604:	0f b6 d0             	movzbl %al,%edx
+c0101607:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c010160c:	31 d0                	xor    %edx,%eax
+c010160e:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101613:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c0101618:	83 e0 03             	and    $0x3,%eax
+c010161b:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
+c0101622:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101626:	01 d0                	add    %edx,%eax
+c0101628:	0f b6 00             	movzbl (%eax),%eax
+c010162b:	0f b6 c0             	movzbl %al,%eax
+c010162e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101631:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c0101636:	83 e0 08             	and    $0x8,%eax
+c0101639:	85 c0                	test   %eax,%eax
+c010163b:	74 22                	je     c010165f <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c010163d:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101641:	7e 0c                	jle    c010164f <kbd_proc_data+0x13e>
+c0101643:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101647:	7f 06                	jg     c010164f <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c0101649:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c010164d:	eb 10                	jmp    c010165f <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c010164f:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101653:	7e 0a                	jle    c010165f <kbd_proc_data+0x14e>
+c0101655:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101659:	7f 04                	jg     c010165f <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c010165b:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c010165f:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
+c0101664:	f7 d0                	not    %eax
+c0101666:	83 e0 06             	and    $0x6,%eax
+c0101669:	85 c0                	test   %eax,%eax
+c010166b:	75 28                	jne    c0101695 <kbd_proc_data+0x184>
+c010166d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101674:	75 1f                	jne    c0101695 <kbd_proc_data+0x184>
+        cprintf("Rebooting!\n");
+c0101676:	c7 04 24 8d d9 10 c0 	movl   $0xc010d98d,(%esp)
+c010167d:	e8 d6 ec ff ff       	call   c0100358 <cprintf>
+c0101682:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
+c0101688:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010168c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+c0101690:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101694:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101695:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101698:	c9                   	leave  
+c0101699:	c3                   	ret    
+
+c010169a <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c010169a:	55                   	push   %ebp
+c010169b:	89 e5                	mov    %esp,%ebp
+c010169d:	83 ec 18             	sub    $0x18,%esp
+    cons_intr(kbd_proc_data);
+c01016a0:	c7 04 24 11 15 10 c0 	movl   $0xc0101511,(%esp)
+c01016a7:	e8 a6 fd ff ff       	call   c0101452 <cons_intr>
+}
+c01016ac:	c9                   	leave  
+c01016ad:	c3                   	ret    
+
+c01016ae <kbd_init>:
+
+static void
+kbd_init(void) {
+c01016ae:	55                   	push   %ebp
+c01016af:	89 e5                	mov    %esp,%ebp
+c01016b1:	83 ec 18             	sub    $0x18,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c01016b4:	e8 e1 ff ff ff       	call   c010169a <kbd_intr>
+    pic_enable(IRQ_KBD);
+c01016b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01016c0:	e8 b2 09 00 00       	call   c0102077 <pic_enable>
+}
+c01016c5:	c9                   	leave  
+c01016c6:	c3                   	ret    
+
+c01016c7 <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c01016c7:	55                   	push   %ebp
+c01016c8:	89 e5                	mov    %esp,%ebp
+c01016ca:	83 ec 18             	sub    $0x18,%esp
+    cga_init();
+c01016cd:	e8 93 f8 ff ff       	call   c0100f65 <cga_init>
+    serial_init();
+c01016d2:	e8 74 f9 ff ff       	call   c010104b <serial_init>
+    kbd_init();
+c01016d7:	e8 d2 ff ff ff       	call   c01016ae <kbd_init>
+    if (!serial_exists) {
+c01016dc:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
+c01016e1:	85 c0                	test   %eax,%eax
+c01016e3:	75 0c                	jne    c01016f1 <cons_init+0x2a>
+        cprintf("serial port does not exist!!\n");
+c01016e5:	c7 04 24 99 d9 10 c0 	movl   $0xc010d999,(%esp)
+c01016ec:	e8 67 ec ff ff       	call   c0100358 <cprintf>
+    }
+}
+c01016f1:	c9                   	leave  
+c01016f2:	c3                   	ret    
+
+c01016f3 <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c01016f3:	55                   	push   %ebp
+c01016f4:	89 e5                	mov    %esp,%ebp
+c01016f6:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01016f9:	e8 e2 f7 ff ff       	call   c0100ee0 <__intr_save>
+c01016fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101701:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101704:	89 04 24             	mov    %eax,(%esp)
+c0101707:	e8 9b fa ff ff       	call   c01011a7 <lpt_putc>
+        cga_putc(c);
+c010170c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010170f:	89 04 24             	mov    %eax,(%esp)
+c0101712:	e8 cf fa ff ff       	call   c01011e6 <cga_putc>
+        serial_putc(c);
+c0101717:	8b 45 08             	mov    0x8(%ebp),%eax
+c010171a:	89 04 24             	mov    %eax,(%esp)
+c010171d:	e8 f1 fc ff ff       	call   c0101413 <serial_putc>
+    }
+    local_intr_restore(intr_flag);
+c0101722:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101725:	89 04 24             	mov    %eax,(%esp)
+c0101728:	e8 dd f7 ff ff       	call   c0100f0a <__intr_restore>
+}
+c010172d:	c9                   	leave  
+c010172e:	c3                   	ret    
+
+c010172f <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c010172f:	55                   	push   %ebp
+c0101730:	89 e5                	mov    %esp,%ebp
+c0101732:	83 ec 28             	sub    $0x28,%esp
+    int c = 0;
+c0101735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010173c:	e8 9f f7 ff ff       	call   c0100ee0 <__intr_save>
+c0101741:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101744:	e8 ab fd ff ff       	call   c01014f4 <serial_intr>
+        kbd_intr();
+c0101749:	e8 4c ff ff ff       	call   c010169a <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c010174e:	8b 15 60 2a 1c c0    	mov    0xc01c2a60,%edx
+c0101754:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
+c0101759:	39 c2                	cmp    %eax,%edx
+c010175b:	74 31                	je     c010178e <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c010175d:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
+c0101762:	8d 50 01             	lea    0x1(%eax),%edx
+c0101765:	89 15 60 2a 1c c0    	mov    %edx,0xc01c2a60
+c010176b:	0f b6 80 60 28 1c c0 	movzbl -0x3fe3d7a0(%eax),%eax
+c0101772:	0f b6 c0             	movzbl %al,%eax
+c0101775:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101778:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
+c010177d:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101782:	75 0a                	jne    c010178e <cons_getc+0x5f>
+                cons.rpos = 0;
+c0101784:	c7 05 60 2a 1c c0 00 	movl   $0x0,0xc01c2a60
+c010178b:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010178e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0101791:	89 04 24             	mov    %eax,(%esp)
+c0101794:	e8 71 f7 ff ff       	call   c0100f0a <__intr_restore>
+    return c;
+c0101799:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010179c:	c9                   	leave  
+c010179d:	c3                   	ret    
+
+c010179e <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c010179e:	55                   	push   %ebp
+c010179f:	89 e5                	mov    %esp,%ebp
+c01017a1:	83 ec 14             	sub    $0x14,%esp
+c01017a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01017a7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c01017ab:	90                   	nop
+c01017ac:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c01017b0:	83 c0 07             	add    $0x7,%eax
+c01017b3:	0f b7 c0             	movzwl %ax,%eax
+c01017b6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01017ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01017be:	89 c2                	mov    %eax,%edx
+c01017c0:	ec                   	in     (%dx),%al
+c01017c1:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01017c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01017c8:	0f b6 c0             	movzbl %al,%eax
+c01017cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01017ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017d1:	25 80 00 00 00       	and    $0x80,%eax
+c01017d6:	85 c0                	test   %eax,%eax
+c01017d8:	75 d2                	jne    c01017ac <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c01017da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01017de:	74 11                	je     c01017f1 <ide_wait_ready+0x53>
+c01017e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017e3:	83 e0 21             	and    $0x21,%eax
+c01017e6:	85 c0                	test   %eax,%eax
+c01017e8:	74 07                	je     c01017f1 <ide_wait_ready+0x53>
+        return -1;
+c01017ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01017ef:	eb 05                	jmp    c01017f6 <ide_wait_ready+0x58>
+    }
+    return 0;
+c01017f1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01017f6:	c9                   	leave  
+c01017f7:	c3                   	ret    
+
+c01017f8 <ide_init>:
+
+void
+ide_init(void) {
+c01017f8:	55                   	push   %ebp
+c01017f9:	89 e5                	mov    %esp,%ebp
+c01017fb:	57                   	push   %edi
+c01017fc:	53                   	push   %ebx
+c01017fd:	81 ec 50 02 00 00    	sub    $0x250,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101803:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0101809:	e9 d6 02 00 00       	jmp    c0101ae4 <ide_init+0x2ec>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c010180e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101812:	c1 e0 03             	shl    $0x3,%eax
+c0101815:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010181c:	29 c2                	sub    %eax,%edx
+c010181e:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101824:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010182b:	66 d1 e8             	shr    %ax
+c010182e:	0f b7 c0             	movzwl %ax,%eax
+c0101831:	0f b7 04 85 b8 d9 10 	movzwl -0x3fef2648(,%eax,4),%eax
+c0101838:	c0 
+c0101839:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c010183d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101841:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101848:	00 
+c0101849:	89 04 24             	mov    %eax,(%esp)
+c010184c:	e8 4d ff ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0101851:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101855:	83 e0 01             	and    $0x1,%eax
+c0101858:	c1 e0 04             	shl    $0x4,%eax
+c010185b:	83 c8 e0             	or     $0xffffffe0,%eax
+c010185e:	0f b6 c0             	movzbl %al,%eax
+c0101861:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101865:	83 c2 06             	add    $0x6,%edx
+c0101868:	0f b7 d2             	movzwl %dx,%edx
+c010186b:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
+c010186f:	88 45 d1             	mov    %al,-0x2f(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101872:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c0101876:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c010187a:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c010187b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010187f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101886:	00 
+c0101887:	89 04 24             	mov    %eax,(%esp)
+c010188a:	e8 0f ff ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c010188f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101893:	83 c0 07             	add    $0x7,%eax
+c0101896:	0f b7 c0             	movzwl %ax,%eax
+c0101899:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
+c010189d:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
+c01018a1:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01018a5:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01018a9:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c01018aa:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01018b5:	00 
+c01018b6:	89 04 24             	mov    %eax,(%esp)
+c01018b9:	e8 e0 fe ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c01018be:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018c2:	83 c0 07             	add    $0x7,%eax
+c01018c5:	0f b7 c0             	movzwl %ax,%eax
+c01018c8:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01018cc:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c01018d0:	89 c2                	mov    %eax,%edx
+c01018d2:	ec                   	in     (%dx),%al
+c01018d3:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c01018d6:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01018da:	84 c0                	test   %al,%al
+c01018dc:	0f 84 f7 01 00 00    	je     c0101ad9 <ide_init+0x2e1>
+c01018e2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01018ed:	00 
+c01018ee:	89 04 24             	mov    %eax,(%esp)
+c01018f1:	e8 a8 fe ff ff       	call   c010179e <ide_wait_ready>
+c01018f6:	85 c0                	test   %eax,%eax
+c01018f8:	0f 85 db 01 00 00    	jne    c0101ad9 <ide_init+0x2e1>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c01018fe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101902:	c1 e0 03             	shl    $0x3,%eax
+c0101905:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010190c:	29 c2                	sub    %eax,%edx
+c010190e:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101914:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0101917:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010191b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010191e:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101924:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0101927:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c010192e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0101931:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0101934:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0101937:	89 cb                	mov    %ecx,%ebx
+c0101939:	89 df                	mov    %ebx,%edi
+c010193b:	89 c1                	mov    %eax,%ecx
+c010193d:	fc                   	cld    
+c010193e:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101940:	89 c8                	mov    %ecx,%eax
+c0101942:	89 fb                	mov    %edi,%ebx
+c0101944:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0101947:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c010194a:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101950:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0101953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101956:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c010195c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c010195f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0101962:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101967:	85 c0                	test   %eax,%eax
+c0101969:	74 0e                	je     c0101979 <ide_init+0x181>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010196b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010196e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0101974:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0101977:	eb 09                	jmp    c0101982 <ide_init+0x18a>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0101979:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010197c:	8b 40 78             	mov    0x78(%eax),%eax
+c010197f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0101982:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101986:	c1 e0 03             	shl    $0x3,%eax
+c0101989:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101990:	29 c2                	sub    %eax,%edx
+c0101992:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
+c0101998:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010199b:	89 42 04             	mov    %eax,0x4(%edx)
+        ide_devices[ideno].size = sectors;
+c010199e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019a2:	c1 e0 03             	shl    $0x3,%eax
+c01019a5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01019ac:	29 c2                	sub    %eax,%edx
+c01019ae:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
+c01019b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01019b7:	89 42 08             	mov    %eax,0x8(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c01019ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01019bd:	83 c0 62             	add    $0x62,%eax
+c01019c0:	0f b7 00             	movzwl (%eax),%eax
+c01019c3:	0f b7 c0             	movzwl %ax,%eax
+c01019c6:	25 00 02 00 00       	and    $0x200,%eax
+c01019cb:	85 c0                	test   %eax,%eax
+c01019cd:	75 24                	jne    c01019f3 <ide_init+0x1fb>
+c01019cf:	c7 44 24 0c c0 d9 10 	movl   $0xc010d9c0,0xc(%esp)
+c01019d6:	c0 
+c01019d7:	c7 44 24 08 03 da 10 	movl   $0xc010da03,0x8(%esp)
+c01019de:	c0 
+c01019df:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c01019e6:	00 
+c01019e7:	c7 04 24 18 da 10 c0 	movl   $0xc010da18,(%esp)
+c01019ee:	e8 ce f3 ff ff       	call   c0100dc1 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c01019f3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019f7:	c1 e0 03             	shl    $0x3,%eax
+c01019fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101a01:	29 c2                	sub    %eax,%edx
+c0101a03:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101a09:	83 c0 0c             	add    $0xc,%eax
+c0101a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0101a0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101a12:	83 c0 36             	add    $0x36,%eax
+c0101a15:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        unsigned int i, length = 40;
+c0101a18:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
+        for (i = 0; i < length; i += 2) {
+c0101a1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0101a26:	eb 34                	jmp    c0101a5c <ide_init+0x264>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c0101a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a2e:	01 c2                	add    %eax,%edx
+c0101a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a33:	8d 48 01             	lea    0x1(%eax),%ecx
+c0101a36:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101a39:	01 c8                	add    %ecx,%eax
+c0101a3b:	0f b6 00             	movzbl (%eax),%eax
+c0101a3e:	88 02                	mov    %al,(%edx)
+c0101a40:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a43:	8d 50 01             	lea    0x1(%eax),%edx
+c0101a46:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0101a49:	01 c2                	add    %eax,%edx
+c0101a4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a4e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+c0101a51:	01 c8                	add    %ecx,%eax
+c0101a53:	0f b6 00             	movzbl (%eax),%eax
+c0101a56:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c0101a58:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c0101a5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a5f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0101a62:	72 c4                	jb     c0101a28 <ide_init+0x230>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a67:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a6a:	01 d0                	add    %edx,%eax
+c0101a6c:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c0101a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a72:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101a75:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0101a78:	85 c0                	test   %eax,%eax
+c0101a7a:	74 0f                	je     c0101a8b <ide_init+0x293>
+c0101a7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a82:	01 d0                	add    %edx,%eax
+c0101a84:	0f b6 00             	movzbl (%eax),%eax
+c0101a87:	3c 20                	cmp    $0x20,%al
+c0101a89:	74 d9                	je     c0101a64 <ide_init+0x26c>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c0101a8b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101a8f:	c1 e0 03             	shl    $0x3,%eax
+c0101a92:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101a99:	29 c2                	sub    %eax,%edx
+c0101a9b:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101aa1:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101aa8:	c1 e0 03             	shl    $0x3,%eax
+c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101ab2:	29 c2                	sub    %eax,%edx
+c0101ab4:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101aba:	8b 50 08             	mov    0x8(%eax),%edx
+c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101ac1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0101ac5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0101ac9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0101acd:	c7 04 24 2a da 10 c0 	movl   $0xc010da2a,(%esp)
+c0101ad4:	e8 7f e8 ff ff       	call   c0100358 <cprintf>
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101ad9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101add:	83 c0 01             	add    $0x1,%eax
+c0101ae0:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c0101ae4:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c0101ae9:	0f 86 1f fd ff ff    	jbe    c010180e <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c0101aef:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
+c0101af6:	e8 7c 05 00 00       	call   c0102077 <pic_enable>
+    pic_enable(IRQ_IDE2);
+c0101afb:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
+c0101b02:	e8 70 05 00 00       	call   c0102077 <pic_enable>
+}
+c0101b07:	81 c4 50 02 00 00    	add    $0x250,%esp
+c0101b0d:	5b                   	pop    %ebx
+c0101b0e:	5f                   	pop    %edi
+c0101b0f:	5d                   	pop    %ebp
+c0101b10:	c3                   	ret    
+
+c0101b11 <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c0101b11:	55                   	push   %ebp
+c0101b12:	89 e5                	mov    %esp,%ebp
+c0101b14:	83 ec 04             	sub    $0x4,%esp
+c0101b17:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b1a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c0101b1e:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c0101b23:	77 24                	ja     c0101b49 <ide_device_valid+0x38>
+c0101b25:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b29:	c1 e0 03             	shl    $0x3,%eax
+c0101b2c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101b33:	29 c2                	sub    %eax,%edx
+c0101b35:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101b3b:	0f b6 00             	movzbl (%eax),%eax
+c0101b3e:	84 c0                	test   %al,%al
+c0101b40:	74 07                	je     c0101b49 <ide_device_valid+0x38>
+c0101b42:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101b47:	eb 05                	jmp    c0101b4e <ide_device_valid+0x3d>
+c0101b49:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101b4e:	c9                   	leave  
+c0101b4f:	c3                   	ret    
+
+c0101b50 <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c0101b50:	55                   	push   %ebp
+c0101b51:	89 e5                	mov    %esp,%ebp
+c0101b53:	83 ec 08             	sub    $0x8,%esp
+c0101b56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b59:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c0101b5d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b61:	89 04 24             	mov    %eax,(%esp)
+c0101b64:	e8 a8 ff ff ff       	call   c0101b11 <ide_device_valid>
+c0101b69:	85 c0                	test   %eax,%eax
+c0101b6b:	74 1b                	je     c0101b88 <ide_device_size+0x38>
+        return ide_devices[ideno].size;
+c0101b6d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b71:	c1 e0 03             	shl    $0x3,%eax
+c0101b74:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101b7b:	29 c2                	sub    %eax,%edx
+c0101b7d:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101b83:	8b 40 08             	mov    0x8(%eax),%eax
+c0101b86:	eb 05                	jmp    c0101b8d <ide_device_size+0x3d>
+    }
+    return 0;
+c0101b88:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101b8d:	c9                   	leave  
+c0101b8e:	c3                   	ret    
+
+c0101b8f <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c0101b8f:	55                   	push   %ebp
+c0101b90:	89 e5                	mov    %esp,%ebp
+c0101b92:	57                   	push   %edi
+c0101b93:	53                   	push   %ebx
+c0101b94:	83 ec 50             	sub    $0x50,%esp
+c0101b97:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b9a:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101b9e:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101ba5:	77 24                	ja     c0101bcb <ide_read_secs+0x3c>
+c0101ba7:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101bac:	77 1d                	ja     c0101bcb <ide_read_secs+0x3c>
+c0101bae:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101bb2:	c1 e0 03             	shl    $0x3,%eax
+c0101bb5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101bbc:	29 c2                	sub    %eax,%edx
+c0101bbe:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101bc4:	0f b6 00             	movzbl (%eax),%eax
+c0101bc7:	84 c0                	test   %al,%al
+c0101bc9:	75 24                	jne    c0101bef <ide_read_secs+0x60>
+c0101bcb:	c7 44 24 0c 48 da 10 	movl   $0xc010da48,0xc(%esp)
+c0101bd2:	c0 
+c0101bd3:	c7 44 24 08 03 da 10 	movl   $0xc010da03,0x8(%esp)
+c0101bda:	c0 
+c0101bdb:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c0101be2:	00 
+c0101be3:	c7 04 24 18 da 10 c0 	movl   $0xc010da18,(%esp)
+c0101bea:	e8 d2 f1 ff ff       	call   c0100dc1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101bef:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101bf6:	77 0f                	ja     c0101c07 <ide_read_secs+0x78>
+c0101bf8:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101bfb:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101bfe:	01 d0                	add    %edx,%eax
+c0101c00:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101c05:	76 24                	jbe    c0101c2b <ide_read_secs+0x9c>
+c0101c07:	c7 44 24 0c 70 da 10 	movl   $0xc010da70,0xc(%esp)
+c0101c0e:	c0 
+c0101c0f:	c7 44 24 08 03 da 10 	movl   $0xc010da03,0x8(%esp)
+c0101c16:	c0 
+c0101c17:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c0101c1e:	00 
+c0101c1f:	c7 04 24 18 da 10 c0 	movl   $0xc010da18,(%esp)
+c0101c26:	e8 96 f1 ff ff       	call   c0100dc1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101c2b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c2f:	66 d1 e8             	shr    %ax
+c0101c32:	0f b7 c0             	movzwl %ax,%eax
+c0101c35:	0f b7 04 85 b8 d9 10 	movzwl -0x3fef2648(,%eax,4),%eax
+c0101c3c:	c0 
+c0101c3d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101c41:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c45:	66 d1 e8             	shr    %ax
+c0101c48:	0f b7 c0             	movzwl %ax,%eax
+c0101c4b:	0f b7 04 85 ba d9 10 	movzwl -0x3fef2646(,%eax,4),%eax
+c0101c52:	c0 
+c0101c53:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101c57:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101c5b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101c62:	00 
+c0101c63:	89 04 24             	mov    %eax,(%esp)
+c0101c66:	e8 33 fb ff ff       	call   c010179e <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101c6b:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101c6f:	83 c0 02             	add    $0x2,%eax
+c0101c72:	0f b7 c0             	movzwl %ax,%eax
+c0101c75:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101c79:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101c7d:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101c81:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101c85:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101c86:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101c89:	0f b6 c0             	movzbl %al,%eax
+c0101c8c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101c90:	83 c2 02             	add    $0x2,%edx
+c0101c93:	0f b7 d2             	movzwl %dx,%edx
+c0101c96:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101c9a:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101c9d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101ca1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101ca5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101ca9:	0f b6 c0             	movzbl %al,%eax
+c0101cac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cb0:	83 c2 03             	add    $0x3,%edx
+c0101cb3:	0f b7 d2             	movzwl %dx,%edx
+c0101cb6:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101cba:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101cbd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101cc1:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101cc5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cc9:	c1 e8 08             	shr    $0x8,%eax
+c0101ccc:	0f b6 c0             	movzbl %al,%eax
+c0101ccf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cd3:	83 c2 04             	add    $0x4,%edx
+c0101cd6:	0f b7 d2             	movzwl %dx,%edx
+c0101cd9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101cdd:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101ce0:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101ce4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101ce8:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cec:	c1 e8 10             	shr    $0x10,%eax
+c0101cef:	0f b6 c0             	movzbl %al,%eax
+c0101cf2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cf6:	83 c2 05             	add    $0x5,%edx
+c0101cf9:	0f b7 d2             	movzwl %dx,%edx
+c0101cfc:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101d00:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101d03:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101d07:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101d0b:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101d0c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101d10:	83 e0 01             	and    $0x1,%eax
+c0101d13:	c1 e0 04             	shl    $0x4,%eax
+c0101d16:	89 c2                	mov    %eax,%edx
+c0101d18:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101d1b:	c1 e8 18             	shr    $0x18,%eax
+c0101d1e:	83 e0 0f             	and    $0xf,%eax
+c0101d21:	09 d0                	or     %edx,%eax
+c0101d23:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101d26:	0f b6 c0             	movzbl %al,%eax
+c0101d29:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101d2d:	83 c2 06             	add    $0x6,%edx
+c0101d30:	0f b7 d2             	movzwl %dx,%edx
+c0101d33:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101d37:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101d3a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101d3e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101d42:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c0101d43:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d47:	83 c0 07             	add    $0x7,%eax
+c0101d4a:	0f b7 c0             	movzwl %ax,%eax
+c0101d4d:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101d51:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
+c0101d55:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101d59:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101d5d:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101d5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101d65:	eb 5a                	jmp    c0101dc1 <ide_read_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101d67:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d6b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101d72:	00 
+c0101d73:	89 04 24             	mov    %eax,(%esp)
+c0101d76:	e8 23 fa ff ff       	call   c010179e <ide_wait_ready>
+c0101d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101d7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101d82:	74 02                	je     c0101d86 <ide_read_secs+0x1f7>
+            goto out;
+c0101d84:	eb 41                	jmp    c0101dc7 <ide_read_secs+0x238>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c0101d86:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101d8d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101d90:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101d93:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0101d9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0101d9d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101da0:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101da3:	89 cb                	mov    %ecx,%ebx
+c0101da5:	89 df                	mov    %ebx,%edi
+c0101da7:	89 c1                	mov    %eax,%ecx
+c0101da9:	fc                   	cld    
+c0101daa:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101dac:	89 c8                	mov    %ecx,%eax
+c0101dae:	89 fb                	mov    %edi,%ebx
+c0101db0:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101db3:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101db6:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101dba:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101dc1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101dc5:	75 a0                	jne    c0101d67 <ide_read_secs+0x1d8>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101dca:	83 c4 50             	add    $0x50,%esp
+c0101dcd:	5b                   	pop    %ebx
+c0101dce:	5f                   	pop    %edi
+c0101dcf:	5d                   	pop    %ebp
+c0101dd0:	c3                   	ret    
+
+c0101dd1 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c0101dd1:	55                   	push   %ebp
+c0101dd2:	89 e5                	mov    %esp,%ebp
+c0101dd4:	56                   	push   %esi
+c0101dd5:	53                   	push   %ebx
+c0101dd6:	83 ec 50             	sub    $0x50,%esp
+c0101dd9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101ddc:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101de0:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101de7:	77 24                	ja     c0101e0d <ide_write_secs+0x3c>
+c0101de9:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101dee:	77 1d                	ja     c0101e0d <ide_write_secs+0x3c>
+c0101df0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101df4:	c1 e0 03             	shl    $0x3,%eax
+c0101df7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101dfe:	29 c2                	sub    %eax,%edx
+c0101e00:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
+c0101e06:	0f b6 00             	movzbl (%eax),%eax
+c0101e09:	84 c0                	test   %al,%al
+c0101e0b:	75 24                	jne    c0101e31 <ide_write_secs+0x60>
+c0101e0d:	c7 44 24 0c 48 da 10 	movl   $0xc010da48,0xc(%esp)
+c0101e14:	c0 
+c0101e15:	c7 44 24 08 03 da 10 	movl   $0xc010da03,0x8(%esp)
+c0101e1c:	c0 
+c0101e1d:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0101e24:	00 
+c0101e25:	c7 04 24 18 da 10 c0 	movl   $0xc010da18,(%esp)
+c0101e2c:	e8 90 ef ff ff       	call   c0100dc1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101e31:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101e38:	77 0f                	ja     c0101e49 <ide_write_secs+0x78>
+c0101e3a:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101e3d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101e40:	01 d0                	add    %edx,%eax
+c0101e42:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101e47:	76 24                	jbe    c0101e6d <ide_write_secs+0x9c>
+c0101e49:	c7 44 24 0c 70 da 10 	movl   $0xc010da70,0xc(%esp)
+c0101e50:	c0 
+c0101e51:	c7 44 24 08 03 da 10 	movl   $0xc010da03,0x8(%esp)
+c0101e58:	c0 
+c0101e59:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0101e60:	00 
+c0101e61:	c7 04 24 18 da 10 c0 	movl   $0xc010da18,(%esp)
+c0101e68:	e8 54 ef ff ff       	call   c0100dc1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101e6d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101e71:	66 d1 e8             	shr    %ax
+c0101e74:	0f b7 c0             	movzwl %ax,%eax
+c0101e77:	0f b7 04 85 b8 d9 10 	movzwl -0x3fef2648(,%eax,4),%eax
+c0101e7e:	c0 
+c0101e7f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101e83:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101e87:	66 d1 e8             	shr    %ax
+c0101e8a:	0f b7 c0             	movzwl %ax,%eax
+c0101e8d:	0f b7 04 85 ba d9 10 	movzwl -0x3fef2646(,%eax,4),%eax
+c0101e94:	c0 
+c0101e95:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101e99:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101e9d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101ea4:	00 
+c0101ea5:	89 04 24             	mov    %eax,(%esp)
+c0101ea8:	e8 f1 f8 ff ff       	call   c010179e <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101ead:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101eb1:	83 c0 02             	add    $0x2,%eax
+c0101eb4:	0f b7 c0             	movzwl %ax,%eax
+c0101eb7:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101ebb:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101ebf:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101ec3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ec7:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101ec8:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101ecb:	0f b6 c0             	movzbl %al,%eax
+c0101ece:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ed2:	83 c2 02             	add    $0x2,%edx
+c0101ed5:	0f b7 d2             	movzwl %dx,%edx
+c0101ed8:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101edc:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101edf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101ee3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101ee7:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101eeb:	0f b6 c0             	movzbl %al,%eax
+c0101eee:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ef2:	83 c2 03             	add    $0x3,%edx
+c0101ef5:	0f b7 d2             	movzwl %dx,%edx
+c0101ef8:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101efc:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101eff:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101f03:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101f07:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101f08:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f0b:	c1 e8 08             	shr    $0x8,%eax
+c0101f0e:	0f b6 c0             	movzbl %al,%eax
+c0101f11:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f15:	83 c2 04             	add    $0x4,%edx
+c0101f18:	0f b7 d2             	movzwl %dx,%edx
+c0101f1b:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101f1f:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101f22:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101f26:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101f2a:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101f2b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f2e:	c1 e8 10             	shr    $0x10,%eax
+c0101f31:	0f b6 c0             	movzbl %al,%eax
+c0101f34:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f38:	83 c2 05             	add    $0x5,%edx
+c0101f3b:	0f b7 d2             	movzwl %dx,%edx
+c0101f3e:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101f42:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101f45:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101f49:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101f4d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101f4e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101f52:	83 e0 01             	and    $0x1,%eax
+c0101f55:	c1 e0 04             	shl    $0x4,%eax
+c0101f58:	89 c2                	mov    %eax,%edx
+c0101f5a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f5d:	c1 e8 18             	shr    $0x18,%eax
+c0101f60:	83 e0 0f             	and    $0xf,%eax
+c0101f63:	09 d0                	or     %edx,%eax
+c0101f65:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101f68:	0f b6 c0             	movzbl %al,%eax
+c0101f6b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f6f:	83 c2 06             	add    $0x6,%edx
+c0101f72:	0f b7 d2             	movzwl %dx,%edx
+c0101f75:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101f79:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101f7c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101f80:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101f84:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c0101f85:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101f89:	83 c0 07             	add    $0x7,%eax
+c0101f8c:	0f b7 c0             	movzwl %ax,%eax
+c0101f8f:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101f93:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
+c0101f97:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101f9b:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101f9f:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101fa0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101fa7:	eb 5a                	jmp    c0102003 <ide_write_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101fa9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fad:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101fb4:	00 
+c0101fb5:	89 04 24             	mov    %eax,(%esp)
+c0101fb8:	e8 e1 f7 ff ff       	call   c010179e <ide_wait_ready>
+c0101fbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101fc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101fc4:	74 02                	je     c0101fc8 <ide_write_secs+0x1f7>
+            goto out;
+c0101fc6:	eb 41                	jmp    c0102009 <ide_write_secs+0x238>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101fc8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fcc:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101fcf:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101fd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101fd5:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c0101fdc:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0101fdf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101fe2:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101fe5:	89 cb                	mov    %ecx,%ebx
+c0101fe7:	89 de                	mov    %ebx,%esi
+c0101fe9:	89 c1                	mov    %eax,%ecx
+c0101feb:	fc                   	cld    
+c0101fec:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c0101fee:	89 c8                	mov    %ecx,%eax
+c0101ff0:	89 f3                	mov    %esi,%ebx
+c0101ff2:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101ff5:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101ff8:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101ffc:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0102003:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0102007:	75 a0                	jne    c0101fa9 <ide_write_secs+0x1d8>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0102009:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010200c:	83 c4 50             	add    $0x50,%esp
+c010200f:	5b                   	pop    %ebx
+c0102010:	5e                   	pop    %esi
+c0102011:	5d                   	pop    %ebp
+c0102012:	c3                   	ret    
+
+c0102013 <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c0102013:	55                   	push   %ebp
+c0102014:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c0102016:	fb                   	sti    
+    sti();
+}
+c0102017:	5d                   	pop    %ebp
+c0102018:	c3                   	ret    
+
+c0102019 <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c0102019:	55                   	push   %ebp
+c010201a:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c010201c:	fa                   	cli    
+    cli();
+}
+c010201d:	5d                   	pop    %ebp
+c010201e:	c3                   	ret    
+
+c010201f <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c010201f:	55                   	push   %ebp
+c0102020:	89 e5                	mov    %esp,%ebp
+c0102022:	83 ec 14             	sub    $0x14,%esp
+c0102025:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102028:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c010202c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102030:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
+    if (did_init) {
+c0102036:	a1 60 2b 1c c0       	mov    0xc01c2b60,%eax
+c010203b:	85 c0                	test   %eax,%eax
+c010203d:	74 36                	je     c0102075 <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c010203f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102043:	0f b6 c0             	movzbl %al,%eax
+c0102046:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c010204c:	88 45 fd             	mov    %al,-0x3(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010204f:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c0102053:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0102057:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c010205c:	66 c1 e8 08          	shr    $0x8,%ax
+c0102060:	0f b6 c0             	movzbl %al,%eax
+c0102063:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c0102069:	88 45 f9             	mov    %al,-0x7(%ebp)
+c010206c:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0102070:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0102074:	ee                   	out    %al,(%dx)
+    }
+}
+c0102075:	c9                   	leave  
+c0102076:	c3                   	ret    
+
+c0102077 <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c0102077:	55                   	push   %ebp
+c0102078:	89 e5                	mov    %esp,%ebp
+c010207a:	83 ec 04             	sub    $0x4,%esp
+    pic_setmask(irq_mask & ~(1 << irq));
+c010207d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102080:	ba 01 00 00 00       	mov    $0x1,%edx
+c0102085:	89 c1                	mov    %eax,%ecx
+c0102087:	d3 e2                	shl    %cl,%edx
+c0102089:	89 d0                	mov    %edx,%eax
+c010208b:	f7 d0                	not    %eax
+c010208d:	89 c2                	mov    %eax,%edx
+c010208f:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c0102096:	21 d0                	and    %edx,%eax
+c0102098:	0f b7 c0             	movzwl %ax,%eax
+c010209b:	89 04 24             	mov    %eax,(%esp)
+c010209e:	e8 7c ff ff ff       	call   c010201f <pic_setmask>
+}
+c01020a3:	c9                   	leave  
+c01020a4:	c3                   	ret    
+
+c01020a5 <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c01020a5:	55                   	push   %ebp
+c01020a6:	89 e5                	mov    %esp,%ebp
+c01020a8:	83 ec 44             	sub    $0x44,%esp
+    did_init = 1;
+c01020ab:	c7 05 60 2b 1c c0 01 	movl   $0x1,0xc01c2b60
+c01020b2:	00 00 00 
+c01020b5:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c01020bb:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
+c01020bf:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c01020c3:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c01020c7:	ee                   	out    %al,(%dx)
+c01020c8:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c01020ce:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
+c01020d2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01020d6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01020da:	ee                   	out    %al,(%dx)
+c01020db:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
+c01020e1:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
+c01020e5:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c01020e9:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01020ed:	ee                   	out    %al,(%dx)
+c01020ee:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
+c01020f4:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
+c01020f8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01020fc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0102100:	ee                   	out    %al,(%dx)
+c0102101:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
+c0102107:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
+c010210b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010210f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102113:	ee                   	out    %al,(%dx)
+c0102114:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
+c010211a:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+c010211e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0102122:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0102126:	ee                   	out    %al,(%dx)
+c0102127:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c010212d:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
+c0102131:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0102135:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102139:	ee                   	out    %al,(%dx)
+c010213a:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
+c0102140:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
+c0102144:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0102148:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c010214c:	ee                   	out    %al,(%dx)
+c010214d:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
+c0102153:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
+c0102157:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010215b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010215f:	ee                   	out    %al,(%dx)
+c0102160:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
+c0102166:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
+c010216a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c010216e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0102172:	ee                   	out    %al,(%dx)
+c0102173:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
+c0102179:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
+c010217d:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0102181:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0102185:	ee                   	out    %al,(%dx)
+c0102186:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
+c010218c:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
+c0102190:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c0102194:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c0102198:	ee                   	out    %al,(%dx)
+c0102199:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
+c010219f:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
+c01021a3:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01021a7:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01021ab:	ee                   	out    %al,(%dx)
+c01021ac:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
+c01021b2:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
+c01021b6:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01021ba:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
+c01021be:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c01021bf:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c01021c6:	66 83 f8 ff          	cmp    $0xffff,%ax
+c01021ca:	74 12                	je     c01021de <pic_init+0x139>
+        pic_setmask(irq_mask);
+c01021cc:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c01021d3:	0f b7 c0             	movzwl %ax,%eax
+c01021d6:	89 04 24             	mov    %eax,(%esp)
+c01021d9:	e8 41 fe ff ff       	call   c010201f <pic_setmask>
+    }
+}
+c01021de:	c9                   	leave  
+c01021df:	c3                   	ret    
+
+c01021e0 <print_ticks>:
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c01021e0:	55                   	push   %ebp
+c01021e1:	89 e5                	mov    %esp,%ebp
+c01021e3:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c01021e6:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c01021ed:	00 
+c01021ee:	c7 04 24 c0 da 10 c0 	movl   $0xc010dac0,(%esp)
+c01021f5:	e8 5e e1 ff ff       	call   c0100358 <cprintf>
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c01021fa:	c7 04 24 ca da 10 c0 	movl   $0xc010daca,(%esp)
+c0102201:	e8 52 e1 ff ff       	call   c0100358 <cprintf>
+    panic("EOT: kernel seems ok.");
+c0102206:	c7 44 24 08 d8 da 10 	movl   $0xc010dad8,0x8(%esp)
+c010220d:	c0 
+c010220e:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+c0102215:	00 
+c0102216:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c010221d:	e8 9f eb ff ff       	call   c0100dc1 <__panic>
+
+c0102222 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c0102222:	55                   	push   %ebp
+c0102223:	89 e5                	mov    %esp,%ebp
+c0102225:	83 ec 10             	sub    $0x10,%esp
+      */
+     /* LAB5 2012011268 */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+c0102228:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
+	int i;
+	for (i = 0; i < 256; ++ i) {
+c010222f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0102236:	e9 97 01 00 00       	jmp    c01023d2 <idt_init+0x1b0>
+		if (i == T_SYSCALL) {
+c010223b:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
+c0102242:	0f 85 c4 00 00 00    	jne    c010230c <idt_init+0xea>
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+c0102248:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224b:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c0102252:	89 c2                	mov    %eax,%edx
+c0102254:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102257:	66 89 14 c5 80 2b 1c 	mov    %dx,-0x3fe3d480(,%eax,8)
+c010225e:	c0 
+c010225f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102262:	89 c2                	mov    %eax,%edx
+c0102264:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102267:	66 89 14 c5 82 2b 1c 	mov    %dx,-0x3fe3d47e(,%eax,8)
+c010226e:	c0 
+c010226f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102272:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
+c0102279:	c0 
+c010227a:	83 e2 e0             	and    $0xffffffe0,%edx
+c010227d:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
+c0102284:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102287:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
+c010228e:	c0 
+c010228f:	83 e2 1f             	and    $0x1f,%edx
+c0102292:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
+c0102299:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229c:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c01022a3:	c0 
+c01022a4:	83 ca 0f             	or     $0xf,%edx
+c01022a7:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c01022ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022b1:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c01022b8:	c0 
+c01022b9:	83 e2 ef             	and    $0xffffffef,%edx
+c01022bc:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c01022c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022c6:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c01022cd:	c0 
+c01022ce:	83 ca 60             	or     $0x60,%edx
+c01022d1:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c01022d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022db:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c01022e2:	c0 
+c01022e3:	83 ca 80             	or     $0xffffff80,%edx
+c01022e6:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c01022ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022f0:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c01022f7:	c1 e8 10             	shr    $0x10,%eax
+c01022fa:	89 c2                	mov    %eax,%edx
+c01022fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ff:	66 89 14 c5 86 2b 1c 	mov    %dx,-0x3fe3d47a(,%eax,8)
+c0102306:	c0 
+c0102307:	e9 c2 00 00 00       	jmp    c01023ce <idt_init+0x1ac>
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+c010230c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010230f:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c0102316:	89 c2                	mov    %eax,%edx
+c0102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010231b:	66 89 14 c5 80 2b 1c 	mov    %dx,-0x3fe3d480(,%eax,8)
+c0102322:	c0 
+c0102323:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102326:	89 c2                	mov    %eax,%edx
+c0102328:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010232b:	66 89 14 c5 82 2b 1c 	mov    %dx,-0x3fe3d47e(,%eax,8)
+c0102332:	c0 
+c0102333:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102336:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
+c010233d:	c0 
+c010233e:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102341:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
+c0102348:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010234b:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
+c0102352:	c0 
+c0102353:	83 e2 1f             	and    $0x1f,%edx
+c0102356:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
+c010235d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102360:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c0102367:	c0 
+c0102368:	83 e2 f0             	and    $0xfffffff0,%edx
+c010236b:	83 ca 0e             	or     $0xe,%edx
+c010236e:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c0102375:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102378:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c010237f:	c0 
+c0102380:	83 e2 ef             	and    $0xffffffef,%edx
+c0102383:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c010238a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010238d:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c0102394:	c0 
+c0102395:	83 e2 9f             	and    $0xffffff9f,%edx
+c0102398:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c010239f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023a2:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
+c01023a9:	c0 
+c01023aa:	83 ca 80             	or     $0xffffff80,%edx
+c01023ad:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
+c01023b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023b7:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c01023be:	c1 e8 10             	shr    $0x10,%eax
+c01023c1:	89 c2                	mov    %eax,%edx
+c01023c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023c6:	66 89 14 c5 86 2b 1c 	mov    %dx,-0x3fe3d47a(,%eax,8)
+c01023cd:	c0 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+c01023ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01023d2:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
+c01023d9:	0f 8e 5c fe ff ff    	jle    c010223b <idt_init+0x19>
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+c01023df:	a1 e4 17 13 c0       	mov    0xc01317e4,%eax
+c01023e4:	66 a3 48 2f 1c c0    	mov    %ax,0xc01c2f48
+c01023ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01023ed:	66 a3 4a 2f 1c c0    	mov    %ax,0xc01c2f4a
+c01023f3:	0f b6 05 4c 2f 1c c0 	movzbl 0xc01c2f4c,%eax
+c01023fa:	83 e0 e0             	and    $0xffffffe0,%eax
+c01023fd:	a2 4c 2f 1c c0       	mov    %al,0xc01c2f4c
+c0102402:	0f b6 05 4c 2f 1c c0 	movzbl 0xc01c2f4c,%eax
+c0102409:	83 e0 1f             	and    $0x1f,%eax
+c010240c:	a2 4c 2f 1c c0       	mov    %al,0xc01c2f4c
+c0102411:	0f b6 05 4d 2f 1c c0 	movzbl 0xc01c2f4d,%eax
+c0102418:	83 c8 0f             	or     $0xf,%eax
+c010241b:	a2 4d 2f 1c c0       	mov    %al,0xc01c2f4d
+c0102420:	0f b6 05 4d 2f 1c c0 	movzbl 0xc01c2f4d,%eax
+c0102427:	83 e0 ef             	and    $0xffffffef,%eax
+c010242a:	a2 4d 2f 1c c0       	mov    %al,0xc01c2f4d
+c010242f:	0f b6 05 4d 2f 1c c0 	movzbl 0xc01c2f4d,%eax
+c0102436:	83 c8 60             	or     $0x60,%eax
+c0102439:	a2 4d 2f 1c c0       	mov    %al,0xc01c2f4d
+c010243e:	0f b6 05 4d 2f 1c c0 	movzbl 0xc01c2f4d,%eax
+c0102445:	83 c8 80             	or     $0xffffff80,%eax
+c0102448:	a2 4d 2f 1c c0       	mov    %al,0xc01c2f4d
+c010244d:	a1 e4 17 13 c0       	mov    0xc01317e4,%eax
+c0102452:	c1 e8 10             	shr    $0x10,%eax
+c0102455:	66 a3 4e 2f 1c c0    	mov    %ax,0xc01c2f4e
+c010245b:	c7 45 f4 80 15 13 c0 	movl   $0xc0131580,-0xc(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c0102462:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102465:	0f 01 18             	lidtl  (%eax)
+	lidt(&idt_pd);
+}
+c0102468:	c9                   	leave  
+c0102469:	c3                   	ret    
+
+c010246a <trapname>:
+
+static const char *
+trapname(int trapno) {
+c010246a:	55                   	push   %ebp
+c010246b:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c010246d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102470:	83 f8 13             	cmp    $0x13,%eax
+c0102473:	77 0c                	ja     c0102481 <trapname+0x17>
+        return excnames[trapno];
+c0102475:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102478:	8b 04 85 60 df 10 c0 	mov    -0x3fef20a0(,%eax,4),%eax
+c010247f:	eb 18                	jmp    c0102499 <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c0102481:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c0102485:	7e 0d                	jle    c0102494 <trapname+0x2a>
+c0102487:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c010248b:	7f 07                	jg     c0102494 <trapname+0x2a>
+        return "Hardware Interrupt";
+c010248d:	b8 ff da 10 c0       	mov    $0xc010daff,%eax
+c0102492:	eb 05                	jmp    c0102499 <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c0102494:	b8 12 db 10 c0       	mov    $0xc010db12,%eax
+}
+c0102499:	5d                   	pop    %ebp
+c010249a:	c3                   	ret    
+
+c010249b <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c010249b:	55                   	push   %ebp
+c010249c:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c010249e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024a1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01024a5:	66 83 f8 08          	cmp    $0x8,%ax
+c01024a9:	0f 94 c0             	sete   %al
+c01024ac:	0f b6 c0             	movzbl %al,%eax
+}
+c01024af:	5d                   	pop    %ebp
+c01024b0:	c3                   	ret    
+
+c01024b1 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c01024b1:	55                   	push   %ebp
+c01024b2:	89 e5                	mov    %esp,%ebp
+c01024b4:	83 ec 28             	sub    $0x28,%esp
+    cprintf("trapframe at %p\n", tf);
+c01024b7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024be:	c7 04 24 53 db 10 c0 	movl   $0xc010db53,(%esp)
+c01024c5:	e8 8e de ff ff       	call   c0100358 <cprintf>
+    print_regs(&tf->tf_regs);
+c01024ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024cd:	89 04 24             	mov    %eax,(%esp)
+c01024d0:	e8 a1 01 00 00       	call   c0102676 <print_regs>
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c01024d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024d8:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c01024dc:	0f b7 c0             	movzwl %ax,%eax
+c01024df:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024e3:	c7 04 24 64 db 10 c0 	movl   $0xc010db64,(%esp)
+c01024ea:	e8 69 de ff ff       	call   c0100358 <cprintf>
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c01024ef:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024f2:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c01024f6:	0f b7 c0             	movzwl %ax,%eax
+c01024f9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024fd:	c7 04 24 77 db 10 c0 	movl   $0xc010db77,(%esp)
+c0102504:	e8 4f de ff ff       	call   c0100358 <cprintf>
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c0102509:	8b 45 08             	mov    0x8(%ebp),%eax
+c010250c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c0102510:	0f b7 c0             	movzwl %ax,%eax
+c0102513:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102517:	c7 04 24 8a db 10 c0 	movl   $0xc010db8a,(%esp)
+c010251e:	e8 35 de ff ff       	call   c0100358 <cprintf>
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c0102523:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102526:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c010252a:	0f b7 c0             	movzwl %ax,%eax
+c010252d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102531:	c7 04 24 9d db 10 c0 	movl   $0xc010db9d,(%esp)
+c0102538:	e8 1b de ff ff       	call   c0100358 <cprintf>
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c010253d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102540:	8b 40 30             	mov    0x30(%eax),%eax
+c0102543:	89 04 24             	mov    %eax,(%esp)
+c0102546:	e8 1f ff ff ff       	call   c010246a <trapname>
+c010254b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010254e:	8b 52 30             	mov    0x30(%edx),%edx
+c0102551:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0102555:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0102559:	c7 04 24 b0 db 10 c0 	movl   $0xc010dbb0,(%esp)
+c0102560:	e8 f3 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c0102565:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102568:	8b 40 34             	mov    0x34(%eax),%eax
+c010256b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010256f:	c7 04 24 c2 db 10 c0 	movl   $0xc010dbc2,(%esp)
+c0102576:	e8 dd dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c010257b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010257e:	8b 40 38             	mov    0x38(%eax),%eax
+c0102581:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102585:	c7 04 24 d1 db 10 c0 	movl   $0xc010dbd1,(%esp)
+c010258c:	e8 c7 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c0102591:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102594:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c0102598:	0f b7 c0             	movzwl %ax,%eax
+c010259b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010259f:	c7 04 24 e0 db 10 c0 	movl   $0xc010dbe0,(%esp)
+c01025a6:	e8 ad dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c01025ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025ae:	8b 40 40             	mov    0x40(%eax),%eax
+c01025b1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025b5:	c7 04 24 f3 db 10 c0 	movl   $0xc010dbf3,(%esp)
+c01025bc:	e8 97 dd ff ff       	call   c0100358 <cprintf>
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c01025c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01025c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c01025cf:	eb 3e                	jmp    c010260f <print_trapframe+0x15e>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c01025d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025d4:	8b 50 40             	mov    0x40(%eax),%edx
+c01025d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01025da:	21 d0                	and    %edx,%eax
+c01025dc:	85 c0                	test   %eax,%eax
+c01025de:	74 28                	je     c0102608 <print_trapframe+0x157>
+c01025e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01025e3:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
+c01025ea:	85 c0                	test   %eax,%eax
+c01025ec:	74 1a                	je     c0102608 <print_trapframe+0x157>
+            cprintf("%s,", IA32flags[i]);
+c01025ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01025f1:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
+c01025f8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025fc:	c7 04 24 02 dc 10 c0 	movl   $0xc010dc02,(%esp)
+c0102603:	e8 50 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c0102608:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010260c:	d1 65 f0             	shll   -0x10(%ebp)
+c010260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102612:	83 f8 17             	cmp    $0x17,%eax
+c0102615:	76 ba                	jbe    c01025d1 <print_trapframe+0x120>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c0102617:	8b 45 08             	mov    0x8(%ebp),%eax
+c010261a:	8b 40 40             	mov    0x40(%eax),%eax
+c010261d:	25 00 30 00 00       	and    $0x3000,%eax
+c0102622:	c1 e8 0c             	shr    $0xc,%eax
+c0102625:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102629:	c7 04 24 06 dc 10 c0 	movl   $0xc010dc06,(%esp)
+c0102630:	e8 23 dd ff ff       	call   c0100358 <cprintf>
+
+    if (!trap_in_kernel(tf)) {
+c0102635:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102638:	89 04 24             	mov    %eax,(%esp)
+c010263b:	e8 5b fe ff ff       	call   c010249b <trap_in_kernel>
+c0102640:	85 c0                	test   %eax,%eax
+c0102642:	75 30                	jne    c0102674 <print_trapframe+0x1c3>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c0102644:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102647:	8b 40 44             	mov    0x44(%eax),%eax
+c010264a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010264e:	c7 04 24 0f dc 10 c0 	movl   $0xc010dc0f,(%esp)
+c0102655:	e8 fe dc ff ff       	call   c0100358 <cprintf>
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c010265a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010265d:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c0102661:	0f b7 c0             	movzwl %ax,%eax
+c0102664:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102668:	c7 04 24 1e dc 10 c0 	movl   $0xc010dc1e,(%esp)
+c010266f:	e8 e4 dc ff ff       	call   c0100358 <cprintf>
+    }
+}
+c0102674:	c9                   	leave  
+c0102675:	c3                   	ret    
+
+c0102676 <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c0102676:	55                   	push   %ebp
+c0102677:	89 e5                	mov    %esp,%ebp
+c0102679:	83 ec 18             	sub    $0x18,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c010267c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010267f:	8b 00                	mov    (%eax),%eax
+c0102681:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102685:	c7 04 24 31 dc 10 c0 	movl   $0xc010dc31,(%esp)
+c010268c:	e8 c7 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c0102691:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102694:	8b 40 04             	mov    0x4(%eax),%eax
+c0102697:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010269b:	c7 04 24 40 dc 10 c0 	movl   $0xc010dc40,(%esp)
+c01026a2:	e8 b1 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c01026a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026aa:	8b 40 08             	mov    0x8(%eax),%eax
+c01026ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026b1:	c7 04 24 4f dc 10 c0 	movl   $0xc010dc4f,(%esp)
+c01026b8:	e8 9b dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c01026bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c0:	8b 40 0c             	mov    0xc(%eax),%eax
+c01026c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026c7:	c7 04 24 5e dc 10 c0 	movl   $0xc010dc5e,(%esp)
+c01026ce:	e8 85 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c01026d3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026d6:	8b 40 10             	mov    0x10(%eax),%eax
+c01026d9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026dd:	c7 04 24 6d dc 10 c0 	movl   $0xc010dc6d,(%esp)
+c01026e4:	e8 6f dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c01026e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026ec:	8b 40 14             	mov    0x14(%eax),%eax
+c01026ef:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026f3:	c7 04 24 7c dc 10 c0 	movl   $0xc010dc7c,(%esp)
+c01026fa:	e8 59 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c01026ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102702:	8b 40 18             	mov    0x18(%eax),%eax
+c0102705:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102709:	c7 04 24 8b dc 10 c0 	movl   $0xc010dc8b,(%esp)
+c0102710:	e8 43 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c0102715:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102718:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010271b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010271f:	c7 04 24 9a dc 10 c0 	movl   $0xc010dc9a,(%esp)
+c0102726:	e8 2d dc ff ff       	call   c0100358 <cprintf>
+}
+c010272b:	c9                   	leave  
+c010272c:	c3                   	ret    
+
+c010272d <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c010272d:	55                   	push   %ebp
+c010272e:	89 e5                	mov    %esp,%ebp
+c0102730:	53                   	push   %ebx
+c0102731:	83 ec 34             	sub    $0x34,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c0102734:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102737:	8b 40 34             	mov    0x34(%eax),%eax
+c010273a:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c010273d:	85 c0                	test   %eax,%eax
+c010273f:	74 07                	je     c0102748 <print_pgfault+0x1b>
+c0102741:	b9 a9 dc 10 c0       	mov    $0xc010dca9,%ecx
+c0102746:	eb 05                	jmp    c010274d <print_pgfault+0x20>
+c0102748:	b9 ba dc 10 c0       	mov    $0xc010dcba,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c010274d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102750:	8b 40 34             	mov    0x34(%eax),%eax
+c0102753:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102756:	85 c0                	test   %eax,%eax
+c0102758:	74 07                	je     c0102761 <print_pgfault+0x34>
+c010275a:	ba 57 00 00 00       	mov    $0x57,%edx
+c010275f:	eb 05                	jmp    c0102766 <print_pgfault+0x39>
+c0102761:	ba 52 00 00 00       	mov    $0x52,%edx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c0102766:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102769:	8b 40 34             	mov    0x34(%eax),%eax
+c010276c:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c010276f:	85 c0                	test   %eax,%eax
+c0102771:	74 07                	je     c010277a <print_pgfault+0x4d>
+c0102773:	b8 55 00 00 00       	mov    $0x55,%eax
+c0102778:	eb 05                	jmp    c010277f <print_pgfault+0x52>
+c010277a:	b8 4b 00 00 00       	mov    $0x4b,%eax
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c010277f:	0f 20 d3             	mov    %cr2,%ebx
+c0102782:	89 5d f4             	mov    %ebx,-0xc(%ebp)
+    return cr2;
+c0102785:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+c0102788:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c010278c:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0102790:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0102794:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0102798:	c7 04 24 c8 dc 10 c0 	movl   $0xc010dcc8,(%esp)
+c010279f:	e8 b4 db ff ff       	call   c0100358 <cprintf>
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c01027a4:	83 c4 34             	add    $0x34,%esp
+c01027a7:	5b                   	pop    %ebx
+c01027a8:	5d                   	pop    %ebp
+c01027a9:	c3                   	ret    
+
+c01027aa <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c01027aa:	55                   	push   %ebp
+c01027ab:	89 e5                	mov    %esp,%ebp
+c01027ad:	83 ec 28             	sub    $0x28,%esp
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+c01027b0:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c01027b5:	85 c0                	test   %eax,%eax
+c01027b7:	74 0b                	je     c01027c4 <pgfault_handler+0x1a>
+            print_pgfault(tf);
+c01027b9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027bc:	89 04 24             	mov    %eax,(%esp)
+c01027bf:	e8 69 ff ff ff       	call   c010272d <print_pgfault>
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+c01027c4:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c01027c9:	85 c0                	test   %eax,%eax
+c01027cb:	74 3d                	je     c010280a <pgfault_handler+0x60>
+        assert(current == idleproc);
+c01027cd:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
+c01027d3:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c01027d8:	39 c2                	cmp    %eax,%edx
+c01027da:	74 24                	je     c0102800 <pgfault_handler+0x56>
+c01027dc:	c7 44 24 0c eb dc 10 	movl   $0xc010dceb,0xc(%esp)
+c01027e3:	c0 
+c01027e4:	c7 44 24 08 ff dc 10 	movl   $0xc010dcff,0x8(%esp)
+c01027eb:	c0 
+c01027ec:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
+c01027f3:	00 
+c01027f4:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c01027fb:	e8 c1 e5 ff ff       	call   c0100dc1 <__panic>
+        mm = check_mm_struct;
+c0102800:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c0102805:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0102808:	eb 46                	jmp    c0102850 <pgfault_handler+0xa6>
+    }
+    else {
+        if (current == NULL) {
+c010280a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010280f:	85 c0                	test   %eax,%eax
+c0102811:	75 32                	jne    c0102845 <pgfault_handler+0x9b>
+            print_trapframe(tf);
+c0102813:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102816:	89 04 24             	mov    %eax,(%esp)
+c0102819:	e8 93 fc ff ff       	call   c01024b1 <print_trapframe>
+            print_pgfault(tf);
+c010281e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102821:	89 04 24             	mov    %eax,(%esp)
+c0102824:	e8 04 ff ff ff       	call   c010272d <print_pgfault>
+            panic("unhandled page fault.\n");
+c0102829:	c7 44 24 08 14 dd 10 	movl   $0xc010dd14,0x8(%esp)
+c0102830:	c0 
+c0102831:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0102838:	00 
+c0102839:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102840:	e8 7c e5 ff ff       	call   c0100dc1 <__panic>
+        }
+        mm = current->mm;
+c0102845:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010284a:	8b 40 18             	mov    0x18(%eax),%eax
+c010284d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c0102850:	0f 20 d0             	mov    %cr2,%eax
+c0102853:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c0102856:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c0102859:	89 c2                	mov    %eax,%edx
+c010285b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010285e:	8b 40 34             	mov    0x34(%eax),%eax
+c0102861:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0102865:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102869:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010286c:	89 04 24             	mov    %eax,(%esp)
+c010286f:	e8 43 66 00 00       	call   c0108eb7 <do_pgfault>
+}
+c0102874:	c9                   	leave  
+c0102875:	c3                   	ret    
+
+c0102876 <trap_dispatch>:
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c0102876:	55                   	push   %ebp
+c0102877:	89 e5                	mov    %esp,%ebp
+c0102879:	83 ec 28             	sub    $0x28,%esp
+    char c;
+
+    int ret=0;
+c010287c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    switch (tf->tf_trapno) {
+c0102883:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102886:	8b 40 30             	mov    0x30(%eax),%eax
+c0102889:	83 f8 2f             	cmp    $0x2f,%eax
+c010288c:	77 38                	ja     c01028c6 <trap_dispatch+0x50>
+c010288e:	83 f8 2e             	cmp    $0x2e,%eax
+c0102891:	0f 83 da 01 00 00    	jae    c0102a71 <trap_dispatch+0x1fb>
+c0102897:	83 f8 20             	cmp    $0x20,%eax
+c010289a:	0f 84 07 01 00 00    	je     c01029a7 <trap_dispatch+0x131>
+c01028a0:	83 f8 20             	cmp    $0x20,%eax
+c01028a3:	77 0a                	ja     c01028af <trap_dispatch+0x39>
+c01028a5:	83 f8 0e             	cmp    $0xe,%eax
+c01028a8:	74 3e                	je     c01028e8 <trap_dispatch+0x72>
+c01028aa:	e9 7a 01 00 00       	jmp    c0102a29 <trap_dispatch+0x1b3>
+c01028af:	83 f8 21             	cmp    $0x21,%eax
+c01028b2:	0f 84 2f 01 00 00    	je     c01029e7 <trap_dispatch+0x171>
+c01028b8:	83 f8 24             	cmp    $0x24,%eax
+c01028bb:	0f 84 fd 00 00 00    	je     c01029be <trap_dispatch+0x148>
+c01028c1:	e9 63 01 00 00       	jmp    c0102a29 <trap_dispatch+0x1b3>
+c01028c6:	83 f8 78             	cmp    $0x78,%eax
+c01028c9:	0f 82 5a 01 00 00    	jb     c0102a29 <trap_dispatch+0x1b3>
+c01028cf:	83 f8 79             	cmp    $0x79,%eax
+c01028d2:	0f 86 35 01 00 00    	jbe    c0102a0d <trap_dispatch+0x197>
+c01028d8:	3d 80 00 00 00       	cmp    $0x80,%eax
+c01028dd:	0f 84 ba 00 00 00    	je     c010299d <trap_dispatch+0x127>
+c01028e3:	e9 41 01 00 00       	jmp    c0102a29 <trap_dispatch+0x1b3>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c01028e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01028eb:	89 04 24             	mov    %eax,(%esp)
+c01028ee:	e8 b7 fe ff ff       	call   c01027aa <pgfault_handler>
+c01028f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01028f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01028fa:	0f 84 98 00 00 00    	je     c0102998 <trap_dispatch+0x122>
+            print_trapframe(tf);
+c0102900:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102903:	89 04 24             	mov    %eax,(%esp)
+c0102906:	e8 a6 fb ff ff       	call   c01024b1 <print_trapframe>
+            if (current == NULL) {
+c010290b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102910:	85 c0                	test   %eax,%eax
+c0102912:	75 23                	jne    c0102937 <trap_dispatch+0xc1>
+                panic("handle pgfault failed. ret=%d\n", ret);
+c0102914:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102917:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010291b:	c7 44 24 08 2c dd 10 	movl   $0xc010dd2c,0x8(%esp)
+c0102922:	c0 
+c0102923:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c010292a:	00 
+c010292b:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102932:	e8 8a e4 ff ff       	call   c0100dc1 <__panic>
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+c0102937:	8b 45 08             	mov    0x8(%ebp),%eax
+c010293a:	89 04 24             	mov    %eax,(%esp)
+c010293d:	e8 59 fb ff ff       	call   c010249b <trap_in_kernel>
+c0102942:	85 c0                	test   %eax,%eax
+c0102944:	74 23                	je     c0102969 <trap_dispatch+0xf3>
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c0102946:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102949:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010294d:	c7 44 24 08 4c dd 10 	movl   $0xc010dd4c,0x8(%esp)
+c0102954:	c0 
+c0102955:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
+c010295c:	00 
+c010295d:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102964:	e8 58 e4 ff ff       	call   c0100dc1 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c0102969:	c7 04 24 7a dd 10 c0 	movl   $0xc010dd7a,(%esp)
+c0102970:	e8 e3 d9 ff ff       	call   c0100358 <cprintf>
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+c0102975:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010297c:	c7 44 24 08 90 dd 10 	movl   $0xc010dd90,0x8(%esp)
+c0102983:	c0 
+c0102984:	c7 44 24 04 d8 00 00 	movl   $0xd8,0x4(%esp)
+c010298b:	00 
+c010298c:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102993:	e8 29 e4 ff ff       	call   c0100dc1 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+c0102998:	e9 d5 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fc>
+    case T_SYSCALL:
+        syscall();
+c010299d:	e8 ac 9f 00 00       	call   c010c94e <syscall>
+        break;
+c01029a2:	e9 cb 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fc>
+        /* LAB7 YOUR CODE */
+        /* you should upate you lab6 code
+         * IMPORTANT FUNCTIONS:
+	     * run_timer_list
+         */
+        ticks ++;
+c01029a7:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
+c01029ac:	83 c0 01             	add    $0x1,%eax
+c01029af:	a3 d8 54 1c c0       	mov    %eax,0xc01c54d8
+        run_timer_list();
+c01029b4:	e8 de 9c 00 00       	call   c010c697 <run_timer_list>
+        break;
+c01029b9:	e9 b4 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fc>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c01029be:	e8 6c ed ff ff       	call   c010172f <cons_getc>
+c01029c3:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c01029c6:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01029ca:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01029ce:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01029d2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01029d6:	c7 04 24 b9 dd 10 c0 	movl   $0xc010ddb9,(%esp)
+c01029dd:	e8 76 d9 ff ff       	call   c0100358 <cprintf>
+        break;
+c01029e2:	e9 8b 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fc>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c01029e7:	e8 43 ed ff ff       	call   c010172f <cons_getc>
+c01029ec:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c01029ef:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01029f3:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01029f7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01029fb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01029ff:	c7 04 24 cb dd 10 c0 	movl   $0xc010ddcb,(%esp)
+c0102a06:	e8 4d d9 ff ff       	call   c0100358 <cprintf>
+        break;
+c0102a0b:	eb 65                	jmp    c0102a72 <trap_dispatch+0x1fc>
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+c0102a0d:	c7 44 24 08 da dd 10 	movl   $0xc010ddda,0x8(%esp)
+c0102a14:	c0 
+c0102a15:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
+c0102a1c:	00 
+c0102a1d:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102a24:	e8 98 e3 ff ff       	call   c0100dc1 <__panic>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c0102a29:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a2c:	89 04 24             	mov    %eax,(%esp)
+c0102a2f:	e8 7d fa ff ff       	call   c01024b1 <print_trapframe>
+        if (current != NULL) {
+c0102a34:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102a39:	85 c0                	test   %eax,%eax
+c0102a3b:	74 18                	je     c0102a55 <trap_dispatch+0x1df>
+            cprintf("unhandled trap.\n");
+c0102a3d:	c7 04 24 ea dd 10 c0 	movl   $0xc010ddea,(%esp)
+c0102a44:	e8 0f d9 ff ff       	call   c0100358 <cprintf>
+            do_exit(-E_KILLED);
+c0102a49:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102a50:	e8 0f 85 00 00       	call   c010af64 <do_exit>
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c0102a55:	c7 44 24 08 fb dd 10 	movl   $0xc010ddfb,0x8(%esp)
+c0102a5c:	c0 
+c0102a5d:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
+c0102a64:	00 
+c0102a65:	c7 04 24 ee da 10 c0 	movl   $0xc010daee,(%esp)
+c0102a6c:	e8 50 e3 ff ff       	call   c0100dc1 <__panic>
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c0102a71:	90                   	nop
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+c0102a72:	c9                   	leave  
+c0102a73:	c3                   	ret    
+
+c0102a74 <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c0102a74:	55                   	push   %ebp
+c0102a75:	89 e5                	mov    %esp,%ebp
+c0102a77:	83 ec 28             	sub    $0x28,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+c0102a7a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102a7f:	85 c0                	test   %eax,%eax
+c0102a81:	75 0d                	jne    c0102a90 <trap+0x1c>
+        trap_dispatch(tf);
+c0102a83:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a86:	89 04 24             	mov    %eax,(%esp)
+c0102a89:	e8 e8 fd ff ff       	call   c0102876 <trap_dispatch>
+c0102a8e:	eb 6c                	jmp    c0102afc <trap+0x88>
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+c0102a90:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102a95:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102a9b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102aa0:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102aa3:	89 50 3c             	mov    %edx,0x3c(%eax)
+    
+        bool in_kernel = trap_in_kernel(tf);
+c0102aa6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102aa9:	89 04 24             	mov    %eax,(%esp)
+c0102aac:	e8 ea f9 ff ff       	call   c010249b <trap_in_kernel>
+c0102ab1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    
+        trap_dispatch(tf);
+c0102ab4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ab7:	89 04 24             	mov    %eax,(%esp)
+c0102aba:	e8 b7 fd ff ff       	call   c0102876 <trap_dispatch>
+    
+        current->tf = otf;
+c0102abf:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102ac4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102ac7:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel) {
+c0102aca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102ace:	75 2c                	jne    c0102afc <trap+0x88>
+            if (current->flags & PF_EXITING) {
+c0102ad0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102ad5:	8b 40 44             	mov    0x44(%eax),%eax
+c0102ad8:	83 e0 01             	and    $0x1,%eax
+c0102adb:	85 c0                	test   %eax,%eax
+c0102add:	74 0c                	je     c0102aeb <trap+0x77>
+                do_exit(-E_KILLED);
+c0102adf:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102ae6:	e8 79 84 00 00       	call   c010af64 <do_exit>
+            }
+            if (current->need_resched) {
+c0102aeb:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c0102af0:	8b 40 10             	mov    0x10(%eax),%eax
+c0102af3:	85 c0                	test   %eax,%eax
+c0102af5:	74 05                	je     c0102afc <trap+0x88>
+                schedule();
+c0102af7:	e8 0e 99 00 00       	call   c010c40a <schedule>
+            }
+        }
+    }
+}
+c0102afc:	c9                   	leave  
+c0102afd:	c3                   	ret    
+
+c0102afe <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0102afe:	1e                   	push   %ds
+    pushl %es
+c0102aff:	06                   	push   %es
+    pushl %fs
+c0102b00:	0f a0                	push   %fs
+    pushl %gs
+c0102b02:	0f a8                	push   %gs
+    pushal
+c0102b04:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c0102b05:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c0102b0a:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0102b0c:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0102b0e:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c0102b0f:	e8 60 ff ff ff       	call   c0102a74 <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c0102b14:	5c                   	pop    %esp
+
+c0102b15 <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c0102b15:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c0102b16:	0f a9                	pop    %gs
+    popl %fs
+c0102b18:	0f a1                	pop    %fs
+    popl %es
+c0102b1a:	07                   	pop    %es
+    popl %ds
+c0102b1b:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0102b1c:	83 c4 08             	add    $0x8,%esp
+    iret
+c0102b1f:	cf                   	iret   
+
+c0102b20 <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c0102b20:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c0102b24:	e9 ec ff ff ff       	jmp    c0102b15 <__trapret>
+
+c0102b29 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102b29:	6a 00                	push   $0x0
+  pushl $0
+c0102b2b:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102b2d:	e9 cc ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b32 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102b32:	6a 00                	push   $0x0
+  pushl $1
+c0102b34:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102b36:	e9 c3 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b3b <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102b3b:	6a 00                	push   $0x0
+  pushl $2
+c0102b3d:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102b3f:	e9 ba ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b44 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102b44:	6a 00                	push   $0x0
+  pushl $3
+c0102b46:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102b48:	e9 b1 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b4d <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102b4d:	6a 00                	push   $0x0
+  pushl $4
+c0102b4f:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102b51:	e9 a8 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b56 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102b56:	6a 00                	push   $0x0
+  pushl $5
+c0102b58:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102b5a:	e9 9f ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b5f <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102b5f:	6a 00                	push   $0x0
+  pushl $6
+c0102b61:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102b63:	e9 96 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b68 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102b68:	6a 00                	push   $0x0
+  pushl $7
+c0102b6a:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102b6c:	e9 8d ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b71 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102b71:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102b73:	e9 86 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b78 <vector9>:
+.globl vector9
+vector9:
+  pushl $9
+c0102b78:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102b7a:	e9 7f ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b7f <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102b7f:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102b81:	e9 78 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b86 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102b86:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102b88:	e9 71 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b8d <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102b8d:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102b8f:	e9 6a ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b94 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102b94:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102b96:	e9 63 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102b9b <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102b9b:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102b9d:	e9 5c ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ba2 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102ba2:	6a 00                	push   $0x0
+  pushl $15
+c0102ba4:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102ba6:	e9 53 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bab <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102bab:	6a 00                	push   $0x0
+  pushl $16
+c0102bad:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102baf:	e9 4a ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bb4 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102bb4:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102bb6:	e9 43 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bbb <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102bbb:	6a 00                	push   $0x0
+  pushl $18
+c0102bbd:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102bbf:	e9 3a ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bc4 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102bc4:	6a 00                	push   $0x0
+  pushl $19
+c0102bc6:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102bc8:	e9 31 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bcd <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102bcd:	6a 00                	push   $0x0
+  pushl $20
+c0102bcf:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102bd1:	e9 28 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bd6 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102bd6:	6a 00                	push   $0x0
+  pushl $21
+c0102bd8:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102bda:	e9 1f ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bdf <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102bdf:	6a 00                	push   $0x0
+  pushl $22
+c0102be1:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102be3:	e9 16 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102be8 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102be8:	6a 00                	push   $0x0
+  pushl $23
+c0102bea:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102bec:	e9 0d ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bf1 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102bf1:	6a 00                	push   $0x0
+  pushl $24
+c0102bf3:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102bf5:	e9 04 ff ff ff       	jmp    c0102afe <__alltraps>
+
+c0102bfa <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102bfa:	6a 00                	push   $0x0
+  pushl $25
+c0102bfc:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102bfe:	e9 fb fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c03 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102c03:	6a 00                	push   $0x0
+  pushl $26
+c0102c05:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102c07:	e9 f2 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c0c <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102c0c:	6a 00                	push   $0x0
+  pushl $27
+c0102c0e:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102c10:	e9 e9 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c15 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102c15:	6a 00                	push   $0x0
+  pushl $28
+c0102c17:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102c19:	e9 e0 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c1e <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102c1e:	6a 00                	push   $0x0
+  pushl $29
+c0102c20:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102c22:	e9 d7 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c27 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102c27:	6a 00                	push   $0x0
+  pushl $30
+c0102c29:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102c2b:	e9 ce fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c30 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102c30:	6a 00                	push   $0x0
+  pushl $31
+c0102c32:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102c34:	e9 c5 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c39 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102c39:	6a 00                	push   $0x0
+  pushl $32
+c0102c3b:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102c3d:	e9 bc fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c42 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102c42:	6a 00                	push   $0x0
+  pushl $33
+c0102c44:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102c46:	e9 b3 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c4b <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102c4b:	6a 00                	push   $0x0
+  pushl $34
+c0102c4d:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102c4f:	e9 aa fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c54 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102c54:	6a 00                	push   $0x0
+  pushl $35
+c0102c56:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102c58:	e9 a1 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c5d <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102c5d:	6a 00                	push   $0x0
+  pushl $36
+c0102c5f:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102c61:	e9 98 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c66 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102c66:	6a 00                	push   $0x0
+  pushl $37
+c0102c68:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102c6a:	e9 8f fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c6f <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102c6f:	6a 00                	push   $0x0
+  pushl $38
+c0102c71:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102c73:	e9 86 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c78 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102c78:	6a 00                	push   $0x0
+  pushl $39
+c0102c7a:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102c7c:	e9 7d fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c81 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102c81:	6a 00                	push   $0x0
+  pushl $40
+c0102c83:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102c85:	e9 74 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c8a <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102c8a:	6a 00                	push   $0x0
+  pushl $41
+c0102c8c:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102c8e:	e9 6b fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c93 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102c93:	6a 00                	push   $0x0
+  pushl $42
+c0102c95:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102c97:	e9 62 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102c9c <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102c9c:	6a 00                	push   $0x0
+  pushl $43
+c0102c9e:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102ca0:	e9 59 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ca5 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102ca5:	6a 00                	push   $0x0
+  pushl $44
+c0102ca7:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102ca9:	e9 50 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cae <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102cae:	6a 00                	push   $0x0
+  pushl $45
+c0102cb0:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102cb2:	e9 47 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cb7 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102cb7:	6a 00                	push   $0x0
+  pushl $46
+c0102cb9:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102cbb:	e9 3e fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cc0 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102cc0:	6a 00                	push   $0x0
+  pushl $47
+c0102cc2:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102cc4:	e9 35 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cc9 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102cc9:	6a 00                	push   $0x0
+  pushl $48
+c0102ccb:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102ccd:	e9 2c fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cd2 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102cd2:	6a 00                	push   $0x0
+  pushl $49
+c0102cd4:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102cd6:	e9 23 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cdb <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102cdb:	6a 00                	push   $0x0
+  pushl $50
+c0102cdd:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102cdf:	e9 1a fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ce4 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102ce4:	6a 00                	push   $0x0
+  pushl $51
+c0102ce6:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102ce8:	e9 11 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ced <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102ced:	6a 00                	push   $0x0
+  pushl $52
+c0102cef:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102cf1:	e9 08 fe ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cf6 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102cf6:	6a 00                	push   $0x0
+  pushl $53
+c0102cf8:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102cfa:	e9 ff fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102cff <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102cff:	6a 00                	push   $0x0
+  pushl $54
+c0102d01:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102d03:	e9 f6 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d08 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102d08:	6a 00                	push   $0x0
+  pushl $55
+c0102d0a:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102d0c:	e9 ed fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d11 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102d11:	6a 00                	push   $0x0
+  pushl $56
+c0102d13:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102d15:	e9 e4 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d1a <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102d1a:	6a 00                	push   $0x0
+  pushl $57
+c0102d1c:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102d1e:	e9 db fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d23 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102d23:	6a 00                	push   $0x0
+  pushl $58
+c0102d25:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102d27:	e9 d2 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d2c <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102d2c:	6a 00                	push   $0x0
+  pushl $59
+c0102d2e:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102d30:	e9 c9 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d35 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102d35:	6a 00                	push   $0x0
+  pushl $60
+c0102d37:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102d39:	e9 c0 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d3e <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102d3e:	6a 00                	push   $0x0
+  pushl $61
+c0102d40:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102d42:	e9 b7 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d47 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102d47:	6a 00                	push   $0x0
+  pushl $62
+c0102d49:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102d4b:	e9 ae fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d50 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102d50:	6a 00                	push   $0x0
+  pushl $63
+c0102d52:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102d54:	e9 a5 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d59 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102d59:	6a 00                	push   $0x0
+  pushl $64
+c0102d5b:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102d5d:	e9 9c fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d62 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102d62:	6a 00                	push   $0x0
+  pushl $65
+c0102d64:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102d66:	e9 93 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d6b <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102d6b:	6a 00                	push   $0x0
+  pushl $66
+c0102d6d:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102d6f:	e9 8a fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d74 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102d74:	6a 00                	push   $0x0
+  pushl $67
+c0102d76:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102d78:	e9 81 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d7d <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102d7d:	6a 00                	push   $0x0
+  pushl $68
+c0102d7f:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102d81:	e9 78 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d86 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102d86:	6a 00                	push   $0x0
+  pushl $69
+c0102d88:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102d8a:	e9 6f fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d8f <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102d8f:	6a 00                	push   $0x0
+  pushl $70
+c0102d91:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102d93:	e9 66 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102d98 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102d98:	6a 00                	push   $0x0
+  pushl $71
+c0102d9a:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102d9c:	e9 5d fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102da1 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102da1:	6a 00                	push   $0x0
+  pushl $72
+c0102da3:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102da5:	e9 54 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102daa <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102daa:	6a 00                	push   $0x0
+  pushl $73
+c0102dac:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102dae:	e9 4b fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102db3 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102db3:	6a 00                	push   $0x0
+  pushl $74
+c0102db5:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102db7:	e9 42 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102dbc <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102dbc:	6a 00                	push   $0x0
+  pushl $75
+c0102dbe:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102dc0:	e9 39 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102dc5 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102dc5:	6a 00                	push   $0x0
+  pushl $76
+c0102dc7:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102dc9:	e9 30 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102dce <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102dce:	6a 00                	push   $0x0
+  pushl $77
+c0102dd0:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102dd2:	e9 27 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102dd7 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102dd7:	6a 00                	push   $0x0
+  pushl $78
+c0102dd9:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102ddb:	e9 1e fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102de0 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102de0:	6a 00                	push   $0x0
+  pushl $79
+c0102de2:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102de4:	e9 15 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102de9 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102de9:	6a 00                	push   $0x0
+  pushl $80
+c0102deb:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102ded:	e9 0c fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102df2 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102df2:	6a 00                	push   $0x0
+  pushl $81
+c0102df4:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102df6:	e9 03 fd ff ff       	jmp    c0102afe <__alltraps>
+
+c0102dfb <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102dfb:	6a 00                	push   $0x0
+  pushl $82
+c0102dfd:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102dff:	e9 fa fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e04 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102e04:	6a 00                	push   $0x0
+  pushl $83
+c0102e06:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102e08:	e9 f1 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e0d <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102e0d:	6a 00                	push   $0x0
+  pushl $84
+c0102e0f:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102e11:	e9 e8 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e16 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102e16:	6a 00                	push   $0x0
+  pushl $85
+c0102e18:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102e1a:	e9 df fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e1f <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102e1f:	6a 00                	push   $0x0
+  pushl $86
+c0102e21:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102e23:	e9 d6 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e28 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102e28:	6a 00                	push   $0x0
+  pushl $87
+c0102e2a:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102e2c:	e9 cd fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e31 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102e31:	6a 00                	push   $0x0
+  pushl $88
+c0102e33:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102e35:	e9 c4 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e3a <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102e3a:	6a 00                	push   $0x0
+  pushl $89
+c0102e3c:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102e3e:	e9 bb fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e43 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102e43:	6a 00                	push   $0x0
+  pushl $90
+c0102e45:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102e47:	e9 b2 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e4c <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102e4c:	6a 00                	push   $0x0
+  pushl $91
+c0102e4e:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102e50:	e9 a9 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e55 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102e55:	6a 00                	push   $0x0
+  pushl $92
+c0102e57:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102e59:	e9 a0 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e5e <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102e5e:	6a 00                	push   $0x0
+  pushl $93
+c0102e60:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102e62:	e9 97 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e67 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102e67:	6a 00                	push   $0x0
+  pushl $94
+c0102e69:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102e6b:	e9 8e fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e70 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102e70:	6a 00                	push   $0x0
+  pushl $95
+c0102e72:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102e74:	e9 85 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e79 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102e79:	6a 00                	push   $0x0
+  pushl $96
+c0102e7b:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102e7d:	e9 7c fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e82 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102e82:	6a 00                	push   $0x0
+  pushl $97
+c0102e84:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102e86:	e9 73 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e8b <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102e8b:	6a 00                	push   $0x0
+  pushl $98
+c0102e8d:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102e8f:	e9 6a fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e94 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102e94:	6a 00                	push   $0x0
+  pushl $99
+c0102e96:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102e98:	e9 61 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102e9d <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102e9d:	6a 00                	push   $0x0
+  pushl $100
+c0102e9f:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102ea1:	e9 58 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ea6 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102ea6:	6a 00                	push   $0x0
+  pushl $101
+c0102ea8:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102eaa:	e9 4f fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102eaf <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102eaf:	6a 00                	push   $0x0
+  pushl $102
+c0102eb1:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102eb3:	e9 46 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102eb8 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102eb8:	6a 00                	push   $0x0
+  pushl $103
+c0102eba:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102ebc:	e9 3d fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ec1 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102ec1:	6a 00                	push   $0x0
+  pushl $104
+c0102ec3:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102ec5:	e9 34 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102eca <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102eca:	6a 00                	push   $0x0
+  pushl $105
+c0102ecc:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102ece:	e9 2b fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ed3 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102ed3:	6a 00                	push   $0x0
+  pushl $106
+c0102ed5:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102ed7:	e9 22 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102edc <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102edc:	6a 00                	push   $0x0
+  pushl $107
+c0102ede:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102ee0:	e9 19 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ee5 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102ee5:	6a 00                	push   $0x0
+  pushl $108
+c0102ee7:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102ee9:	e9 10 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102eee <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102eee:	6a 00                	push   $0x0
+  pushl $109
+c0102ef0:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102ef2:	e9 07 fc ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ef7 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102ef7:	6a 00                	push   $0x0
+  pushl $110
+c0102ef9:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102efb:	e9 fe fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f00 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102f00:	6a 00                	push   $0x0
+  pushl $111
+c0102f02:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102f04:	e9 f5 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f09 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102f09:	6a 00                	push   $0x0
+  pushl $112
+c0102f0b:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102f0d:	e9 ec fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f12 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102f12:	6a 00                	push   $0x0
+  pushl $113
+c0102f14:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102f16:	e9 e3 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f1b <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102f1b:	6a 00                	push   $0x0
+  pushl $114
+c0102f1d:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102f1f:	e9 da fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f24 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102f24:	6a 00                	push   $0x0
+  pushl $115
+c0102f26:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102f28:	e9 d1 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f2d <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102f2d:	6a 00                	push   $0x0
+  pushl $116
+c0102f2f:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102f31:	e9 c8 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f36 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102f36:	6a 00                	push   $0x0
+  pushl $117
+c0102f38:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102f3a:	e9 bf fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f3f <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102f3f:	6a 00                	push   $0x0
+  pushl $118
+c0102f41:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102f43:	e9 b6 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f48 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102f48:	6a 00                	push   $0x0
+  pushl $119
+c0102f4a:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102f4c:	e9 ad fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f51 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102f51:	6a 00                	push   $0x0
+  pushl $120
+c0102f53:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102f55:	e9 a4 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f5a <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102f5a:	6a 00                	push   $0x0
+  pushl $121
+c0102f5c:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102f5e:	e9 9b fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f63 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102f63:	6a 00                	push   $0x0
+  pushl $122
+c0102f65:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102f67:	e9 92 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f6c <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102f6c:	6a 00                	push   $0x0
+  pushl $123
+c0102f6e:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102f70:	e9 89 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f75 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102f75:	6a 00                	push   $0x0
+  pushl $124
+c0102f77:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102f79:	e9 80 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f7e <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102f7e:	6a 00                	push   $0x0
+  pushl $125
+c0102f80:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102f82:	e9 77 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f87 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102f87:	6a 00                	push   $0x0
+  pushl $126
+c0102f89:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102f8b:	e9 6e fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f90 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102f90:	6a 00                	push   $0x0
+  pushl $127
+c0102f92:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102f94:	e9 65 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102f99 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102f99:	6a 00                	push   $0x0
+  pushl $128
+c0102f9b:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102fa0:	e9 59 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fa5 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102fa5:	6a 00                	push   $0x0
+  pushl $129
+c0102fa7:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102fac:	e9 4d fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fb1 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102fb1:	6a 00                	push   $0x0
+  pushl $130
+c0102fb3:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102fb8:	e9 41 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fbd <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102fbd:	6a 00                	push   $0x0
+  pushl $131
+c0102fbf:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102fc4:	e9 35 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fc9 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102fc9:	6a 00                	push   $0x0
+  pushl $132
+c0102fcb:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102fd0:	e9 29 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fd5 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102fd5:	6a 00                	push   $0x0
+  pushl $133
+c0102fd7:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102fdc:	e9 1d fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fe1 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102fe1:	6a 00                	push   $0x0
+  pushl $134
+c0102fe3:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102fe8:	e9 11 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102fed <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102fed:	6a 00                	push   $0x0
+  pushl $135
+c0102fef:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102ff4:	e9 05 fb ff ff       	jmp    c0102afe <__alltraps>
+
+c0102ff9 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0102ff9:	6a 00                	push   $0x0
+  pushl $136
+c0102ffb:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0103000:	e9 f9 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103005 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0103005:	6a 00                	push   $0x0
+  pushl $137
+c0103007:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c010300c:	e9 ed fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103011 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0103011:	6a 00                	push   $0x0
+  pushl $138
+c0103013:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0103018:	e9 e1 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c010301d <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c010301d:	6a 00                	push   $0x0
+  pushl $139
+c010301f:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0103024:	e9 d5 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103029 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0103029:	6a 00                	push   $0x0
+  pushl $140
+c010302b:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0103030:	e9 c9 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103035 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0103035:	6a 00                	push   $0x0
+  pushl $141
+c0103037:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c010303c:	e9 bd fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103041 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0103041:	6a 00                	push   $0x0
+  pushl $142
+c0103043:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0103048:	e9 b1 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c010304d <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c010304d:	6a 00                	push   $0x0
+  pushl $143
+c010304f:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0103054:	e9 a5 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103059 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0103059:	6a 00                	push   $0x0
+  pushl $144
+c010305b:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0103060:	e9 99 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103065 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0103065:	6a 00                	push   $0x0
+  pushl $145
+c0103067:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c010306c:	e9 8d fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103071 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c0103071:	6a 00                	push   $0x0
+  pushl $146
+c0103073:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0103078:	e9 81 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c010307d <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c010307d:	6a 00                	push   $0x0
+  pushl $147
+c010307f:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0103084:	e9 75 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103089 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0103089:	6a 00                	push   $0x0
+  pushl $148
+c010308b:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c0103090:	e9 69 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c0103095 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0103095:	6a 00                	push   $0x0
+  pushl $149
+c0103097:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c010309c:	e9 5d fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030a1 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c01030a1:	6a 00                	push   $0x0
+  pushl $150
+c01030a3:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c01030a8:	e9 51 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030ad <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c01030ad:	6a 00                	push   $0x0
+  pushl $151
+c01030af:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c01030b4:	e9 45 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030b9 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c01030b9:	6a 00                	push   $0x0
+  pushl $152
+c01030bb:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c01030c0:	e9 39 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030c5 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c01030c5:	6a 00                	push   $0x0
+  pushl $153
+c01030c7:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c01030cc:	e9 2d fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030d1 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c01030d1:	6a 00                	push   $0x0
+  pushl $154
+c01030d3:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c01030d8:	e9 21 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030dd <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c01030dd:	6a 00                	push   $0x0
+  pushl $155
+c01030df:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c01030e4:	e9 15 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030e9 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c01030e9:	6a 00                	push   $0x0
+  pushl $156
+c01030eb:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c01030f0:	e9 09 fa ff ff       	jmp    c0102afe <__alltraps>
+
+c01030f5 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c01030f5:	6a 00                	push   $0x0
+  pushl $157
+c01030f7:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c01030fc:	e9 fd f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103101 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c0103101:	6a 00                	push   $0x0
+  pushl $158
+c0103103:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c0103108:	e9 f1 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c010310d <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c010310d:	6a 00                	push   $0x0
+  pushl $159
+c010310f:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c0103114:	e9 e5 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103119 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c0103119:	6a 00                	push   $0x0
+  pushl $160
+c010311b:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c0103120:	e9 d9 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103125 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c0103125:	6a 00                	push   $0x0
+  pushl $161
+c0103127:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c010312c:	e9 cd f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103131 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c0103131:	6a 00                	push   $0x0
+  pushl $162
+c0103133:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c0103138:	e9 c1 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c010313d <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c010313d:	6a 00                	push   $0x0
+  pushl $163
+c010313f:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c0103144:	e9 b5 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103149 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c0103149:	6a 00                	push   $0x0
+  pushl $164
+c010314b:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c0103150:	e9 a9 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103155 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c0103155:	6a 00                	push   $0x0
+  pushl $165
+c0103157:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c010315c:	e9 9d f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103161 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c0103161:	6a 00                	push   $0x0
+  pushl $166
+c0103163:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c0103168:	e9 91 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c010316d <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c010316d:	6a 00                	push   $0x0
+  pushl $167
+c010316f:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c0103174:	e9 85 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103179 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0103179:	6a 00                	push   $0x0
+  pushl $168
+c010317b:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c0103180:	e9 79 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103185 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0103185:	6a 00                	push   $0x0
+  pushl $169
+c0103187:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c010318c:	e9 6d f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103191 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c0103191:	6a 00                	push   $0x0
+  pushl $170
+c0103193:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c0103198:	e9 61 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c010319d <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c010319d:	6a 00                	push   $0x0
+  pushl $171
+c010319f:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c01031a4:	e9 55 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031a9 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c01031a9:	6a 00                	push   $0x0
+  pushl $172
+c01031ab:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c01031b0:	e9 49 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031b5 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c01031b5:	6a 00                	push   $0x0
+  pushl $173
+c01031b7:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c01031bc:	e9 3d f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031c1 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c01031c1:	6a 00                	push   $0x0
+  pushl $174
+c01031c3:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c01031c8:	e9 31 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031cd <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c01031cd:	6a 00                	push   $0x0
+  pushl $175
+c01031cf:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c01031d4:	e9 25 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031d9 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c01031d9:	6a 00                	push   $0x0
+  pushl $176
+c01031db:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c01031e0:	e9 19 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031e5 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c01031e5:	6a 00                	push   $0x0
+  pushl $177
+c01031e7:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c01031ec:	e9 0d f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031f1 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c01031f1:	6a 00                	push   $0x0
+  pushl $178
+c01031f3:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c01031f8:	e9 01 f9 ff ff       	jmp    c0102afe <__alltraps>
+
+c01031fd <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c01031fd:	6a 00                	push   $0x0
+  pushl $179
+c01031ff:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c0103204:	e9 f5 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103209 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c0103209:	6a 00                	push   $0x0
+  pushl $180
+c010320b:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c0103210:	e9 e9 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103215 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c0103215:	6a 00                	push   $0x0
+  pushl $181
+c0103217:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c010321c:	e9 dd f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103221 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c0103221:	6a 00                	push   $0x0
+  pushl $182
+c0103223:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c0103228:	e9 d1 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c010322d <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c010322d:	6a 00                	push   $0x0
+  pushl $183
+c010322f:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c0103234:	e9 c5 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103239 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c0103239:	6a 00                	push   $0x0
+  pushl $184
+c010323b:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c0103240:	e9 b9 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103245 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c0103245:	6a 00                	push   $0x0
+  pushl $185
+c0103247:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c010324c:	e9 ad f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103251 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c0103251:	6a 00                	push   $0x0
+  pushl $186
+c0103253:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c0103258:	e9 a1 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c010325d <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c010325d:	6a 00                	push   $0x0
+  pushl $187
+c010325f:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c0103264:	e9 95 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103269 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c0103269:	6a 00                	push   $0x0
+  pushl $188
+c010326b:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c0103270:	e9 89 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103275 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c0103275:	6a 00                	push   $0x0
+  pushl $189
+c0103277:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c010327c:	e9 7d f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103281 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c0103281:	6a 00                	push   $0x0
+  pushl $190
+c0103283:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0103288:	e9 71 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c010328d <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c010328d:	6a 00                	push   $0x0
+  pushl $191
+c010328f:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0103294:	e9 65 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103299 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c0103299:	6a 00                	push   $0x0
+  pushl $192
+c010329b:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c01032a0:	e9 59 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032a5 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c01032a5:	6a 00                	push   $0x0
+  pushl $193
+c01032a7:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c01032ac:	e9 4d f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032b1 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c01032b1:	6a 00                	push   $0x0
+  pushl $194
+c01032b3:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c01032b8:	e9 41 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032bd <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c01032bd:	6a 00                	push   $0x0
+  pushl $195
+c01032bf:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c01032c4:	e9 35 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032c9 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c01032c9:	6a 00                	push   $0x0
+  pushl $196
+c01032cb:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c01032d0:	e9 29 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032d5 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c01032d5:	6a 00                	push   $0x0
+  pushl $197
+c01032d7:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c01032dc:	e9 1d f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032e1 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c01032e1:	6a 00                	push   $0x0
+  pushl $198
+c01032e3:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c01032e8:	e9 11 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032ed <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c01032ed:	6a 00                	push   $0x0
+  pushl $199
+c01032ef:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c01032f4:	e9 05 f8 ff ff       	jmp    c0102afe <__alltraps>
+
+c01032f9 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c01032f9:	6a 00                	push   $0x0
+  pushl $200
+c01032fb:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c0103300:	e9 f9 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103305 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c0103305:	6a 00                	push   $0x0
+  pushl $201
+c0103307:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c010330c:	e9 ed f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103311 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c0103311:	6a 00                	push   $0x0
+  pushl $202
+c0103313:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c0103318:	e9 e1 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c010331d <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c010331d:	6a 00                	push   $0x0
+  pushl $203
+c010331f:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c0103324:	e9 d5 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103329 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c0103329:	6a 00                	push   $0x0
+  pushl $204
+c010332b:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c0103330:	e9 c9 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103335 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c0103335:	6a 00                	push   $0x0
+  pushl $205
+c0103337:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c010333c:	e9 bd f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103341 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c0103341:	6a 00                	push   $0x0
+  pushl $206
+c0103343:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c0103348:	e9 b1 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c010334d <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c010334d:	6a 00                	push   $0x0
+  pushl $207
+c010334f:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c0103354:	e9 a5 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103359 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c0103359:	6a 00                	push   $0x0
+  pushl $208
+c010335b:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c0103360:	e9 99 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103365 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c0103365:	6a 00                	push   $0x0
+  pushl $209
+c0103367:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c010336c:	e9 8d f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103371 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c0103371:	6a 00                	push   $0x0
+  pushl $210
+c0103373:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c0103378:	e9 81 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c010337d <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c010337d:	6a 00                	push   $0x0
+  pushl $211
+c010337f:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c0103384:	e9 75 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103389 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c0103389:	6a 00                	push   $0x0
+  pushl $212
+c010338b:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c0103390:	e9 69 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103395 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c0103395:	6a 00                	push   $0x0
+  pushl $213
+c0103397:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c010339c:	e9 5d f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033a1 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c01033a1:	6a 00                	push   $0x0
+  pushl $214
+c01033a3:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c01033a8:	e9 51 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033ad <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c01033ad:	6a 00                	push   $0x0
+  pushl $215
+c01033af:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c01033b4:	e9 45 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033b9 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c01033b9:	6a 00                	push   $0x0
+  pushl $216
+c01033bb:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c01033c0:	e9 39 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033c5 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c01033c5:	6a 00                	push   $0x0
+  pushl $217
+c01033c7:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c01033cc:	e9 2d f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033d1 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c01033d1:	6a 00                	push   $0x0
+  pushl $218
+c01033d3:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c01033d8:	e9 21 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033dd <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c01033dd:	6a 00                	push   $0x0
+  pushl $219
+c01033df:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c01033e4:	e9 15 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033e9 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c01033e9:	6a 00                	push   $0x0
+  pushl $220
+c01033eb:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c01033f0:	e9 09 f7 ff ff       	jmp    c0102afe <__alltraps>
+
+c01033f5 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c01033f5:	6a 00                	push   $0x0
+  pushl $221
+c01033f7:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c01033fc:	e9 fd f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103401 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c0103401:	6a 00                	push   $0x0
+  pushl $222
+c0103403:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c0103408:	e9 f1 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c010340d <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c010340d:	6a 00                	push   $0x0
+  pushl $223
+c010340f:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c0103414:	e9 e5 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103419 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c0103419:	6a 00                	push   $0x0
+  pushl $224
+c010341b:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c0103420:	e9 d9 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103425 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c0103425:	6a 00                	push   $0x0
+  pushl $225
+c0103427:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c010342c:	e9 cd f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103431 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c0103431:	6a 00                	push   $0x0
+  pushl $226
+c0103433:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c0103438:	e9 c1 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c010343d <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c010343d:	6a 00                	push   $0x0
+  pushl $227
+c010343f:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c0103444:	e9 b5 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103449 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c0103449:	6a 00                	push   $0x0
+  pushl $228
+c010344b:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c0103450:	e9 a9 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103455 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c0103455:	6a 00                	push   $0x0
+  pushl $229
+c0103457:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c010345c:	e9 9d f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103461 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c0103461:	6a 00                	push   $0x0
+  pushl $230
+c0103463:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c0103468:	e9 91 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c010346d <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c010346d:	6a 00                	push   $0x0
+  pushl $231
+c010346f:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c0103474:	e9 85 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103479 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c0103479:	6a 00                	push   $0x0
+  pushl $232
+c010347b:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c0103480:	e9 79 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103485 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c0103485:	6a 00                	push   $0x0
+  pushl $233
+c0103487:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c010348c:	e9 6d f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103491 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c0103491:	6a 00                	push   $0x0
+  pushl $234
+c0103493:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c0103498:	e9 61 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c010349d <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c010349d:	6a 00                	push   $0x0
+  pushl $235
+c010349f:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c01034a4:	e9 55 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034a9 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c01034a9:	6a 00                	push   $0x0
+  pushl $236
+c01034ab:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c01034b0:	e9 49 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034b5 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c01034b5:	6a 00                	push   $0x0
+  pushl $237
+c01034b7:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c01034bc:	e9 3d f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034c1 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c01034c1:	6a 00                	push   $0x0
+  pushl $238
+c01034c3:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c01034c8:	e9 31 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034cd <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c01034cd:	6a 00                	push   $0x0
+  pushl $239
+c01034cf:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c01034d4:	e9 25 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034d9 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c01034d9:	6a 00                	push   $0x0
+  pushl $240
+c01034db:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c01034e0:	e9 19 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034e5 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c01034e5:	6a 00                	push   $0x0
+  pushl $241
+c01034e7:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c01034ec:	e9 0d f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034f1 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c01034f1:	6a 00                	push   $0x0
+  pushl $242
+c01034f3:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c01034f8:	e9 01 f6 ff ff       	jmp    c0102afe <__alltraps>
+
+c01034fd <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c01034fd:	6a 00                	push   $0x0
+  pushl $243
+c01034ff:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c0103504:	e9 f5 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103509 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c0103509:	6a 00                	push   $0x0
+  pushl $244
+c010350b:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c0103510:	e9 e9 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103515 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c0103515:	6a 00                	push   $0x0
+  pushl $245
+c0103517:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c010351c:	e9 dd f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103521 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c0103521:	6a 00                	push   $0x0
+  pushl $246
+c0103523:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c0103528:	e9 d1 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c010352d <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c010352d:	6a 00                	push   $0x0
+  pushl $247
+c010352f:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c0103534:	e9 c5 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103539 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c0103539:	6a 00                	push   $0x0
+  pushl $248
+c010353b:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c0103540:	e9 b9 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103545 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c0103545:	6a 00                	push   $0x0
+  pushl $249
+c0103547:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c010354c:	e9 ad f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103551 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c0103551:	6a 00                	push   $0x0
+  pushl $250
+c0103553:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c0103558:	e9 a1 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c010355d <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c010355d:	6a 00                	push   $0x0
+  pushl $251
+c010355f:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c0103564:	e9 95 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103569 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c0103569:	6a 00                	push   $0x0
+  pushl $252
+c010356b:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c0103570:	e9 89 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103575 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c0103575:	6a 00                	push   $0x0
+  pushl $253
+c0103577:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c010357c:	e9 7d f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103581 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c0103581:	6a 00                	push   $0x0
+  pushl $254
+c0103583:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c0103588:	e9 71 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c010358d <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c010358d:	6a 00                	push   $0x0
+  pushl $255
+c010358f:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c0103594:	e9 65 f5 ff ff       	jmp    c0102afe <__alltraps>
+
+c0103599 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0103599:	55                   	push   %ebp
+c010359a:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010359c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010359f:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c01035a4:	29 c2                	sub    %eax,%edx
+c01035a6:	89 d0                	mov    %edx,%eax
+c01035a8:	c1 f8 05             	sar    $0x5,%eax
+}
+c01035ab:	5d                   	pop    %ebp
+c01035ac:	c3                   	ret    
+
+c01035ad <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01035ad:	55                   	push   %ebp
+c01035ae:	89 e5                	mov    %esp,%ebp
+c01035b0:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01035b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035b6:	89 04 24             	mov    %eax,(%esp)
+c01035b9:	e8 db ff ff ff       	call   c0103599 <page2ppn>
+c01035be:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01035c1:	c9                   	leave  
+c01035c2:	c3                   	ret    
+
+c01035c3 <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c01035c3:	55                   	push   %ebp
+c01035c4:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01035c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035c9:	8b 00                	mov    (%eax),%eax
+}
+c01035cb:	5d                   	pop    %ebp
+c01035cc:	c3                   	ret    
+
+c01035cd <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c01035cd:	55                   	push   %ebp
+c01035ce:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c01035d0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035d3:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01035d6:	89 10                	mov    %edx,(%eax)
+}
+c01035d8:	5d                   	pop    %ebp
+c01035d9:	c3                   	ret    
+
+c01035da <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c01035da:	55                   	push   %ebp
+c01035db:	89 e5                	mov    %esp,%ebp
+c01035dd:	83 ec 10             	sub    $0x10,%esp
+c01035e0:	c7 45 fc dc 54 1c c0 	movl   $0xc01c54dc,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01035e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01035ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01035ed:	89 50 04             	mov    %edx,0x4(%eax)
+c01035f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01035f3:	8b 50 04             	mov    0x4(%eax),%edx
+c01035f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01035f9:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c01035fb:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
+c0103602:	00 00 00 
+}
+c0103605:	c9                   	leave  
+c0103606:	c3                   	ret    
+
+c0103607 <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c0103607:	55                   	push   %ebp
+c0103608:	89 e5                	mov    %esp,%ebp
+c010360a:	83 ec 58             	sub    $0x58,%esp
+    assert(n > 0);
+c010360d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0103611:	75 24                	jne    c0103637 <default_init_memmap+0x30>
+c0103613:	c7 44 24 0c b0 df 10 	movl   $0xc010dfb0,0xc(%esp)
+c010361a:	c0 
+c010361b:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103622:	c0 
+c0103623:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
+c010362a:	00 
+c010362b:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103632:	e8 8a d7 ff ff       	call   c0100dc1 <__panic>
+    struct Page *p = base;
+c0103637:	8b 45 08             	mov    0x8(%ebp),%eax
+c010363a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c010363d:	eb 7d                	jmp    c01036bc <default_init_memmap+0xb5>
+        assert(PageReserved(p));
+c010363f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103642:	83 c0 04             	add    $0x4,%eax
+c0103645:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+c010364c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010364f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103652:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0103655:	0f a3 10             	bt     %edx,(%eax)
+c0103658:	19 c0                	sbb    %eax,%eax
+c010365a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return oldbit != 0;
+c010365d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0103661:	0f 95 c0             	setne  %al
+c0103664:	0f b6 c0             	movzbl %al,%eax
+c0103667:	85 c0                	test   %eax,%eax
+c0103669:	75 24                	jne    c010368f <default_init_memmap+0x88>
+c010366b:	c7 44 24 0c e1 df 10 	movl   $0xc010dfe1,0xc(%esp)
+c0103672:	c0 
+c0103673:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010367a:	c0 
+c010367b:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
+c0103682:	00 
+c0103683:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010368a:	e8 32 d7 ff ff       	call   c0100dc1 <__panic>
+        p->flags = p->property = 0;
+c010368f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103692:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c0103699:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010369c:	8b 50 08             	mov    0x8(%eax),%edx
+c010369f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036a2:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c01036a5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01036ac:	00 
+c01036ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036b0:	89 04 24             	mov    %eax,(%esp)
+c01036b3:	e8 15 ff ff ff       	call   c01035cd <set_page_ref>
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01036b8:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01036bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01036bf:	c1 e0 05             	shl    $0x5,%eax
+c01036c2:	89 c2                	mov    %eax,%edx
+c01036c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036c7:	01 d0                	add    %edx,%eax
+c01036c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01036cc:	0f 85 6d ff ff ff    	jne    c010363f <default_init_memmap+0x38>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01036d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036d5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01036d8:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01036db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036de:	83 c0 04             	add    $0x4,%eax
+c01036e1:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c01036e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01036eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01036ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01036f1:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c01036f4:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
+c01036fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01036fd:	01 d0                	add    %edx,%eax
+c01036ff:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+    list_add(&free_list, &(base->page_link));
+c0103704:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103707:	83 c0 0c             	add    $0xc,%eax
+c010370a:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
+c0103711:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0103714:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103717:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c010371a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010371d:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0103720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0103723:	8b 40 04             	mov    0x4(%eax),%eax
+c0103726:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103729:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c010372c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010372f:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c0103732:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103735:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103738:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010373b:	89 10                	mov    %edx,(%eax)
+c010373d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103740:	8b 10                	mov    (%eax),%edx
+c0103742:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103745:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103748:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010374b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c010374e:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103751:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103754:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0103757:	89 10                	mov    %edx,(%eax)
+}
+c0103759:	c9                   	leave  
+c010375a:	c3                   	ret    
+
+c010375b <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c010375b:	55                   	push   %ebp
+c010375c:	89 e5                	mov    %esp,%ebp
+c010375e:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c0103761:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0103765:	75 24                	jne    c010378b <default_alloc_pages+0x30>
+c0103767:	c7 44 24 0c b0 df 10 	movl   $0xc010dfb0,0xc(%esp)
+c010376e:	c0 
+c010376f:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103776:	c0 
+c0103777:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
+c010377e:	00 
+c010377f:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103786:	e8 36 d6 ff ff       	call   c0100dc1 <__panic>
+    if (n > nr_free) {
+c010378b:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c0103790:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0103793:	73 0a                	jae    c010379f <default_alloc_pages+0x44>
+        return NULL;
+c0103795:	b8 00 00 00 00       	mov    $0x0,%eax
+c010379a:	e9 40 01 00 00       	jmp    c01038df <default_alloc_pages+0x184>
+    }
+    struct Page *page = NULL;
+c010379f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c01037a6:	c7 45 f0 dc 54 1c c0 	movl   $0xc01c54dc,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01037ad:	eb 1c                	jmp    c01037cb <default_alloc_pages+0x70>
+        struct Page *p = le2page(le, page_link);
+c01037af:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01037b2:	83 e8 0c             	sub    $0xc,%eax
+c01037b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (p->property >= n) {
+c01037b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01037bb:	8b 40 08             	mov    0x8(%eax),%eax
+c01037be:	3b 45 08             	cmp    0x8(%ebp),%eax
+c01037c1:	72 08                	jb     c01037cb <default_alloc_pages+0x70>
+            page = p;
+c01037c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01037c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c01037c9:	eb 18                	jmp    c01037e3 <default_alloc_pages+0x88>
+c01037cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01037ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01037d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01037d4:	8b 40 04             	mov    0x4(%eax),%eax
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c01037d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01037da:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
+c01037e1:	75 cc                	jne    c01037af <default_alloc_pages+0x54>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c01037e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01037e7:	0f 84 ef 00 00 00    	je     c01038dc <default_alloc_pages+0x181>
+        //list_del(&(page->page_link));
+        if (page->property > n) {
+c01037ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01037f0:	8b 40 08             	mov    0x8(%eax),%eax
+c01037f3:	3b 45 08             	cmp    0x8(%ebp),%eax
+c01037f6:	0f 86 8f 00 00 00    	jbe    c010388b <default_alloc_pages+0x130>
+            struct Page *p = page + n;
+c01037fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037ff:	c1 e0 05             	shl    $0x5,%eax
+c0103802:	89 c2                	mov    %eax,%edx
+c0103804:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103807:	01 d0                	add    %edx,%eax
+c0103809:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            p->property = page->property - n;
+c010380c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010380f:	8b 40 08             	mov    0x8(%eax),%eax
+c0103812:	2b 45 08             	sub    0x8(%ebp),%eax
+c0103815:	89 c2                	mov    %eax,%edx
+c0103817:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010381a:	89 50 08             	mov    %edx,0x8(%eax)
+	    SetPageProperty(p);
+c010381d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103820:	83 c0 04             	add    $0x4,%eax
+c0103823:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c010382a:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010382d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103830:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103833:	0f ab 10             	bts    %edx,(%eax)
+            list_add(&free_list, &(p->page_link));
+c0103836:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103839:	83 c0 0c             	add    $0xc,%eax
+c010383c:	c7 45 d8 dc 54 1c c0 	movl   $0xc01c54dc,-0x28(%ebp)
+c0103843:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0103846:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103849:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010384c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010384f:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0103852:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103855:	8b 40 04             	mov    0x4(%eax),%eax
+c0103858:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010385b:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010385e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103861:	89 55 c4             	mov    %edx,-0x3c(%ebp)
+c0103864:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103867:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010386a:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c010386d:	89 10                	mov    %edx,(%eax)
+c010386f:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103872:	8b 10                	mov    (%eax),%edx
+c0103874:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103877:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010387a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010387d:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0103880:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103883:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103886:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0103889:	89 10                	mov    %edx,(%eax)
+        }
+        list_del(&(page->page_link));
+c010388b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010388e:	83 c0 0c             	add    $0xc,%eax
+c0103891:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103894:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0103897:	8b 40 04             	mov    0x4(%eax),%eax
+c010389a:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010389d:	8b 12                	mov    (%edx),%edx
+c010389f:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c01038a2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01038a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01038a8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01038ab:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01038ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01038b1:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c01038b4:	89 10                	mov    %edx,(%eax)
+        nr_free -= n;
+c01038b6:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c01038bb:	2b 45 08             	sub    0x8(%ebp),%eax
+c01038be:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+        ClearPageProperty(page);
+c01038c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01038c6:	83 c0 04             	add    $0x4,%eax
+c01038c9:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c01038d0:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01038d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01038d6:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01038d9:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c01038dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01038df:	c9                   	leave  
+c01038e0:	c3                   	ret    
+
+c01038e1 <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c01038e1:	55                   	push   %ebp
+c01038e2:	89 e5                	mov    %esp,%ebp
+c01038e4:	81 ec 98 00 00 00    	sub    $0x98,%esp
+    assert(n > 0);
+c01038ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01038ee:	75 24                	jne    c0103914 <default_free_pages+0x33>
+c01038f0:	c7 44 24 0c b0 df 10 	movl   $0xc010dfb0,0xc(%esp)
+c01038f7:	c0 
+c01038f8:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01038ff:	c0 
+c0103900:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c0103907:	00 
+c0103908:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010390f:	e8 ad d4 ff ff       	call   c0100dc1 <__panic>
+    struct Page *p = base;
+c0103914:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103917:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c010391a:	e9 9d 00 00 00       	jmp    c01039bc <default_free_pages+0xdb>
+        assert(!PageReserved(p) && !PageProperty(p));
+c010391f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103922:	83 c0 04             	add    $0x4,%eax
+c0103925:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010392c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010392f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103932:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0103935:	0f a3 10             	bt     %edx,(%eax)
+c0103938:	19 c0                	sbb    %eax,%eax
+c010393a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return oldbit != 0;
+c010393d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103941:	0f 95 c0             	setne  %al
+c0103944:	0f b6 c0             	movzbl %al,%eax
+c0103947:	85 c0                	test   %eax,%eax
+c0103949:	75 2c                	jne    c0103977 <default_free_pages+0x96>
+c010394b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010394e:	83 c0 04             	add    $0x4,%eax
+c0103951:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0103958:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010395b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010395e:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103961:	0f a3 10             	bt     %edx,(%eax)
+c0103964:	19 c0                	sbb    %eax,%eax
+c0103966:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    return oldbit != 0;
+c0103969:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c010396d:	0f 95 c0             	setne  %al
+c0103970:	0f b6 c0             	movzbl %al,%eax
+c0103973:	85 c0                	test   %eax,%eax
+c0103975:	74 24                	je     c010399b <default_free_pages+0xba>
+c0103977:	c7 44 24 0c f4 df 10 	movl   $0xc010dff4,0xc(%esp)
+c010397e:	c0 
+c010397f:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103986:	c0 
+c0103987:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
+c010398e:	00 
+c010398f:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103996:	e8 26 d4 ff ff       	call   c0100dc1 <__panic>
+        p->flags = 0;
+c010399b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010399e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c01039a5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01039ac:	00 
+c01039ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039b0:	89 04 24             	mov    %eax,(%esp)
+c01039b3:	e8 15 fc ff ff       	call   c01035cd <set_page_ref>
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01039b8:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01039bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01039bf:	c1 e0 05             	shl    $0x5,%eax
+c01039c2:	89 c2                	mov    %eax,%edx
+c01039c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039c7:	01 d0                	add    %edx,%eax
+c01039c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01039cc:	0f 85 4d ff ff ff    	jne    c010391f <default_free_pages+0x3e>
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01039d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039d5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01039d8:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01039db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039de:	83 c0 04             	add    $0x4,%eax
+c01039e1:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c01039e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01039eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01039ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01039f1:	0f ab 10             	bts    %edx,(%eax)
+c01039f4:	c7 45 cc dc 54 1c c0 	movl   $0xc01c54dc,-0x34(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01039fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01039fe:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c0103a01:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0103a04:	e9 fa 00 00 00       	jmp    c0103b03 <default_free_pages+0x222>
+        p = le2page(le, page_link);
+c0103a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103a0c:	83 e8 0c             	sub    $0xc,%eax
+c0103a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103a15:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103a18:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103a1b:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0103a1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (base + base->property == p) {
+c0103a21:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a24:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a27:	c1 e0 05             	shl    $0x5,%eax
+c0103a2a:	89 c2                	mov    %eax,%edx
+c0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a2f:	01 d0                	add    %edx,%eax
+c0103a31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103a34:	75 5a                	jne    c0103a90 <default_free_pages+0x1af>
+            base->property += p->property;
+c0103a36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a39:	8b 50 08             	mov    0x8(%eax),%edx
+c0103a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a3f:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a42:	01 c2                	add    %eax,%edx
+c0103a44:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a47:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c0103a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a4d:	83 c0 04             	add    $0x4,%eax
+c0103a50:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0103a57:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103a5a:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103a5d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0103a60:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c0103a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a66:	83 c0 0c             	add    $0xc,%eax
+c0103a69:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103a6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0103a6f:	8b 40 04             	mov    0x4(%eax),%eax
+c0103a72:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0103a75:	8b 12                	mov    (%edx),%edx
+c0103a77:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c0103a7a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103a7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103a80:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0103a83:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0103a86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0103a89:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0103a8c:	89 10                	mov    %edx,(%eax)
+c0103a8e:	eb 73                	jmp    c0103b03 <default_free_pages+0x222>
+        }
+        else if (p + p->property == base) {
+c0103a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a93:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a96:	c1 e0 05             	shl    $0x5,%eax
+c0103a99:	89 c2                	mov    %eax,%edx
+c0103a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a9e:	01 d0                	add    %edx,%eax
+c0103aa0:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0103aa3:	75 5e                	jne    c0103b03 <default_free_pages+0x222>
+            p->property += base->property;
+c0103aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103aa8:	8b 50 08             	mov    0x8(%eax),%edx
+c0103aab:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103aae:	8b 40 08             	mov    0x8(%eax),%eax
+c0103ab1:	01 c2                	add    %eax,%edx
+c0103ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ab6:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c0103ab9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103abc:	83 c0 04             	add    $0x4,%eax
+c0103abf:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0103ac6:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c0103ac9:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103acc:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0103acf:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c0103ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ad5:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c0103ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103adb:	83 c0 0c             	add    $0xc,%eax
+c0103ade:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103ae1:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103ae4:	8b 40 04             	mov    0x4(%eax),%eax
+c0103ae7:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0103aea:	8b 12                	mov    (%edx),%edx
+c0103aec:	89 55 a4             	mov    %edx,-0x5c(%ebp)
+c0103aef:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103af2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0103af5:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0103af8:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0103afb:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103afe:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0103b01:	89 10                	mov    %edx,(%eax)
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+c0103b03:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
+c0103b0a:	0f 85 f9 fe ff ff    	jne    c0103a09 <default_free_pages+0x128>
+c0103b10:	c7 45 9c dc 54 1c c0 	movl   $0xc01c54dc,-0x64(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103b17:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0103b1a:	8b 40 04             	mov    0x4(%eax),%eax
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    for (le = list_next(&free_list); le != &free_list && base + base->property >= le2page(le, page_link); le = list_next(le));
+c0103b1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103b20:	eb 0f                	jmp    c0103b31 <default_free_pages+0x250>
+c0103b22:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b25:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103b28:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103b2b:	8b 40 04             	mov    0x4(%eax),%eax
+c0103b2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103b31:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
+c0103b38:	74 1a                	je     c0103b54 <default_free_pages+0x273>
+c0103b3a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b3d:	8b 40 08             	mov    0x8(%eax),%eax
+c0103b40:	c1 e0 05             	shl    $0x5,%eax
+c0103b43:	89 c2                	mov    %eax,%edx
+c0103b45:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b48:	01 c2                	add    %eax,%edx
+c0103b4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b4d:	83 e8 0c             	sub    $0xc,%eax
+c0103b50:	39 c2                	cmp    %eax,%edx
+c0103b52:	73 ce                	jae    c0103b22 <default_free_pages+0x241>
+    nr_free += n;
+c0103b54:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
+c0103b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103b5d:	01 d0                	add    %edx,%eax
+c0103b5f:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+    list_add_before(le, &(base->page_link));
+c0103b64:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b67:	8d 50 0c             	lea    0xc(%eax),%edx
+c0103b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b6d:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0103b70:	89 55 90             	mov    %edx,-0x70(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0103b73:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b76:	8b 00                	mov    (%eax),%eax
+c0103b78:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0103b7b:	89 55 8c             	mov    %edx,-0x74(%ebp)
+c0103b7e:	89 45 88             	mov    %eax,-0x78(%ebp)
+c0103b81:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b84:	89 45 84             	mov    %eax,-0x7c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103b87:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b8a:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c0103b8d:	89 10                	mov    %edx,(%eax)
+c0103b8f:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b92:	8b 10                	mov    (%eax),%edx
+c0103b94:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0103b97:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103b9a:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103b9d:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0103ba0:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103ba3:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103ba6:	8b 55 88             	mov    -0x78(%ebp),%edx
+c0103ba9:	89 10                	mov    %edx,(%eax)
+}
+c0103bab:	c9                   	leave  
+c0103bac:	c3                   	ret    
+
+c0103bad <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c0103bad:	55                   	push   %ebp
+c0103bae:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0103bb0:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+}
+c0103bb5:	5d                   	pop    %ebp
+c0103bb6:	c3                   	ret    
+
+c0103bb7 <basic_check>:
+
+static void
+basic_check(void) {
+c0103bb7:	55                   	push   %ebp
+c0103bb8:	89 e5                	mov    %esp,%ebp
+c0103bba:	83 ec 48             	sub    $0x48,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c0103bbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0103bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103bc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103bca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c0103bd0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103bd7:	e8 dc 15 00 00       	call   c01051b8 <alloc_pages>
+c0103bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103bdf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103be3:	75 24                	jne    c0103c09 <basic_check+0x52>
+c0103be5:	c7 44 24 0c 19 e0 10 	movl   $0xc010e019,0xc(%esp)
+c0103bec:	c0 
+c0103bed:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103bf4:	c0 
+c0103bf5:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c0103bfc:	00 
+c0103bfd:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103c04:	e8 b8 d1 ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103c09:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103c10:	e8 a3 15 00 00       	call   c01051b8 <alloc_pages>
+c0103c15:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103c18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103c1c:	75 24                	jne    c0103c42 <basic_check+0x8b>
+c0103c1e:	c7 44 24 0c 35 e0 10 	movl   $0xc010e035,0xc(%esp)
+c0103c25:	c0 
+c0103c26:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103c2d:	c0 
+c0103c2e:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
+c0103c35:	00 
+c0103c36:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103c3d:	e8 7f d1 ff ff       	call   c0100dc1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103c42:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103c49:	e8 6a 15 00 00       	call   c01051b8 <alloc_pages>
+c0103c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103c55:	75 24                	jne    c0103c7b <basic_check+0xc4>
+c0103c57:	c7 44 24 0c 51 e0 10 	movl   $0xc010e051,0xc(%esp)
+c0103c5e:	c0 
+c0103c5f:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103c66:	c0 
+c0103c67:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c0103c6e:	00 
+c0103c6f:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103c76:	e8 46 d1 ff ff       	call   c0100dc1 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c0103c7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0103c81:	74 10                	je     c0103c93 <basic_check+0xdc>
+c0103c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c89:	74 08                	je     c0103c93 <basic_check+0xdc>
+c0103c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103c8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c91:	75 24                	jne    c0103cb7 <basic_check+0x100>
+c0103c93:	c7 44 24 0c 70 e0 10 	movl   $0xc010e070,0xc(%esp)
+c0103c9a:	c0 
+c0103c9b:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103ca2:	c0 
+c0103ca3:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c0103caa:	00 
+c0103cab:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103cb2:	e8 0a d1 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0103cb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103cba:	89 04 24             	mov    %eax,(%esp)
+c0103cbd:	e8 01 f9 ff ff       	call   c01035c3 <page_ref>
+c0103cc2:	85 c0                	test   %eax,%eax
+c0103cc4:	75 1e                	jne    c0103ce4 <basic_check+0x12d>
+c0103cc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103cc9:	89 04 24             	mov    %eax,(%esp)
+c0103ccc:	e8 f2 f8 ff ff       	call   c01035c3 <page_ref>
+c0103cd1:	85 c0                	test   %eax,%eax
+c0103cd3:	75 0f                	jne    c0103ce4 <basic_check+0x12d>
+c0103cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103cd8:	89 04 24             	mov    %eax,(%esp)
+c0103cdb:	e8 e3 f8 ff ff       	call   c01035c3 <page_ref>
+c0103ce0:	85 c0                	test   %eax,%eax
+c0103ce2:	74 24                	je     c0103d08 <basic_check+0x151>
+c0103ce4:	c7 44 24 0c 94 e0 10 	movl   $0xc010e094,0xc(%esp)
+c0103ceb:	c0 
+c0103cec:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103cf3:	c0 
+c0103cf4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c0103cfb:	00 
+c0103cfc:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103d03:	e8 b9 d0 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c0103d08:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d0b:	89 04 24             	mov    %eax,(%esp)
+c0103d0e:	e8 9a f8 ff ff       	call   c01035ad <page2pa>
+c0103d13:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
+c0103d19:	c1 e2 0c             	shl    $0xc,%edx
+c0103d1c:	39 d0                	cmp    %edx,%eax
+c0103d1e:	72 24                	jb     c0103d44 <basic_check+0x18d>
+c0103d20:	c7 44 24 0c d0 e0 10 	movl   $0xc010e0d0,0xc(%esp)
+c0103d27:	c0 
+c0103d28:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103d2f:	c0 
+c0103d30:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
+c0103d37:	00 
+c0103d38:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103d3f:	e8 7d d0 ff ff       	call   c0100dc1 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0103d44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d47:	89 04 24             	mov    %eax,(%esp)
+c0103d4a:	e8 5e f8 ff ff       	call   c01035ad <page2pa>
+c0103d4f:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
+c0103d55:	c1 e2 0c             	shl    $0xc,%edx
+c0103d58:	39 d0                	cmp    %edx,%eax
+c0103d5a:	72 24                	jb     c0103d80 <basic_check+0x1c9>
+c0103d5c:	c7 44 24 0c ed e0 10 	movl   $0xc010e0ed,0xc(%esp)
+c0103d63:	c0 
+c0103d64:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103d6b:	c0 
+c0103d6c:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
+c0103d73:	00 
+c0103d74:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103d7b:	e8 41 d0 ff ff       	call   c0100dc1 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0103d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103d83:	89 04 24             	mov    %eax,(%esp)
+c0103d86:	e8 22 f8 ff ff       	call   c01035ad <page2pa>
+c0103d8b:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
+c0103d91:	c1 e2 0c             	shl    $0xc,%edx
+c0103d94:	39 d0                	cmp    %edx,%eax
+c0103d96:	72 24                	jb     c0103dbc <basic_check+0x205>
+c0103d98:	c7 44 24 0c 0a e1 10 	movl   $0xc010e10a,0xc(%esp)
+c0103d9f:	c0 
+c0103da0:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103da7:	c0 
+c0103da8:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
+c0103daf:	00 
+c0103db0:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103db7:	e8 05 d0 ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0103dbc:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
+c0103dc1:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
+c0103dc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103dca:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103dcd:	c7 45 e0 dc 54 1c c0 	movl   $0xc01c54dc,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0103dd4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103dd7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103dda:	89 50 04             	mov    %edx,0x4(%eax)
+c0103ddd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103de0:	8b 50 04             	mov    0x4(%eax),%edx
+c0103de3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103de6:	89 10                	mov    %edx,(%eax)
+c0103de8:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0103def:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103df2:	8b 40 04             	mov    0x4(%eax),%eax
+c0103df5:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0103df8:	0f 94 c0             	sete   %al
+c0103dfb:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0103dfe:	85 c0                	test   %eax,%eax
+c0103e00:	75 24                	jne    c0103e26 <basic_check+0x26f>
+c0103e02:	c7 44 24 0c 27 e1 10 	movl   $0xc010e127,0xc(%esp)
+c0103e09:	c0 
+c0103e0a:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103e11:	c0 
+c0103e12:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c0103e19:	00 
+c0103e1a:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103e21:	e8 9b cf ff ff       	call   c0100dc1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0103e26:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c0103e2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    nr_free = 0;
+c0103e2e:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
+c0103e35:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c0103e38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103e3f:	e8 74 13 00 00       	call   c01051b8 <alloc_pages>
+c0103e44:	85 c0                	test   %eax,%eax
+c0103e46:	74 24                	je     c0103e6c <basic_check+0x2b5>
+c0103e48:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c0103e4f:	c0 
+c0103e50:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103e57:	c0 
+c0103e58:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
+c0103e5f:	00 
+c0103e60:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103e67:	e8 55 cf ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p0);
+c0103e6c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e73:	00 
+c0103e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e77:	89 04 24             	mov    %eax,(%esp)
+c0103e7a:	e8 a4 13 00 00       	call   c0105223 <free_pages>
+    free_page(p1);
+c0103e7f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e86:	00 
+c0103e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103e8a:	89 04 24             	mov    %eax,(%esp)
+c0103e8d:	e8 91 13 00 00       	call   c0105223 <free_pages>
+    free_page(p2);
+c0103e92:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e99:	00 
+c0103e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103e9d:	89 04 24             	mov    %eax,(%esp)
+c0103ea0:	e8 7e 13 00 00       	call   c0105223 <free_pages>
+    assert(nr_free == 3);
+c0103ea5:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c0103eaa:	83 f8 03             	cmp    $0x3,%eax
+c0103ead:	74 24                	je     c0103ed3 <basic_check+0x31c>
+c0103eaf:	c7 44 24 0c 53 e1 10 	movl   $0xc010e153,0xc(%esp)
+c0103eb6:	c0 
+c0103eb7:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103ebe:	c0 
+c0103ebf:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
+c0103ec6:	00 
+c0103ec7:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103ece:	e8 ee ce ff ff       	call   c0100dc1 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c0103ed3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103eda:	e8 d9 12 00 00       	call   c01051b8 <alloc_pages>
+c0103edf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103ee2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103ee6:	75 24                	jne    c0103f0c <basic_check+0x355>
+c0103ee8:	c7 44 24 0c 19 e0 10 	movl   $0xc010e019,0xc(%esp)
+c0103eef:	c0 
+c0103ef0:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103ef7:	c0 
+c0103ef8:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
+c0103eff:	00 
+c0103f00:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103f07:	e8 b5 ce ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103f0c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f13:	e8 a0 12 00 00       	call   c01051b8 <alloc_pages>
+c0103f18:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103f1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103f1f:	75 24                	jne    c0103f45 <basic_check+0x38e>
+c0103f21:	c7 44 24 0c 35 e0 10 	movl   $0xc010e035,0xc(%esp)
+c0103f28:	c0 
+c0103f29:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103f30:	c0 
+c0103f31:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
+c0103f38:	00 
+c0103f39:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103f40:	e8 7c ce ff ff       	call   c0100dc1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103f45:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f4c:	e8 67 12 00 00       	call   c01051b8 <alloc_pages>
+c0103f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103f54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103f58:	75 24                	jne    c0103f7e <basic_check+0x3c7>
+c0103f5a:	c7 44 24 0c 51 e0 10 	movl   $0xc010e051,0xc(%esp)
+c0103f61:	c0 
+c0103f62:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103f69:	c0 
+c0103f6a:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
+c0103f71:	00 
+c0103f72:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103f79:	e8 43 ce ff ff       	call   c0100dc1 <__panic>
+
+    assert(alloc_page() == NULL);
+c0103f7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f85:	e8 2e 12 00 00       	call   c01051b8 <alloc_pages>
+c0103f8a:	85 c0                	test   %eax,%eax
+c0103f8c:	74 24                	je     c0103fb2 <basic_check+0x3fb>
+c0103f8e:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c0103f95:	c0 
+c0103f96:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103f9d:	c0 
+c0103f9e:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
+c0103fa5:	00 
+c0103fa6:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103fad:	e8 0f ce ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p0);
+c0103fb2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103fb9:	00 
+c0103fba:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103fbd:	89 04 24             	mov    %eax,(%esp)
+c0103fc0:	e8 5e 12 00 00       	call   c0105223 <free_pages>
+c0103fc5:	c7 45 d8 dc 54 1c c0 	movl   $0xc01c54dc,-0x28(%ebp)
+c0103fcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103fcf:	8b 40 04             	mov    0x4(%eax),%eax
+c0103fd2:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0103fd5:	0f 94 c0             	sete   %al
+c0103fd8:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0103fdb:	85 c0                	test   %eax,%eax
+c0103fdd:	74 24                	je     c0104003 <basic_check+0x44c>
+c0103fdf:	c7 44 24 0c 60 e1 10 	movl   $0xc010e160,0xc(%esp)
+c0103fe6:	c0 
+c0103fe7:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0103fee:	c0 
+c0103fef:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
+c0103ff6:	00 
+c0103ff7:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0103ffe:	e8 be cd ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c0104003:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010400a:	e8 a9 11 00 00       	call   c01051b8 <alloc_pages>
+c010400f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104015:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0104018:	74 24                	je     c010403e <basic_check+0x487>
+c010401a:	c7 44 24 0c 78 e1 10 	movl   $0xc010e178,0xc(%esp)
+c0104021:	c0 
+c0104022:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104029:	c0 
+c010402a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0104031:	00 
+c0104032:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104039:	e8 83 cd ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c010403e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104045:	e8 6e 11 00 00       	call   c01051b8 <alloc_pages>
+c010404a:	85 c0                	test   %eax,%eax
+c010404c:	74 24                	je     c0104072 <basic_check+0x4bb>
+c010404e:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c0104055:	c0 
+c0104056:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010405d:	c0 
+c010405e:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c0104065:	00 
+c0104066:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010406d:	e8 4f cd ff ff       	call   c0100dc1 <__panic>
+
+    assert(nr_free == 0);
+c0104072:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c0104077:	85 c0                	test   %eax,%eax
+c0104079:	74 24                	je     c010409f <basic_check+0x4e8>
+c010407b:	c7 44 24 0c 91 e1 10 	movl   $0xc010e191,0xc(%esp)
+c0104082:	c0 
+c0104083:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010408a:	c0 
+c010408b:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
+c0104092:	00 
+c0104093:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010409a:	e8 22 cd ff ff       	call   c0100dc1 <__panic>
+    free_list = free_list_store;
+c010409f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01040a2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01040a5:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
+c01040aa:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
+    nr_free = nr_free_store;
+c01040b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01040b3:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+
+    free_page(p);
+c01040b8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040bf:	00 
+c01040c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01040c3:	89 04 24             	mov    %eax,(%esp)
+c01040c6:	e8 58 11 00 00       	call   c0105223 <free_pages>
+    free_page(p1);
+c01040cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040d2:	00 
+c01040d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01040d6:	89 04 24             	mov    %eax,(%esp)
+c01040d9:	e8 45 11 00 00       	call   c0105223 <free_pages>
+    free_page(p2);
+c01040de:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040e5:	00 
+c01040e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040e9:	89 04 24             	mov    %eax,(%esp)
+c01040ec:	e8 32 11 00 00       	call   c0105223 <free_pages>
+}
+c01040f1:	c9                   	leave  
+c01040f2:	c3                   	ret    
+
+c01040f3 <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c01040f3:	55                   	push   %ebp
+c01040f4:	89 e5                	mov    %esp,%ebp
+c01040f6:	53                   	push   %ebx
+c01040f7:	81 ec 94 00 00 00    	sub    $0x94,%esp
+    int count = 0, total = 0;
+c01040fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0104104:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c010410b:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0104112:	eb 6b                	jmp    c010417f <default_check+0x8c>
+        struct Page *p = le2page(le, page_link);
+c0104114:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104117:	83 e8 0c             	sub    $0xc,%eax
+c010411a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        assert(PageProperty(p));
+c010411d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104120:	83 c0 04             	add    $0x4,%eax
+c0104123:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
+c010412a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010412d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0104130:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0104133:	0f a3 10             	bt     %edx,(%eax)
+c0104136:	19 c0                	sbb    %eax,%eax
+c0104138:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    return oldbit != 0;
+c010413b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c010413f:	0f 95 c0             	setne  %al
+c0104142:	0f b6 c0             	movzbl %al,%eax
+c0104145:	85 c0                	test   %eax,%eax
+c0104147:	75 24                	jne    c010416d <default_check+0x7a>
+c0104149:	c7 44 24 0c 9e e1 10 	movl   $0xc010e19e,0xc(%esp)
+c0104150:	c0 
+c0104151:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104158:	c0 
+c0104159:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c0104160:	00 
+c0104161:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104168:	e8 54 cc ff ff       	call   c0100dc1 <__panic>
+        count ++, total += p->property;
+c010416d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0104171:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104174:	8b 50 08             	mov    0x8(%eax),%edx
+c0104177:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010417a:	01 d0                	add    %edx,%eax
+c010417c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010417f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104182:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0104185:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0104188:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c010418b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010418e:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
+c0104195:	0f 85 79 ff ff ff    	jne    c0104114 <default_check+0x21>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c010419b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c010419e:	e8 b2 10 00 00       	call   c0105255 <nr_free_pages>
+c01041a3:	39 c3                	cmp    %eax,%ebx
+c01041a5:	74 24                	je     c01041cb <default_check+0xd8>
+c01041a7:	c7 44 24 0c ae e1 10 	movl   $0xc010e1ae,0xc(%esp)
+c01041ae:	c0 
+c01041af:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01041b6:	c0 
+c01041b7:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
+c01041be:	00 
+c01041bf:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01041c6:	e8 f6 cb ff ff       	call   c0100dc1 <__panic>
+
+    basic_check();
+c01041cb:	e8 e7 f9 ff ff       	call   c0103bb7 <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c01041d0:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c01041d7:	e8 dc 0f 00 00       	call   c01051b8 <alloc_pages>
+c01041dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(p0 != NULL);
+c01041df:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01041e3:	75 24                	jne    c0104209 <default_check+0x116>
+c01041e5:	c7 44 24 0c c7 e1 10 	movl   $0xc010e1c7,0xc(%esp)
+c01041ec:	c0 
+c01041ed:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01041f4:	c0 
+c01041f5:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
+c01041fc:	00 
+c01041fd:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104204:	e8 b8 cb ff ff       	call   c0100dc1 <__panic>
+    assert(!PageProperty(p0));
+c0104209:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010420c:	83 c0 04             	add    $0x4,%eax
+c010420f:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+c0104216:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104219:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010421c:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010421f:	0f a3 10             	bt     %edx,(%eax)
+c0104222:	19 c0                	sbb    %eax,%eax
+c0104224:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    return oldbit != 0;
+c0104227:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c010422b:	0f 95 c0             	setne  %al
+c010422e:	0f b6 c0             	movzbl %al,%eax
+c0104231:	85 c0                	test   %eax,%eax
+c0104233:	74 24                	je     c0104259 <default_check+0x166>
+c0104235:	c7 44 24 0c d2 e1 10 	movl   $0xc010e1d2,0xc(%esp)
+c010423c:	c0 
+c010423d:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104244:	c0 
+c0104245:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
+c010424c:	00 
+c010424d:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104254:	e8 68 cb ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0104259:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
+c010425e:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
+c0104264:	89 45 80             	mov    %eax,-0x80(%ebp)
+c0104267:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c010426a:	c7 45 b4 dc 54 1c c0 	movl   $0xc01c54dc,-0x4c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0104271:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104274:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0104277:	89 50 04             	mov    %edx,0x4(%eax)
+c010427a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010427d:	8b 50 04             	mov    0x4(%eax),%edx
+c0104280:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104283:	89 10                	mov    %edx,(%eax)
+c0104285:	c7 45 b0 dc 54 1c c0 	movl   $0xc01c54dc,-0x50(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010428c:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010428f:	8b 40 04             	mov    0x4(%eax),%eax
+c0104292:	39 45 b0             	cmp    %eax,-0x50(%ebp)
+c0104295:	0f 94 c0             	sete   %al
+c0104298:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c010429b:	85 c0                	test   %eax,%eax
+c010429d:	75 24                	jne    c01042c3 <default_check+0x1d0>
+c010429f:	c7 44 24 0c 27 e1 10 	movl   $0xc010e127,0xc(%esp)
+c01042a6:	c0 
+c01042a7:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01042ae:	c0 
+c01042af:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
+c01042b6:	00 
+c01042b7:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01042be:	e8 fe ca ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c01042c3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01042ca:	e8 e9 0e 00 00       	call   c01051b8 <alloc_pages>
+c01042cf:	85 c0                	test   %eax,%eax
+c01042d1:	74 24                	je     c01042f7 <default_check+0x204>
+c01042d3:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c01042da:	c0 
+c01042db:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01042e2:	c0 
+c01042e3:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
+c01042ea:	00 
+c01042eb:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01042f2:	e8 ca ca ff ff       	call   c0100dc1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01042f7:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c01042fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c01042ff:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
+c0104306:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c0104309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010430c:	83 c0 40             	add    $0x40,%eax
+c010430f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c0104316:	00 
+c0104317:	89 04 24             	mov    %eax,(%esp)
+c010431a:	e8 04 0f 00 00       	call   c0105223 <free_pages>
+    assert(alloc_pages(4) == NULL);
+c010431f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0104326:	e8 8d 0e 00 00       	call   c01051b8 <alloc_pages>
+c010432b:	85 c0                	test   %eax,%eax
+c010432d:	74 24                	je     c0104353 <default_check+0x260>
+c010432f:	c7 44 24 0c e4 e1 10 	movl   $0xc010e1e4,0xc(%esp)
+c0104336:	c0 
+c0104337:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010433e:	c0 
+c010433f:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
+c0104346:	00 
+c0104347:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010434e:	e8 6e ca ff ff       	call   c0100dc1 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c0104353:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104356:	83 c0 40             	add    $0x40,%eax
+c0104359:	83 c0 04             	add    $0x4,%eax
+c010435c:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
+c0104363:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104366:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0104369:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c010436c:	0f a3 10             	bt     %edx,(%eax)
+c010436f:	19 c0                	sbb    %eax,%eax
+c0104371:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    return oldbit != 0;
+c0104374:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0104378:	0f 95 c0             	setne  %al
+c010437b:	0f b6 c0             	movzbl %al,%eax
+c010437e:	85 c0                	test   %eax,%eax
+c0104380:	74 0e                	je     c0104390 <default_check+0x29d>
+c0104382:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104385:	83 c0 40             	add    $0x40,%eax
+c0104388:	8b 40 08             	mov    0x8(%eax),%eax
+c010438b:	83 f8 03             	cmp    $0x3,%eax
+c010438e:	74 24                	je     c01043b4 <default_check+0x2c1>
+c0104390:	c7 44 24 0c fc e1 10 	movl   $0xc010e1fc,0xc(%esp)
+c0104397:	c0 
+c0104398:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010439f:	c0 
+c01043a0:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
+c01043a7:	00 
+c01043a8:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01043af:	e8 0d ca ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c01043b4:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+c01043bb:	e8 f8 0d 00 00       	call   c01051b8 <alloc_pages>
+c01043c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01043c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01043c7:	75 24                	jne    c01043ed <default_check+0x2fa>
+c01043c9:	c7 44 24 0c 28 e2 10 	movl   $0xc010e228,0xc(%esp)
+c01043d0:	c0 
+c01043d1:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01043d8:	c0 
+c01043d9:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
+c01043e0:	00 
+c01043e1:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01043e8:	e8 d4 c9 ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c01043ed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01043f4:	e8 bf 0d 00 00       	call   c01051b8 <alloc_pages>
+c01043f9:	85 c0                	test   %eax,%eax
+c01043fb:	74 24                	je     c0104421 <default_check+0x32e>
+c01043fd:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c0104404:	c0 
+c0104405:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010440c:	c0 
+c010440d:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
+c0104414:	00 
+c0104415:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010441c:	e8 a0 c9 ff ff       	call   c0100dc1 <__panic>
+    assert(p0 + 2 == p1);
+c0104421:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104424:	83 c0 40             	add    $0x40,%eax
+c0104427:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c010442a:	74 24                	je     c0104450 <default_check+0x35d>
+c010442c:	c7 44 24 0c 46 e2 10 	movl   $0xc010e246,0xc(%esp)
+c0104433:	c0 
+c0104434:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010443b:	c0 
+c010443c:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c0104443:	00 
+c0104444:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010444b:	e8 71 c9 ff ff       	call   c0100dc1 <__panic>
+
+    p2 = p0 + 1;
+c0104450:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104453:	83 c0 20             	add    $0x20,%eax
+c0104456:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    free_page(p0);
+c0104459:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104460:	00 
+c0104461:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104464:	89 04 24             	mov    %eax,(%esp)
+c0104467:	e8 b7 0d 00 00       	call   c0105223 <free_pages>
+    free_pages(p1, 3);
+c010446c:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c0104473:	00 
+c0104474:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104477:	89 04 24             	mov    %eax,(%esp)
+c010447a:	e8 a4 0d 00 00       	call   c0105223 <free_pages>
+    assert(PageProperty(p0) && p0->property == 1);
+c010447f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104482:	83 c0 04             	add    $0x4,%eax
+c0104485:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
+c010448c:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010448f:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0104492:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0104495:	0f a3 10             	bt     %edx,(%eax)
+c0104498:	19 c0                	sbb    %eax,%eax
+c010449a:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c010449d:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c01044a1:	0f 95 c0             	setne  %al
+c01044a4:	0f b6 c0             	movzbl %al,%eax
+c01044a7:	85 c0                	test   %eax,%eax
+c01044a9:	74 0b                	je     c01044b6 <default_check+0x3c3>
+c01044ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01044ae:	8b 40 08             	mov    0x8(%eax),%eax
+c01044b1:	83 f8 01             	cmp    $0x1,%eax
+c01044b4:	74 24                	je     c01044da <default_check+0x3e7>
+c01044b6:	c7 44 24 0c 54 e2 10 	movl   $0xc010e254,0xc(%esp)
+c01044bd:	c0 
+c01044be:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01044c5:	c0 
+c01044c6:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
+c01044cd:	00 
+c01044ce:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01044d5:	e8 e7 c8 ff ff       	call   c0100dc1 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c01044da:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01044dd:	83 c0 04             	add    $0x4,%eax
+c01044e0:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
+c01044e7:	89 45 90             	mov    %eax,-0x70(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01044ea:	8b 45 90             	mov    -0x70(%ebp),%eax
+c01044ed:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c01044f0:	0f a3 10             	bt     %edx,(%eax)
+c01044f3:	19 c0                	sbb    %eax,%eax
+c01044f5:	89 45 8c             	mov    %eax,-0x74(%ebp)
+    return oldbit != 0;
+c01044f8:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
+c01044fc:	0f 95 c0             	setne  %al
+c01044ff:	0f b6 c0             	movzbl %al,%eax
+c0104502:	85 c0                	test   %eax,%eax
+c0104504:	74 0b                	je     c0104511 <default_check+0x41e>
+c0104506:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104509:	8b 40 08             	mov    0x8(%eax),%eax
+c010450c:	83 f8 03             	cmp    $0x3,%eax
+c010450f:	74 24                	je     c0104535 <default_check+0x442>
+c0104511:	c7 44 24 0c 7c e2 10 	movl   $0xc010e27c,0xc(%esp)
+c0104518:	c0 
+c0104519:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104520:	c0 
+c0104521:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
+c0104528:	00 
+c0104529:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104530:	e8 8c c8 ff ff       	call   c0100dc1 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c0104535:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010453c:	e8 77 0c 00 00       	call   c01051b8 <alloc_pages>
+c0104541:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104544:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104547:	83 e8 20             	sub    $0x20,%eax
+c010454a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c010454d:	74 24                	je     c0104573 <default_check+0x480>
+c010454f:	c7 44 24 0c a2 e2 10 	movl   $0xc010e2a2,0xc(%esp)
+c0104556:	c0 
+c0104557:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010455e:	c0 
+c010455f:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
+c0104566:	00 
+c0104567:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010456e:	e8 4e c8 ff ff       	call   c0100dc1 <__panic>
+    free_page(p0);
+c0104573:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010457a:	00 
+c010457b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010457e:	89 04 24             	mov    %eax,(%esp)
+c0104581:	e8 9d 0c 00 00       	call   c0105223 <free_pages>
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c0104586:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c010458d:	e8 26 0c 00 00       	call   c01051b8 <alloc_pages>
+c0104592:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104595:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104598:	83 c0 20             	add    $0x20,%eax
+c010459b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c010459e:	74 24                	je     c01045c4 <default_check+0x4d1>
+c01045a0:	c7 44 24 0c c0 e2 10 	movl   $0xc010e2c0,0xc(%esp)
+c01045a7:	c0 
+c01045a8:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c01045af:	c0 
+c01045b0:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
+c01045b7:	00 
+c01045b8:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c01045bf:	e8 fd c7 ff ff       	call   c0100dc1 <__panic>
+
+    free_pages(p0, 2);
+c01045c4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c01045cb:	00 
+c01045cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01045cf:	89 04 24             	mov    %eax,(%esp)
+c01045d2:	e8 4c 0c 00 00       	call   c0105223 <free_pages>
+    free_page(p2);
+c01045d7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01045de:	00 
+c01045df:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01045e2:	89 04 24             	mov    %eax,(%esp)
+c01045e5:	e8 39 0c 00 00       	call   c0105223 <free_pages>
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c01045ea:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c01045f1:	e8 c2 0b 00 00       	call   c01051b8 <alloc_pages>
+c01045f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01045f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01045fd:	75 24                	jne    c0104623 <default_check+0x530>
+c01045ff:	c7 44 24 0c e0 e2 10 	movl   $0xc010e2e0,0xc(%esp)
+c0104606:	c0 
+c0104607:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010460e:	c0 
+c010460f:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
+c0104616:	00 
+c0104617:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010461e:	e8 9e c7 ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c0104623:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010462a:	e8 89 0b 00 00       	call   c01051b8 <alloc_pages>
+c010462f:	85 c0                	test   %eax,%eax
+c0104631:	74 24                	je     c0104657 <default_check+0x564>
+c0104633:	c7 44 24 0c 3e e1 10 	movl   $0xc010e13e,0xc(%esp)
+c010463a:	c0 
+c010463b:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104642:	c0 
+c0104643:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
+c010464a:	00 
+c010464b:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104652:	e8 6a c7 ff ff       	call   c0100dc1 <__panic>
+
+    assert(nr_free == 0);
+c0104657:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c010465c:	85 c0                	test   %eax,%eax
+c010465e:	74 24                	je     c0104684 <default_check+0x591>
+c0104660:	c7 44 24 0c 91 e1 10 	movl   $0xc010e191,0xc(%esp)
+c0104667:	c0 
+c0104668:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010466f:	c0 
+c0104670:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c0104677:	00 
+c0104678:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010467f:	e8 3d c7 ff ff       	call   c0100dc1 <__panic>
+    nr_free = nr_free_store;
+c0104684:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104687:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+
+    free_list = free_list_store;
+c010468c:	8b 45 80             	mov    -0x80(%ebp),%eax
+c010468f:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0104692:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
+c0104697:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
+    free_pages(p0, 5);
+c010469d:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+c01046a4:	00 
+c01046a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01046a8:	89 04 24             	mov    %eax,(%esp)
+c01046ab:	e8 73 0b 00 00       	call   c0105223 <free_pages>
+
+    le = &free_list;
+c01046b0:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01046b7:	eb 1d                	jmp    c01046d6 <default_check+0x5e3>
+        struct Page *p = le2page(le, page_link);
+c01046b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01046bc:	83 e8 0c             	sub    $0xc,%eax
+c01046bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        count --, total -= p->property;
+c01046c2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01046c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01046c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01046cc:	8b 40 08             	mov    0x8(%eax),%eax
+c01046cf:	29 c2                	sub    %eax,%edx
+c01046d1:	89 d0                	mov    %edx,%eax
+c01046d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01046d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01046d9:	89 45 88             	mov    %eax,-0x78(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01046dc:	8b 45 88             	mov    -0x78(%ebp),%eax
+c01046df:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c01046e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01046e5:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
+c01046ec:	75 cb                	jne    c01046b9 <default_check+0x5c6>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+c01046ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01046f2:	74 24                	je     c0104718 <default_check+0x625>
+c01046f4:	c7 44 24 0c fe e2 10 	movl   $0xc010e2fe,0xc(%esp)
+c01046fb:	c0 
+c01046fc:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c0104703:	c0 
+c0104704:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
+c010470b:	00 
+c010470c:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c0104713:	e8 a9 c6 ff ff       	call   c0100dc1 <__panic>
+    assert(total == 0);
+c0104718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010471c:	74 24                	je     c0104742 <default_check+0x64f>
+c010471e:	c7 44 24 0c 09 e3 10 	movl   $0xc010e309,0xc(%esp)
+c0104725:	c0 
+c0104726:	c7 44 24 08 b6 df 10 	movl   $0xc010dfb6,0x8(%esp)
+c010472d:	c0 
+c010472e:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
+c0104735:	00 
+c0104736:	c7 04 24 cb df 10 c0 	movl   $0xc010dfcb,(%esp)
+c010473d:	e8 7f c6 ff ff       	call   c0100dc1 <__panic>
+}
+c0104742:	81 c4 94 00 00 00    	add    $0x94,%esp
+c0104748:	5b                   	pop    %ebx
+c0104749:	5d                   	pop    %ebp
+c010474a:	c3                   	ret    
+
+c010474b <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010474b:	55                   	push   %ebp
+c010474c:	89 e5                	mov    %esp,%ebp
+c010474e:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0104751:	9c                   	pushf  
+c0104752:	58                   	pop    %eax
+c0104753:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0104756:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0104759:	25 00 02 00 00       	and    $0x200,%eax
+c010475e:	85 c0                	test   %eax,%eax
+c0104760:	74 0c                	je     c010476e <__intr_save+0x23>
+        intr_disable();
+c0104762:	e8 b2 d8 ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c0104767:	b8 01 00 00 00       	mov    $0x1,%eax
+c010476c:	eb 05                	jmp    c0104773 <__intr_save+0x28>
+    }
+    return 0;
+c010476e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104773:	c9                   	leave  
+c0104774:	c3                   	ret    
+
+c0104775 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0104775:	55                   	push   %ebp
+c0104776:	89 e5                	mov    %esp,%ebp
+c0104778:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010477b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010477f:	74 05                	je     c0104786 <__intr_restore+0x11>
+        intr_enable();
+c0104781:	e8 8d d8 ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c0104786:	c9                   	leave  
+c0104787:	c3                   	ret    
+
+c0104788 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104788:	55                   	push   %ebp
+c0104789:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010478b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010478e:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c0104793:	29 c2                	sub    %eax,%edx
+c0104795:	89 d0                	mov    %edx,%eax
+c0104797:	c1 f8 05             	sar    $0x5,%eax
+}
+c010479a:	5d                   	pop    %ebp
+c010479b:	c3                   	ret    
+
+c010479c <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010479c:	55                   	push   %ebp
+c010479d:	89 e5                	mov    %esp,%ebp
+c010479f:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01047a2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047a5:	89 04 24             	mov    %eax,(%esp)
+c01047a8:	e8 db ff ff ff       	call   c0104788 <page2ppn>
+c01047ad:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01047b0:	c9                   	leave  
+c01047b1:	c3                   	ret    
+
+c01047b2 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01047b2:	55                   	push   %ebp
+c01047b3:	89 e5                	mov    %esp,%ebp
+c01047b5:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c01047b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047bb:	c1 e8 0c             	shr    $0xc,%eax
+c01047be:	89 c2                	mov    %eax,%edx
+c01047c0:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c01047c5:	39 c2                	cmp    %eax,%edx
+c01047c7:	72 1c                	jb     c01047e5 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c01047c9:	c7 44 24 08 44 e3 10 	movl   $0xc010e344,0x8(%esp)
+c01047d0:	c0 
+c01047d1:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c01047d8:	00 
+c01047d9:	c7 04 24 63 e3 10 c0 	movl   $0xc010e363,(%esp)
+c01047e0:	e8 dc c5 ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c01047e5:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c01047ea:	8b 55 08             	mov    0x8(%ebp),%edx
+c01047ed:	c1 ea 0c             	shr    $0xc,%edx
+c01047f0:	c1 e2 05             	shl    $0x5,%edx
+c01047f3:	01 d0                	add    %edx,%eax
+}
+c01047f5:	c9                   	leave  
+c01047f6:	c3                   	ret    
+
+c01047f7 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01047f7:	55                   	push   %ebp
+c01047f8:	89 e5                	mov    %esp,%ebp
+c01047fa:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c01047fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104800:	89 04 24             	mov    %eax,(%esp)
+c0104803:	e8 94 ff ff ff       	call   c010479c <page2pa>
+c0104808:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010480b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010480e:	c1 e8 0c             	shr    $0xc,%eax
+c0104811:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104814:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0104819:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010481c:	72 23                	jb     c0104841 <page2kva+0x4a>
+c010481e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104821:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104825:	c7 44 24 08 74 e3 10 	movl   $0xc010e374,0x8(%esp)
+c010482c:	c0 
+c010482d:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0104834:	00 
+c0104835:	c7 04 24 63 e3 10 c0 	movl   $0xc010e363,(%esp)
+c010483c:	e8 80 c5 ff ff       	call   c0100dc1 <__panic>
+c0104841:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104844:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0104849:	c9                   	leave  
+c010484a:	c3                   	ret    
+
+c010484b <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c010484b:	55                   	push   %ebp
+c010484c:	89 e5                	mov    %esp,%ebp
+c010484e:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c0104851:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104854:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104857:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010485e:	77 23                	ja     c0104883 <kva2page+0x38>
+c0104860:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104863:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104867:	c7 44 24 08 98 e3 10 	movl   $0xc010e398,0x8(%esp)
+c010486e:	c0 
+c010486f:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c0104876:	00 
+c0104877:	c7 04 24 63 e3 10 c0 	movl   $0xc010e363,(%esp)
+c010487e:	e8 3e c5 ff ff       	call   c0100dc1 <__panic>
+c0104883:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104886:	05 00 00 00 40       	add    $0x40000000,%eax
+c010488b:	89 04 24             	mov    %eax,(%esp)
+c010488e:	e8 1f ff ff ff       	call   c01047b2 <pa2page>
+}
+c0104893:	c9                   	leave  
+c0104894:	c3                   	ret    
+
+c0104895 <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c0104895:	55                   	push   %ebp
+c0104896:	89 e5                	mov    %esp,%ebp
+c0104898:	83 ec 28             	sub    $0x28,%esp
+  struct Page * page = alloc_pages(1 << order);
+c010489b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010489e:	ba 01 00 00 00       	mov    $0x1,%edx
+c01048a3:	89 c1                	mov    %eax,%ecx
+c01048a5:	d3 e2                	shl    %cl,%edx
+c01048a7:	89 d0                	mov    %edx,%eax
+c01048a9:	89 04 24             	mov    %eax,(%esp)
+c01048ac:	e8 07 09 00 00       	call   c01051b8 <alloc_pages>
+c01048b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c01048b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01048b8:	75 07                	jne    c01048c1 <__slob_get_free_pages+0x2c>
+    return NULL;
+c01048ba:	b8 00 00 00 00       	mov    $0x0,%eax
+c01048bf:	eb 0b                	jmp    c01048cc <__slob_get_free_pages+0x37>
+  return page2kva(page);
+c01048c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01048c4:	89 04 24             	mov    %eax,(%esp)
+c01048c7:	e8 2b ff ff ff       	call   c01047f7 <page2kva>
+}
+c01048cc:	c9                   	leave  
+c01048cd:	c3                   	ret    
+
+c01048ce <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c01048ce:	55                   	push   %ebp
+c01048cf:	89 e5                	mov    %esp,%ebp
+c01048d1:	53                   	push   %ebx
+c01048d2:	83 ec 14             	sub    $0x14,%esp
+  free_pages(kva2page(kva), 1 << order);
+c01048d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01048d8:	ba 01 00 00 00       	mov    $0x1,%edx
+c01048dd:	89 c1                	mov    %eax,%ecx
+c01048df:	d3 e2                	shl    %cl,%edx
+c01048e1:	89 d0                	mov    %edx,%eax
+c01048e3:	89 c3                	mov    %eax,%ebx
+c01048e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01048e8:	89 04 24             	mov    %eax,(%esp)
+c01048eb:	e8 5b ff ff ff       	call   c010484b <kva2page>
+c01048f0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c01048f4:	89 04 24             	mov    %eax,(%esp)
+c01048f7:	e8 27 09 00 00       	call   c0105223 <free_pages>
+}
+c01048fc:	83 c4 14             	add    $0x14,%esp
+c01048ff:	5b                   	pop    %ebx
+c0104900:	5d                   	pop    %ebp
+c0104901:	c3                   	ret    
+
+c0104902 <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c0104902:	55                   	push   %ebp
+c0104903:	89 e5                	mov    %esp,%ebp
+c0104905:	83 ec 38             	sub    $0x38,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c0104908:	8b 45 08             	mov    0x8(%ebp),%eax
+c010490b:	83 c0 08             	add    $0x8,%eax
+c010490e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0104913:	76 24                	jbe    c0104939 <slob_alloc+0x37>
+c0104915:	c7 44 24 0c bc e3 10 	movl   $0xc010e3bc,0xc(%esp)
+c010491c:	c0 
+c010491d:	c7 44 24 08 db e3 10 	movl   $0xc010e3db,0x8(%esp)
+c0104924:	c0 
+c0104925:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c010492c:	00 
+c010492d:	c7 04 24 f0 e3 10 c0 	movl   $0xc010e3f0,(%esp)
+c0104934:	e8 88 c4 ff ff       	call   c0100dc1 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c0104939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c0104940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0104947:	8b 45 08             	mov    0x8(%ebp),%eax
+c010494a:	83 c0 07             	add    $0x7,%eax
+c010494d:	c1 e8 03             	shr    $0x3,%eax
+c0104950:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c0104953:	e8 f3 fd ff ff       	call   c010474b <__intr_save>
+c0104958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c010495b:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
+c0104960:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0104963:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104966:	8b 40 04             	mov    0x4(%eax),%eax
+c0104969:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c010496c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0104970:	74 25                	je     c0104997 <slob_alloc+0x95>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c0104972:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104975:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104978:	01 d0                	add    %edx,%eax
+c010497a:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010497d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104980:	f7 d8                	neg    %eax
+c0104982:	21 d0                	and    %edx,%eax
+c0104984:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c0104987:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010498a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010498d:	29 c2                	sub    %eax,%edx
+c010498f:	89 d0                	mov    %edx,%eax
+c0104991:	c1 f8 03             	sar    $0x3,%eax
+c0104994:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c0104997:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010499a:	8b 00                	mov    (%eax),%eax
+c010499c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010499f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c01049a2:	01 ca                	add    %ecx,%edx
+c01049a4:	39 d0                	cmp    %edx,%eax
+c01049a6:	0f 8c aa 00 00 00    	jl     c0104a56 <slob_alloc+0x154>
+			if (delta) { /* need to fragment head to align? */
+c01049ac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01049b0:	74 38                	je     c01049ea <slob_alloc+0xe8>
+				aligned->units = cur->units - delta;
+c01049b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049b5:	8b 00                	mov    (%eax),%eax
+c01049b7:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c01049ba:	89 c2                	mov    %eax,%edx
+c01049bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049bf:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c01049c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049c4:	8b 50 04             	mov    0x4(%eax),%edx
+c01049c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049ca:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c01049cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01049d3:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c01049d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01049dc:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c01049de:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c01049e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c01049ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049ed:	8b 00                	mov    (%eax),%eax
+c01049ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01049f2:	75 0e                	jne    c0104a02 <slob_alloc+0x100>
+				prev->next = cur->next; /* unlink */
+c01049f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049f7:	8b 50 04             	mov    0x4(%eax),%edx
+c01049fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01049fd:	89 50 04             	mov    %edx,0x4(%eax)
+c0104a00:	eb 3c                	jmp    c0104a3e <slob_alloc+0x13c>
+			else { /* fragment */
+				prev->next = cur + units;
+c0104a02:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104a05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104a0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a0f:	01 c2                	add    %eax,%edx
+c0104a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a14:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c0104a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a1a:	8b 40 04             	mov    0x4(%eax),%eax
+c0104a1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104a20:	8b 12                	mov    (%edx),%edx
+c0104a22:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c0104a25:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c0104a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a2a:	8b 40 04             	mov    0x4(%eax),%eax
+c0104a2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104a30:	8b 52 04             	mov    0x4(%edx),%edx
+c0104a33:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c0104a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a39:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0104a3c:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c0104a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a41:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0104a46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104a49:	89 04 24             	mov    %eax,(%esp)
+c0104a4c:	e8 24 fd ff ff       	call   c0104775 <__intr_restore>
+			return cur;
+c0104a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a54:	eb 7f                	jmp    c0104ad5 <slob_alloc+0x1d3>
+		}
+		if (cur == slobfree) {
+c0104a56:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
+c0104a5b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104a5e:	75 61                	jne    c0104ac1 <slob_alloc+0x1bf>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0104a60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104a63:	89 04 24             	mov    %eax,(%esp)
+c0104a66:	e8 0a fd ff ff       	call   c0104775 <__intr_restore>
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0104a6b:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104a72:	75 07                	jne    c0104a7b <slob_alloc+0x179>
+				return 0;
+c0104a74:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104a79:	eb 5a                	jmp    c0104ad5 <slob_alloc+0x1d3>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c0104a7b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104a82:	00 
+c0104a83:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104a86:	89 04 24             	mov    %eax,(%esp)
+c0104a89:	e8 07 fe ff ff       	call   c0104895 <__slob_get_free_pages>
+c0104a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c0104a91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a95:	75 07                	jne    c0104a9e <slob_alloc+0x19c>
+				return 0;
+c0104a97:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104a9c:	eb 37                	jmp    c0104ad5 <slob_alloc+0x1d3>
+
+			slob_free(cur, PAGE_SIZE);
+c0104a9e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104aa5:	00 
+c0104aa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aa9:	89 04 24             	mov    %eax,(%esp)
+c0104aac:	e8 26 00 00 00       	call   c0104ad7 <slob_free>
+			spin_lock_irqsave(&slob_lock, flags);
+c0104ab1:	e8 95 fc ff ff       	call   c010474b <__intr_save>
+c0104ab6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c0104ab9:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
+c0104abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+	prev = slobfree;
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0104ac1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aca:	8b 40 04             	mov    0x4(%eax),%eax
+c0104acd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+			slob_free(cur, PAGE_SIZE);
+			spin_lock_irqsave(&slob_lock, flags);
+			cur = slobfree;
+		}
+	}
+c0104ad0:	e9 97 fe ff ff       	jmp    c010496c <slob_alloc+0x6a>
+}
+c0104ad5:	c9                   	leave  
+c0104ad6:	c3                   	ret    
+
+c0104ad7 <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c0104ad7:	55                   	push   %ebp
+c0104ad8:	89 e5                	mov    %esp,%ebp
+c0104ada:	83 ec 28             	sub    $0x28,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c0104add:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104ae3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104ae7:	75 05                	jne    c0104aee <slob_free+0x17>
+		return;
+c0104ae9:	e9 ff 00 00 00       	jmp    c0104bed <slob_free+0x116>
+
+	if (size)
+c0104aee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0104af2:	74 10                	je     c0104b04 <slob_free+0x2d>
+		b->units = SLOB_UNITS(size);
+c0104af4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104af7:	83 c0 07             	add    $0x7,%eax
+c0104afa:	c1 e8 03             	shr    $0x3,%eax
+c0104afd:	89 c2                	mov    %eax,%edx
+c0104aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b02:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c0104b04:	e8 42 fc ff ff       	call   c010474b <__intr_save>
+c0104b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104b0c:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
+c0104b11:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104b14:	eb 27                	jmp    c0104b3d <slob_free+0x66>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c0104b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b19:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b1f:	77 13                	ja     c0104b34 <slob_free+0x5d>
+c0104b21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b27:	77 27                	ja     c0104b50 <slob_free+0x79>
+c0104b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b2c:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104b32:	77 1c                	ja     c0104b50 <slob_free+0x79>
+	if (size)
+		b->units = SLOB_UNITS(size);
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b37:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104b3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b40:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b43:	76 d1                	jbe    c0104b16 <slob_free+0x3f>
+c0104b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b48:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b4b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104b4e:	76 c6                	jbe    c0104b16 <slob_free+0x3f>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+			break;
+
+	if (b + b->units == cur->next) {
+c0104b50:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b53:	8b 00                	mov    (%eax),%eax
+c0104b55:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b5f:	01 c2                	add    %eax,%edx
+c0104b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b64:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b67:	39 c2                	cmp    %eax,%edx
+c0104b69:	75 25                	jne    c0104b90 <slob_free+0xb9>
+		b->units += cur->next->units;
+c0104b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b6e:	8b 10                	mov    (%eax),%edx
+c0104b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b73:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b76:	8b 00                	mov    (%eax),%eax
+c0104b78:	01 c2                	add    %eax,%edx
+c0104b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b7d:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0104b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b82:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b85:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b8b:	89 50 04             	mov    %edx,0x4(%eax)
+c0104b8e:	eb 0c                	jmp    c0104b9c <slob_free+0xc5>
+	} else
+		b->next = cur->next;
+c0104b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b93:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b96:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b99:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0104b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b9f:	8b 00                	mov    (%eax),%eax
+c0104ba1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bab:	01 d0                	add    %edx,%eax
+c0104bad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104bb0:	75 1f                	jne    c0104bd1 <slob_free+0xfa>
+		cur->units += b->units;
+c0104bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bb5:	8b 10                	mov    (%eax),%edx
+c0104bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104bba:	8b 00                	mov    (%eax),%eax
+c0104bbc:	01 c2                	add    %eax,%edx
+c0104bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bc1:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c0104bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104bc6:	8b 50 04             	mov    0x4(%eax),%edx
+c0104bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bcc:	89 50 04             	mov    %edx,0x4(%eax)
+c0104bcf:	eb 09                	jmp    c0104bda <slob_free+0x103>
+	} else
+		cur->next = b;
+c0104bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104bd7:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0104bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bdd:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0104be2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104be5:	89 04 24             	mov    %eax,(%esp)
+c0104be8:	e8 88 fb ff ff       	call   c0104775 <__intr_restore>
+}
+c0104bed:	c9                   	leave  
+c0104bee:	c3                   	ret    
+
+c0104bef <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0104bef:	55                   	push   %ebp
+c0104bf0:	89 e5                	mov    %esp,%ebp
+c0104bf2:	83 ec 18             	sub    $0x18,%esp
+  cprintf("use SLOB allocator\n");
+c0104bf5:	c7 04 24 02 e4 10 c0 	movl   $0xc010e402,(%esp)
+c0104bfc:	e8 57 b7 ff ff       	call   c0100358 <cprintf>
+}
+c0104c01:	c9                   	leave  
+c0104c02:	c3                   	ret    
+
+c0104c03 <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c0104c03:	55                   	push   %ebp
+c0104c04:	89 e5                	mov    %esp,%ebp
+c0104c06:	83 ec 18             	sub    $0x18,%esp
+    slob_init();
+c0104c09:	e8 e1 ff ff ff       	call   c0104bef <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c0104c0e:	c7 04 24 16 e4 10 c0 	movl   $0xc010e416,(%esp)
+c0104c15:	e8 3e b7 ff ff       	call   c0100358 <cprintf>
+}
+c0104c1a:	c9                   	leave  
+c0104c1b:	c3                   	ret    
+
+c0104c1c <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c0104c1c:	55                   	push   %ebp
+c0104c1d:	89 e5                	mov    %esp,%ebp
+  return 0;
+c0104c1f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104c24:	5d                   	pop    %ebp
+c0104c25:	c3                   	ret    
+
+c0104c26 <kallocated>:
+
+size_t
+kallocated(void) {
+c0104c26:	55                   	push   %ebp
+c0104c27:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c0104c29:	e8 ee ff ff ff       	call   c0104c1c <slob_allocated>
+}
+c0104c2e:	5d                   	pop    %ebp
+c0104c2f:	c3                   	ret    
+
+c0104c30 <find_order>:
+
+static int find_order(int size)
+{
+c0104c30:	55                   	push   %ebp
+c0104c31:	89 e5                	mov    %esp,%ebp
+c0104c33:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c0104c36:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c0104c3d:	eb 07                	jmp    c0104c46 <find_order+0x16>
+		order++;
+c0104c3f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+}
+
+static int find_order(int size)
+{
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)
+c0104c43:	d1 7d 08             	sarl   0x8(%ebp)
+c0104c46:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104c4d:	7f f0                	jg     c0104c3f <find_order+0xf>
+		order++;
+	return order;
+c0104c4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0104c52:	c9                   	leave  
+c0104c53:	c3                   	ret    
+
+c0104c54 <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c0104c54:	55                   	push   %ebp
+c0104c55:	89 e5                	mov    %esp,%ebp
+c0104c57:	83 ec 28             	sub    $0x28,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0104c5a:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c0104c61:	77 38                	ja     c0104c9b <__kmalloc+0x47>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c0104c63:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104c66:	8d 50 08             	lea    0x8(%eax),%edx
+c0104c69:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104c70:	00 
+c0104c71:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104c74:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104c78:	89 14 24             	mov    %edx,(%esp)
+c0104c7b:	e8 82 fc ff ff       	call   c0104902 <slob_alloc>
+c0104c80:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c0104c83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104c87:	74 08                	je     c0104c91 <__kmalloc+0x3d>
+c0104c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104c8c:	83 c0 08             	add    $0x8,%eax
+c0104c8f:	eb 05                	jmp    c0104c96 <__kmalloc+0x42>
+c0104c91:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104c96:	e9 a6 00 00 00       	jmp    c0104d41 <__kmalloc+0xed>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0104c9b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104ca2:	00 
+c0104ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104ca6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104caa:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+c0104cb1:	e8 4c fc ff ff       	call   c0104902 <slob_alloc>
+c0104cb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	if (!bb)
+c0104cb9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104cbd:	75 07                	jne    c0104cc6 <__kmalloc+0x72>
+		return 0;
+c0104cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104cc4:	eb 7b                	jmp    c0104d41 <__kmalloc+0xed>
+
+	bb->order = find_order(size);
+c0104cc6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104cc9:	89 04 24             	mov    %eax,(%esp)
+c0104ccc:	e8 5f ff ff ff       	call   c0104c30 <find_order>
+c0104cd1:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104cd4:	89 02                	mov    %eax,(%edx)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cd9:	8b 00                	mov    (%eax),%eax
+c0104cdb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104ce2:	89 04 24             	mov    %eax,(%esp)
+c0104ce5:	e8 ab fb ff ff       	call   c0104895 <__slob_get_free_pages>
+c0104cea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104ced:	89 42 04             	mov    %eax,0x4(%edx)
+
+	if (bb->pages) {
+c0104cf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cf3:	8b 40 04             	mov    0x4(%eax),%eax
+c0104cf6:	85 c0                	test   %eax,%eax
+c0104cf8:	74 2f                	je     c0104d29 <__kmalloc+0xd5>
+		spin_lock_irqsave(&block_lock, flags);
+c0104cfa:	e8 4c fa ff ff       	call   c010474b <__intr_save>
+c0104cff:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		bb->next = bigblocks;
+c0104d02:	8b 15 84 33 1c c0    	mov    0xc01c3384,%edx
+c0104d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d0b:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c0104d0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d11:	a3 84 33 1c c0       	mov    %eax,0xc01c3384
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104d16:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d19:	89 04 24             	mov    %eax,(%esp)
+c0104d1c:	e8 54 fa ff ff       	call   c0104775 <__intr_restore>
+		return bb->pages;
+c0104d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d24:	8b 40 04             	mov    0x4(%eax),%eax
+c0104d27:	eb 18                	jmp    c0104d41 <__kmalloc+0xed>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c0104d29:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104d30:	00 
+c0104d31:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d34:	89 04 24             	mov    %eax,(%esp)
+c0104d37:	e8 9b fd ff ff       	call   c0104ad7 <slob_free>
+	return 0;
+c0104d3c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104d41:	c9                   	leave  
+c0104d42:	c3                   	ret    
+
+c0104d43 <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c0104d43:	55                   	push   %ebp
+c0104d44:	89 e5                	mov    %esp,%ebp
+c0104d46:	83 ec 18             	sub    $0x18,%esp
+  return __kmalloc(size, 0);
+c0104d49:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104d50:	00 
+c0104d51:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d54:	89 04 24             	mov    %eax,(%esp)
+c0104d57:	e8 f8 fe ff ff       	call   c0104c54 <__kmalloc>
+}
+c0104d5c:	c9                   	leave  
+c0104d5d:	c3                   	ret    
+
+c0104d5e <kfree>:
+
+
+void kfree(void *block)
+{
+c0104d5e:	55                   	push   %ebp
+c0104d5f:	89 e5                	mov    %esp,%ebp
+c0104d61:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0104d64:	c7 45 f0 84 33 1c c0 	movl   $0xc01c3384,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104d6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104d6f:	75 05                	jne    c0104d76 <kfree+0x18>
+		return;
+c0104d71:	e9 a2 00 00 00       	jmp    c0104e18 <kfree+0xba>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104d76:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d79:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104d7e:	85 c0                	test   %eax,%eax
+c0104d80:	75 7f                	jne    c0104e01 <kfree+0xa3>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0104d82:	e8 c4 f9 ff ff       	call   c010474b <__intr_save>
+c0104d87:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104d8a:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
+c0104d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104d92:	eb 5c                	jmp    c0104df0 <kfree+0x92>
+			if (bb->pages == block) {
+c0104d94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d97:	8b 40 04             	mov    0x4(%eax),%eax
+c0104d9a:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104d9d:	75 3f                	jne    c0104dde <kfree+0x80>
+				*last = bb->next;
+c0104d9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104da2:	8b 50 08             	mov    0x8(%eax),%edx
+c0104da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104da8:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c0104daa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104dad:	89 04 24             	mov    %eax,(%esp)
+c0104db0:	e8 c0 f9 ff ff       	call   c0104775 <__intr_restore>
+				__slob_free_pages((unsigned long)block, bb->order);
+c0104db5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104db8:	8b 10                	mov    (%eax),%edx
+c0104dba:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104dbd:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0104dc1:	89 04 24             	mov    %eax,(%esp)
+c0104dc4:	e8 05 fb ff ff       	call   c01048ce <__slob_free_pages>
+				slob_free(bb, sizeof(bigblock_t));
+c0104dc9:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104dd0:	00 
+c0104dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104dd4:	89 04 24             	mov    %eax,(%esp)
+c0104dd7:	e8 fb fc ff ff       	call   c0104ad7 <slob_free>
+				return;
+c0104ddc:	eb 3a                	jmp    c0104e18 <kfree+0xba>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104de1:	83 c0 08             	add    $0x8,%eax
+c0104de4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104dea:	8b 40 08             	mov    0x8(%eax),%eax
+c0104ded:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104df0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104df4:	75 9e                	jne    c0104d94 <kfree+0x36>
+				__slob_free_pages((unsigned long)block, bb->order);
+				slob_free(bb, sizeof(bigblock_t));
+				return;
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104df9:	89 04 24             	mov    %eax,(%esp)
+c0104dfc:	e8 74 f9 ff ff       	call   c0104775 <__intr_restore>
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c0104e01:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e04:	83 e8 08             	sub    $0x8,%eax
+c0104e07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104e0e:	00 
+c0104e0f:	89 04 24             	mov    %eax,(%esp)
+c0104e12:	e8 c0 fc ff ff       	call   c0104ad7 <slob_free>
+	return;
+c0104e17:	90                   	nop
+}
+c0104e18:	c9                   	leave  
+c0104e19:	c3                   	ret    
+
+c0104e1a <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c0104e1a:	55                   	push   %ebp
+c0104e1b:	89 e5                	mov    %esp,%ebp
+c0104e1d:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c0104e20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104e24:	75 07                	jne    c0104e2d <ksize+0x13>
+		return 0;
+c0104e26:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104e2b:	eb 6b                	jmp    c0104e98 <ksize+0x7e>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104e2d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e30:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104e35:	85 c0                	test   %eax,%eax
+c0104e37:	75 54                	jne    c0104e8d <ksize+0x73>
+		spin_lock_irqsave(&block_lock, flags);
+c0104e39:	e8 0d f9 ff ff       	call   c010474b <__intr_save>
+c0104e3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104e41:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
+c0104e46:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104e49:	eb 31                	jmp    c0104e7c <ksize+0x62>
+			if (bb->pages == block) {
+c0104e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e4e:	8b 40 04             	mov    0x4(%eax),%eax
+c0104e51:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104e54:	75 1d                	jne    c0104e73 <ksize+0x59>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c0104e56:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e59:	89 04 24             	mov    %eax,(%esp)
+c0104e5c:	e8 14 f9 ff ff       	call   c0104775 <__intr_restore>
+				return PAGE_SIZE << bb->order;
+c0104e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e64:	8b 00                	mov    (%eax),%eax
+c0104e66:	ba 00 10 00 00       	mov    $0x1000,%edx
+c0104e6b:	89 c1                	mov    %eax,%ecx
+c0104e6d:	d3 e2                	shl    %cl,%edx
+c0104e6f:	89 d0                	mov    %edx,%eax
+c0104e71:	eb 25                	jmp    c0104e98 <ksize+0x7e>
+	if (!block)
+		return 0;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e76:	8b 40 08             	mov    0x8(%eax),%eax
+c0104e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104e80:	75 c9                	jne    c0104e4b <ksize+0x31>
+			if (bb->pages == block) {
+				spin_unlock_irqrestore(&slob_lock, flags);
+				return PAGE_SIZE << bb->order;
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e85:	89 04 24             	mov    %eax,(%esp)
+c0104e88:	e8 e8 f8 ff ff       	call   c0104775 <__intr_restore>
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0104e8d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e90:	83 e8 08             	sub    $0x8,%eax
+c0104e93:	8b 00                	mov    (%eax),%eax
+c0104e95:	c1 e0 03             	shl    $0x3,%eax
+}
+c0104e98:	c9                   	leave  
+c0104e99:	c3                   	ret    
+
+c0104e9a <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104e9a:	55                   	push   %ebp
+c0104e9b:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104e9d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104ea0:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c0104ea5:	29 c2                	sub    %eax,%edx
+c0104ea7:	89 d0                	mov    %edx,%eax
+c0104ea9:	c1 f8 05             	sar    $0x5,%eax
+}
+c0104eac:	5d                   	pop    %ebp
+c0104ead:	c3                   	ret    
+
+c0104eae <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0104eae:	55                   	push   %ebp
+c0104eaf:	89 e5                	mov    %esp,%ebp
+c0104eb1:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0104eb4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104eb7:	89 04 24             	mov    %eax,(%esp)
+c0104eba:	e8 db ff ff ff       	call   c0104e9a <page2ppn>
+c0104ebf:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0104ec2:	c9                   	leave  
+c0104ec3:	c3                   	ret    
+
+c0104ec4 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0104ec4:	55                   	push   %ebp
+c0104ec5:	89 e5                	mov    %esp,%ebp
+c0104ec7:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0104eca:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ecd:	c1 e8 0c             	shr    $0xc,%eax
+c0104ed0:	89 c2                	mov    %eax,%edx
+c0104ed2:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0104ed7:	39 c2                	cmp    %eax,%edx
+c0104ed9:	72 1c                	jb     c0104ef7 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0104edb:	c7 44 24 08 34 e4 10 	movl   $0xc010e434,0x8(%esp)
+c0104ee2:	c0 
+c0104ee3:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0104eea:	00 
+c0104eeb:	c7 04 24 53 e4 10 c0 	movl   $0xc010e453,(%esp)
+c0104ef2:	e8 ca be ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0104ef7:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c0104efc:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104eff:	c1 ea 0c             	shr    $0xc,%edx
+c0104f02:	c1 e2 05             	shl    $0x5,%edx
+c0104f05:	01 d0                	add    %edx,%eax
+}
+c0104f07:	c9                   	leave  
+c0104f08:	c3                   	ret    
+
+c0104f09 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0104f09:	55                   	push   %ebp
+c0104f0a:	89 e5                	mov    %esp,%ebp
+c0104f0c:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0104f0f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f12:	89 04 24             	mov    %eax,(%esp)
+c0104f15:	e8 94 ff ff ff       	call   c0104eae <page2pa>
+c0104f1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f20:	c1 e8 0c             	shr    $0xc,%eax
+c0104f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104f26:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0104f2b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104f2e:	72 23                	jb     c0104f53 <page2kva+0x4a>
+c0104f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f33:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104f37:	c7 44 24 08 64 e4 10 	movl   $0xc010e464,0x8(%esp)
+c0104f3e:	c0 
+c0104f3f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0104f46:	00 
+c0104f47:	c7 04 24 53 e4 10 c0 	movl   $0xc010e453,(%esp)
+c0104f4e:	e8 6e be ff ff       	call   c0100dc1 <__panic>
+c0104f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f56:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0104f5b:	c9                   	leave  
+c0104f5c:	c3                   	ret    
+
+c0104f5d <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0104f5d:	55                   	push   %ebp
+c0104f5e:	89 e5                	mov    %esp,%ebp
+c0104f60:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0104f63:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f66:	83 e0 01             	and    $0x1,%eax
+c0104f69:	85 c0                	test   %eax,%eax
+c0104f6b:	75 1c                	jne    c0104f89 <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0104f6d:	c7 44 24 08 88 e4 10 	movl   $0xc010e488,0x8(%esp)
+c0104f74:	c0 
+c0104f75:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0104f7c:	00 
+c0104f7d:	c7 04 24 53 e4 10 c0 	movl   $0xc010e453,(%esp)
+c0104f84:	e8 38 be ff ff       	call   c0100dc1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0104f89:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104f91:	89 04 24             	mov    %eax,(%esp)
+c0104f94:	e8 2b ff ff ff       	call   c0104ec4 <pa2page>
+}
+c0104f99:	c9                   	leave  
+c0104f9a:	c3                   	ret    
+
+c0104f9b <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0104f9b:	55                   	push   %ebp
+c0104f9c:	89 e5                	mov    %esp,%ebp
+c0104f9e:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0104fa1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fa4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104fa9:	89 04 24             	mov    %eax,(%esp)
+c0104fac:	e8 13 ff ff ff       	call   c0104ec4 <pa2page>
+}
+c0104fb1:	c9                   	leave  
+c0104fb2:	c3                   	ret    
+
+c0104fb3 <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c0104fb3:	55                   	push   %ebp
+c0104fb4:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0104fb6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fb9:	8b 00                	mov    (%eax),%eax
+}
+c0104fbb:	5d                   	pop    %ebp
+c0104fbc:	c3                   	ret    
+
+c0104fbd <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0104fbd:	55                   	push   %ebp
+c0104fbe:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0104fc0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fc3:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0104fc6:	89 10                	mov    %edx,(%eax)
+}
+c0104fc8:	5d                   	pop    %ebp
+c0104fc9:	c3                   	ret    
+
+c0104fca <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c0104fca:	55                   	push   %ebp
+c0104fcb:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c0104fcd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fd0:	8b 00                	mov    (%eax),%eax
+c0104fd2:	8d 50 01             	lea    0x1(%eax),%edx
+c0104fd5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fd8:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104fda:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fdd:	8b 00                	mov    (%eax),%eax
+}
+c0104fdf:	5d                   	pop    %ebp
+c0104fe0:	c3                   	ret    
+
+c0104fe1 <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c0104fe1:	55                   	push   %ebp
+c0104fe2:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0104fe4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fe7:	8b 00                	mov    (%eax),%eax
+c0104fe9:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0104fec:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fef:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104ff1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ff4:	8b 00                	mov    (%eax),%eax
+}
+c0104ff6:	5d                   	pop    %ebp
+c0104ff7:	c3                   	ret    
+
+c0104ff8 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0104ff8:	55                   	push   %ebp
+c0104ff9:	89 e5                	mov    %esp,%ebp
+c0104ffb:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0104ffe:	9c                   	pushf  
+c0104fff:	58                   	pop    %eax
+c0105000:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0105003:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0105006:	25 00 02 00 00       	and    $0x200,%eax
+c010500b:	85 c0                	test   %eax,%eax
+c010500d:	74 0c                	je     c010501b <__intr_save+0x23>
+        intr_disable();
+c010500f:	e8 05 d0 ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c0105014:	b8 01 00 00 00       	mov    $0x1,%eax
+c0105019:	eb 05                	jmp    c0105020 <__intr_save+0x28>
+    }
+    return 0;
+c010501b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105020:	c9                   	leave  
+c0105021:	c3                   	ret    
+
+c0105022 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0105022:	55                   	push   %ebp
+c0105023:	89 e5                	mov    %esp,%ebp
+c0105025:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0105028:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010502c:	74 05                	je     c0105033 <__intr_restore+0x11>
+        intr_enable();
+c010502e:	e8 e0 cf ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c0105033:	c9                   	leave  
+c0105034:	c3                   	ret    
+
+c0105035 <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c0105035:	55                   	push   %ebp
+c0105036:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c0105038:	8b 45 08             	mov    0x8(%ebp),%eax
+c010503b:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c010503e:	b8 23 00 00 00       	mov    $0x23,%eax
+c0105043:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c0105045:	b8 23 00 00 00       	mov    $0x23,%eax
+c010504a:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c010504c:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105051:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c0105053:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105058:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c010505a:	b8 10 00 00 00       	mov    $0x10,%eax
+c010505f:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c0105061:	ea 68 50 10 c0 08 00 	ljmp   $0x8,$0xc0105068
+}
+c0105068:	5d                   	pop    %ebp
+c0105069:	c3                   	ret    
+
+c010506a <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c010506a:	55                   	push   %ebp
+c010506b:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c010506d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105070:	a3 c4 33 1c c0       	mov    %eax,0xc01c33c4
+}
+c0105075:	5d                   	pop    %ebp
+c0105076:	c3                   	ret    
+
+c0105077 <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c0105077:	55                   	push   %ebp
+c0105078:	89 e5                	mov    %esp,%ebp
+c010507a:	83 ec 14             	sub    $0x14,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c010507d:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
+c0105082:	89 04 24             	mov    %eax,(%esp)
+c0105085:	e8 e0 ff ff ff       	call   c010506a <load_esp0>
+    ts.ts_ss0 = KERNEL_DS;
+c010508a:	66 c7 05 c8 33 1c c0 	movw   $0x10,0xc01c33c8
+c0105091:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c0105093:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
+c010509a:	68 00 
+c010509c:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
+c01050a1:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
+c01050a7:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
+c01050ac:	c1 e8 10             	shr    $0x10,%eax
+c01050af:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
+c01050b4:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
+c01050bb:	83 e0 f0             	and    $0xfffffff0,%eax
+c01050be:	83 c8 09             	or     $0x9,%eax
+c01050c1:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
+c01050c6:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
+c01050cd:	83 e0 ef             	and    $0xffffffef,%eax
+c01050d0:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
+c01050d5:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
+c01050dc:	83 e0 9f             	and    $0xffffff9f,%eax
+c01050df:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
+c01050e4:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
+c01050eb:	83 c8 80             	or     $0xffffff80,%eax
+c01050ee:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
+c01050f3:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
+c01050fa:	83 e0 f0             	and    $0xfffffff0,%eax
+c01050fd:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
+c0105102:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
+c0105109:	83 e0 ef             	and    $0xffffffef,%eax
+c010510c:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
+c0105111:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
+c0105118:	83 e0 df             	and    $0xffffffdf,%eax
+c010511b:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
+c0105120:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
+c0105127:	83 c8 40             	or     $0x40,%eax
+c010512a:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
+c010512f:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
+c0105136:	83 e0 7f             	and    $0x7f,%eax
+c0105139:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
+c010513e:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
+c0105143:	c1 e8 18             	shr    $0x18,%eax
+c0105146:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c010514b:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
+c0105152:	e8 de fe ff ff       	call   c0105035 <lgdt>
+c0105157:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c010515d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0105161:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0105164:	c9                   	leave  
+c0105165:	c3                   	ret    
+
+c0105166 <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c0105166:	55                   	push   %ebp
+c0105167:	89 e5                	mov    %esp,%ebp
+c0105169:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager = &default_pmm_manager;
+c010516c:	c7 05 e8 54 1c c0 28 	movl   $0xc010e328,0xc01c54e8
+c0105173:	e3 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c0105176:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c010517b:	8b 00                	mov    (%eax),%eax
+c010517d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105181:	c7 04 24 b4 e4 10 c0 	movl   $0xc010e4b4,(%esp)
+c0105188:	e8 cb b1 ff ff       	call   c0100358 <cprintf>
+    pmm_manager->init();
+c010518d:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c0105192:	8b 40 04             	mov    0x4(%eax),%eax
+c0105195:	ff d0                	call   *%eax
+}
+c0105197:	c9                   	leave  
+c0105198:	c3                   	ret    
+
+c0105199 <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c0105199:	55                   	push   %ebp
+c010519a:	89 e5                	mov    %esp,%ebp
+c010519c:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->init_memmap(base, n);
+c010519f:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c01051a4:	8b 40 08             	mov    0x8(%eax),%eax
+c01051a7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01051aa:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01051ae:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051b1:	89 14 24             	mov    %edx,(%esp)
+c01051b4:	ff d0                	call   *%eax
+}
+c01051b6:	c9                   	leave  
+c01051b7:	c3                   	ret    
+
+c01051b8 <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c01051b8:	55                   	push   %ebp
+c01051b9:	89 e5                	mov    %esp,%ebp
+c01051bb:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page=NULL;
+c01051be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c01051c5:	e8 2e fe ff ff       	call   c0104ff8 <__intr_save>
+c01051ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c01051cd:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c01051d2:	8b 40 0c             	mov    0xc(%eax),%eax
+c01051d5:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051d8:	89 14 24             	mov    %edx,(%esp)
+c01051db:	ff d0                	call   *%eax
+c01051dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c01051e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01051e3:	89 04 24             	mov    %eax,(%esp)
+c01051e6:	e8 37 fe ff ff       	call   c0105022 <__intr_restore>
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c01051eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01051ef:	75 2d                	jne    c010521e <alloc_pages+0x66>
+c01051f1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01051f5:	77 27                	ja     c010521e <alloc_pages+0x66>
+c01051f7:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
+c01051fc:	85 c0                	test   %eax,%eax
+c01051fe:	74 1e                	je     c010521e <alloc_pages+0x66>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c0105200:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105203:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c0105208:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010520f:	00 
+c0105210:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0105214:	89 04 24             	mov    %eax,(%esp)
+c0105217:	e8 9e 1d 00 00       	call   c0106fba <swap_out>
+    }
+c010521c:	eb a7                	jmp    c01051c5 <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c010521e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105221:	c9                   	leave  
+c0105222:	c3                   	ret    
+
+c0105223 <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c0105223:	55                   	push   %ebp
+c0105224:	89 e5                	mov    %esp,%ebp
+c0105226:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0105229:	e8 ca fd ff ff       	call   c0104ff8 <__intr_save>
+c010522e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c0105231:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c0105236:	8b 40 10             	mov    0x10(%eax),%eax
+c0105239:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010523c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0105240:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105243:	89 14 24             	mov    %edx,(%esp)
+c0105246:	ff d0                	call   *%eax
+    }
+    local_intr_restore(intr_flag);
+c0105248:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010524b:	89 04 24             	mov    %eax,(%esp)
+c010524e:	e8 cf fd ff ff       	call   c0105022 <__intr_restore>
+}
+c0105253:	c9                   	leave  
+c0105254:	c3                   	ret    
+
+c0105255 <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c0105255:	55                   	push   %ebp
+c0105256:	89 e5                	mov    %esp,%ebp
+c0105258:	83 ec 28             	sub    $0x28,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010525b:	e8 98 fd ff ff       	call   c0104ff8 <__intr_save>
+c0105260:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c0105263:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c0105268:	8b 40 14             	mov    0x14(%eax),%eax
+c010526b:	ff d0                	call   *%eax
+c010526d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0105270:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105273:	89 04 24             	mov    %eax,(%esp)
+c0105276:	e8 a7 fd ff ff       	call   c0105022 <__intr_restore>
+    return ret;
+c010527b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c010527e:	c9                   	leave  
+c010527f:	c3                   	ret    
+
+c0105280 <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c0105280:	55                   	push   %ebp
+c0105281:	89 e5                	mov    %esp,%ebp
+c0105283:	57                   	push   %edi
+c0105284:	56                   	push   %esi
+c0105285:	53                   	push   %ebx
+c0105286:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c010528c:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c0105293:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c010529a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c01052a1:	c7 04 24 cb e4 10 c0 	movl   $0xc010e4cb,(%esp)
+c01052a8:	e8 ab b0 ff ff       	call   c0100358 <cprintf>
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01052ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01052b4:	e9 15 01 00 00       	jmp    c01053ce <page_init+0x14e>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c01052b9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052bc:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052bf:	89 d0                	mov    %edx,%eax
+c01052c1:	c1 e0 02             	shl    $0x2,%eax
+c01052c4:	01 d0                	add    %edx,%eax
+c01052c6:	c1 e0 02             	shl    $0x2,%eax
+c01052c9:	01 c8                	add    %ecx,%eax
+c01052cb:	8b 50 08             	mov    0x8(%eax),%edx
+c01052ce:	8b 40 04             	mov    0x4(%eax),%eax
+c01052d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c01052d4:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c01052d7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052da:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052dd:	89 d0                	mov    %edx,%eax
+c01052df:	c1 e0 02             	shl    $0x2,%eax
+c01052e2:	01 d0                	add    %edx,%eax
+c01052e4:	c1 e0 02             	shl    $0x2,%eax
+c01052e7:	01 c8                	add    %ecx,%eax
+c01052e9:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01052ec:	8b 58 10             	mov    0x10(%eax),%ebx
+c01052ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01052f2:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01052f5:	01 c8                	add    %ecx,%eax
+c01052f7:	11 da                	adc    %ebx,%edx
+c01052f9:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c01052fc:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c01052ff:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105302:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105305:	89 d0                	mov    %edx,%eax
+c0105307:	c1 e0 02             	shl    $0x2,%eax
+c010530a:	01 d0                	add    %edx,%eax
+c010530c:	c1 e0 02             	shl    $0x2,%eax
+c010530f:	01 c8                	add    %ecx,%eax
+c0105311:	83 c0 14             	add    $0x14,%eax
+c0105314:	8b 00                	mov    (%eax),%eax
+c0105316:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
+c010531c:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010531f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0105322:	83 c0 ff             	add    $0xffffffff,%eax
+c0105325:	83 d2 ff             	adc    $0xffffffff,%edx
+c0105328:	89 c6                	mov    %eax,%esi
+c010532a:	89 d7                	mov    %edx,%edi
+c010532c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010532f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105332:	89 d0                	mov    %edx,%eax
+c0105334:	c1 e0 02             	shl    $0x2,%eax
+c0105337:	01 d0                	add    %edx,%eax
+c0105339:	c1 e0 02             	shl    $0x2,%eax
+c010533c:	01 c8                	add    %ecx,%eax
+c010533e:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105341:	8b 58 10             	mov    0x10(%eax),%ebx
+c0105344:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
+c010534a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+c010534e:	89 74 24 14          	mov    %esi,0x14(%esp)
+c0105352:	89 7c 24 18          	mov    %edi,0x18(%esp)
+c0105356:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105359:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010535c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105360:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0105364:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0105368:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+c010536c:	c7 04 24 d8 e4 10 c0 	movl   $0xc010e4d8,(%esp)
+c0105373:	e8 e0 af ff ff       	call   c0100358 <cprintf>
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0105378:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010537b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010537e:	89 d0                	mov    %edx,%eax
+c0105380:	c1 e0 02             	shl    $0x2,%eax
+c0105383:	01 d0                	add    %edx,%eax
+c0105385:	c1 e0 02             	shl    $0x2,%eax
+c0105388:	01 c8                	add    %ecx,%eax
+c010538a:	83 c0 14             	add    $0x14,%eax
+c010538d:	8b 00                	mov    (%eax),%eax
+c010538f:	83 f8 01             	cmp    $0x1,%eax
+c0105392:	75 36                	jne    c01053ca <page_init+0x14a>
+            if (maxpa < end && begin < KMEMSIZE) {
+c0105394:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105397:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010539a:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c010539d:	77 2b                	ja     c01053ca <page_init+0x14a>
+c010539f:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c01053a2:	72 05                	jb     c01053a9 <page_init+0x129>
+c01053a4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c01053a7:	73 21                	jae    c01053ca <page_init+0x14a>
+c01053a9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c01053ad:	77 1b                	ja     c01053ca <page_init+0x14a>
+c01053af:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c01053b3:	72 09                	jb     c01053be <page_init+0x13e>
+c01053b5:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c01053bc:	77 0c                	ja     c01053ca <page_init+0x14a>
+                maxpa = end;
+c01053be:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01053c1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01053c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01053c7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01053ca:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c01053ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01053d1:	8b 00                	mov    (%eax),%eax
+c01053d3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c01053d6:	0f 8f dd fe ff ff    	jg     c01052b9 <page_init+0x39>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c01053dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01053e0:	72 1d                	jb     c01053ff <page_init+0x17f>
+c01053e2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01053e6:	77 09                	ja     c01053f1 <page_init+0x171>
+c01053e8:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c01053ef:	76 0e                	jbe    c01053ff <page_init+0x17f>
+        maxpa = KMEMSIZE;
+c01053f1:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c01053f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c01053ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105402:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105405:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0105409:	c1 ea 0c             	shr    $0xc,%edx
+c010540c:	a3 a0 33 1c c0       	mov    %eax,0xc01c33a0
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c0105411:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c0105418:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
+c010541d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0105420:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0105423:	01 d0                	add    %edx,%eax
+c0105425:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c0105428:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c010542b:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105430:	f7 75 ac             	divl   -0x54(%ebp)
+c0105433:	89 d0                	mov    %edx,%eax
+c0105435:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0105438:	29 c2                	sub    %eax,%edx
+c010543a:	89 d0                	mov    %edx,%eax
+c010543c:	a3 f0 54 1c c0       	mov    %eax,0xc01c54f0
+
+    for (i = 0; i < npage; i ++) {
+c0105441:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0105448:	eb 27                	jmp    c0105471 <page_init+0x1f1>
+        SetPageReserved(pages + i);
+c010544a:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c010544f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105452:	c1 e2 05             	shl    $0x5,%edx
+c0105455:	01 d0                	add    %edx,%eax
+c0105457:	83 c0 04             	add    $0x4,%eax
+c010545a:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c0105461:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0105464:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0105467:	8b 55 90             	mov    -0x70(%ebp),%edx
+c010546a:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c010546d:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0105471:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105474:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0105479:	39 c2                	cmp    %eax,%edx
+c010547b:	72 cd                	jb     c010544a <page_init+0x1ca>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c010547d:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0105482:	c1 e0 05             	shl    $0x5,%eax
+c0105485:	89 c2                	mov    %eax,%edx
+c0105487:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c010548c:	01 d0                	add    %edx,%eax
+c010548e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c0105491:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c0105498:	77 23                	ja     c01054bd <page_init+0x23d>
+c010549a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c010549d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01054a1:	c7 44 24 08 08 e5 10 	movl   $0xc010e508,0x8(%esp)
+c01054a8:	c0 
+c01054a9:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c01054b0:	00 
+c01054b1:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01054b8:	e8 04 b9 ff ff       	call   c0100dc1 <__panic>
+c01054bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c01054c0:	05 00 00 00 40       	add    $0x40000000,%eax
+c01054c5:	89 45 a0             	mov    %eax,-0x60(%ebp)
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01054c8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01054cf:	e9 74 01 00 00       	jmp    c0105648 <page_init+0x3c8>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c01054d4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01054da:	89 d0                	mov    %edx,%eax
+c01054dc:	c1 e0 02             	shl    $0x2,%eax
+c01054df:	01 d0                	add    %edx,%eax
+c01054e1:	c1 e0 02             	shl    $0x2,%eax
+c01054e4:	01 c8                	add    %ecx,%eax
+c01054e6:	8b 50 08             	mov    0x8(%eax),%edx
+c01054e9:	8b 40 04             	mov    0x4(%eax),%eax
+c01054ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01054ef:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01054f2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054f5:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01054f8:	89 d0                	mov    %edx,%eax
+c01054fa:	c1 e0 02             	shl    $0x2,%eax
+c01054fd:	01 d0                	add    %edx,%eax
+c01054ff:	c1 e0 02             	shl    $0x2,%eax
+c0105502:	01 c8                	add    %ecx,%eax
+c0105504:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105507:	8b 58 10             	mov    0x10(%eax),%ebx
+c010550a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010550d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105510:	01 c8                	add    %ecx,%eax
+c0105512:	11 da                	adc    %ebx,%edx
+c0105514:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0105517:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c010551a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010551d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105520:	89 d0                	mov    %edx,%eax
+c0105522:	c1 e0 02             	shl    $0x2,%eax
+c0105525:	01 d0                	add    %edx,%eax
+c0105527:	c1 e0 02             	shl    $0x2,%eax
+c010552a:	01 c8                	add    %ecx,%eax
+c010552c:	83 c0 14             	add    $0x14,%eax
+c010552f:	8b 00                	mov    (%eax),%eax
+c0105531:	83 f8 01             	cmp    $0x1,%eax
+c0105534:	0f 85 0a 01 00 00    	jne    c0105644 <page_init+0x3c4>
+            if (begin < freemem) {
+c010553a:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c010553d:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105542:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0105545:	72 17                	jb     c010555e <page_init+0x2de>
+c0105547:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010554a:	77 05                	ja     c0105551 <page_init+0x2d1>
+c010554c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010554f:	76 0d                	jbe    c010555e <page_init+0x2de>
+                begin = freemem;
+c0105551:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0105554:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0105557:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c010555e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105562:	72 1d                	jb     c0105581 <page_init+0x301>
+c0105564:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105568:	77 09                	ja     c0105573 <page_init+0x2f3>
+c010556a:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0105571:	76 0e                	jbe    c0105581 <page_init+0x301>
+                end = KMEMSIZE;
+c0105573:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c010557a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c0105581:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105587:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c010558a:	0f 87 b4 00 00 00    	ja     c0105644 <page_init+0x3c4>
+c0105590:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105593:	72 09                	jb     c010559e <page_init+0x31e>
+c0105595:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0105598:	0f 83 a6 00 00 00    	jae    c0105644 <page_init+0x3c4>
+                begin = ROUNDUP(begin, PGSIZE);
+c010559e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c01055a5:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01055a8:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c01055ab:	01 d0                	add    %edx,%eax
+c01055ad:	83 e8 01             	sub    $0x1,%eax
+c01055b0:	89 45 98             	mov    %eax,-0x68(%ebp)
+c01055b3:	8b 45 98             	mov    -0x68(%ebp),%eax
+c01055b6:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055bb:	f7 75 9c             	divl   -0x64(%ebp)
+c01055be:	89 d0                	mov    %edx,%eax
+c01055c0:	8b 55 98             	mov    -0x68(%ebp),%edx
+c01055c3:	29 c2                	sub    %eax,%edx
+c01055c5:	89 d0                	mov    %edx,%eax
+c01055c7:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01055cf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c01055d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01055d5:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c01055d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c01055db:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055e0:	89 c7                	mov    %eax,%edi
+c01055e2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+c01055e8:	89 7d 80             	mov    %edi,-0x80(%ebp)
+c01055eb:	89 d0                	mov    %edx,%eax
+c01055ed:	83 e0 00             	and    $0x0,%eax
+c01055f0:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c01055f3:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01055f6:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01055f9:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01055fc:	89 55 cc             	mov    %edx,-0x34(%ebp)
+                if (begin < end) {
+c01055ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105602:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105605:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105608:	77 3a                	ja     c0105644 <page_init+0x3c4>
+c010560a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c010560d:	72 05                	jb     c0105614 <page_init+0x394>
+c010560f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0105612:	73 30                	jae    c0105644 <page_init+0x3c4>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c0105614:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c0105617:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+c010561a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010561d:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0105620:	29 c8                	sub    %ecx,%eax
+c0105622:	19 da                	sbb    %ebx,%edx
+c0105624:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0105628:	c1 ea 0c             	shr    $0xc,%edx
+c010562b:	89 c3                	mov    %eax,%ebx
+c010562d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105630:	89 04 24             	mov    %eax,(%esp)
+c0105633:	e8 8c f8 ff ff       	call   c0104ec4 <pa2page>
+c0105638:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c010563c:	89 04 24             	mov    %eax,(%esp)
+c010563f:	e8 55 fb ff ff       	call   c0105199 <init_memmap>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0105644:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0105648:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010564b:	8b 00                	mov    (%eax),%eax
+c010564d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0105650:	0f 8f 7e fe ff ff    	jg     c01054d4 <page_init+0x254>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c0105656:	81 c4 9c 00 00 00    	add    $0x9c,%esp
+c010565c:	5b                   	pop    %ebx
+c010565d:	5e                   	pop    %esi
+c010565e:	5f                   	pop    %edi
+c010565f:	5d                   	pop    %ebp
+c0105660:	c3                   	ret    
+
+c0105661 <enable_paging>:
+
+static void
+enable_paging(void) {
+c0105661:	55                   	push   %ebp
+c0105662:	89 e5                	mov    %esp,%ebp
+c0105664:	83 ec 10             	sub    $0x10,%esp
+    lcr3(boot_cr3);
+c0105667:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
+c010566c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c010566f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0105672:	0f 22 d8             	mov    %eax,%cr3
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+c0105675:	0f 20 c0             	mov    %cr0,%eax
+c0105678:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr0;
+c010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+c010567e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+c0105681:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
+    cr0 &= ~(CR0_TS | CR0_EM);
+c0105688:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
+c010568c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010568f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+c0105692:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105695:	0f 22 c0             	mov    %eax,%cr0
+    lcr0(cr0);
+}
+c0105698:	c9                   	leave  
+c0105699:	c3                   	ret    
+
+c010569a <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c010569a:	55                   	push   %ebp
+c010569b:	89 e5                	mov    %esp,%ebp
+c010569d:	83 ec 38             	sub    $0x38,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c01056a0:	8b 45 14             	mov    0x14(%ebp),%eax
+c01056a3:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01056a6:	31 d0                	xor    %edx,%eax
+c01056a8:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01056ad:	85 c0                	test   %eax,%eax
+c01056af:	74 24                	je     c01056d5 <boot_map_segment+0x3b>
+c01056b1:	c7 44 24 0c 3a e5 10 	movl   $0xc010e53a,0xc(%esp)
+c01056b8:	c0 
+c01056b9:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01056c0:	c0 
+c01056c1:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
+c01056c8:	00 
+c01056c9:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01056d0:	e8 ec b6 ff ff       	call   c0100dc1 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c01056d5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c01056dc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01056df:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01056e4:	89 c2                	mov    %eax,%edx
+c01056e6:	8b 45 10             	mov    0x10(%ebp),%eax
+c01056e9:	01 c2                	add    %eax,%edx
+c01056eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01056ee:	01 d0                	add    %edx,%eax
+c01056f0:	83 e8 01             	sub    $0x1,%eax
+c01056f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01056f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01056f9:	ba 00 00 00 00       	mov    $0x0,%edx
+c01056fe:	f7 75 f0             	divl   -0x10(%ebp)
+c0105701:	89 d0                	mov    %edx,%eax
+c0105703:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0105706:	29 c2                	sub    %eax,%edx
+c0105708:	89 d0                	mov    %edx,%eax
+c010570a:	c1 e8 0c             	shr    $0xc,%eax
+c010570d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0105710:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105713:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105716:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105719:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010571e:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0105721:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105724:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105727:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010572a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010572f:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0105732:	eb 6b                	jmp    c010579f <boot_map_segment+0x105>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c0105734:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c010573b:	00 
+c010573c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010573f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105743:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105746:	89 04 24             	mov    %eax,(%esp)
+c0105749:	e8 d1 01 00 00       	call   c010591f <get_pte>
+c010574e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c0105751:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0105755:	75 24                	jne    c010577b <boot_map_segment+0xe1>
+c0105757:	c7 44 24 0c 66 e5 10 	movl   $0xc010e566,0xc(%esp)
+c010575e:	c0 
+c010575f:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105766:	c0 
+c0105767:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
+c010576e:	00 
+c010576f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105776:	e8 46 b6 ff ff       	call   c0100dc1 <__panic>
+        *ptep = pa | PTE_P | perm;
+c010577b:	8b 45 18             	mov    0x18(%ebp),%eax
+c010577e:	8b 55 14             	mov    0x14(%ebp),%edx
+c0105781:	09 d0                	or     %edx,%eax
+c0105783:	83 c8 01             	or     $0x1,%eax
+c0105786:	89 c2                	mov    %eax,%edx
+c0105788:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010578b:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c010578d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105791:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c0105798:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c010579f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01057a3:	75 8f                	jne    c0105734 <boot_map_segment+0x9a>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c01057a5:	c9                   	leave  
+c01057a6:	c3                   	ret    
+
+c01057a7 <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c01057a7:	55                   	push   %ebp
+c01057a8:	89 e5                	mov    %esp,%ebp
+c01057aa:	83 ec 28             	sub    $0x28,%esp
+    struct Page *p = alloc_page();
+c01057ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01057b4:	e8 ff f9 ff ff       	call   c01051b8 <alloc_pages>
+c01057b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c01057bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01057c0:	75 1c                	jne    c01057de <boot_alloc_page+0x37>
+        panic("boot_alloc_page failed.\n");
+c01057c2:	c7 44 24 08 73 e5 10 	movl   $0xc010e573,0x8(%esp)
+c01057c9:	c0 
+c01057ca:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
+c01057d1:	00 
+c01057d2:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01057d9:	e8 e3 b5 ff ff       	call   c0100dc1 <__panic>
+    }
+    return page2kva(p);
+c01057de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01057e1:	89 04 24             	mov    %eax,(%esp)
+c01057e4:	e8 20 f7 ff ff       	call   c0104f09 <page2kva>
+}
+c01057e9:	c9                   	leave  
+c01057ea:	c3                   	ret    
+
+c01057eb <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c01057eb:	55                   	push   %ebp
+c01057ec:	89 e5                	mov    %esp,%ebp
+c01057ee:	83 ec 38             	sub    $0x38,%esp
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c01057f1:	e8 70 f9 ff ff       	call   c0105166 <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c01057f6:	e8 85 fa ff ff       	call   c0105280 <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c01057fb:	e8 5a 09 00 00       	call   c010615a <check_alloc_page>
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+c0105800:	e8 a2 ff ff ff       	call   c01057a7 <boot_alloc_page>
+c0105805:	a3 a4 33 1c c0       	mov    %eax,0xc01c33a4
+    memset(boot_pgdir, 0, PGSIZE);
+c010580a:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010580f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0105816:	00 
+c0105817:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010581e:	00 
+c010581f:	89 04 24             	mov    %eax,(%esp)
+c0105822:	e8 9c 7c 00 00       	call   c010d4c3 <memset>
+    boot_cr3 = PADDR(boot_pgdir);
+c0105827:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010582c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010582f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0105836:	77 23                	ja     c010585b <pmm_init+0x70>
+c0105838:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010583b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010583f:	c7 44 24 08 08 e5 10 	movl   $0xc010e508,0x8(%esp)
+c0105846:	c0 
+c0105847:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
+c010584e:	00 
+c010584f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105856:	e8 66 b5 ff ff       	call   c0100dc1 <__panic>
+c010585b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010585e:	05 00 00 00 40       	add    $0x40000000,%eax
+c0105863:	a3 ec 54 1c c0       	mov    %eax,0xc01c54ec
+
+    check_pgdir();
+c0105868:	e8 0b 09 00 00       	call   c0106178 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c010586d:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0105872:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0105878:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010587d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105880:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c0105887:	77 23                	ja     c01058ac <pmm_init+0xc1>
+c0105889:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010588c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105890:	c7 44 24 08 08 e5 10 	movl   $0xc010e508,0x8(%esp)
+c0105897:	c0 
+c0105898:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
+c010589f:	00 
+c01058a0:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01058a7:	e8 15 b5 ff ff       	call   c0100dc1 <__panic>
+c01058ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058af:	05 00 00 00 40       	add    $0x40000000,%eax
+c01058b4:	83 c8 03             	or     $0x3,%eax
+c01058b7:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c01058b9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01058be:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
+c01058c5:	00 
+c01058c6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01058cd:	00 
+c01058ce:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
+c01058d5:	38 
+c01058d6:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+c01058dd:	c0 
+c01058de:	89 04 24             	mov    %eax,(%esp)
+c01058e1:	e8 b4 fd ff ff       	call   c010569a <boot_map_segment>
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+c01058e6:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01058eb:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
+c01058f1:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
+c01058f7:	89 10                	mov    %edx,(%eax)
+
+    enable_paging();
+c01058f9:	e8 63 fd ff ff       	call   c0105661 <enable_paging>
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c01058fe:	e8 74 f7 ff ff       	call   c0105077 <gdt_init>
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+c0105903:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0105908:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c010590e:	e8 00 0f 00 00       	call   c0106813 <check_boot_pgdir>
+
+    print_pgdir();
+c0105913:	e8 8d 13 00 00       	call   c0106ca5 <print_pgdir>
+    
+    kmalloc_init();
+c0105918:	e8 e6 f2 ff ff       	call   c0104c03 <kmalloc_init>
+
+}
+c010591d:	c9                   	leave  
+c010591e:	c3                   	ret    
+
+c010591f <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c010591f:	55                   	push   %ebp
+c0105920:	89 e5                	mov    %esp,%ebp
+c0105922:	83 ec 38             	sub    $0x38,%esp
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = &pgdir[PDX(la)];
+c0105925:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105928:	c1 e8 16             	shr    $0x16,%eax
+c010592b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105932:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105935:	01 d0                	add    %edx,%eax
+c0105937:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!(*pdep & PTE_P)) {
+c010593a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010593d:	8b 00                	mov    (%eax),%eax
+c010593f:	83 e0 01             	and    $0x1,%eax
+c0105942:	85 c0                	test   %eax,%eax
+c0105944:	0f 85 af 00 00 00    	jne    c01059f9 <get_pte+0xda>
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+c010594a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010594e:	74 15                	je     c0105965 <get_pte+0x46>
+c0105950:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105957:	e8 5c f8 ff ff       	call   c01051b8 <alloc_pages>
+c010595c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010595f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0105963:	75 0a                	jne    c010596f <get_pte+0x50>
+            return NULL;
+c0105965:	b8 00 00 00 00       	mov    $0x0,%eax
+c010596a:	e9 e6 00 00 00       	jmp    c0105a55 <get_pte+0x136>
+        }
+        set_page_ref(page, 1);
+c010596f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105976:	00 
+c0105977:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010597a:	89 04 24             	mov    %eax,(%esp)
+c010597d:	e8 3b f6 ff ff       	call   c0104fbd <set_page_ref>
+        uintptr_t pa = page2pa(page);
+c0105982:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105985:	89 04 24             	mov    %eax,(%esp)
+c0105988:	e8 21 f5 ff ff       	call   c0104eae <page2pa>
+c010598d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        memset(KADDR(pa), 0, PGSIZE);
+c0105990:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105993:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105996:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105999:	c1 e8 0c             	shr    $0xc,%eax
+c010599c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010599f:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c01059a4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c01059a7:	72 23                	jb     c01059cc <get_pte+0xad>
+c01059a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059ac:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01059b0:	c7 44 24 08 64 e4 10 	movl   $0xc010e464,0x8(%esp)
+c01059b7:	c0 
+c01059b8:	c7 44 24 04 8c 01 00 	movl   $0x18c,0x4(%esp)
+c01059bf:	00 
+c01059c0:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01059c7:	e8 f5 b3 ff ff       	call   c0100dc1 <__panic>
+c01059cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059cf:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01059d4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c01059db:	00 
+c01059dc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01059e3:	00 
+c01059e4:	89 04 24             	mov    %eax,(%esp)
+c01059e7:	e8 d7 7a 00 00       	call   c010d4c3 <memset>
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+c01059ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01059ef:	83 c8 07             	or     $0x7,%eax
+c01059f2:	89 c2                	mov    %eax,%edx
+c01059f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059f7:	89 10                	mov    %edx,(%eax)
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+c01059f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059fc:	8b 00                	mov    (%eax),%eax
+c01059fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105a03:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105a06:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a09:	c1 e8 0c             	shr    $0xc,%eax
+c0105a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105a0f:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0105a14:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0105a17:	72 23                	jb     c0105a3c <get_pte+0x11d>
+c0105a19:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105a20:	c7 44 24 08 64 e4 10 	movl   $0xc010e464,0x8(%esp)
+c0105a27:	c0 
+c0105a28:	c7 44 24 04 8f 01 00 	movl   $0x18f,0x4(%esp)
+c0105a2f:	00 
+c0105a30:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105a37:	e8 85 b3 ff ff       	call   c0100dc1 <__panic>
+c0105a3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a3f:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0105a44:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105a47:	c1 ea 0c             	shr    $0xc,%edx
+c0105a4a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+c0105a50:	c1 e2 02             	shl    $0x2,%edx
+c0105a53:	01 d0                	add    %edx,%eax
+
+}
+c0105a55:	c9                   	leave  
+c0105a56:	c3                   	ret    
+
+c0105a57 <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c0105a57:	55                   	push   %ebp
+c0105a58:	89 e5                	mov    %esp,%ebp
+c0105a5a:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105a5d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105a64:	00 
+c0105a65:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a68:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105a6c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105a6f:	89 04 24             	mov    %eax,(%esp)
+c0105a72:	e8 a8 fe ff ff       	call   c010591f <get_pte>
+c0105a77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c0105a7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105a7e:	74 08                	je     c0105a88 <get_page+0x31>
+        *ptep_store = ptep;
+c0105a80:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105a86:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c0105a88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105a8c:	74 1b                	je     c0105aa9 <get_page+0x52>
+c0105a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105a91:	8b 00                	mov    (%eax),%eax
+c0105a93:	83 e0 01             	and    $0x1,%eax
+c0105a96:	85 c0                	test   %eax,%eax
+c0105a98:	74 0f                	je     c0105aa9 <get_page+0x52>
+        return pa2page(*ptep);
+c0105a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105a9d:	8b 00                	mov    (%eax),%eax
+c0105a9f:	89 04 24             	mov    %eax,(%esp)
+c0105aa2:	e8 1d f4 ff ff       	call   c0104ec4 <pa2page>
+c0105aa7:	eb 05                	jmp    c0105aae <get_page+0x57>
+    }
+    return NULL;
+c0105aa9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105aae:	c9                   	leave  
+c0105aaf:	c3                   	ret    
+
+c0105ab0 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c0105ab0:	55                   	push   %ebp
+c0105ab1:	89 e5                	mov    %esp,%ebp
+c0105ab3:	83 ec 28             	sub    $0x28,%esp
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+
+    if(*ptep & PTE_P) {               
+c0105ab6:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ab9:	8b 00                	mov    (%eax),%eax
+c0105abb:	83 e0 01             	and    $0x1,%eax
+c0105abe:	85 c0                	test   %eax,%eax
+c0105ac0:	74 4d                	je     c0105b0f <page_remove_pte+0x5f>
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+c0105ac2:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ac5:	8b 00                	mov    (%eax),%eax
+c0105ac7:	89 04 24             	mov    %eax,(%esp)
+c0105aca:	e8 8e f4 ff ff       	call   c0104f5d <pte2page>
+c0105acf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+c0105ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105ad5:	89 04 24             	mov    %eax,(%esp)
+c0105ad8:	e8 04 f5 ff ff       	call   c0104fe1 <page_ref_dec>
+c0105add:	85 c0                	test   %eax,%eax
+c0105adf:	75 13                	jne    c0105af4 <page_remove_pte+0x44>
+	 free_page(page);
+c0105ae1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105ae8:	00 
+c0105ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105aec:	89 04 24             	mov    %eax,(%esp)
+c0105aef:	e8 2f f7 ff ff       	call   c0105223 <free_pages>
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+c0105af4:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105af7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+c0105afd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b00:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105b04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105b07:	89 04 24             	mov    %eax,(%esp)
+c0105b0a:	e8 1a 05 00 00       	call   c0106029 <tlb_invalidate>
+    //(6) flush tlb
+    }
+}
+c0105b0f:	c9                   	leave  
+c0105b10:	c3                   	ret    
+
+c0105b11 <unmap_range>:
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105b11:	55                   	push   %ebp
+c0105b12:	89 e5                	mov    %esp,%ebp
+c0105b14:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105b17:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b1a:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b1f:	85 c0                	test   %eax,%eax
+c0105b21:	75 0c                	jne    c0105b2f <unmap_range+0x1e>
+c0105b23:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105b26:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b2b:	85 c0                	test   %eax,%eax
+c0105b2d:	74 24                	je     c0105b53 <unmap_range+0x42>
+c0105b2f:	c7 44 24 0c 8c e5 10 	movl   $0xc010e58c,0xc(%esp)
+c0105b36:	c0 
+c0105b37:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105b3e:	c0 
+c0105b3f:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
+c0105b46:	00 
+c0105b47:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105b4e:	e8 6e b2 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105b53:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105b5a:	76 11                	jbe    c0105b6d <unmap_range+0x5c>
+c0105b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b5f:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105b62:	73 09                	jae    c0105b6d <unmap_range+0x5c>
+c0105b64:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105b6b:	76 24                	jbe    c0105b91 <unmap_range+0x80>
+c0105b6d:	c7 44 24 0c b5 e5 10 	movl   $0xc010e5b5,0xc(%esp)
+c0105b74:	c0 
+c0105b75:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105b7c:	c0 
+c0105b7d:	c7 44 24 04 c9 01 00 	movl   $0x1c9,0x4(%esp)
+c0105b84:	00 
+c0105b85:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105b8c:	e8 30 b2 ff ff       	call   c0100dc1 <__panic>
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c0105b91:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105b98:	00 
+c0105b99:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b9c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ba0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ba3:	89 04 24             	mov    %eax,(%esp)
+c0105ba6:	e8 74 fd ff ff       	call   c010591f <get_pte>
+c0105bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105bae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105bb2:	75 18                	jne    c0105bcc <unmap_range+0xbb>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bb7:	05 00 00 40 00       	add    $0x400000,%eax
+c0105bbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105bc2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105bc7:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue ;
+c0105bca:	eb 29                	jmp    c0105bf5 <unmap_range+0xe4>
+        }
+        if (*ptep != 0) {
+c0105bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bcf:	8b 00                	mov    (%eax),%eax
+c0105bd1:	85 c0                	test   %eax,%eax
+c0105bd3:	74 19                	je     c0105bee <unmap_range+0xdd>
+            page_remove_pte(pgdir, start, ptep);
+c0105bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bd8:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bdf:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105be3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105be6:	89 04 24             	mov    %eax,(%esp)
+c0105be9:	e8 c2 fe ff ff       	call   c0105ab0 <page_remove_pte>
+        }
+        start += PGSIZE;
+c0105bee:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105bf5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105bf9:	74 08                	je     c0105c03 <unmap_range+0xf2>
+c0105bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bfe:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105c01:	72 8e                	jb     c0105b91 <unmap_range+0x80>
+}
+c0105c03:	c9                   	leave  
+c0105c04:	c3                   	ret    
+
+c0105c05 <exit_range>:
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105c05:	55                   	push   %ebp
+c0105c06:	89 e5                	mov    %esp,%ebp
+c0105c08:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105c0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c0e:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c13:	85 c0                	test   %eax,%eax
+c0105c15:	75 0c                	jne    c0105c23 <exit_range+0x1e>
+c0105c17:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105c1a:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c1f:	85 c0                	test   %eax,%eax
+c0105c21:	74 24                	je     c0105c47 <exit_range+0x42>
+c0105c23:	c7 44 24 0c 8c e5 10 	movl   $0xc010e58c,0xc(%esp)
+c0105c2a:	c0 
+c0105c2b:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105c32:	c0 
+c0105c33:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
+c0105c3a:	00 
+c0105c3b:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105c42:	e8 7a b1 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105c47:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105c4e:	76 11                	jbe    c0105c61 <exit_range+0x5c>
+c0105c50:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c53:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105c56:	73 09                	jae    c0105c61 <exit_range+0x5c>
+c0105c58:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105c5f:	76 24                	jbe    c0105c85 <exit_range+0x80>
+c0105c61:	c7 44 24 0c b5 e5 10 	movl   $0xc010e5b5,0xc(%esp)
+c0105c68:	c0 
+c0105c69:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105c70:	c0 
+c0105c71:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
+c0105c78:	00 
+c0105c79:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105c80:	e8 3c b1 ff ff       	call   c0100dc1 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c0105c85:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c88:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c8e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105c93:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do {
+        int pde_idx = PDX(start);
+c0105c96:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c99:	c1 e8 16             	shr    $0x16,%eax
+c0105c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P) {
+c0105c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ca2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105ca9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105cac:	01 d0                	add    %edx,%eax
+c0105cae:	8b 00                	mov    (%eax),%eax
+c0105cb0:	83 e0 01             	and    $0x1,%eax
+c0105cb3:	85 c0                	test   %eax,%eax
+c0105cb5:	74 3e                	je     c0105cf5 <exit_range+0xf0>
+            free_page(pde2page(pgdir[pde_idx]));
+c0105cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105cba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105cc1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105cc4:	01 d0                	add    %edx,%eax
+c0105cc6:	8b 00                	mov    (%eax),%eax
+c0105cc8:	89 04 24             	mov    %eax,(%esp)
+c0105ccb:	e8 cb f2 ff ff       	call   c0104f9b <pde2page>
+c0105cd0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105cd7:	00 
+c0105cd8:	89 04 24             	mov    %eax,(%esp)
+c0105cdb:	e8 43 f5 ff ff       	call   c0105223 <free_pages>
+            pgdir[pde_idx] = 0;
+c0105ce0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ce3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105cea:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ced:	01 d0                	add    %edx,%eax
+c0105cef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c0105cf5:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105cfc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105d00:	74 08                	je     c0105d0a <exit_range+0x105>
+c0105d02:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d05:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105d08:	72 8c                	jb     c0105c96 <exit_range+0x91>
+}
+c0105d0a:	c9                   	leave  
+c0105d0b:	c3                   	ret    
+
+c0105d0c <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+c0105d0c:	55                   	push   %ebp
+c0105d0d:	89 e5                	mov    %esp,%ebp
+c0105d0f:	83 ec 48             	sub    $0x48,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105d12:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d15:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105d1a:	85 c0                	test   %eax,%eax
+c0105d1c:	75 0c                	jne    c0105d2a <copy_range+0x1e>
+c0105d1e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105d21:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105d26:	85 c0                	test   %eax,%eax
+c0105d28:	74 24                	je     c0105d4e <copy_range+0x42>
+c0105d2a:	c7 44 24 0c 8c e5 10 	movl   $0xc010e58c,0xc(%esp)
+c0105d31:	c0 
+c0105d32:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105d39:	c0 
+c0105d3a:	c7 44 24 04 f0 01 00 	movl   $0x1f0,0x4(%esp)
+c0105d41:	00 
+c0105d42:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105d49:	e8 73 b0 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105d4e:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c0105d55:	76 11                	jbe    c0105d68 <copy_range+0x5c>
+c0105d57:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d5a:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105d5d:	73 09                	jae    c0105d68 <copy_range+0x5c>
+c0105d5f:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c0105d66:	76 24                	jbe    c0105d8c <copy_range+0x80>
+c0105d68:	c7 44 24 0c b5 e5 10 	movl   $0xc010e5b5,0xc(%esp)
+c0105d6f:	c0 
+c0105d70:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105d77:	c0 
+c0105d78:	c7 44 24 04 f1 01 00 	movl   $0x1f1,0x4(%esp)
+c0105d7f:	00 
+c0105d80:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105d87:	e8 35 b0 ff ff       	call   c0100dc1 <__panic>
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c0105d8c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105d93:	00 
+c0105d94:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d97:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d9e:	89 04 24             	mov    %eax,(%esp)
+c0105da1:	e8 79 fb ff ff       	call   c010591f <get_pte>
+c0105da6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105da9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105dad:	75 1b                	jne    c0105dca <copy_range+0xbe>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105daf:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105db2:	05 00 00 40 00       	add    $0x400000,%eax
+c0105db7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105dba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105dbd:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105dc2:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue ;
+c0105dc5:	e9 49 01 00 00       	jmp    c0105f13 <copy_range+0x207>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+c0105dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105dcd:	8b 00                	mov    (%eax),%eax
+c0105dcf:	83 e0 01             	and    $0x1,%eax
+c0105dd2:	85 c0                	test   %eax,%eax
+c0105dd4:	0f 84 32 01 00 00    	je     c0105f0c <copy_range+0x200>
+            if ((nptep = get_pte(to, start, 1)) == NULL) {
+c0105dda:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105de1:	00 
+c0105de2:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105de5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105de9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105dec:	89 04 24             	mov    %eax,(%esp)
+c0105def:	e8 2b fb ff ff       	call   c010591f <get_pte>
+c0105df4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105df7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0105dfb:	75 0a                	jne    c0105e07 <copy_range+0xfb>
+                return -E_NO_MEM;
+c0105dfd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105e02:	e9 23 01 00 00       	jmp    c0105f2a <copy_range+0x21e>
+            }
+        uint32_t perm = (*ptep & PTE_USER);
+c0105e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e0a:	8b 00                	mov    (%eax),%eax
+c0105e0c:	83 e0 07             	and    $0x7,%eax
+c0105e0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        //get page from ptep
+        struct Page *page = pte2page(*ptep);
+c0105e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e15:	8b 00                	mov    (%eax),%eax
+c0105e17:	89 04 24             	mov    %eax,(%esp)
+c0105e1a:	e8 3e f1 ff ff       	call   c0104f5d <pte2page>
+c0105e1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        // alloc a page for process B
+        struct Page *npage=alloc_page();
+c0105e22:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105e29:	e8 8a f3 ff ff       	call   c01051b8 <alloc_pages>
+c0105e2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(page!=NULL);
+c0105e31:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105e35:	75 24                	jne    c0105e5b <copy_range+0x14f>
+c0105e37:	c7 44 24 0c cd e5 10 	movl   $0xc010e5cd,0xc(%esp)
+c0105e3e:	c0 
+c0105e3f:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105e46:	c0 
+c0105e47:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
+c0105e4e:	00 
+c0105e4f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105e56:	e8 66 af ff ff       	call   c0100dc1 <__panic>
+        assert(npage!=NULL);
+c0105e5b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0105e5f:	75 24                	jne    c0105e85 <copy_range+0x179>
+c0105e61:	c7 44 24 0c d8 e5 10 	movl   $0xc010e5d8,0xc(%esp)
+c0105e68:	c0 
+c0105e69:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105e70:	c0 
+c0105e71:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
+c0105e78:	00 
+c0105e79:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105e80:	e8 3c af ff ff       	call   c0100dc1 <__panic>
+        int ret=0;
+c0105e85:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+	char *src_kvaddr = page2kva(page);
+c0105e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105e8f:	89 04 24             	mov    %eax,(%esp)
+c0105e92:	e8 72 f0 ff ff       	call   c0104f09 <page2kva>
+c0105e97:	89 45 d8             	mov    %eax,-0x28(%ebp)
+	char *dst_kvaddr = page2kva(npage);
+c0105e9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105e9d:	89 04 24             	mov    %eax,(%esp)
+c0105ea0:	e8 64 f0 ff ff       	call   c0104f09 <page2kva>
+c0105ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+c0105ea8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0105eaf:	00 
+c0105eb0:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105eb3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105eb7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105eba:	89 04 24             	mov    %eax,(%esp)
+c0105ebd:	e8 e3 76 00 00       	call   c010d5a5 <memcpy>
+	page_insert(to, npage, start, perm);
+c0105ec2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105ec5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105ec9:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ecc:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105ed0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105ed3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ed7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105eda:	89 04 24             	mov    %eax,(%esp)
+c0105edd:	e8 8e 00 00 00       	call   c0105f70 <page_insert>
+        assert(ret == 0);
+c0105ee2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105ee6:	74 24                	je     c0105f0c <copy_range+0x200>
+c0105ee8:	c7 44 24 0c e4 e5 10 	movl   $0xc010e5e4,0xc(%esp)
+c0105eef:	c0 
+c0105ef0:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0105ef7:	c0 
+c0105ef8:	c7 44 24 04 19 02 00 	movl   $0x219,0x4(%esp)
+c0105eff:	00 
+c0105f00:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0105f07:	e8 b5 ae ff ff       	call   c0100dc1 <__panic>
+        }
+        start += PGSIZE;
+c0105f0c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c0105f13:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105f17:	74 0c                	je     c0105f25 <copy_range+0x219>
+c0105f19:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f1c:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105f1f:	0f 82 67 fe ff ff    	jb     c0105d8c <copy_range+0x80>
+    return 0;
+c0105f25:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105f2a:	c9                   	leave  
+c0105f2b:	c3                   	ret    
+
+c0105f2c <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c0105f2c:	55                   	push   %ebp
+c0105f2d:	89 e5                	mov    %esp,%ebp
+c0105f2f:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105f32:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105f39:	00 
+c0105f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f3d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f41:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f44:	89 04 24             	mov    %eax,(%esp)
+c0105f47:	e8 d3 f9 ff ff       	call   c010591f <get_pte>
+c0105f4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c0105f4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105f53:	74 19                	je     c0105f6e <page_remove+0x42>
+        page_remove_pte(pgdir, la, ptep);
+c0105f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f58:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f5f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f63:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f66:	89 04 24             	mov    %eax,(%esp)
+c0105f69:	e8 42 fb ff ff       	call   c0105ab0 <page_remove_pte>
+    }
+}
+c0105f6e:	c9                   	leave  
+c0105f6f:	c3                   	ret    
+
+c0105f70 <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c0105f70:	55                   	push   %ebp
+c0105f71:	89 e5                	mov    %esp,%ebp
+c0105f73:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0105f76:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105f7d:	00 
+c0105f7e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f81:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f85:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f88:	89 04 24             	mov    %eax,(%esp)
+c0105f8b:	e8 8f f9 ff ff       	call   c010591f <get_pte>
+c0105f90:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0105f93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105f97:	75 0a                	jne    c0105fa3 <page_insert+0x33>
+        return -E_NO_MEM;
+c0105f99:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105f9e:	e9 84 00 00 00       	jmp    c0106027 <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0105fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fa6:	89 04 24             	mov    %eax,(%esp)
+c0105fa9:	e8 1c f0 ff ff       	call   c0104fca <page_ref_inc>
+    if (*ptep & PTE_P) {
+c0105fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fb1:	8b 00                	mov    (%eax),%eax
+c0105fb3:	83 e0 01             	and    $0x1,%eax
+c0105fb6:	85 c0                	test   %eax,%eax
+c0105fb8:	74 3e                	je     c0105ff8 <page_insert+0x88>
+        struct Page *p = pte2page(*ptep);
+c0105fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fbd:	8b 00                	mov    (%eax),%eax
+c0105fbf:	89 04 24             	mov    %eax,(%esp)
+c0105fc2:	e8 96 ef ff ff       	call   c0104f5d <pte2page>
+c0105fc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0105fca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105fcd:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105fd0:	75 0d                	jne    c0105fdf <page_insert+0x6f>
+            page_ref_dec(page);
+c0105fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fd5:	89 04 24             	mov    %eax,(%esp)
+c0105fd8:	e8 04 f0 ff ff       	call   c0104fe1 <page_ref_dec>
+c0105fdd:	eb 19                	jmp    c0105ff8 <page_insert+0x88>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c0105fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fe2:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105fe6:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105fe9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105fed:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ff0:	89 04 24             	mov    %eax,(%esp)
+c0105ff3:	e8 b8 fa ff ff       	call   c0105ab0 <page_remove_pte>
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0105ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ffb:	89 04 24             	mov    %eax,(%esp)
+c0105ffe:	e8 ab ee ff ff       	call   c0104eae <page2pa>
+c0106003:	0b 45 14             	or     0x14(%ebp),%eax
+c0106006:	83 c8 01             	or     $0x1,%eax
+c0106009:	89 c2                	mov    %eax,%edx
+c010600b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010600e:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c0106010:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106013:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106017:	8b 45 08             	mov    0x8(%ebp),%eax
+c010601a:	89 04 24             	mov    %eax,(%esp)
+c010601d:	e8 07 00 00 00       	call   c0106029 <tlb_invalidate>
+    return 0;
+c0106022:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106027:	c9                   	leave  
+c0106028:	c3                   	ret    
+
+c0106029 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c0106029:	55                   	push   %ebp
+c010602a:	89 e5                	mov    %esp,%ebp
+c010602c:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c010602f:	0f 20 d8             	mov    %cr3,%eax
+c0106032:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr3;
+c0106035:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    if (rcr3() == PADDR(pgdir)) {
+c0106038:	89 c2                	mov    %eax,%edx
+c010603a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010603d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106040:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0106047:	77 23                	ja     c010606c <tlb_invalidate+0x43>
+c0106049:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010604c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106050:	c7 44 24 08 08 e5 10 	movl   $0xc010e508,0x8(%esp)
+c0106057:	c0 
+c0106058:	c7 44 24 04 4a 02 00 	movl   $0x24a,0x4(%esp)
+c010605f:	00 
+c0106060:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106067:	e8 55 ad ff ff       	call   c0100dc1 <__panic>
+c010606c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010606f:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106074:	39 c2                	cmp    %eax,%edx
+c0106076:	75 0c                	jne    c0106084 <tlb_invalidate+0x5b>
+        invlpg((void *)la);
+c0106078:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010607b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c010607e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106081:	0f 01 38             	invlpg (%eax)
+    }
+}
+c0106084:	c9                   	leave  
+c0106085:	c3                   	ret    
+
+c0106086 <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c0106086:	55                   	push   %ebp
+c0106087:	89 e5                	mov    %esp,%ebp
+c0106089:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_page();
+c010608c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0106093:	e8 20 f1 ff ff       	call   c01051b8 <alloc_pages>
+c0106098:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c010609b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010609f:	0f 84 b0 00 00 00    	je     c0106155 <pgdir_alloc_page+0xcf>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c01060a5:	8b 45 10             	mov    0x10(%ebp),%eax
+c01060a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01060af:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01060b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01060ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01060bd:	89 04 24             	mov    %eax,(%esp)
+c01060c0:	e8 ab fe ff ff       	call   c0105f70 <page_insert>
+c01060c5:	85 c0                	test   %eax,%eax
+c01060c7:	74 1a                	je     c01060e3 <pgdir_alloc_page+0x5d>
+            free_page(page);
+c01060c9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01060d0:	00 
+c01060d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060d4:	89 04 24             	mov    %eax,(%esp)
+c01060d7:	e8 47 f1 ff ff       	call   c0105223 <free_pages>
+            return NULL;
+c01060dc:	b8 00 00 00 00       	mov    $0x0,%eax
+c01060e1:	eb 75                	jmp    c0106158 <pgdir_alloc_page+0xd2>
+        }
+        if (swap_init_ok){
+c01060e3:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
+c01060e8:	85 c0                	test   %eax,%eax
+c01060ea:	74 69                	je     c0106155 <pgdir_alloc_page+0xcf>
+            if(check_mm_struct!=NULL) {
+c01060ec:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c01060f1:	85 c0                	test   %eax,%eax
+c01060f3:	74 60                	je     c0106155 <pgdir_alloc_page+0xcf>
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c01060f5:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c01060fa:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106101:	00 
+c0106102:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106105:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106109:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010610c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106110:	89 04 24             	mov    %eax,(%esp)
+c0106113:	e8 56 0e 00 00       	call   c0106f6e <swap_map_swappable>
+                page->pra_vaddr=la;
+c0106118:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010611b:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010611e:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c0106121:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106124:	89 04 24             	mov    %eax,(%esp)
+c0106127:	e8 87 ee ff ff       	call   c0104fb3 <page_ref>
+c010612c:	83 f8 01             	cmp    $0x1,%eax
+c010612f:	74 24                	je     c0106155 <pgdir_alloc_page+0xcf>
+c0106131:	c7 44 24 0c ed e5 10 	movl   $0xc010e5ed,0xc(%esp)
+c0106138:	c0 
+c0106139:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106140:	c0 
+c0106141:	c7 44 24 04 5e 02 00 	movl   $0x25e,0x4(%esp)
+c0106148:	00 
+c0106149:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106150:	e8 6c ac ff ff       	call   c0100dc1 <__panic>
+            }
+        }
+
+    }
+
+    return page;
+c0106155:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106158:	c9                   	leave  
+c0106159:	c3                   	ret    
+
+c010615a <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c010615a:	55                   	push   %ebp
+c010615b:	89 e5                	mov    %esp,%ebp
+c010615d:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->check();
+c0106160:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
+c0106165:	8b 40 18             	mov    0x18(%eax),%eax
+c0106168:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c010616a:	c7 04 24 04 e6 10 c0 	movl   $0xc010e604,(%esp)
+c0106171:	e8 e2 a1 ff ff       	call   c0100358 <cprintf>
+}
+c0106176:	c9                   	leave  
+c0106177:	c3                   	ret    
+
+c0106178 <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c0106178:	55                   	push   %ebp
+c0106179:	89 e5                	mov    %esp,%ebp
+c010617b:	83 ec 38             	sub    $0x38,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c010617e:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0106183:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c0106188:	76 24                	jbe    c01061ae <check_pgdir+0x36>
+c010618a:	c7 44 24 0c 23 e6 10 	movl   $0xc010e623,0xc(%esp)
+c0106191:	c0 
+c0106192:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106199:	c0 
+c010619a:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c01061a1:	00 
+c01061a2:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01061a9:	e8 13 ac ff ff       	call   c0100dc1 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c01061ae:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01061b3:	85 c0                	test   %eax,%eax
+c01061b5:	74 0e                	je     c01061c5 <check_pgdir+0x4d>
+c01061b7:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01061bc:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01061c1:	85 c0                	test   %eax,%eax
+c01061c3:	74 24                	je     c01061e9 <check_pgdir+0x71>
+c01061c5:	c7 44 24 0c 40 e6 10 	movl   $0xc010e640,0xc(%esp)
+c01061cc:	c0 
+c01061cd:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01061d4:	c0 
+c01061d5:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
+c01061dc:	00 
+c01061dd:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01061e4:	e8 d8 ab ff ff       	call   c0100dc1 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c01061e9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01061ee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01061f5:	00 
+c01061f6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01061fd:	00 
+c01061fe:	89 04 24             	mov    %eax,(%esp)
+c0106201:	e8 51 f8 ff ff       	call   c0105a57 <get_page>
+c0106206:	85 c0                	test   %eax,%eax
+c0106208:	74 24                	je     c010622e <check_pgdir+0xb6>
+c010620a:	c7 44 24 0c 78 e6 10 	movl   $0xc010e678,0xc(%esp)
+c0106211:	c0 
+c0106212:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106219:	c0 
+c010621a:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
+c0106221:	00 
+c0106222:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106229:	e8 93 ab ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c010622e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0106235:	e8 7e ef ff ff       	call   c01051b8 <alloc_pages>
+c010623a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c010623d:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106242:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106249:	00 
+c010624a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106251:	00 
+c0106252:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106255:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106259:	89 04 24             	mov    %eax,(%esp)
+c010625c:	e8 0f fd ff ff       	call   c0105f70 <page_insert>
+c0106261:	85 c0                	test   %eax,%eax
+c0106263:	74 24                	je     c0106289 <check_pgdir+0x111>
+c0106265:	c7 44 24 0c a0 e6 10 	movl   $0xc010e6a0,0xc(%esp)
+c010626c:	c0 
+c010626d:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106274:	c0 
+c0106275:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
+c010627c:	00 
+c010627d:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106284:	e8 38 ab ff ff       	call   c0100dc1 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c0106289:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010628e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106295:	00 
+c0106296:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010629d:	00 
+c010629e:	89 04 24             	mov    %eax,(%esp)
+c01062a1:	e8 79 f6 ff ff       	call   c010591f <get_pte>
+c01062a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01062a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01062ad:	75 24                	jne    c01062d3 <check_pgdir+0x15b>
+c01062af:	c7 44 24 0c cc e6 10 	movl   $0xc010e6cc,0xc(%esp)
+c01062b6:	c0 
+c01062b7:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01062be:	c0 
+c01062bf:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
+c01062c6:	00 
+c01062c7:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01062ce:	e8 ee aa ff ff       	call   c0100dc1 <__panic>
+    assert(pa2page(*ptep) == p1);
+c01062d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01062d6:	8b 00                	mov    (%eax),%eax
+c01062d8:	89 04 24             	mov    %eax,(%esp)
+c01062db:	e8 e4 eb ff ff       	call   c0104ec4 <pa2page>
+c01062e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01062e3:	74 24                	je     c0106309 <check_pgdir+0x191>
+c01062e5:	c7 44 24 0c f9 e6 10 	movl   $0xc010e6f9,0xc(%esp)
+c01062ec:	c0 
+c01062ed:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01062f4:	c0 
+c01062f5:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
+c01062fc:	00 
+c01062fd:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106304:	e8 b8 aa ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p1) == 1);
+c0106309:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010630c:	89 04 24             	mov    %eax,(%esp)
+c010630f:	e8 9f ec ff ff       	call   c0104fb3 <page_ref>
+c0106314:	83 f8 01             	cmp    $0x1,%eax
+c0106317:	74 24                	je     c010633d <check_pgdir+0x1c5>
+c0106319:	c7 44 24 0c 0e e7 10 	movl   $0xc010e70e,0xc(%esp)
+c0106320:	c0 
+c0106321:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106328:	c0 
+c0106329:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
+c0106330:	00 
+c0106331:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106338:	e8 84 aa ff ff       	call   c0100dc1 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c010633d:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106342:	8b 00                	mov    (%eax),%eax
+c0106344:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106349:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010634c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010634f:	c1 e8 0c             	shr    $0xc,%eax
+c0106352:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0106355:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c010635a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c010635d:	72 23                	jb     c0106382 <check_pgdir+0x20a>
+c010635f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106362:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106366:	c7 44 24 08 64 e4 10 	movl   $0xc010e464,0x8(%esp)
+c010636d:	c0 
+c010636e:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
+c0106375:	00 
+c0106376:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010637d:	e8 3f aa ff ff       	call   c0100dc1 <__panic>
+c0106382:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106385:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c010638a:	83 c0 04             	add    $0x4,%eax
+c010638d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c0106390:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106395:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010639c:	00 
+c010639d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c01063a4:	00 
+c01063a5:	89 04 24             	mov    %eax,(%esp)
+c01063a8:	e8 72 f5 ff ff       	call   c010591f <get_pte>
+c01063ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01063b0:	74 24                	je     c01063d6 <check_pgdir+0x25e>
+c01063b2:	c7 44 24 0c 20 e7 10 	movl   $0xc010e720,0xc(%esp)
+c01063b9:	c0 
+c01063ba:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01063c1:	c0 
+c01063c2:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
+c01063c9:	00 
+c01063ca:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01063d1:	e8 eb a9 ff ff       	call   c0100dc1 <__panic>
+
+    p2 = alloc_page();
+c01063d6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01063dd:	e8 d6 ed ff ff       	call   c01051b8 <alloc_pages>
+c01063e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c01063e5:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01063ea:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
+c01063f1:	00 
+c01063f2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c01063f9:	00 
+c01063fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01063fd:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106401:	89 04 24             	mov    %eax,(%esp)
+c0106404:	e8 67 fb ff ff       	call   c0105f70 <page_insert>
+c0106409:	85 c0                	test   %eax,%eax
+c010640b:	74 24                	je     c0106431 <check_pgdir+0x2b9>
+c010640d:	c7 44 24 0c 48 e7 10 	movl   $0xc010e748,0xc(%esp)
+c0106414:	c0 
+c0106415:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010641c:	c0 
+c010641d:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
+c0106424:	00 
+c0106425:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010642c:	e8 90 a9 ff ff       	call   c0100dc1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0106431:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106436:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010643d:	00 
+c010643e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106445:	00 
+c0106446:	89 04 24             	mov    %eax,(%esp)
+c0106449:	e8 d1 f4 ff ff       	call   c010591f <get_pte>
+c010644e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106451:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106455:	75 24                	jne    c010647b <check_pgdir+0x303>
+c0106457:	c7 44 24 0c 80 e7 10 	movl   $0xc010e780,0xc(%esp)
+c010645e:	c0 
+c010645f:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106466:	c0 
+c0106467:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
+c010646e:	00 
+c010646f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106476:	e8 46 a9 ff ff       	call   c0100dc1 <__panic>
+    assert(*ptep & PTE_U);
+c010647b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010647e:	8b 00                	mov    (%eax),%eax
+c0106480:	83 e0 04             	and    $0x4,%eax
+c0106483:	85 c0                	test   %eax,%eax
+c0106485:	75 24                	jne    c01064ab <check_pgdir+0x333>
+c0106487:	c7 44 24 0c b0 e7 10 	movl   $0xc010e7b0,0xc(%esp)
+c010648e:	c0 
+c010648f:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106496:	c0 
+c0106497:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
+c010649e:	00 
+c010649f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01064a6:	e8 16 a9 ff ff       	call   c0100dc1 <__panic>
+    assert(*ptep & PTE_W);
+c01064ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01064ae:	8b 00                	mov    (%eax),%eax
+c01064b0:	83 e0 02             	and    $0x2,%eax
+c01064b3:	85 c0                	test   %eax,%eax
+c01064b5:	75 24                	jne    c01064db <check_pgdir+0x363>
+c01064b7:	c7 44 24 0c be e7 10 	movl   $0xc010e7be,0xc(%esp)
+c01064be:	c0 
+c01064bf:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01064c6:	c0 
+c01064c7:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
+c01064ce:	00 
+c01064cf:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01064d6:	e8 e6 a8 ff ff       	call   c0100dc1 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c01064db:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01064e0:	8b 00                	mov    (%eax),%eax
+c01064e2:	83 e0 04             	and    $0x4,%eax
+c01064e5:	85 c0                	test   %eax,%eax
+c01064e7:	75 24                	jne    c010650d <check_pgdir+0x395>
+c01064e9:	c7 44 24 0c cc e7 10 	movl   $0xc010e7cc,0xc(%esp)
+c01064f0:	c0 
+c01064f1:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01064f8:	c0 
+c01064f9:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
+c0106500:	00 
+c0106501:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106508:	e8 b4 a8 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 1);
+c010650d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106510:	89 04 24             	mov    %eax,(%esp)
+c0106513:	e8 9b ea ff ff       	call   c0104fb3 <page_ref>
+c0106518:	83 f8 01             	cmp    $0x1,%eax
+c010651b:	74 24                	je     c0106541 <check_pgdir+0x3c9>
+c010651d:	c7 44 24 0c e2 e7 10 	movl   $0xc010e7e2,0xc(%esp)
+c0106524:	c0 
+c0106525:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010652c:	c0 
+c010652d:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
+c0106534:	00 
+c0106535:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010653c:	e8 80 a8 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c0106541:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106546:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010654d:	00 
+c010654e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0106555:	00 
+c0106556:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106559:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010655d:	89 04 24             	mov    %eax,(%esp)
+c0106560:	e8 0b fa ff ff       	call   c0105f70 <page_insert>
+c0106565:	85 c0                	test   %eax,%eax
+c0106567:	74 24                	je     c010658d <check_pgdir+0x415>
+c0106569:	c7 44 24 0c f4 e7 10 	movl   $0xc010e7f4,0xc(%esp)
+c0106570:	c0 
+c0106571:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106578:	c0 
+c0106579:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
+c0106580:	00 
+c0106581:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106588:	e8 34 a8 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p1) == 2);
+c010658d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106590:	89 04 24             	mov    %eax,(%esp)
+c0106593:	e8 1b ea ff ff       	call   c0104fb3 <page_ref>
+c0106598:	83 f8 02             	cmp    $0x2,%eax
+c010659b:	74 24                	je     c01065c1 <check_pgdir+0x449>
+c010659d:	c7 44 24 0c 20 e8 10 	movl   $0xc010e820,0xc(%esp)
+c01065a4:	c0 
+c01065a5:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01065ac:	c0 
+c01065ad:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
+c01065b4:	00 
+c01065b5:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01065bc:	e8 00 a8 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c01065c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01065c4:	89 04 24             	mov    %eax,(%esp)
+c01065c7:	e8 e7 e9 ff ff       	call   c0104fb3 <page_ref>
+c01065cc:	85 c0                	test   %eax,%eax
+c01065ce:	74 24                	je     c01065f4 <check_pgdir+0x47c>
+c01065d0:	c7 44 24 0c 32 e8 10 	movl   $0xc010e832,0xc(%esp)
+c01065d7:	c0 
+c01065d8:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01065df:	c0 
+c01065e0:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
+c01065e7:	00 
+c01065e8:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01065ef:	e8 cd a7 ff ff       	call   c0100dc1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c01065f4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01065f9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106600:	00 
+c0106601:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106608:	00 
+c0106609:	89 04 24             	mov    %eax,(%esp)
+c010660c:	e8 0e f3 ff ff       	call   c010591f <get_pte>
+c0106611:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106614:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106618:	75 24                	jne    c010663e <check_pgdir+0x4c6>
+c010661a:	c7 44 24 0c 80 e7 10 	movl   $0xc010e780,0xc(%esp)
+c0106621:	c0 
+c0106622:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106629:	c0 
+c010662a:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
+c0106631:	00 
+c0106632:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106639:	e8 83 a7 ff ff       	call   c0100dc1 <__panic>
+    assert(pa2page(*ptep) == p1);
+c010663e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106641:	8b 00                	mov    (%eax),%eax
+c0106643:	89 04 24             	mov    %eax,(%esp)
+c0106646:	e8 79 e8 ff ff       	call   c0104ec4 <pa2page>
+c010664b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010664e:	74 24                	je     c0106674 <check_pgdir+0x4fc>
+c0106650:	c7 44 24 0c f9 e6 10 	movl   $0xc010e6f9,0xc(%esp)
+c0106657:	c0 
+c0106658:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010665f:	c0 
+c0106660:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
+c0106667:	00 
+c0106668:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010666f:	e8 4d a7 ff ff       	call   c0100dc1 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c0106674:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106677:	8b 00                	mov    (%eax),%eax
+c0106679:	83 e0 04             	and    $0x4,%eax
+c010667c:	85 c0                	test   %eax,%eax
+c010667e:	74 24                	je     c01066a4 <check_pgdir+0x52c>
+c0106680:	c7 44 24 0c 44 e8 10 	movl   $0xc010e844,0xc(%esp)
+c0106687:	c0 
+c0106688:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010668f:	c0 
+c0106690:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
+c0106697:	00 
+c0106698:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010669f:	e8 1d a7 ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c01066a4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01066a9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01066b0:	00 
+c01066b1:	89 04 24             	mov    %eax,(%esp)
+c01066b4:	e8 73 f8 ff ff       	call   c0105f2c <page_remove>
+    assert(page_ref(p1) == 1);
+c01066b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01066bc:	89 04 24             	mov    %eax,(%esp)
+c01066bf:	e8 ef e8 ff ff       	call   c0104fb3 <page_ref>
+c01066c4:	83 f8 01             	cmp    $0x1,%eax
+c01066c7:	74 24                	je     c01066ed <check_pgdir+0x575>
+c01066c9:	c7 44 24 0c 0e e7 10 	movl   $0xc010e70e,0xc(%esp)
+c01066d0:	c0 
+c01066d1:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01066d8:	c0 
+c01066d9:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
+c01066e0:	00 
+c01066e1:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01066e8:	e8 d4 a6 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c01066ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01066f0:	89 04 24             	mov    %eax,(%esp)
+c01066f3:	e8 bb e8 ff ff       	call   c0104fb3 <page_ref>
+c01066f8:	85 c0                	test   %eax,%eax
+c01066fa:	74 24                	je     c0106720 <check_pgdir+0x5a8>
+c01066fc:	c7 44 24 0c 32 e8 10 	movl   $0xc010e832,0xc(%esp)
+c0106703:	c0 
+c0106704:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010670b:	c0 
+c010670c:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
+c0106713:	00 
+c0106714:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010671b:	e8 a1 a6 ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c0106720:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106725:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c010672c:	00 
+c010672d:	89 04 24             	mov    %eax,(%esp)
+c0106730:	e8 f7 f7 ff ff       	call   c0105f2c <page_remove>
+    assert(page_ref(p1) == 0);
+c0106735:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106738:	89 04 24             	mov    %eax,(%esp)
+c010673b:	e8 73 e8 ff ff       	call   c0104fb3 <page_ref>
+c0106740:	85 c0                	test   %eax,%eax
+c0106742:	74 24                	je     c0106768 <check_pgdir+0x5f0>
+c0106744:	c7 44 24 0c 59 e8 10 	movl   $0xc010e859,0xc(%esp)
+c010674b:	c0 
+c010674c:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106753:	c0 
+c0106754:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
+c010675b:	00 
+c010675c:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106763:	e8 59 a6 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c0106768:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010676b:	89 04 24             	mov    %eax,(%esp)
+c010676e:	e8 40 e8 ff ff       	call   c0104fb3 <page_ref>
+c0106773:	85 c0                	test   %eax,%eax
+c0106775:	74 24                	je     c010679b <check_pgdir+0x623>
+c0106777:	c7 44 24 0c 32 e8 10 	movl   $0xc010e832,0xc(%esp)
+c010677e:	c0 
+c010677f:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106786:	c0 
+c0106787:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
+c010678e:	00 
+c010678f:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106796:	e8 26 a6 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+c010679b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01067a0:	8b 00                	mov    (%eax),%eax
+c01067a2:	89 04 24             	mov    %eax,(%esp)
+c01067a5:	e8 1a e7 ff ff       	call   c0104ec4 <pa2page>
+c01067aa:	89 04 24             	mov    %eax,(%esp)
+c01067ad:	e8 01 e8 ff ff       	call   c0104fb3 <page_ref>
+c01067b2:	83 f8 01             	cmp    $0x1,%eax
+c01067b5:	74 24                	je     c01067db <check_pgdir+0x663>
+c01067b7:	c7 44 24 0c 6c e8 10 	movl   $0xc010e86c,0xc(%esp)
+c01067be:	c0 
+c01067bf:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01067c6:	c0 
+c01067c7:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
+c01067ce:	00 
+c01067cf:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01067d6:	e8 e6 a5 ff ff       	call   c0100dc1 <__panic>
+    free_page(pa2page(boot_pgdir[0]));
+c01067db:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01067e0:	8b 00                	mov    (%eax),%eax
+c01067e2:	89 04 24             	mov    %eax,(%esp)
+c01067e5:	e8 da e6 ff ff       	call   c0104ec4 <pa2page>
+c01067ea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01067f1:	00 
+c01067f2:	89 04 24             	mov    %eax,(%esp)
+c01067f5:	e8 29 ea ff ff       	call   c0105223 <free_pages>
+    boot_pgdir[0] = 0;
+c01067fa:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01067ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c0106805:	c7 04 24 92 e8 10 c0 	movl   $0xc010e892,(%esp)
+c010680c:	e8 47 9b ff ff       	call   c0100358 <cprintf>
+}
+c0106811:	c9                   	leave  
+c0106812:	c3                   	ret    
+
+c0106813 <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c0106813:	55                   	push   %ebp
+c0106814:	89 e5                	mov    %esp,%ebp
+c0106816:	83 ec 38             	sub    $0x38,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0106819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106820:	e9 ca 00 00 00       	jmp    c01068ef <check_boot_pgdir+0xdc>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c0106825:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106828:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010682b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010682e:	c1 e8 0c             	shr    $0xc,%eax
+c0106831:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106834:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0106839:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c010683c:	72 23                	jb     c0106861 <check_boot_pgdir+0x4e>
+c010683e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106841:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106845:	c7 44 24 08 64 e4 10 	movl   $0xc010e464,0x8(%esp)
+c010684c:	c0 
+c010684d:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
+c0106854:	00 
+c0106855:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c010685c:	e8 60 a5 ff ff       	call   c0100dc1 <__panic>
+c0106861:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106864:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106869:	89 c2                	mov    %eax,%edx
+c010686b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106870:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106877:	00 
+c0106878:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010687c:	89 04 24             	mov    %eax,(%esp)
+c010687f:	e8 9b f0 ff ff       	call   c010591f <get_pte>
+c0106884:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0106887:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010688b:	75 24                	jne    c01068b1 <check_boot_pgdir+0x9e>
+c010688d:	c7 44 24 0c ac e8 10 	movl   $0xc010e8ac,0xc(%esp)
+c0106894:	c0 
+c0106895:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c010689c:	c0 
+c010689d:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
+c01068a4:	00 
+c01068a5:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01068ac:	e8 10 a5 ff ff       	call   c0100dc1 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c01068b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01068b4:	8b 00                	mov    (%eax),%eax
+c01068b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01068bb:	89 c2                	mov    %eax,%edx
+c01068bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01068c0:	39 c2                	cmp    %eax,%edx
+c01068c2:	74 24                	je     c01068e8 <check_boot_pgdir+0xd5>
+c01068c4:	c7 44 24 0c e9 e8 10 	movl   $0xc010e8e9,0xc(%esp)
+c01068cb:	c0 
+c01068cc:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01068d3:	c0 
+c01068d4:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
+c01068db:	00 
+c01068dc:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01068e3:	e8 d9 a4 ff ff       	call   c0100dc1 <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c01068e8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c01068ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01068f2:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c01068f7:	39 c2                	cmp    %eax,%edx
+c01068f9:	0f 82 26 ff ff ff    	jb     c0106825 <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c01068ff:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106904:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0106909:	8b 00                	mov    (%eax),%eax
+c010690b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106910:	89 c2                	mov    %eax,%edx
+c0106912:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010691a:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c0106921:	77 23                	ja     c0106946 <check_boot_pgdir+0x133>
+c0106923:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106926:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010692a:	c7 44 24 08 08 e5 10 	movl   $0xc010e508,0x8(%esp)
+c0106931:	c0 
+c0106932:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c0106939:	00 
+c010693a:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106941:	e8 7b a4 ff ff       	call   c0100dc1 <__panic>
+c0106946:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106949:	05 00 00 00 40       	add    $0x40000000,%eax
+c010694e:	39 c2                	cmp    %eax,%edx
+c0106950:	74 24                	je     c0106976 <check_boot_pgdir+0x163>
+c0106952:	c7 44 24 0c 00 e9 10 	movl   $0xc010e900,0xc(%esp)
+c0106959:	c0 
+c010695a:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106961:	c0 
+c0106962:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c0106969:	00 
+c010696a:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106971:	e8 4b a4 ff ff       	call   c0100dc1 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c0106976:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010697b:	8b 00                	mov    (%eax),%eax
+c010697d:	85 c0                	test   %eax,%eax
+c010697f:	74 24                	je     c01069a5 <check_boot_pgdir+0x192>
+c0106981:	c7 44 24 0c 34 e9 10 	movl   $0xc010e934,0xc(%esp)
+c0106988:	c0 
+c0106989:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106990:	c0 
+c0106991:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
+c0106998:	00 
+c0106999:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01069a0:	e8 1c a4 ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c01069a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01069ac:	e8 07 e8 ff ff       	call   c01051b8 <alloc_pages>
+c01069b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c01069b4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c01069b9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c01069c0:	00 
+c01069c1:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
+c01069c8:	00 
+c01069c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01069cc:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01069d0:	89 04 24             	mov    %eax,(%esp)
+c01069d3:	e8 98 f5 ff ff       	call   c0105f70 <page_insert>
+c01069d8:	85 c0                	test   %eax,%eax
+c01069da:	74 24                	je     c0106a00 <check_boot_pgdir+0x1ed>
+c01069dc:	c7 44 24 0c 48 e9 10 	movl   $0xc010e948,0xc(%esp)
+c01069e3:	c0 
+c01069e4:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c01069eb:	c0 
+c01069ec:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
+c01069f3:	00 
+c01069f4:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c01069fb:	e8 c1 a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p) == 1);
+c0106a00:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a03:	89 04 24             	mov    %eax,(%esp)
+c0106a06:	e8 a8 e5 ff ff       	call   c0104fb3 <page_ref>
+c0106a0b:	83 f8 01             	cmp    $0x1,%eax
+c0106a0e:	74 24                	je     c0106a34 <check_boot_pgdir+0x221>
+c0106a10:	c7 44 24 0c 76 e9 10 	movl   $0xc010e976,0xc(%esp)
+c0106a17:	c0 
+c0106a18:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106a1f:	c0 
+c0106a20:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
+c0106a27:	00 
+c0106a28:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106a2f:	e8 8d a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c0106a34:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106a39:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c0106a40:	00 
+c0106a41:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
+c0106a48:	00 
+c0106a49:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106a4c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106a50:	89 04 24             	mov    %eax,(%esp)
+c0106a53:	e8 18 f5 ff ff       	call   c0105f70 <page_insert>
+c0106a58:	85 c0                	test   %eax,%eax
+c0106a5a:	74 24                	je     c0106a80 <check_boot_pgdir+0x26d>
+c0106a5c:	c7 44 24 0c 88 e9 10 	movl   $0xc010e988,0xc(%esp)
+c0106a63:	c0 
+c0106a64:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106a6b:	c0 
+c0106a6c:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
+c0106a73:	00 
+c0106a74:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106a7b:	e8 41 a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p) == 2);
+c0106a80:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a83:	89 04 24             	mov    %eax,(%esp)
+c0106a86:	e8 28 e5 ff ff       	call   c0104fb3 <page_ref>
+c0106a8b:	83 f8 02             	cmp    $0x2,%eax
+c0106a8e:	74 24                	je     c0106ab4 <check_boot_pgdir+0x2a1>
+c0106a90:	c7 44 24 0c bf e9 10 	movl   $0xc010e9bf,0xc(%esp)
+c0106a97:	c0 
+c0106a98:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106a9f:	c0 
+c0106aa0:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
+c0106aa7:	00 
+c0106aa8:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106aaf:	e8 0d a3 ff ff       	call   c0100dc1 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c0106ab4:	c7 45 dc d0 e9 10 c0 	movl   $0xc010e9d0,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c0106abb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106abe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106ac2:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106ac9:	e8 1e 67 00 00       	call   c010d1ec <strcpy>
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c0106ace:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
+c0106ad5:	00 
+c0106ad6:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106add:	e8 83 67 00 00       	call   c010d265 <strcmp>
+c0106ae2:	85 c0                	test   %eax,%eax
+c0106ae4:	74 24                	je     c0106b0a <check_boot_pgdir+0x2f7>
+c0106ae6:	c7 44 24 0c e8 e9 10 	movl   $0xc010e9e8,0xc(%esp)
+c0106aed:	c0 
+c0106aee:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106af5:	c0 
+c0106af6:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
+c0106afd:	00 
+c0106afe:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106b05:	e8 b7 a2 ff ff       	call   c0100dc1 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c0106b0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b0d:	89 04 24             	mov    %eax,(%esp)
+c0106b10:	e8 f4 e3 ff ff       	call   c0104f09 <page2kva>
+c0106b15:	05 00 01 00 00       	add    $0x100,%eax
+c0106b1a:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0106b1d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106b24:	e8 6b 66 00 00       	call   c010d194 <strlen>
+c0106b29:	85 c0                	test   %eax,%eax
+c0106b2b:	74 24                	je     c0106b51 <check_boot_pgdir+0x33e>
+c0106b2d:	c7 44 24 0c 20 ea 10 	movl   $0xc010ea20,0xc(%esp)
+c0106b34:	c0 
+c0106b35:	c7 44 24 08 51 e5 10 	movl   $0xc010e551,0x8(%esp)
+c0106b3c:	c0 
+c0106b3d:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
+c0106b44:	00 
+c0106b45:	c7 04 24 2c e5 10 c0 	movl   $0xc010e52c,(%esp)
+c0106b4c:	e8 70 a2 ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p);
+c0106b51:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106b58:	00 
+c0106b59:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b5c:	89 04 24             	mov    %eax,(%esp)
+c0106b5f:	e8 bf e6 ff ff       	call   c0105223 <free_pages>
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
+c0106b64:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106b69:	8b 00                	mov    (%eax),%eax
+c0106b6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106b70:	89 04 24             	mov    %eax,(%esp)
+c0106b73:	e8 4c e3 ff ff       	call   c0104ec4 <pa2page>
+c0106b78:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106b7f:	00 
+c0106b80:	89 04 24             	mov    %eax,(%esp)
+c0106b83:	e8 9b e6 ff ff       	call   c0105223 <free_pages>
+    boot_pgdir[0] = 0;
+c0106b88:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c0106b8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c0106b93:	c7 04 24 44 ea 10 c0 	movl   $0xc010ea44,(%esp)
+c0106b9a:	e8 b9 97 ff ff       	call   c0100358 <cprintf>
+}
+c0106b9f:	c9                   	leave  
+c0106ba0:	c3                   	ret    
+
+c0106ba1 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0106ba1:	55                   	push   %ebp
+c0106ba2:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0106ba4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ba7:	83 e0 04             	and    $0x4,%eax
+c0106baa:	85 c0                	test   %eax,%eax
+c0106bac:	74 07                	je     c0106bb5 <perm2str+0x14>
+c0106bae:	b8 75 00 00 00       	mov    $0x75,%eax
+c0106bb3:	eb 05                	jmp    c0106bba <perm2str+0x19>
+c0106bb5:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106bba:	a2 28 34 1c c0       	mov    %al,0xc01c3428
+    str[1] = 'r';
+c0106bbf:	c6 05 29 34 1c c0 72 	movb   $0x72,0xc01c3429
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0106bc6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106bc9:	83 e0 02             	and    $0x2,%eax
+c0106bcc:	85 c0                	test   %eax,%eax
+c0106bce:	74 07                	je     c0106bd7 <perm2str+0x36>
+c0106bd0:	b8 77 00 00 00       	mov    $0x77,%eax
+c0106bd5:	eb 05                	jmp    c0106bdc <perm2str+0x3b>
+c0106bd7:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106bdc:	a2 2a 34 1c c0       	mov    %al,0xc01c342a
+    str[3] = '\0';
+c0106be1:	c6 05 2b 34 1c c0 00 	movb   $0x0,0xc01c342b
+    return str;
+c0106be8:	b8 28 34 1c c0       	mov    $0xc01c3428,%eax
+}
+c0106bed:	5d                   	pop    %ebp
+c0106bee:	c3                   	ret    
+
+c0106bef <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0106bef:	55                   	push   %ebp
+c0106bf0:	89 e5                	mov    %esp,%ebp
+c0106bf2:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0106bf5:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106bf8:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106bfb:	72 0a                	jb     c0106c07 <get_pgtable_items+0x18>
+        return 0;
+c0106bfd:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106c02:	e9 9c 00 00 00       	jmp    c0106ca3 <get_pgtable_items+0xb4>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106c07:	eb 04                	jmp    c0106c0d <get_pgtable_items+0x1e>
+        start ++;
+c0106c09:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106c0d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c10:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c13:	73 18                	jae    c0106c2d <get_pgtable_items+0x3e>
+c0106c15:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c1f:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c22:	01 d0                	add    %edx,%eax
+c0106c24:	8b 00                	mov    (%eax),%eax
+c0106c26:	83 e0 01             	and    $0x1,%eax
+c0106c29:	85 c0                	test   %eax,%eax
+c0106c2b:	74 dc                	je     c0106c09 <get_pgtable_items+0x1a>
+        start ++;
+    }
+    if (start < right) {
+c0106c2d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c30:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c33:	73 69                	jae    c0106c9e <get_pgtable_items+0xaf>
+        if (left_store != NULL) {
+c0106c35:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0106c39:	74 08                	je     c0106c43 <get_pgtable_items+0x54>
+            *left_store = start;
+c0106c3b:	8b 45 18             	mov    0x18(%ebp),%eax
+c0106c3e:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106c41:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c0106c43:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c46:	8d 50 01             	lea    0x1(%eax),%edx
+c0106c49:	89 55 10             	mov    %edx,0x10(%ebp)
+c0106c4c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c53:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c56:	01 d0                	add    %edx,%eax
+c0106c58:	8b 00                	mov    (%eax),%eax
+c0106c5a:	83 e0 07             	and    $0x7,%eax
+c0106c5d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106c60:	eb 04                	jmp    c0106c66 <get_pgtable_items+0x77>
+            start ++;
+c0106c62:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106c66:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c69:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c6c:	73 1d                	jae    c0106c8b <get_pgtable_items+0x9c>
+c0106c6e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c71:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c78:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c7b:	01 d0                	add    %edx,%eax
+c0106c7d:	8b 00                	mov    (%eax),%eax
+c0106c7f:	83 e0 07             	and    $0x7,%eax
+c0106c82:	89 c2                	mov    %eax,%edx
+c0106c84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106c87:	39 c2                	cmp    %eax,%edx
+c0106c89:	74 d7                	je     c0106c62 <get_pgtable_items+0x73>
+            start ++;
+        }
+        if (right_store != NULL) {
+c0106c8b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0106c8f:	74 08                	je     c0106c99 <get_pgtable_items+0xaa>
+            *right_store = start;
+c0106c91:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0106c94:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106c97:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c0106c99:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106c9c:	eb 05                	jmp    c0106ca3 <get_pgtable_items+0xb4>
+    }
+    return 0;
+c0106c9e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106ca3:	c9                   	leave  
+c0106ca4:	c3                   	ret    
+
+c0106ca5 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c0106ca5:	55                   	push   %ebp
+c0106ca6:	89 e5                	mov    %esp,%ebp
+c0106ca8:	57                   	push   %edi
+c0106ca9:	56                   	push   %esi
+c0106caa:	53                   	push   %ebx
+c0106cab:	83 ec 4c             	sub    $0x4c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c0106cae:	c7 04 24 64 ea 10 c0 	movl   $0xc010ea64,(%esp)
+c0106cb5:	e8 9e 96 ff ff       	call   c0100358 <cprintf>
+    size_t left, right = 0, perm;
+c0106cba:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106cc1:	e9 fa 00 00 00       	jmp    c0106dc0 <print_pgdir+0x11b>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106cc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106cc9:	89 04 24             	mov    %eax,(%esp)
+c0106ccc:	e8 d0 fe ff ff       	call   c0106ba1 <perm2str>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c0106cd1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106cd4:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106cd7:	29 d1                	sub    %edx,%ecx
+c0106cd9:	89 ca                	mov    %ecx,%edx
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106cdb:	89 d6                	mov    %edx,%esi
+c0106cdd:	c1 e6 16             	shl    $0x16,%esi
+c0106ce0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106ce3:	89 d3                	mov    %edx,%ebx
+c0106ce5:	c1 e3 16             	shl    $0x16,%ebx
+c0106ce8:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106ceb:	89 d1                	mov    %edx,%ecx
+c0106ced:	c1 e1 16             	shl    $0x16,%ecx
+c0106cf0:	8b 7d dc             	mov    -0x24(%ebp),%edi
+c0106cf3:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106cf6:	29 d7                	sub    %edx,%edi
+c0106cf8:	89 fa                	mov    %edi,%edx
+c0106cfa:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106cfe:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106d02:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106d06:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106d0a:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106d0e:	c7 04 24 95 ea 10 c0 	movl   $0xc010ea95,(%esp)
+c0106d15:	e8 3e 96 ff ff       	call   c0100358 <cprintf>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c0106d1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106d1d:	c1 e0 0a             	shl    $0xa,%eax
+c0106d20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106d23:	eb 54                	jmp    c0106d79 <print_pgdir+0xd4>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106d25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106d28:	89 04 24             	mov    %eax,(%esp)
+c0106d2b:	e8 71 fe ff ff       	call   c0106ba1 <perm2str>
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c0106d30:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+c0106d33:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d36:	29 d1                	sub    %edx,%ecx
+c0106d38:	89 ca                	mov    %ecx,%edx
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106d3a:	89 d6                	mov    %edx,%esi
+c0106d3c:	c1 e6 0c             	shl    $0xc,%esi
+c0106d3f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0106d42:	89 d3                	mov    %edx,%ebx
+c0106d44:	c1 e3 0c             	shl    $0xc,%ebx
+c0106d47:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d4a:	c1 e2 0c             	shl    $0xc,%edx
+c0106d4d:	89 d1                	mov    %edx,%ecx
+c0106d4f:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+c0106d52:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d55:	29 d7                	sub    %edx,%edi
+c0106d57:	89 fa                	mov    %edi,%edx
+c0106d59:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106d5d:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106d61:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106d65:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106d69:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106d6d:	c7 04 24 b4 ea 10 c0 	movl   $0xc010eab4,(%esp)
+c0106d74:	e8 df 95 ff ff       	call   c0100358 <cprintf>
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106d79:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
+c0106d7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0106d81:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106d84:	89 ce                	mov    %ecx,%esi
+c0106d86:	c1 e6 0a             	shl    $0xa,%esi
+c0106d89:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c0106d8c:	89 cb                	mov    %ecx,%ebx
+c0106d8e:	c1 e3 0a             	shl    $0xa,%ebx
+c0106d91:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
+c0106d94:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106d98:	8d 4d d8             	lea    -0x28(%ebp),%ecx
+c0106d9b:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106d9f:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106da3:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106da7:	89 74 24 04          	mov    %esi,0x4(%esp)
+c0106dab:	89 1c 24             	mov    %ebx,(%esp)
+c0106dae:	e8 3c fe ff ff       	call   c0106bef <get_pgtable_items>
+c0106db3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106db6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106dba:	0f 85 65 ff ff ff    	jne    c0106d25 <print_pgdir+0x80>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106dc0:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
+c0106dc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106dc8:	8d 4d dc             	lea    -0x24(%ebp),%ecx
+c0106dcb:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106dcf:	8d 4d e0             	lea    -0x20(%ebp),%ecx
+c0106dd2:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106dd6:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106dda:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106dde:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
+c0106de5:	00 
+c0106de6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0106ded:	e8 fd fd ff ff       	call   c0106bef <get_pgtable_items>
+c0106df2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106df5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106df9:	0f 85 c7 fe ff ff    	jne    c0106cc6 <print_pgdir+0x21>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0106dff:	c7 04 24 d8 ea 10 c0 	movl   $0xc010ead8,(%esp)
+c0106e06:	e8 4d 95 ff ff       	call   c0100358 <cprintf>
+}
+c0106e0b:	83 c4 4c             	add    $0x4c,%esp
+c0106e0e:	5b                   	pop    %ebx
+c0106e0f:	5e                   	pop    %esi
+c0106e10:	5f                   	pop    %edi
+c0106e11:	5d                   	pop    %ebp
+c0106e12:	c3                   	ret    
+
+c0106e13 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106e13:	55                   	push   %ebp
+c0106e14:	89 e5                	mov    %esp,%ebp
+c0106e16:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0106e19:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e1c:	c1 e8 0c             	shr    $0xc,%eax
+c0106e1f:	89 c2                	mov    %eax,%edx
+c0106e21:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0106e26:	39 c2                	cmp    %eax,%edx
+c0106e28:	72 1c                	jb     c0106e46 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0106e2a:	c7 44 24 08 0c eb 10 	movl   $0xc010eb0c,0x8(%esp)
+c0106e31:	c0 
+c0106e32:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0106e39:	00 
+c0106e3a:	c7 04 24 2b eb 10 c0 	movl   $0xc010eb2b,(%esp)
+c0106e41:	e8 7b 9f ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106e46:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c0106e4b:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106e4e:	c1 ea 0c             	shr    $0xc,%edx
+c0106e51:	c1 e2 05             	shl    $0x5,%edx
+c0106e54:	01 d0                	add    %edx,%eax
+}
+c0106e56:	c9                   	leave  
+c0106e57:	c3                   	ret    
+
+c0106e58 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106e58:	55                   	push   %ebp
+c0106e59:	89 e5                	mov    %esp,%ebp
+c0106e5b:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0106e5e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e61:	83 e0 01             	and    $0x1,%eax
+c0106e64:	85 c0                	test   %eax,%eax
+c0106e66:	75 1c                	jne    c0106e84 <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0106e68:	c7 44 24 08 3c eb 10 	movl   $0xc010eb3c,0x8(%esp)
+c0106e6f:	c0 
+c0106e70:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0106e77:	00 
+c0106e78:	c7 04 24 2b eb 10 c0 	movl   $0xc010eb2b,(%esp)
+c0106e7f:	e8 3d 9f ff ff       	call   c0100dc1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106e84:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e8c:	89 04 24             	mov    %eax,(%esp)
+c0106e8f:	e8 7f ff ff ff       	call   c0106e13 <pa2page>
+}
+c0106e94:	c9                   	leave  
+c0106e95:	c3                   	ret    
+
+c0106e96 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0106e96:	55                   	push   %ebp
+c0106e97:	89 e5                	mov    %esp,%ebp
+c0106e99:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106e9c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e9f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106ea4:	89 04 24             	mov    %eax,(%esp)
+c0106ea7:	e8 67 ff ff ff       	call   c0106e13 <pa2page>
+}
+c0106eac:	c9                   	leave  
+c0106ead:	c3                   	ret    
+
+c0106eae <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c0106eae:	55                   	push   %ebp
+c0106eaf:	89 e5                	mov    %esp,%ebp
+c0106eb1:	83 ec 28             	sub    $0x28,%esp
+     swapfs_init();
+c0106eb4:	e8 93 32 00 00       	call   c010a14c <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c0106eb9:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
+c0106ebe:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c0106ec3:	76 0c                	jbe    c0106ed1 <swap_init+0x23>
+c0106ec5:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
+c0106eca:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c0106ecf:	76 25                	jbe    c0106ef6 <swap_init+0x48>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c0106ed1:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
+c0106ed6:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106eda:	c7 44 24 08 5d eb 10 	movl   $0xc010eb5d,0x8(%esp)
+c0106ee1:	c0 
+c0106ee2:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
+c0106ee9:	00 
+c0106eea:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0106ef1:	e8 cb 9e ff ff       	call   c0100dc1 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0106ef6:	c7 05 34 34 1c c0 60 	movl   $0xc0131a60,0xc01c3434
+c0106efd:	1a 13 c0 
+     int r = sm->init();
+c0106f00:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106f05:	8b 40 04             	mov    0x4(%eax),%eax
+c0106f08:	ff d0                	call   *%eax
+c0106f0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0106f0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106f11:	75 26                	jne    c0106f39 <swap_init+0x8b>
+     {
+          swap_init_ok = 1;
+c0106f13:	c7 05 2c 34 1c c0 01 	movl   $0x1,0xc01c342c
+c0106f1a:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0106f1d:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106f22:	8b 00                	mov    (%eax),%eax
+c0106f24:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106f28:	c7 04 24 87 eb 10 c0 	movl   $0xc010eb87,(%esp)
+c0106f2f:	e8 24 94 ff ff       	call   c0100358 <cprintf>
+          check_swap();
+c0106f34:	e8 a4 04 00 00       	call   c01073dd <check_swap>
+     }
+
+     return r;
+c0106f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106f3c:	c9                   	leave  
+c0106f3d:	c3                   	ret    
+
+c0106f3e <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0106f3e:	55                   	push   %ebp
+c0106f3f:	89 e5                	mov    %esp,%ebp
+c0106f41:	83 ec 18             	sub    $0x18,%esp
+     return sm->init_mm(mm);
+c0106f44:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106f49:	8b 40 08             	mov    0x8(%eax),%eax
+c0106f4c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f4f:	89 14 24             	mov    %edx,(%esp)
+c0106f52:	ff d0                	call   *%eax
+}
+c0106f54:	c9                   	leave  
+c0106f55:	c3                   	ret    
+
+c0106f56 <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0106f56:	55                   	push   %ebp
+c0106f57:	89 e5                	mov    %esp,%ebp
+c0106f59:	83 ec 18             	sub    $0x18,%esp
+     return sm->tick_event(mm);
+c0106f5c:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106f61:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106f64:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f67:	89 14 24             	mov    %edx,(%esp)
+c0106f6a:	ff d0                	call   *%eax
+}
+c0106f6c:	c9                   	leave  
+c0106f6d:	c3                   	ret    
+
+c0106f6e <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0106f6e:	55                   	push   %ebp
+c0106f6f:	89 e5                	mov    %esp,%ebp
+c0106f71:	83 ec 18             	sub    $0x18,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c0106f74:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106f79:	8b 40 10             	mov    0x10(%eax),%eax
+c0106f7c:	8b 55 14             	mov    0x14(%ebp),%edx
+c0106f7f:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106f83:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106f86:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106f8a:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106f8d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106f91:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f94:	89 14 24             	mov    %edx,(%esp)
+c0106f97:	ff d0                	call   *%eax
+}
+c0106f99:	c9                   	leave  
+c0106f9a:	c3                   	ret    
+
+c0106f9b <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0106f9b:	55                   	push   %ebp
+c0106f9c:	89 e5                	mov    %esp,%ebp
+c0106f9e:	83 ec 18             	sub    $0x18,%esp
+     return sm->set_unswappable(mm, addr);
+c0106fa1:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106fa6:	8b 40 14             	mov    0x14(%eax),%eax
+c0106fa9:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106fac:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106fb0:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106fb3:	89 14 24             	mov    %edx,(%esp)
+c0106fb6:	ff d0                	call   *%eax
+}
+c0106fb8:	c9                   	leave  
+c0106fb9:	c3                   	ret    
+
+c0106fba <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c0106fba:	55                   	push   %ebp
+c0106fbb:	89 e5                	mov    %esp,%ebp
+c0106fbd:	83 ec 38             	sub    $0x38,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c0106fc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106fc7:	e9 5a 01 00 00       	jmp    c0107126 <swap_out+0x16c>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0106fcc:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0106fd1:	8b 40 18             	mov    0x18(%eax),%eax
+c0106fd4:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106fd7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106fdb:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0106fde:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106fe2:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106fe5:	89 14 24             	mov    %edx,(%esp)
+c0106fe8:	ff d0                	call   *%eax
+c0106fea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0106fed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106ff1:	74 18                	je     c010700b <swap_out+0x51>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0106ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ff6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106ffa:	c7 04 24 9c eb 10 c0 	movl   $0xc010eb9c,(%esp)
+c0107001:	e8 52 93 ff ff       	call   c0100358 <cprintf>
+c0107006:	e9 27 01 00 00       	jmp    c0107132 <swap_out+0x178>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c010700b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010700e:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107011:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c0107014:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107017:	8b 40 0c             	mov    0xc(%eax),%eax
+c010701a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107021:	00 
+c0107022:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107025:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107029:	89 04 24             	mov    %eax,(%esp)
+c010702c:	e8 ee e8 ff ff       	call   c010591f <get_pte>
+c0107031:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c0107034:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107037:	8b 00                	mov    (%eax),%eax
+c0107039:	83 e0 01             	and    $0x1,%eax
+c010703c:	85 c0                	test   %eax,%eax
+c010703e:	75 24                	jne    c0107064 <swap_out+0xaa>
+c0107040:	c7 44 24 0c c9 eb 10 	movl   $0xc010ebc9,0xc(%esp)
+c0107047:	c0 
+c0107048:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c010704f:	c0 
+c0107050:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
+c0107057:	00 
+c0107058:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c010705f:	e8 5d 9d ff ff       	call   c0100dc1 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c0107064:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107067:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010706a:	8b 52 1c             	mov    0x1c(%edx),%edx
+c010706d:	c1 ea 0c             	shr    $0xc,%edx
+c0107070:	83 c2 01             	add    $0x1,%edx
+c0107073:	c1 e2 08             	shl    $0x8,%edx
+c0107076:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010707a:	89 14 24             	mov    %edx,(%esp)
+c010707d:	e8 84 31 00 00       	call   c010a206 <swapfs_write>
+c0107082:	85 c0                	test   %eax,%eax
+c0107084:	74 34                	je     c01070ba <swap_out+0x100>
+                    cprintf("SWAP: failed to save\n");
+c0107086:	c7 04 24 f3 eb 10 c0 	movl   $0xc010ebf3,(%esp)
+c010708d:	e8 c6 92 ff ff       	call   c0100358 <cprintf>
+                    sm->map_swappable(mm, v, page, 0);
+c0107092:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c0107097:	8b 40 10             	mov    0x10(%eax),%eax
+c010709a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010709d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01070a4:	00 
+c01070a5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01070a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01070ac:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01070b0:	8b 55 08             	mov    0x8(%ebp),%edx
+c01070b3:	89 14 24             	mov    %edx,(%esp)
+c01070b6:	ff d0                	call   *%eax
+c01070b8:	eb 68                	jmp    c0107122 <swap_out+0x168>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c01070ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01070bd:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01070c0:	c1 e8 0c             	shr    $0xc,%eax
+c01070c3:	83 c0 01             	add    $0x1,%eax
+c01070c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01070ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01070cd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01070d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070d4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01070d8:	c7 04 24 0c ec 10 c0 	movl   $0xc010ec0c,(%esp)
+c01070df:	e8 74 92 ff ff       	call   c0100358 <cprintf>
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c01070e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01070e7:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01070ea:	c1 e8 0c             	shr    $0xc,%eax
+c01070ed:	83 c0 01             	add    $0x1,%eax
+c01070f0:	c1 e0 08             	shl    $0x8,%eax
+c01070f3:	89 c2                	mov    %eax,%edx
+c01070f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01070f8:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c01070fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01070fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107104:	00 
+c0107105:	89 04 24             	mov    %eax,(%esp)
+c0107108:	e8 16 e1 ff ff       	call   c0105223 <free_pages>
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c010710d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107110:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107113:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107116:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010711a:	89 04 24             	mov    %eax,(%esp)
+c010711d:	e8 07 ef ff ff       	call   c0106029 <tlb_invalidate>
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c0107122:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107129:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010712c:	0f 85 9a fe ff ff    	jne    c0106fcc <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c0107132:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107135:	c9                   	leave  
+c0107136:	c3                   	ret    
+
+c0107137 <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c0107137:	55                   	push   %ebp
+c0107138:	89 e5                	mov    %esp,%ebp
+c010713a:	83 ec 28             	sub    $0x28,%esp
+     struct Page *result = alloc_page();
+c010713d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0107144:	e8 6f e0 ff ff       	call   c01051b8 <alloc_pages>
+c0107149:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c010714c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107150:	75 24                	jne    c0107176 <swap_in+0x3f>
+c0107152:	c7 44 24 0c 4c ec 10 	movl   $0xc010ec4c,0xc(%esp)
+c0107159:	c0 
+c010715a:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107161:	c0 
+c0107162:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c0107169:	00 
+c010716a:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107171:	e8 4b 9c ff ff       	call   c0100dc1 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c0107176:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107179:	8b 40 0c             	mov    0xc(%eax),%eax
+c010717c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107183:	00 
+c0107184:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107187:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010718b:	89 04 24             	mov    %eax,(%esp)
+c010718e:	e8 8c e7 ff ff       	call   c010591f <get_pte>
+c0107193:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c0107196:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107199:	8b 00                	mov    (%eax),%eax
+c010719b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010719e:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01071a2:	89 04 24             	mov    %eax,(%esp)
+c01071a5:	e8 ea 2f 00 00       	call   c010a194 <swapfs_read>
+c01071aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01071ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01071b1:	74 2a                	je     c01071dd <swap_in+0xa6>
+     {
+        assert(r!=0);
+c01071b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01071b7:	75 24                	jne    c01071dd <swap_in+0xa6>
+c01071b9:	c7 44 24 0c 59 ec 10 	movl   $0xc010ec59,0xc(%esp)
+c01071c0:	c0 
+c01071c1:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01071c8:	c0 
+c01071c9:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
+c01071d0:	00 
+c01071d1:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01071d8:	e8 e4 9b ff ff       	call   c0100dc1 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c01071dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01071e0:	8b 00                	mov    (%eax),%eax
+c01071e2:	c1 e8 08             	shr    $0x8,%eax
+c01071e5:	89 c2                	mov    %eax,%edx
+c01071e7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01071ea:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01071ee:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01071f2:	c7 04 24 60 ec 10 c0 	movl   $0xc010ec60,(%esp)
+c01071f9:	e8 5a 91 ff ff       	call   c0100358 <cprintf>
+     *ptr_result=result;
+c01071fe:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107201:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107204:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0107206:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010720b:	c9                   	leave  
+c010720c:	c3                   	ret    
+
+c010720d <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c010720d:	55                   	push   %ebp
+c010720e:	89 e5                	mov    %esp,%ebp
+c0107210:	83 ec 18             	sub    $0x18,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c0107213:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107218:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c010721b:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107220:	83 f8 01             	cmp    $0x1,%eax
+c0107223:	74 24                	je     c0107249 <check_content_set+0x3c>
+c0107225:	c7 44 24 0c 9e ec 10 	movl   $0xc010ec9e,0xc(%esp)
+c010722c:	c0 
+c010722d:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107234:	c0 
+c0107235:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
+c010723c:	00 
+c010723d:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107244:	e8 78 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c0107249:	b8 10 10 00 00       	mov    $0x1010,%eax
+c010724e:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107251:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107256:	83 f8 01             	cmp    $0x1,%eax
+c0107259:	74 24                	je     c010727f <check_content_set+0x72>
+c010725b:	c7 44 24 0c 9e ec 10 	movl   $0xc010ec9e,0xc(%esp)
+c0107262:	c0 
+c0107263:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c010726a:	c0 
+c010726b:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c0107272:	00 
+c0107273:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c010727a:	e8 42 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c010727f:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107284:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c0107287:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c010728c:	83 f8 02             	cmp    $0x2,%eax
+c010728f:	74 24                	je     c01072b5 <check_content_set+0xa8>
+c0107291:	c7 44 24 0c ad ec 10 	movl   $0xc010ecad,0xc(%esp)
+c0107298:	c0 
+c0107299:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01072a0:	c0 
+c01072a1:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
+c01072a8:	00 
+c01072a9:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01072b0:	e8 0c 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01072b5:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01072ba:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01072bd:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c01072c2:	83 f8 02             	cmp    $0x2,%eax
+c01072c5:	74 24                	je     c01072eb <check_content_set+0xde>
+c01072c7:	c7 44 24 0c ad ec 10 	movl   $0xc010ecad,0xc(%esp)
+c01072ce:	c0 
+c01072cf:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01072d6:	c0 
+c01072d7:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
+c01072de:	00 
+c01072df:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01072e6:	e8 d6 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c01072eb:	b8 00 30 00 00       	mov    $0x3000,%eax
+c01072f0:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c01072f3:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c01072f8:	83 f8 03             	cmp    $0x3,%eax
+c01072fb:	74 24                	je     c0107321 <check_content_set+0x114>
+c01072fd:	c7 44 24 0c bc ec 10 	movl   $0xc010ecbc,0xc(%esp)
+c0107304:	c0 
+c0107305:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c010730c:	c0 
+c010730d:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c0107314:	00 
+c0107315:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c010731c:	e8 a0 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c0107321:	b8 10 30 00 00       	mov    $0x3010,%eax
+c0107326:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107329:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c010732e:	83 f8 03             	cmp    $0x3,%eax
+c0107331:	74 24                	je     c0107357 <check_content_set+0x14a>
+c0107333:	c7 44 24 0c bc ec 10 	movl   $0xc010ecbc,0xc(%esp)
+c010733a:	c0 
+c010733b:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107342:	c0 
+c0107343:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c010734a:	00 
+c010734b:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107352:	e8 6a 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c0107357:	b8 00 40 00 00       	mov    $0x4000,%eax
+c010735c:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c010735f:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107364:	83 f8 04             	cmp    $0x4,%eax
+c0107367:	74 24                	je     c010738d <check_content_set+0x180>
+c0107369:	c7 44 24 0c cb ec 10 	movl   $0xc010eccb,0xc(%esp)
+c0107370:	c0 
+c0107371:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107378:	c0 
+c0107379:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c0107380:	00 
+c0107381:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107388:	e8 34 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c010738d:	b8 10 40 00 00       	mov    $0x4010,%eax
+c0107392:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0107395:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c010739a:	83 f8 04             	cmp    $0x4,%eax
+c010739d:	74 24                	je     c01073c3 <check_content_set+0x1b6>
+c010739f:	c7 44 24 0c cb ec 10 	movl   $0xc010eccb,0xc(%esp)
+c01073a6:	c0 
+c01073a7:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01073ae:	c0 
+c01073af:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c01073b6:	00 
+c01073b7:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01073be:	e8 fe 99 ff ff       	call   c0100dc1 <__panic>
+}
+c01073c3:	c9                   	leave  
+c01073c4:	c3                   	ret    
+
+c01073c5 <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01073c5:	55                   	push   %ebp
+c01073c6:	89 e5                	mov    %esp,%ebp
+c01073c8:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c01073cb:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
+c01073d0:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01073d3:	ff d0                	call   *%eax
+c01073d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c01073d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01073db:	c9                   	leave  
+c01073dc:	c3                   	ret    
+
+c01073dd <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c01073dd:	55                   	push   %ebp
+c01073de:	89 e5                	mov    %esp,%ebp
+c01073e0:	53                   	push   %ebx
+c01073e1:	83 ec 74             	sub    $0x74,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c01073e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01073eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c01073f2:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c01073f9:	eb 6b                	jmp    c0107466 <check_swap+0x89>
+        struct Page *p = le2page(le, page_link);
+c01073fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01073fe:	83 e8 0c             	sub    $0xc,%eax
+c0107401:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c0107404:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107407:	83 c0 04             	add    $0x4,%eax
+c010740a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0107411:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107414:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107417:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c010741a:	0f a3 10             	bt     %edx,(%eax)
+c010741d:	19 c0                	sbb    %eax,%eax
+c010741f:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0107422:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0107426:	0f 95 c0             	setne  %al
+c0107429:	0f b6 c0             	movzbl %al,%eax
+c010742c:	85 c0                	test   %eax,%eax
+c010742e:	75 24                	jne    c0107454 <check_swap+0x77>
+c0107430:	c7 44 24 0c da ec 10 	movl   $0xc010ecda,0xc(%esp)
+c0107437:	c0 
+c0107438:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c010743f:	c0 
+c0107440:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
+c0107447:	00 
+c0107448:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c010744f:	e8 6d 99 ff ff       	call   c0100dc1 <__panic>
+        count ++, total += p->property;
+c0107454:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0107458:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010745b:	8b 50 08             	mov    0x8(%eax),%edx
+c010745e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107461:	01 d0                	add    %edx,%eax
+c0107463:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107466:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107469:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c010746c:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010746f:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107472:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107475:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
+c010747c:	0f 85 79 ff ff ff    	jne    c01073fb <check_swap+0x1e>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c0107482:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c0107485:	e8 cb dd ff ff       	call   c0105255 <nr_free_pages>
+c010748a:	39 c3                	cmp    %eax,%ebx
+c010748c:	74 24                	je     c01074b2 <check_swap+0xd5>
+c010748e:	c7 44 24 0c ea ec 10 	movl   $0xc010ecea,0xc(%esp)
+c0107495:	c0 
+c0107496:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c010749d:	c0 
+c010749e:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c01074a5:	00 
+c01074a6:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01074ad:	e8 0f 99 ff ff       	call   c0100dc1 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c01074b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01074b5:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01074b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01074bc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01074c0:	c7 04 24 04 ed 10 c0 	movl   $0xc010ed04,(%esp)
+c01074c7:	e8 8c 8e ff ff       	call   c0100358 <cprintf>
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c01074cc:	e8 36 0b 00 00       	call   c0108007 <mm_create>
+c01074d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+     assert(mm != NULL);
+c01074d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01074d8:	75 24                	jne    c01074fe <check_swap+0x121>
+c01074da:	c7 44 24 0c 2a ed 10 	movl   $0xc010ed2a,0xc(%esp)
+c01074e1:	c0 
+c01074e2:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01074e9:	c0 
+c01074ea:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
+c01074f1:	00 
+c01074f2:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01074f9:	e8 c3 98 ff ff       	call   c0100dc1 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c01074fe:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c0107503:	85 c0                	test   %eax,%eax
+c0107505:	74 24                	je     c010752b <check_swap+0x14e>
+c0107507:	c7 44 24 0c 35 ed 10 	movl   $0xc010ed35,0xc(%esp)
+c010750e:	c0 
+c010750f:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107516:	c0 
+c0107517:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
+c010751e:	00 
+c010751f:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107526:	e8 96 98 ff ff       	call   c0100dc1 <__panic>
+
+     check_mm_struct = mm;
+c010752b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010752e:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0107533:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
+c0107539:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010753c:	89 50 0c             	mov    %edx,0xc(%eax)
+c010753f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107542:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107545:	89 45 dc             	mov    %eax,-0x24(%ebp)
+     assert(pgdir[0] == 0);
+c0107548:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010754b:	8b 00                	mov    (%eax),%eax
+c010754d:	85 c0                	test   %eax,%eax
+c010754f:	74 24                	je     c0107575 <check_swap+0x198>
+c0107551:	c7 44 24 0c 4d ed 10 	movl   $0xc010ed4d,0xc(%esp)
+c0107558:	c0 
+c0107559:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107560:	c0 
+c0107561:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c0107568:	00 
+c0107569:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107570:	e8 4c 98 ff ff       	call   c0100dc1 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c0107575:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
+c010757c:	00 
+c010757d:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
+c0107584:	00 
+c0107585:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+c010758c:	e8 1b 0b 00 00       	call   c01080ac <vma_create>
+c0107591:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(vma != NULL);
+c0107594:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0107598:	75 24                	jne    c01075be <check_swap+0x1e1>
+c010759a:	c7 44 24 0c 5b ed 10 	movl   $0xc010ed5b,0xc(%esp)
+c01075a1:	c0 
+c01075a2:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01075a9:	c0 
+c01075aa:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
+c01075b1:	00 
+c01075b2:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01075b9:	e8 03 98 ff ff       	call   c0100dc1 <__panic>
+
+     insert_vma_struct(mm, vma);
+c01075be:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01075c1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01075c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01075c8:	89 04 24             	mov    %eax,(%esp)
+c01075cb:	e8 6c 0c 00 00       	call   c010823c <insert_vma_struct>
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c01075d0:	c7 04 24 68 ed 10 c0 	movl   $0xc010ed68,(%esp)
+c01075d7:	e8 7c 8d ff ff       	call   c0100358 <cprintf>
+     pte_t *temp_ptep=NULL;
+c01075dc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c01075e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01075e6:	8b 40 0c             	mov    0xc(%eax),%eax
+c01075e9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c01075f0:	00 
+c01075f1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c01075f8:	00 
+c01075f9:	89 04 24             	mov    %eax,(%esp)
+c01075fc:	e8 1e e3 ff ff       	call   c010591f <get_pte>
+c0107601:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(temp_ptep!= NULL);
+c0107604:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+c0107608:	75 24                	jne    c010762e <check_swap+0x251>
+c010760a:	c7 44 24 0c 9c ed 10 	movl   $0xc010ed9c,0xc(%esp)
+c0107611:	c0 
+c0107612:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107619:	c0 
+c010761a:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0107621:	00 
+c0107622:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107629:	e8 93 97 ff ff       	call   c0100dc1 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c010762e:	c7 04 24 b0 ed 10 c0 	movl   $0xc010edb0,(%esp)
+c0107635:	e8 1e 8d ff ff       	call   c0100358 <cprintf>
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010763a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107641:	e9 a3 00 00 00       	jmp    c01076e9 <check_swap+0x30c>
+          check_rp[i] = alloc_page();
+c0107646:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010764d:	e8 66 db ff ff       	call   c01051b8 <alloc_pages>
+c0107652:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107655:	89 04 95 00 55 1c c0 	mov    %eax,-0x3fe3ab00(,%edx,4)
+          assert(check_rp[i] != NULL );
+c010765c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010765f:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0107666:	85 c0                	test   %eax,%eax
+c0107668:	75 24                	jne    c010768e <check_swap+0x2b1>
+c010766a:	c7 44 24 0c d4 ed 10 	movl   $0xc010edd4,0xc(%esp)
+c0107671:	c0 
+c0107672:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107679:	c0 
+c010767a:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
+c0107681:	00 
+c0107682:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107689:	e8 33 97 ff ff       	call   c0100dc1 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c010768e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107691:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0107698:	83 c0 04             	add    $0x4,%eax
+c010769b:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
+c01076a2:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01076a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01076a8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01076ab:	0f a3 10             	bt     %edx,(%eax)
+c01076ae:	19 c0                	sbb    %eax,%eax
+c01076b0:	89 45 ac             	mov    %eax,-0x54(%ebp)
+    return oldbit != 0;
+c01076b3:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
+c01076b7:	0f 95 c0             	setne  %al
+c01076ba:	0f b6 c0             	movzbl %al,%eax
+c01076bd:	85 c0                	test   %eax,%eax
+c01076bf:	74 24                	je     c01076e5 <check_swap+0x308>
+c01076c1:	c7 44 24 0c e8 ed 10 	movl   $0xc010ede8,0xc(%esp)
+c01076c8:	c0 
+c01076c9:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01076d0:	c0 
+c01076d1:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c01076d8:	00 
+c01076d9:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01076e0:	e8 dc 96 ff ff       	call   c0100dc1 <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01076e5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01076e9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01076ed:	0f 8e 53 ff ff ff    	jle    c0107646 <check_swap+0x269>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c01076f3:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
+c01076f8:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
+c01076fe:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107701:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c0107704:	c7 45 a8 dc 54 1c c0 	movl   $0xc01c54dc,-0x58(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010770b:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c010770e:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107711:	89 50 04             	mov    %edx,0x4(%eax)
+c0107714:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107717:	8b 50 04             	mov    0x4(%eax),%edx
+c010771a:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c010771d:	89 10                	mov    %edx,(%eax)
+c010771f:	c7 45 a4 dc 54 1c c0 	movl   $0xc01c54dc,-0x5c(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0107726:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107729:	8b 40 04             	mov    0x4(%eax),%eax
+c010772c:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+c010772f:	0f 94 c0             	sete   %al
+c0107732:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c0107735:	85 c0                	test   %eax,%eax
+c0107737:	75 24                	jne    c010775d <check_swap+0x380>
+c0107739:	c7 44 24 0c 03 ee 10 	movl   $0xc010ee03,0xc(%esp)
+c0107740:	c0 
+c0107741:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107748:	c0 
+c0107749:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
+c0107750:	00 
+c0107751:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107758:	e8 64 96 ff ff       	call   c0100dc1 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c010775d:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c0107762:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     nr_free = 0;
+c0107765:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
+c010776c:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010776f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107776:	eb 1e                	jmp    c0107796 <check_swap+0x3b9>
+        free_pages(check_rp[i],1);
+c0107778:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010777b:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0107782:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107789:	00 
+c010778a:	89 04 24             	mov    %eax,(%esp)
+c010778d:	e8 91 da ff ff       	call   c0105223 <free_pages>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107792:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107796:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c010779a:	7e dc                	jle    c0107778 <check_swap+0x39b>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c010779c:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c01077a1:	83 f8 04             	cmp    $0x4,%eax
+c01077a4:	74 24                	je     c01077ca <check_swap+0x3ed>
+c01077a6:	c7 44 24 0c 1c ee 10 	movl   $0xc010ee1c,0xc(%esp)
+c01077ad:	c0 
+c01077ae:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01077b5:	c0 
+c01077b6:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c01077bd:	00 
+c01077be:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01077c5:	e8 f7 95 ff ff       	call   c0100dc1 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c01077ca:	c7 04 24 40 ee 10 c0 	movl   $0xc010ee40,(%esp)
+c01077d1:	e8 82 8b ff ff       	call   c0100358 <cprintf>
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c01077d6:	c7 05 38 34 1c c0 00 	movl   $0x0,0xc01c3438
+c01077dd:	00 00 00 
+     
+     check_content_set();
+c01077e0:	e8 28 fa ff ff       	call   c010720d <check_content_set>
+     assert( nr_free == 0);         
+c01077e5:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
+c01077ea:	85 c0                	test   %eax,%eax
+c01077ec:	74 24                	je     c0107812 <check_swap+0x435>
+c01077ee:	c7 44 24 0c 67 ee 10 	movl   $0xc010ee67,0xc(%esp)
+c01077f5:	c0 
+c01077f6:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01077fd:	c0 
+c01077fe:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
+c0107805:	00 
+c0107806:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c010780d:	e8 af 95 ff ff       	call   c0100dc1 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107812:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107819:	eb 26                	jmp    c0107841 <check_swap+0x464>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c010781b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010781e:	c7 04 85 20 55 1c c0 	movl   $0xffffffff,-0x3fe3aae0(,%eax,4)
+c0107825:	ff ff ff ff 
+c0107829:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010782c:	8b 14 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%edx
+c0107833:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107836:	89 14 85 60 55 1c c0 	mov    %edx,-0x3fe3aaa0(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c010783d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107841:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c0107845:	7e d4                	jle    c010781b <check_swap+0x43e>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107847:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010784e:	e9 eb 00 00 00       	jmp    c010793e <check_swap+0x561>
+         check_ptep[i]=0;
+c0107853:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107856:	c7 04 85 b4 55 1c c0 	movl   $0x0,-0x3fe3aa4c(,%eax,4)
+c010785d:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c0107861:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107864:	83 c0 01             	add    $0x1,%eax
+c0107867:	c1 e0 0c             	shl    $0xc,%eax
+c010786a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107871:	00 
+c0107872:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107876:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107879:	89 04 24             	mov    %eax,(%esp)
+c010787c:	e8 9e e0 ff ff       	call   c010591f <get_pte>
+c0107881:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107884:	89 04 95 b4 55 1c c0 	mov    %eax,-0x3fe3aa4c(,%edx,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c010788b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010788e:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
+c0107895:	85 c0                	test   %eax,%eax
+c0107897:	75 24                	jne    c01078bd <check_swap+0x4e0>
+c0107899:	c7 44 24 0c 74 ee 10 	movl   $0xc010ee74,0xc(%esp)
+c01078a0:	c0 
+c01078a1:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01078a8:	c0 
+c01078a9:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
+c01078b0:	00 
+c01078b1:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01078b8:	e8 04 95 ff ff       	call   c0100dc1 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c01078bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01078c0:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
+c01078c7:	8b 00                	mov    (%eax),%eax
+c01078c9:	89 04 24             	mov    %eax,(%esp)
+c01078cc:	e8 87 f5 ff ff       	call   c0106e58 <pte2page>
+c01078d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01078d4:	8b 14 95 00 55 1c c0 	mov    -0x3fe3ab00(,%edx,4),%edx
+c01078db:	39 d0                	cmp    %edx,%eax
+c01078dd:	74 24                	je     c0107903 <check_swap+0x526>
+c01078df:	c7 44 24 0c 8c ee 10 	movl   $0xc010ee8c,0xc(%esp)
+c01078e6:	c0 
+c01078e7:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c01078ee:	c0 
+c01078ef:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c01078f6:	00 
+c01078f7:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c01078fe:	e8 be 94 ff ff       	call   c0100dc1 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c0107903:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107906:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
+c010790d:	8b 00                	mov    (%eax),%eax
+c010790f:	83 e0 01             	and    $0x1,%eax
+c0107912:	85 c0                	test   %eax,%eax
+c0107914:	75 24                	jne    c010793a <check_swap+0x55d>
+c0107916:	c7 44 24 0c b4 ee 10 	movl   $0xc010eeb4,0xc(%esp)
+c010791d:	c0 
+c010791e:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107925:	c0 
+c0107926:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
+c010792d:	00 
+c010792e:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107935:	e8 87 94 ff ff       	call   c0100dc1 <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010793a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c010793e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107942:	0f 8e 0b ff ff ff    	jle    c0107853 <check_swap+0x476>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c0107948:	c7 04 24 d0 ee 10 c0 	movl   $0xc010eed0,(%esp)
+c010794f:	e8 04 8a ff ff       	call   c0100358 <cprintf>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c0107954:	e8 6c fa ff ff       	call   c01073c5 <check_content_access>
+c0107959:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(ret==0);
+c010795c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0107960:	74 24                	je     c0107986 <check_swap+0x5a9>
+c0107962:	c7 44 24 0c f6 ee 10 	movl   $0xc010eef6,0xc(%esp)
+c0107969:	c0 
+c010796a:	c7 44 24 08 de eb 10 	movl   $0xc010ebde,0x8(%esp)
+c0107971:	c0 
+c0107972:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
+c0107979:	00 
+c010797a:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
+c0107981:	e8 3b 94 ff ff       	call   c0100dc1 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107986:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010798d:	eb 1e                	jmp    c01079ad <check_swap+0x5d0>
+         free_pages(check_rp[i],1);
+c010798f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107992:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0107999:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01079a0:	00 
+c01079a1:	89 04 24             	mov    %eax,(%esp)
+c01079a4:	e8 7a d8 ff ff       	call   c0105223 <free_pages>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01079a9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01079ad:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01079b1:	7e dc                	jle    c010798f <check_swap+0x5b2>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c01079b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01079b6:	8b 00                	mov    (%eax),%eax
+c01079b8:	89 04 24             	mov    %eax,(%esp)
+c01079bb:	e8 d6 f4 ff ff       	call   c0106e96 <pde2page>
+c01079c0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01079c7:	00 
+c01079c8:	89 04 24             	mov    %eax,(%esp)
+c01079cb:	e8 53 d8 ff ff       	call   c0105223 <free_pages>
+     pgdir[0] = 0;
+c01079d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01079d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c01079d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01079dc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c01079e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01079e6:	89 04 24             	mov    %eax,(%esp)
+c01079e9:	e8 7e 09 00 00       	call   c010836c <mm_destroy>
+     check_mm_struct = NULL;
+c01079ee:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
+c01079f5:	00 00 00 
+     
+     nr_free = nr_free_store;
+c01079f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01079fb:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
+     free_list = free_list_store;
+c0107a00:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0107a03:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107a06:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
+c0107a0b:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
+
+     
+     le = &free_list;
+c0107a11:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107a18:	eb 1d                	jmp    c0107a37 <check_swap+0x65a>
+         struct Page *p = le2page(le, page_link);
+c0107a1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a1d:	83 e8 0c             	sub    $0xc,%eax
+c0107a20:	89 45 c8             	mov    %eax,-0x38(%ebp)
+         count --, total -= p->property;
+c0107a23:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0107a27:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107a2a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107a2d:	8b 40 08             	mov    0x8(%eax),%eax
+c0107a30:	29 c2                	sub    %eax,%edx
+c0107a32:	89 d0                	mov    %edx,%eax
+c0107a34:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107a37:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a3a:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107a3d:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0107a40:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107a43:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107a46:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
+c0107a4d:	75 cb                	jne    c0107a1a <check_swap+0x63d>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0107a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a52:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107a59:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107a5d:	c7 04 24 fd ee 10 c0 	movl   $0xc010eefd,(%esp)
+c0107a64:	e8 ef 88 ff ff       	call   c0100358 <cprintf>
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c0107a69:	c7 04 24 17 ef 10 c0 	movl   $0xc010ef17,(%esp)
+c0107a70:	e8 e3 88 ff ff       	call   c0100358 <cprintf>
+}
+c0107a75:	83 c4 74             	add    $0x74,%esp
+c0107a78:	5b                   	pop    %ebx
+c0107a79:	5d                   	pop    %ebp
+c0107a7a:	c3                   	ret    
+
+c0107a7b <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c0107a7b:	55                   	push   %ebp
+c0107a7c:	89 e5                	mov    %esp,%ebp
+c0107a7e:	83 ec 10             	sub    $0x10,%esp
+c0107a81:	c7 45 fc c4 55 1c c0 	movl   $0xc01c55c4,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107a88:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107a8b:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0107a8e:	89 50 04             	mov    %edx,0x4(%eax)
+c0107a91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107a94:	8b 50 04             	mov    0x4(%eax),%edx
+c0107a97:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107a9a:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c0107a9c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107a9f:	c7 40 14 c4 55 1c c0 	movl   $0xc01c55c4,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c0107aa6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107aab:	c9                   	leave  
+c0107aac:	c3                   	ret    
+
+c0107aad <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0107aad:	55                   	push   %ebp
+c0107aae:	89 e5                	mov    %esp,%ebp
+c0107ab0:	83 ec 38             	sub    $0x38,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0107ab3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107ab6:	8b 40 14             	mov    0x14(%eax),%eax
+c0107ab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c0107abc:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107abf:	83 c0 14             	add    $0x14,%eax
+c0107ac2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c0107ac5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107ac9:	74 06                	je     c0107ad1 <_fifo_map_swappable+0x24>
+c0107acb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107acf:	75 24                	jne    c0107af5 <_fifo_map_swappable+0x48>
+c0107ad1:	c7 44 24 0c 30 ef 10 	movl   $0xc010ef30,0xc(%esp)
+c0107ad8:	c0 
+c0107ad9:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107ae0:	c0 
+c0107ae1:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
+c0107ae8:	00 
+c0107ae9:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107af0:	e8 cc 92 ff ff       	call   c0100dc1 <__panic>
+c0107af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107af8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107afe:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107b01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107b04:	8b 00                	mov    (%eax),%eax
+c0107b06:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0107b09:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0107b0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0107b0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107b12:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107b15:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107b18:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107b1b:	89 10                	mov    %edx,(%eax)
+c0107b1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107b20:	8b 10                	mov    (%eax),%edx
+c0107b22:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b25:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107b28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107b2e:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107b31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b34:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107b37:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: 2012011268*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
+    return 0;
+c0107b39:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107b3e:	c9                   	leave  
+c0107b3f:	c3                   	ret    
+
+c0107b40 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0107b40:	55                   	push   %ebp
+c0107b41:	89 e5                	mov    %esp,%ebp
+c0107b43:	83 ec 38             	sub    $0x38,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0107b46:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107b49:	8b 40 14             	mov    0x14(%eax),%eax
+c0107b4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0107b4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107b53:	75 24                	jne    c0107b79 <_fifo_swap_out_victim+0x39>
+c0107b55:	c7 44 24 0c 77 ef 10 	movl   $0xc010ef77,0xc(%esp)
+c0107b5c:	c0 
+c0107b5d:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107b64:	c0 
+c0107b65:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
+c0107b6c:	00 
+c0107b6d:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107b74:	e8 48 92 ff ff       	call   c0100dc1 <__panic>
+     assert(in_tick==0);
+c0107b79:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107b7d:	74 24                	je     c0107ba3 <_fifo_swap_out_victim+0x63>
+c0107b7f:	c7 44 24 0c 84 ef 10 	movl   $0xc010ef84,0xc(%esp)
+c0107b86:	c0 
+c0107b87:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107b8e:	c0 
+c0107b8f:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
+c0107b96:	00 
+c0107b97:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107b9e:	e8 1e 92 ff ff       	call   c0100dc1 <__panic>
+c0107ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ba6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107ba9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107bac:	8b 40 04             	mov    0x4(%eax),%eax
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: 2012011268*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = list_next(head);
+c0107baf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     assert(le != head);
+c0107bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107bb5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107bb8:	75 24                	jne    c0107bde <_fifo_swap_out_victim+0x9e>
+c0107bba:	c7 44 24 0c 8f ef 10 	movl   $0xc010ef8f,0xc(%esp)
+c0107bc1:	c0 
+c0107bc2:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107bc9:	c0 
+c0107bca:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c0107bd1:	00 
+c0107bd2:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107bd9:	e8 e3 91 ff ff       	call   c0100dc1 <__panic>
+     struct Page *page = le2page(le, pra_page_link);
+c0107bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107be1:	83 e8 14             	sub    $0x14,%eax
+c0107be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107bea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107bed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107bf0:	8b 40 04             	mov    0x4(%eax),%eax
+c0107bf3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107bf6:	8b 12                	mov    (%edx),%edx
+c0107bf8:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0107bfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107bfe:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107c01:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107c04:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107c0a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107c0d:	89 10                	mov    %edx,(%eax)
+     list_del(le);
+     *ptr_page = page;
+c0107c0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107c12:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107c15:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0107c17:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107c1c:	c9                   	leave  
+c0107c1d:	c3                   	ret    
+
+c0107c1e <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c0107c1e:	55                   	push   %ebp
+c0107c1f:	89 e5                	mov    %esp,%ebp
+c0107c21:	83 ec 18             	sub    $0x18,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107c24:	c7 04 24 9c ef 10 c0 	movl   $0xc010ef9c,(%esp)
+c0107c2b:	e8 28 87 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107c30:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107c35:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0107c38:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107c3d:	83 f8 04             	cmp    $0x4,%eax
+c0107c40:	74 24                	je     c0107c66 <_fifo_check_swap+0x48>
+c0107c42:	c7 44 24 0c c2 ef 10 	movl   $0xc010efc2,0xc(%esp)
+c0107c49:	c0 
+c0107c4a:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107c51:	c0 
+c0107c52:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
+c0107c59:	00 
+c0107c5a:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107c61:	e8 5b 91 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107c66:	c7 04 24 d4 ef 10 c0 	movl   $0xc010efd4,(%esp)
+c0107c6d:	e8 e6 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107c72:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107c77:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c0107c7a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107c7f:	83 f8 04             	cmp    $0x4,%eax
+c0107c82:	74 24                	je     c0107ca8 <_fifo_check_swap+0x8a>
+c0107c84:	c7 44 24 0c c2 ef 10 	movl   $0xc010efc2,0xc(%esp)
+c0107c8b:	c0 
+c0107c8c:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107c93:	c0 
+c0107c94:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
+c0107c9b:	00 
+c0107c9c:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107ca3:	e8 19 91 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107ca8:	c7 04 24 fc ef 10 c0 	movl   $0xc010effc,(%esp)
+c0107caf:	e8 a4 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107cb4:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107cb9:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c0107cbc:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107cc1:	83 f8 04             	cmp    $0x4,%eax
+c0107cc4:	74 24                	je     c0107cea <_fifo_check_swap+0xcc>
+c0107cc6:	c7 44 24 0c c2 ef 10 	movl   $0xc010efc2,0xc(%esp)
+c0107ccd:	c0 
+c0107cce:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107cd5:	c0 
+c0107cd6:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
+c0107cdd:	00 
+c0107cde:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107ce5:	e8 d7 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107cea:	c7 04 24 24 f0 10 c0 	movl   $0xc010f024,(%esp)
+c0107cf1:	e8 62 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107cf6:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107cfb:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c0107cfe:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107d03:	83 f8 04             	cmp    $0x4,%eax
+c0107d06:	74 24                	je     c0107d2c <_fifo_check_swap+0x10e>
+c0107d08:	c7 44 24 0c c2 ef 10 	movl   $0xc010efc2,0xc(%esp)
+c0107d0f:	c0 
+c0107d10:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107d17:	c0 
+c0107d18:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
+c0107d1f:	00 
+c0107d20:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107d27:	e8 95 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107d2c:	c7 04 24 4c f0 10 c0 	movl   $0xc010f04c,(%esp)
+c0107d33:	e8 20 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107d38:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107d3d:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c0107d40:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107d45:	83 f8 05             	cmp    $0x5,%eax
+c0107d48:	74 24                	je     c0107d6e <_fifo_check_swap+0x150>
+c0107d4a:	c7 44 24 0c 72 f0 10 	movl   $0xc010f072,0xc(%esp)
+c0107d51:	c0 
+c0107d52:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107d59:	c0 
+c0107d5a:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
+c0107d61:	00 
+c0107d62:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107d69:	e8 53 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107d6e:	c7 04 24 24 f0 10 c0 	movl   $0xc010f024,(%esp)
+c0107d75:	e8 de 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107d7a:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107d7f:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c0107d82:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107d87:	83 f8 05             	cmp    $0x5,%eax
+c0107d8a:	74 24                	je     c0107db0 <_fifo_check_swap+0x192>
+c0107d8c:	c7 44 24 0c 72 f0 10 	movl   $0xc010f072,0xc(%esp)
+c0107d93:	c0 
+c0107d94:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107d9b:	c0 
+c0107d9c:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
+c0107da3:	00 
+c0107da4:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107dab:	e8 11 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107db0:	c7 04 24 d4 ef 10 c0 	movl   $0xc010efd4,(%esp)
+c0107db7:	e8 9c 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107dbc:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107dc1:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c0107dc4:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107dc9:	83 f8 06             	cmp    $0x6,%eax
+c0107dcc:	74 24                	je     c0107df2 <_fifo_check_swap+0x1d4>
+c0107dce:	c7 44 24 0c 81 f0 10 	movl   $0xc010f081,0xc(%esp)
+c0107dd5:	c0 
+c0107dd6:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107ddd:	c0 
+c0107dde:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0107de5:	00 
+c0107de6:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107ded:	e8 cf 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107df2:	c7 04 24 24 f0 10 c0 	movl   $0xc010f024,(%esp)
+c0107df9:	e8 5a 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107dfe:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107e03:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c0107e06:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107e0b:	83 f8 07             	cmp    $0x7,%eax
+c0107e0e:	74 24                	je     c0107e34 <_fifo_check_swap+0x216>
+c0107e10:	c7 44 24 0c 90 f0 10 	movl   $0xc010f090,0xc(%esp)
+c0107e17:	c0 
+c0107e18:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107e1f:	c0 
+c0107e20:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
+c0107e27:	00 
+c0107e28:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107e2f:	e8 8d 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107e34:	c7 04 24 9c ef 10 c0 	movl   $0xc010ef9c,(%esp)
+c0107e3b:	e8 18 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107e40:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107e45:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c0107e48:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107e4d:	83 f8 08             	cmp    $0x8,%eax
+c0107e50:	74 24                	je     c0107e76 <_fifo_check_swap+0x258>
+c0107e52:	c7 44 24 0c 9f f0 10 	movl   $0xc010f09f,0xc(%esp)
+c0107e59:	c0 
+c0107e5a:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107e61:	c0 
+c0107e62:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c0107e69:	00 
+c0107e6a:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107e71:	e8 4b 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107e76:	c7 04 24 fc ef 10 c0 	movl   $0xc010effc,(%esp)
+c0107e7d:	e8 d6 84 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107e82:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107e87:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c0107e8a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107e8f:	83 f8 09             	cmp    $0x9,%eax
+c0107e92:	74 24                	je     c0107eb8 <_fifo_check_swap+0x29a>
+c0107e94:	c7 44 24 0c ae f0 10 	movl   $0xc010f0ae,0xc(%esp)
+c0107e9b:	c0 
+c0107e9c:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107ea3:	c0 
+c0107ea4:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
+c0107eab:	00 
+c0107eac:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107eb3:	e8 09 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107eb8:	c7 04 24 4c f0 10 c0 	movl   $0xc010f04c,(%esp)
+c0107ebf:	e8 94 84 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107ec4:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107ec9:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c0107ecc:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107ed1:	83 f8 0a             	cmp    $0xa,%eax
+c0107ed4:	74 24                	je     c0107efa <_fifo_check_swap+0x2dc>
+c0107ed6:	c7 44 24 0c bd f0 10 	movl   $0xc010f0bd,0xc(%esp)
+c0107edd:	c0 
+c0107ede:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107ee5:	c0 
+c0107ee6:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
+c0107eed:	00 
+c0107eee:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107ef5:	e8 c7 8e ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107efa:	c7 04 24 d4 ef 10 c0 	movl   $0xc010efd4,(%esp)
+c0107f01:	e8 52 84 ff ff       	call   c0100358 <cprintf>
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0107f06:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107f0b:	0f b6 00             	movzbl (%eax),%eax
+c0107f0e:	3c 0a                	cmp    $0xa,%al
+c0107f10:	74 24                	je     c0107f36 <_fifo_check_swap+0x318>
+c0107f12:	c7 44 24 0c d0 f0 10 	movl   $0xc010f0d0,0xc(%esp)
+c0107f19:	c0 
+c0107f1a:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107f21:	c0 
+c0107f22:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c0107f29:	00 
+c0107f2a:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107f31:	e8 8b 8e ff ff       	call   c0100dc1 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107f36:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107f3b:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c0107f3e:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0107f43:	83 f8 0b             	cmp    $0xb,%eax
+c0107f46:	74 24                	je     c0107f6c <_fifo_check_swap+0x34e>
+c0107f48:	c7 44 24 0c f1 f0 10 	movl   $0xc010f0f1,0xc(%esp)
+c0107f4f:	c0 
+c0107f50:	c7 44 24 08 4e ef 10 	movl   $0xc010ef4e,0x8(%esp)
+c0107f57:	c0 
+c0107f58:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
+c0107f5f:	00 
+c0107f60:	c7 04 24 63 ef 10 c0 	movl   $0xc010ef63,(%esp)
+c0107f67:	e8 55 8e ff ff       	call   c0100dc1 <__panic>
+    return 0;
+c0107f6c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f71:	c9                   	leave  
+c0107f72:	c3                   	ret    
+
+c0107f73 <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c0107f73:	55                   	push   %ebp
+c0107f74:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107f76:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f7b:	5d                   	pop    %ebp
+c0107f7c:	c3                   	ret    
+
+c0107f7d <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0107f7d:	55                   	push   %ebp
+c0107f7e:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107f80:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f85:	5d                   	pop    %ebp
+c0107f86:	c3                   	ret    
+
+c0107f87 <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c0107f87:	55                   	push   %ebp
+c0107f88:	89 e5                	mov    %esp,%ebp
+c0107f8a:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107f8f:	5d                   	pop    %ebp
+c0107f90:	c3                   	ret    
+
+c0107f91 <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c0107f91:	55                   	push   %ebp
+c0107f92:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c0107f94:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f97:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0107f9a:	5d                   	pop    %ebp
+c0107f9b:	c3                   	ret    
+
+c0107f9c <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c0107f9c:	55                   	push   %ebp
+c0107f9d:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c0107f9f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fa2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107fa5:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c0107fa8:	5d                   	pop    %ebp
+c0107fa9:	c3                   	ret    
+
+c0107faa <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0107faa:	55                   	push   %ebp
+c0107fab:	89 e5                	mov    %esp,%ebp
+c0107fad:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0107fb0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fb3:	c1 e8 0c             	shr    $0xc,%eax
+c0107fb6:	89 c2                	mov    %eax,%edx
+c0107fb8:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c0107fbd:	39 c2                	cmp    %eax,%edx
+c0107fbf:	72 1c                	jb     c0107fdd <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0107fc1:	c7 44 24 08 14 f1 10 	movl   $0xc010f114,0x8(%esp)
+c0107fc8:	c0 
+c0107fc9:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0107fd0:	00 
+c0107fd1:	c7 04 24 33 f1 10 c0 	movl   $0xc010f133,(%esp)
+c0107fd8:	e8 e4 8d ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0107fdd:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c0107fe2:	8b 55 08             	mov    0x8(%ebp),%edx
+c0107fe5:	c1 ea 0c             	shr    $0xc,%edx
+c0107fe8:	c1 e2 05             	shl    $0x5,%edx
+c0107feb:	01 d0                	add    %edx,%eax
+}
+c0107fed:	c9                   	leave  
+c0107fee:	c3                   	ret    
+
+c0107fef <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0107fef:	55                   	push   %ebp
+c0107ff0:	89 e5                	mov    %esp,%ebp
+c0107ff2:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0107ff5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107ff8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0107ffd:	89 04 24             	mov    %eax,(%esp)
+c0108000:	e8 a5 ff ff ff       	call   c0107faa <pa2page>
+}
+c0108005:	c9                   	leave  
+c0108006:	c3                   	ret    
+
+c0108007 <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c0108007:	55                   	push   %ebp
+c0108008:	89 e5                	mov    %esp,%ebp
+c010800a:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c010800d:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
+c0108014:	e8 2a cd ff ff       	call   c0104d43 <kmalloc>
+c0108019:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c010801c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108020:	0f 84 81 00 00 00    	je     c01080a7 <mm_create+0xa0>
+        list_init(&(mm->mmap_list));
+c0108026:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108029:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010802c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010802f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108032:	89 50 04             	mov    %edx,0x4(%eax)
+c0108035:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108038:	8b 50 04             	mov    0x4(%eax),%edx
+c010803b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010803e:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c0108040:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108043:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c010804a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010804d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c0108054:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108057:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c010805e:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
+c0108063:	85 c0                	test   %eax,%eax
+c0108065:	74 0d                	je     c0108074 <mm_create+0x6d>
+c0108067:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010806a:	89 04 24             	mov    %eax,(%esp)
+c010806d:	e8 cc ee ff ff       	call   c0106f3e <swap_init_mm>
+c0108072:	eb 0a                	jmp    c010807e <mm_create+0x77>
+        else mm->sm_priv = NULL;
+c0108074:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108077:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        
+        set_mm_count(mm, 0);
+c010807e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0108085:	00 
+c0108086:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108089:	89 04 24             	mov    %eax,(%esp)
+c010808c:	e8 0b ff ff ff       	call   c0107f9c <set_mm_count>
+        sem_init(&(mm->mm_sem), 1);
+c0108091:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108094:	83 c0 1c             	add    $0x1c,%eax
+c0108097:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010809e:	00 
+c010809f:	89 04 24             	mov    %eax,(%esp)
+c01080a2:	e8 6d 19 00 00       	call   c0109a14 <sem_init>
+    }    
+    return mm;
+c01080a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01080aa:	c9                   	leave  
+c01080ab:	c3                   	ret    
+
+c01080ac <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c01080ac:	55                   	push   %ebp
+c01080ad:	89 e5                	mov    %esp,%ebp
+c01080af:	83 ec 28             	sub    $0x28,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c01080b2:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
+c01080b9:	e8 85 cc ff ff       	call   c0104d43 <kmalloc>
+c01080be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c01080c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01080c5:	74 1b                	je     c01080e2 <vma_create+0x36>
+        vma->vm_start = vm_start;
+c01080c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080ca:	8b 55 08             	mov    0x8(%ebp),%edx
+c01080cd:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c01080d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080d3:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01080d6:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c01080d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080dc:	8b 55 10             	mov    0x10(%ebp),%edx
+c01080df:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c01080e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01080e5:	c9                   	leave  
+c01080e6:	c3                   	ret    
+
+c01080e7 <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c01080e7:	55                   	push   %ebp
+c01080e8:	89 e5                	mov    %esp,%ebp
+c01080ea:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c01080ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c01080f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01080f8:	0f 84 95 00 00 00    	je     c0108193 <find_vma+0xac>
+        vma = mm->mmap_cache;
+c01080fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108101:	8b 40 08             	mov    0x8(%eax),%eax
+c0108104:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c0108107:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010810b:	74 16                	je     c0108123 <find_vma+0x3c>
+c010810d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108110:	8b 40 04             	mov    0x4(%eax),%eax
+c0108113:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0108116:	77 0b                	ja     c0108123 <find_vma+0x3c>
+c0108118:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010811b:	8b 40 08             	mov    0x8(%eax),%eax
+c010811e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0108121:	77 61                	ja     c0108184 <find_vma+0x9d>
+                bool found = 0;
+c0108123:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c010812a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010812d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108130:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108133:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c0108136:	eb 28                	jmp    c0108160 <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c0108138:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010813b:	83 e8 10             	sub    $0x10,%eax
+c010813e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c0108141:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108144:	8b 40 04             	mov    0x4(%eax),%eax
+c0108147:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010814a:	77 14                	ja     c0108160 <find_vma+0x79>
+c010814c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010814f:	8b 40 08             	mov    0x8(%eax),%eax
+c0108152:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0108155:	76 09                	jbe    c0108160 <find_vma+0x79>
+                        found = 1;
+c0108157:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c010815e:	eb 17                	jmp    c0108177 <find_vma+0x90>
+c0108160:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108163:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108166:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108169:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c010816c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010816f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108172:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108175:	75 c1                	jne    c0108138 <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c0108177:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c010817b:	75 07                	jne    c0108184 <find_vma+0x9d>
+                    vma = NULL;
+c010817d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c0108184:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108188:	74 09                	je     c0108193 <find_vma+0xac>
+            mm->mmap_cache = vma;
+c010818a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010818d:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0108190:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c0108193:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0108196:	c9                   	leave  
+c0108197:	c3                   	ret    
+
+c0108198 <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c0108198:	55                   	push   %ebp
+c0108199:	89 e5                	mov    %esp,%ebp
+c010819b:	83 ec 18             	sub    $0x18,%esp
+    assert(prev->vm_start < prev->vm_end);
+c010819e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081a1:	8b 50 04             	mov    0x4(%eax),%edx
+c01081a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081a7:	8b 40 08             	mov    0x8(%eax),%eax
+c01081aa:	39 c2                	cmp    %eax,%edx
+c01081ac:	72 24                	jb     c01081d2 <check_vma_overlap+0x3a>
+c01081ae:	c7 44 24 0c 41 f1 10 	movl   $0xc010f141,0xc(%esp)
+c01081b5:	c0 
+c01081b6:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c01081bd:	c0 
+c01081be:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c01081c5:	00 
+c01081c6:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c01081cd:	e8 ef 8b ff ff       	call   c0100dc1 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c01081d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081d5:	8b 50 08             	mov    0x8(%eax),%edx
+c01081d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01081db:	8b 40 04             	mov    0x4(%eax),%eax
+c01081de:	39 c2                	cmp    %eax,%edx
+c01081e0:	76 24                	jbe    c0108206 <check_vma_overlap+0x6e>
+c01081e2:	c7 44 24 0c 84 f1 10 	movl   $0xc010f184,0xc(%esp)
+c01081e9:	c0 
+c01081ea:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c01081f1:	c0 
+c01081f2:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
+c01081f9:	00 
+c01081fa:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108201:	e8 bb 8b ff ff       	call   c0100dc1 <__panic>
+    assert(next->vm_start < next->vm_end);
+c0108206:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108209:	8b 50 04             	mov    0x4(%eax),%edx
+c010820c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010820f:	8b 40 08             	mov    0x8(%eax),%eax
+c0108212:	39 c2                	cmp    %eax,%edx
+c0108214:	72 24                	jb     c010823a <check_vma_overlap+0xa2>
+c0108216:	c7 44 24 0c a3 f1 10 	movl   $0xc010f1a3,0xc(%esp)
+c010821d:	c0 
+c010821e:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108225:	c0 
+c0108226:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
+c010822d:	00 
+c010822e:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108235:	e8 87 8b ff ff       	call   c0100dc1 <__panic>
+}
+c010823a:	c9                   	leave  
+c010823b:	c3                   	ret    
+
+c010823c <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c010823c:	55                   	push   %ebp
+c010823d:	89 e5                	mov    %esp,%ebp
+c010823f:	83 ec 48             	sub    $0x48,%esp
+    assert(vma->vm_start < vma->vm_end);
+c0108242:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108245:	8b 50 04             	mov    0x4(%eax),%edx
+c0108248:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010824b:	8b 40 08             	mov    0x8(%eax),%eax
+c010824e:	39 c2                	cmp    %eax,%edx
+c0108250:	72 24                	jb     c0108276 <insert_vma_struct+0x3a>
+c0108252:	c7 44 24 0c c1 f1 10 	movl   $0xc010f1c1,0xc(%esp)
+c0108259:	c0 
+c010825a:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108261:	c0 
+c0108262:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
+c0108269:	00 
+c010826a:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108271:	e8 4b 8b ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c0108276:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108279:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c010827c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010827f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c0108282:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108285:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c0108288:	eb 21                	jmp    c01082ab <insert_vma_struct+0x6f>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c010828a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010828d:	83 e8 10             	sub    $0x10,%eax
+c0108290:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c0108293:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108296:	8b 50 04             	mov    0x4(%eax),%edx
+c0108299:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010829c:	8b 40 04             	mov    0x4(%eax),%eax
+c010829f:	39 c2                	cmp    %eax,%edx
+c01082a1:	76 02                	jbe    c01082a5 <insert_vma_struct+0x69>
+                break;
+c01082a3:	eb 1d                	jmp    c01082c2 <insert_vma_struct+0x86>
+            }
+            le_prev = le;
+c01082a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01082ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01082b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01082b4:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c01082b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01082ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082c0:	75 c8                	jne    c010828a <insert_vma_struct+0x4e>
+c01082c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01082c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01082cb:	8b 40 04             	mov    0x4(%eax),%eax
+                break;
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c01082ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c01082d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082d7:	74 15                	je     c01082ee <insert_vma_struct+0xb2>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c01082d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082dc:	8d 50 f0             	lea    -0x10(%eax),%edx
+c01082df:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01082e2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01082e6:	89 14 24             	mov    %edx,(%esp)
+c01082e9:	e8 aa fe ff ff       	call   c0108198 <check_vma_overlap>
+    }
+    if (le_next != list) {
+c01082ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01082f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082f4:	74 15                	je     c010830b <insert_vma_struct+0xcf>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c01082f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01082f9:	83 e8 10             	sub    $0x10,%eax
+c01082fc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108300:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108303:	89 04 24             	mov    %eax,(%esp)
+c0108306:	e8 8d fe ff ff       	call   c0108198 <check_vma_overlap>
+    }
+
+    vma->vm_mm = mm;
+c010830b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010830e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108311:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c0108313:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108316:	8d 50 10             	lea    0x10(%eax),%edx
+c0108319:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010831c:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010831f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0108322:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108325:	8b 40 04             	mov    0x4(%eax),%eax
+c0108328:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010832b:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c010832e:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0108331:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0108334:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0108337:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010833a:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010833d:	89 10                	mov    %edx,(%eax)
+c010833f:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0108342:	8b 10                	mov    (%eax),%edx
+c0108344:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108347:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010834a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010834d:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0108350:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0108353:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108356:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0108359:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c010835b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010835e:	8b 40 10             	mov    0x10(%eax),%eax
+c0108361:	8d 50 01             	lea    0x1(%eax),%edx
+c0108364:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108367:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c010836a:	c9                   	leave  
+c010836b:	c3                   	ret    
+
+c010836c <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c010836c:	55                   	push   %ebp
+c010836d:	89 e5                	mov    %esp,%ebp
+c010836f:	83 ec 38             	sub    $0x38,%esp
+    assert(mm_count(mm) == 0);
+c0108372:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108375:	89 04 24             	mov    %eax,(%esp)
+c0108378:	e8 14 fc ff ff       	call   c0107f91 <mm_count>
+c010837d:	85 c0                	test   %eax,%eax
+c010837f:	74 24                	je     c01083a5 <mm_destroy+0x39>
+c0108381:	c7 44 24 0c dd f1 10 	movl   $0xc010f1dd,0xc(%esp)
+c0108388:	c0 
+c0108389:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108390:	c0 
+c0108391:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c0108398:	00 
+c0108399:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c01083a0:	e8 1c 8a ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c01083a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01083a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c01083ab:	eb 36                	jmp    c01083e3 <mm_destroy+0x77>
+c01083ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01083b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01083b6:	8b 40 04             	mov    0x4(%eax),%eax
+c01083b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01083bc:	8b 12                	mov    (%edx),%edx
+c01083be:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c01083c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01083c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01083c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01083ca:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01083cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01083d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01083d3:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+c01083d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083d8:	83 e8 10             	sub    $0x10,%eax
+c01083db:	89 04 24             	mov    %eax,(%esp)
+c01083de:	e8 7b c9 ff ff       	call   c0104d5e <kfree>
+c01083e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01083e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01083e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01083ec:	8b 40 04             	mov    0x4(%eax),%eax
+void
+mm_destroy(struct mm_struct *mm) {
+    assert(mm_count(mm) == 0);
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c01083ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01083f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01083f8:	75 b3                	jne    c01083ad <mm_destroy+0x41>
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+    }
+    kfree(mm); //kfree mm
+c01083fa:	8b 45 08             	mov    0x8(%ebp),%eax
+c01083fd:	89 04 24             	mov    %eax,(%esp)
+c0108400:	e8 59 c9 ff ff       	call   c0104d5e <kfree>
+    mm=NULL;
+c0108405:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c010840c:	c9                   	leave  
+c010840d:	c3                   	ret    
+
+c010840e <mm_map>:
+
+int
+mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+       struct vma_struct **vma_store) {
+c010840e:	55                   	push   %ebp
+c010840f:	89 e5                	mov    %esp,%ebp
+c0108411:	83 ec 38             	sub    $0x38,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c0108414:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108417:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010841a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010841d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108422:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108425:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c010842c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010842f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0108432:	01 c2                	add    %eax,%edx
+c0108434:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108437:	01 d0                	add    %edx,%eax
+c0108439:	83 e8 01             	sub    $0x1,%eax
+c010843c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010843f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108442:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108447:	f7 75 e8             	divl   -0x18(%ebp)
+c010844a:	89 d0                	mov    %edx,%eax
+c010844c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010844f:	29 c2                	sub    %eax,%edx
+c0108451:	89 d0                	mov    %edx,%eax
+c0108453:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end)) {
+c0108456:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c010845d:	76 11                	jbe    c0108470 <mm_map+0x62>
+c010845f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108462:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108465:	73 09                	jae    c0108470 <mm_map+0x62>
+c0108467:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c010846e:	76 0a                	jbe    c010847a <mm_map+0x6c>
+        return -E_INVAL;
+c0108470:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0108475:	e9 ae 00 00 00       	jmp    c0108528 <mm_map+0x11a>
+    }
+
+    assert(mm != NULL);
+c010847a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010847e:	75 24                	jne    c01084a4 <mm_map+0x96>
+c0108480:	c7 44 24 0c ef f1 10 	movl   $0xc010f1ef,0xc(%esp)
+c0108487:	c0 
+c0108488:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c010848f:	c0 
+c0108490:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c0108497:	00 
+c0108498:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c010849f:	e8 1d 89 ff ff       	call   c0100dc1 <__panic>
+
+    int ret = -E_INVAL;
+c01084a4:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+c01084ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01084b2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01084b5:	89 04 24             	mov    %eax,(%esp)
+c01084b8:	e8 2a fc ff ff       	call   c01080e7 <find_vma>
+c01084bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01084c0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01084c4:	74 0d                	je     c01084d3 <mm_map+0xc5>
+c01084c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01084c9:	8b 40 04             	mov    0x4(%eax),%eax
+c01084cc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01084cf:	73 02                	jae    c01084d3 <mm_map+0xc5>
+        goto out;
+c01084d1:	eb 52                	jmp    c0108525 <mm_map+0x117>
+    }
+    ret = -E_NO_MEM;
+c01084d3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+c01084da:	8b 45 14             	mov    0x14(%ebp),%eax
+c01084dd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01084e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01084e4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01084e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084eb:	89 04 24             	mov    %eax,(%esp)
+c01084ee:	e8 b9 fb ff ff       	call   c01080ac <vma_create>
+c01084f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01084f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01084fa:	75 02                	jne    c01084fe <mm_map+0xf0>
+        goto out;
+c01084fc:	eb 27                	jmp    c0108525 <mm_map+0x117>
+    }
+    insert_vma_struct(mm, vma);
+c01084fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108501:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108505:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108508:	89 04 24             	mov    %eax,(%esp)
+c010850b:	e8 2c fd ff ff       	call   c010823c <insert_vma_struct>
+    if (vma_store != NULL) {
+c0108510:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0108514:	74 08                	je     c010851e <mm_map+0x110>
+        *vma_store = vma;
+c0108516:	8b 45 18             	mov    0x18(%ebp),%eax
+c0108519:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010851c:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c010851e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+out:
+    return ret;
+c0108525:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108528:	c9                   	leave  
+c0108529:	c3                   	ret    
+
+c010852a <dup_mmap>:
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+c010852a:	55                   	push   %ebp
+c010852b:	89 e5                	mov    %esp,%ebp
+c010852d:	56                   	push   %esi
+c010852e:	53                   	push   %ebx
+c010852f:	83 ec 40             	sub    $0x40,%esp
+    assert(to != NULL && from != NULL);
+c0108532:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108536:	74 06                	je     c010853e <dup_mmap+0x14>
+c0108538:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010853c:	75 24                	jne    c0108562 <dup_mmap+0x38>
+c010853e:	c7 44 24 0c fa f1 10 	movl   $0xc010f1fa,0xc(%esp)
+c0108545:	c0 
+c0108546:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c010854d:	c0 
+c010854e:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
+c0108555:	00 
+c0108556:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c010855d:	e8 5f 88 ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c0108562:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108565:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108568:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010856b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list) {
+c010856e:	e9 92 00 00 00       	jmp    c0108605 <dup_mmap+0xdb>
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c0108573:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108576:	83 e8 10             	sub    $0x10,%eax
+c0108579:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c010857c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010857f:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0108582:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108585:	8b 50 08             	mov    0x8(%eax),%edx
+c0108588:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010858b:	8b 40 04             	mov    0x4(%eax),%eax
+c010858e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0108592:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108596:	89 04 24             	mov    %eax,(%esp)
+c0108599:	e8 0e fb ff ff       	call   c01080ac <vma_create>
+c010859e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL) {
+c01085a1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01085a5:	75 07                	jne    c01085ae <dup_mmap+0x84>
+            return -E_NO_MEM;
+c01085a7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01085ac:	eb 76                	jmp    c0108624 <dup_mmap+0xfa>
+        }
+
+        insert_vma_struct(to, nvma);
+c01085ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01085b1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01085b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085b8:	89 04 24             	mov    %eax,(%esp)
+c01085bb:	e8 7c fc ff ff       	call   c010823c <insert_vma_struct>
+
+        bool share = 0;
+c01085c0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+c01085c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01085ca:	8b 58 08             	mov    0x8(%eax),%ebx
+c01085cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01085d0:	8b 48 04             	mov    0x4(%eax),%ecx
+c01085d3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01085d6:	8b 50 0c             	mov    0xc(%eax),%edx
+c01085d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085dc:	8b 40 0c             	mov    0xc(%eax),%eax
+c01085df:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+c01085e2:	89 74 24 10          	mov    %esi,0x10(%esp)
+c01085e6:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01085ea:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01085ee:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01085f2:	89 04 24             	mov    %eax,(%esp)
+c01085f5:	e8 12 d7 ff ff       	call   c0105d0c <copy_range>
+c01085fa:	85 c0                	test   %eax,%eax
+c01085fc:	74 07                	je     c0108605 <dup_mmap+0xdb>
+            return -E_NO_MEM;
+c01085fe:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0108603:	eb 1f                	jmp    c0108624 <dup_mmap+0xfa>
+c0108605:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108608:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010860b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010860e:	8b 00                	mov    (%eax),%eax
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+    assert(to != NULL && from != NULL);
+    list_entry_t *list = &(from->mmap_list), *le = list;
+    while ((le = list_prev(le)) != list) {
+c0108610:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108613:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108616:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108619:	0f 85 54 ff ff ff    	jne    c0108573 <dup_mmap+0x49>
+        bool share = 0;
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+            return -E_NO_MEM;
+        }
+    }
+    return 0;
+c010861f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0108624:	83 c4 40             	add    $0x40,%esp
+c0108627:	5b                   	pop    %ebx
+c0108628:	5e                   	pop    %esi
+c0108629:	5d                   	pop    %ebp
+c010862a:	c3                   	ret    
+
+c010862b <exit_mmap>:
+
+void
+exit_mmap(struct mm_struct *mm) {
+c010862b:	55                   	push   %ebp
+c010862c:	89 e5                	mov    %esp,%ebp
+c010862e:	83 ec 38             	sub    $0x38,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c0108631:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108635:	74 0f                	je     c0108646 <exit_mmap+0x1b>
+c0108637:	8b 45 08             	mov    0x8(%ebp),%eax
+c010863a:	89 04 24             	mov    %eax,(%esp)
+c010863d:	e8 4f f9 ff ff       	call   c0107f91 <mm_count>
+c0108642:	85 c0                	test   %eax,%eax
+c0108644:	74 24                	je     c010866a <exit_mmap+0x3f>
+c0108646:	c7 44 24 0c 18 f2 10 	movl   $0xc010f218,0xc(%esp)
+c010864d:	c0 
+c010864e:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108655:	c0 
+c0108656:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c010865d:	00 
+c010865e:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108665:	e8 57 87 ff ff       	call   c0100dc1 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c010866a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010866d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108670:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c0108673:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108676:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108679:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010867c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list) {
+c010867f:	eb 28                	jmp    c01086a9 <exit_mmap+0x7e>
+        struct vma_struct *vma = le2vma(le, list_link);
+c0108681:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108684:	83 e8 10             	sub    $0x10,%eax
+c0108687:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c010868a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010868d:	8b 50 08             	mov    0x8(%eax),%edx
+c0108690:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108693:	8b 40 04             	mov    0x4(%eax),%eax
+c0108696:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010869a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010869e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01086a1:	89 04 24             	mov    %eax,(%esp)
+c01086a4:	e8 68 d4 ff ff       	call   c0105b11 <unmap_range>
+c01086a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01086af:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01086b2:	8b 40 04             	mov    0x4(%eax),%eax
+void
+exit_mmap(struct mm_struct *mm) {
+    assert(mm != NULL && mm_count(mm) == 0);
+    pde_t *pgdir = mm->pgdir;
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+c01086b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01086b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01086be:	75 c1                	jne    c0108681 <exit_mmap+0x56>
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c01086c0:	eb 28                	jmp    c01086ea <exit_mmap+0xbf>
+        struct vma_struct *vma = le2vma(le, list_link);
+c01086c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086c5:	83 e8 10             	sub    $0x10,%eax
+c01086c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c01086cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01086ce:	8b 50 08             	mov    0x8(%eax),%edx
+c01086d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01086d4:	8b 40 04             	mov    0x4(%eax),%eax
+c01086d7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01086db:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01086df:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01086e2:	89 04 24             	mov    %eax,(%esp)
+c01086e5:	e8 1b d5 ff ff       	call   c0105c05 <exit_range>
+c01086ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01086f3:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c01086f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01086f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01086ff:	75 c1                	jne    c01086c2 <exit_mmap+0x97>
+        struct vma_struct *vma = le2vma(le, list_link);
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+}
+c0108701:	c9                   	leave  
+c0108702:	c3                   	ret    
+
+c0108703 <copy_from_user>:
+
+bool
+copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
+c0108703:	55                   	push   %ebp
+c0108704:	89 e5                	mov    %esp,%ebp
+c0108706:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+c0108709:	8b 45 10             	mov    0x10(%ebp),%eax
+c010870c:	8b 55 18             	mov    0x18(%ebp),%edx
+c010870f:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0108713:	8b 55 14             	mov    0x14(%ebp),%edx
+c0108716:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010871a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010871e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108721:	89 04 24             	mov    %eax,(%esp)
+c0108724:	e8 73 09 00 00       	call   c010909c <user_mem_check>
+c0108729:	85 c0                	test   %eax,%eax
+c010872b:	75 07                	jne    c0108734 <copy_from_user+0x31>
+        return 0;
+c010872d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0108732:	eb 1e                	jmp    c0108752 <copy_from_user+0x4f>
+    }
+    memcpy(dst, src, len);
+c0108734:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108737:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010873b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010873e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108742:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108745:	89 04 24             	mov    %eax,(%esp)
+c0108748:	e8 58 4e 00 00       	call   c010d5a5 <memcpy>
+    return 1;
+c010874d:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0108752:	c9                   	leave  
+c0108753:	c3                   	ret    
+
+c0108754 <copy_to_user>:
+
+bool
+copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
+c0108754:	55                   	push   %ebp
+c0108755:	89 e5                	mov    %esp,%ebp
+c0108757:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+c010875a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010875d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0108764:	00 
+c0108765:	8b 55 14             	mov    0x14(%ebp),%edx
+c0108768:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010876c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108770:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108773:	89 04 24             	mov    %eax,(%esp)
+c0108776:	e8 21 09 00 00       	call   c010909c <user_mem_check>
+c010877b:	85 c0                	test   %eax,%eax
+c010877d:	75 07                	jne    c0108786 <copy_to_user+0x32>
+        return 0;
+c010877f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0108784:	eb 1e                	jmp    c01087a4 <copy_to_user+0x50>
+    }
+    memcpy(dst, src, len);
+c0108786:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108789:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010878d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108790:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108794:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108797:	89 04 24             	mov    %eax,(%esp)
+c010879a:	e8 06 4e 00 00       	call   c010d5a5 <memcpy>
+    return 1;
+c010879f:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01087a4:	c9                   	leave  
+c01087a5:	c3                   	ret    
+
+c01087a6 <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c01087a6:	55                   	push   %ebp
+c01087a7:	89 e5                	mov    %esp,%ebp
+c01087a9:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c01087ac:	e8 02 00 00 00       	call   c01087b3 <check_vmm>
+}
+c01087b1:	c9                   	leave  
+c01087b2:	c3                   	ret    
+
+c01087b3 <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c01087b3:	55                   	push   %ebp
+c01087b4:	89 e5                	mov    %esp,%ebp
+c01087b6:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01087b9:	e8 97 ca ff ff       	call   c0105255 <nr_free_pages>
+c01087be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c01087c1:	e8 13 00 00 00       	call   c01087d9 <check_vma_struct>
+    check_pgfault();
+c01087c6:	e8 a7 04 00 00       	call   c0108c72 <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c01087cb:	c7 04 24 38 f2 10 c0 	movl   $0xc010f238,(%esp)
+c01087d2:	e8 81 7b ff ff       	call   c0100358 <cprintf>
+}
+c01087d7:	c9                   	leave  
+c01087d8:	c3                   	ret    
+
+c01087d9 <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c01087d9:	55                   	push   %ebp
+c01087da:	89 e5                	mov    %esp,%ebp
+c01087dc:	83 ec 68             	sub    $0x68,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01087df:	e8 71 ca ff ff       	call   c0105255 <nr_free_pages>
+c01087e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c01087e7:	e8 1b f8 ff ff       	call   c0108007 <mm_create>
+c01087ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c01087ef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01087f3:	75 24                	jne    c0108819 <check_vma_struct+0x40>
+c01087f5:	c7 44 24 0c ef f1 10 	movl   $0xc010f1ef,0xc(%esp)
+c01087fc:	c0 
+c01087fd:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108804:	c0 
+c0108805:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
+c010880c:	00 
+c010880d:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108814:	e8 a8 85 ff ff       	call   c0100dc1 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c0108819:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c0108820:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108823:	89 d0                	mov    %edx,%eax
+c0108825:	c1 e0 02             	shl    $0x2,%eax
+c0108828:	01 d0                	add    %edx,%eax
+c010882a:	01 c0                	add    %eax,%eax
+c010882c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c010882f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108832:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108835:	eb 70                	jmp    c01088a7 <check_vma_struct+0xce>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0108837:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010883a:	89 d0                	mov    %edx,%eax
+c010883c:	c1 e0 02             	shl    $0x2,%eax
+c010883f:	01 d0                	add    %edx,%eax
+c0108841:	83 c0 02             	add    $0x2,%eax
+c0108844:	89 c1                	mov    %eax,%ecx
+c0108846:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108849:	89 d0                	mov    %edx,%eax
+c010884b:	c1 e0 02             	shl    $0x2,%eax
+c010884e:	01 d0                	add    %edx,%eax
+c0108850:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0108857:	00 
+c0108858:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010885c:	89 04 24             	mov    %eax,(%esp)
+c010885f:	e8 48 f8 ff ff       	call   c01080ac <vma_create>
+c0108864:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c0108867:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010886b:	75 24                	jne    c0108891 <check_vma_struct+0xb8>
+c010886d:	c7 44 24 0c 50 f2 10 	movl   $0xc010f250,0xc(%esp)
+c0108874:	c0 
+c0108875:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c010887c:	c0 
+c010887d:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
+c0108884:	00 
+c0108885:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c010888c:	e8 30 85 ff ff       	call   c0100dc1 <__panic>
+        insert_vma_struct(mm, vma);
+c0108891:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108894:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108898:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010889b:	89 04 24             	mov    %eax,(%esp)
+c010889e:	e8 99 f9 ff ff       	call   c010823c <insert_vma_struct>
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c01088a3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01088a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01088ab:	7f 8a                	jg     c0108837 <check_vma_struct+0x5e>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c01088ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01088b0:	83 c0 01             	add    $0x1,%eax
+c01088b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01088b6:	eb 70                	jmp    c0108928 <check_vma_struct+0x14f>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c01088b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088bb:	89 d0                	mov    %edx,%eax
+c01088bd:	c1 e0 02             	shl    $0x2,%eax
+c01088c0:	01 d0                	add    %edx,%eax
+c01088c2:	83 c0 02             	add    $0x2,%eax
+c01088c5:	89 c1                	mov    %eax,%ecx
+c01088c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088ca:	89 d0                	mov    %edx,%eax
+c01088cc:	c1 e0 02             	shl    $0x2,%eax
+c01088cf:	01 d0                	add    %edx,%eax
+c01088d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01088d8:	00 
+c01088d9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c01088dd:	89 04 24             	mov    %eax,(%esp)
+c01088e0:	e8 c7 f7 ff ff       	call   c01080ac <vma_create>
+c01088e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c01088e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01088ec:	75 24                	jne    c0108912 <check_vma_struct+0x139>
+c01088ee:	c7 44 24 0c 50 f2 10 	movl   $0xc010f250,0xc(%esp)
+c01088f5:	c0 
+c01088f6:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c01088fd:	c0 
+c01088fe:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
+c0108905:	00 
+c0108906:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c010890d:	e8 af 84 ff ff       	call   c0100dc1 <__panic>
+        insert_vma_struct(mm, vma);
+c0108912:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108915:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108919:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010891c:	89 04 24             	mov    %eax,(%esp)
+c010891f:	e8 18 f9 ff ff       	call   c010823c <insert_vma_struct>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0108924:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108928:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010892b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c010892e:	7e 88                	jle    c01088b8 <check_vma_struct+0xdf>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c0108930:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108933:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0108936:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0108939:	8b 40 04             	mov    0x4(%eax),%eax
+c010893c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c010893f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c0108946:	e9 97 00 00 00       	jmp    c01089e2 <check_vma_struct+0x209>
+        assert(le != &(mm->mmap_list));
+c010894b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010894e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108951:	75 24                	jne    c0108977 <check_vma_struct+0x19e>
+c0108953:	c7 44 24 0c 5c f2 10 	movl   $0xc010f25c,0xc(%esp)
+c010895a:	c0 
+c010895b:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108962:	c0 
+c0108963:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
+c010896a:	00 
+c010896b:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108972:	e8 4a 84 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c0108977:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010897a:	83 e8 10             	sub    $0x10,%eax
+c010897d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c0108980:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108983:	8b 48 04             	mov    0x4(%eax),%ecx
+c0108986:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108989:	89 d0                	mov    %edx,%eax
+c010898b:	c1 e0 02             	shl    $0x2,%eax
+c010898e:	01 d0                	add    %edx,%eax
+c0108990:	39 c1                	cmp    %eax,%ecx
+c0108992:	75 17                	jne    c01089ab <check_vma_struct+0x1d2>
+c0108994:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108997:	8b 48 08             	mov    0x8(%eax),%ecx
+c010899a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010899d:	89 d0                	mov    %edx,%eax
+c010899f:	c1 e0 02             	shl    $0x2,%eax
+c01089a2:	01 d0                	add    %edx,%eax
+c01089a4:	83 c0 02             	add    $0x2,%eax
+c01089a7:	39 c1                	cmp    %eax,%ecx
+c01089a9:	74 24                	je     c01089cf <check_vma_struct+0x1f6>
+c01089ab:	c7 44 24 0c 74 f2 10 	movl   $0xc010f274,0xc(%esp)
+c01089b2:	c0 
+c01089b3:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c01089ba:	c0 
+c01089bb:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
+c01089c2:	00 
+c01089c3:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c01089ca:	e8 f2 83 ff ff       	call   c0100dc1 <__panic>
+c01089cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01089d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c01089d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01089d8:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c01089db:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c01089de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01089e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089e5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01089e8:	0f 8e 5d ff ff ff    	jle    c010894b <check_vma_struct+0x172>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c01089ee:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c01089f5:	e9 cd 01 00 00       	jmp    c0108bc7 <check_vma_struct+0x3ee>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c01089fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089fd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a01:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a04:	89 04 24             	mov    %eax,(%esp)
+c0108a07:	e8 db f6 ff ff       	call   c01080e7 <find_vma>
+c0108a0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(vma1 != NULL);
+c0108a0f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0108a13:	75 24                	jne    c0108a39 <check_vma_struct+0x260>
+c0108a15:	c7 44 24 0c a9 f2 10 	movl   $0xc010f2a9,0xc(%esp)
+c0108a1c:	c0 
+c0108a1d:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108a24:	c0 
+c0108a25:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
+c0108a2c:	00 
+c0108a2d:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108a34:	e8 88 83 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c0108a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a3c:	83 c0 01             	add    $0x1,%eax
+c0108a3f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a43:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a46:	89 04 24             	mov    %eax,(%esp)
+c0108a49:	e8 99 f6 ff ff       	call   c01080e7 <find_vma>
+c0108a4e:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma2 != NULL);
+c0108a51:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0108a55:	75 24                	jne    c0108a7b <check_vma_struct+0x2a2>
+c0108a57:	c7 44 24 0c b6 f2 10 	movl   $0xc010f2b6,0xc(%esp)
+c0108a5e:	c0 
+c0108a5f:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108a66:	c0 
+c0108a67:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
+c0108a6e:	00 
+c0108a6f:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108a76:	e8 46 83 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c0108a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a7e:	83 c0 02             	add    $0x2,%eax
+c0108a81:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a85:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a88:	89 04 24             	mov    %eax,(%esp)
+c0108a8b:	e8 57 f6 ff ff       	call   c01080e7 <find_vma>
+c0108a90:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma3 == NULL);
+c0108a93:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0108a97:	74 24                	je     c0108abd <check_vma_struct+0x2e4>
+c0108a99:	c7 44 24 0c c3 f2 10 	movl   $0xc010f2c3,0xc(%esp)
+c0108aa0:	c0 
+c0108aa1:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108aa8:	c0 
+c0108aa9:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
+c0108ab0:	00 
+c0108ab1:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108ab8:	e8 04 83 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c0108abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ac0:	83 c0 03             	add    $0x3,%eax
+c0108ac3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108aca:	89 04 24             	mov    %eax,(%esp)
+c0108acd:	e8 15 f6 ff ff       	call   c01080e7 <find_vma>
+c0108ad2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma4 == NULL);
+c0108ad5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0108ad9:	74 24                	je     c0108aff <check_vma_struct+0x326>
+c0108adb:	c7 44 24 0c d0 f2 10 	movl   $0xc010f2d0,0xc(%esp)
+c0108ae2:	c0 
+c0108ae3:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108aea:	c0 
+c0108aeb:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
+c0108af2:	00 
+c0108af3:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108afa:	e8 c2 82 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0108aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b02:	83 c0 04             	add    $0x4,%eax
+c0108b05:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108b09:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108b0c:	89 04 24             	mov    %eax,(%esp)
+c0108b0f:	e8 d3 f5 ff ff       	call   c01080e7 <find_vma>
+c0108b14:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma5 == NULL);
+c0108b17:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c0108b1b:	74 24                	je     c0108b41 <check_vma_struct+0x368>
+c0108b1d:	c7 44 24 0c dd f2 10 	movl   $0xc010f2dd,0xc(%esp)
+c0108b24:	c0 
+c0108b25:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108b2c:	c0 
+c0108b2d:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
+c0108b34:	00 
+c0108b35:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108b3c:	e8 80 82 ff ff       	call   c0100dc1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0108b41:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108b44:	8b 50 04             	mov    0x4(%eax),%edx
+c0108b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b4a:	39 c2                	cmp    %eax,%edx
+c0108b4c:	75 10                	jne    c0108b5e <check_vma_struct+0x385>
+c0108b4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108b51:	8b 50 08             	mov    0x8(%eax),%edx
+c0108b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b57:	83 c0 02             	add    $0x2,%eax
+c0108b5a:	39 c2                	cmp    %eax,%edx
+c0108b5c:	74 24                	je     c0108b82 <check_vma_struct+0x3a9>
+c0108b5e:	c7 44 24 0c ec f2 10 	movl   $0xc010f2ec,0xc(%esp)
+c0108b65:	c0 
+c0108b66:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108b6d:	c0 
+c0108b6e:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
+c0108b75:	00 
+c0108b76:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108b7d:	e8 3f 82 ff ff       	call   c0100dc1 <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c0108b82:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108b85:	8b 50 04             	mov    0x4(%eax),%edx
+c0108b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b8b:	39 c2                	cmp    %eax,%edx
+c0108b8d:	75 10                	jne    c0108b9f <check_vma_struct+0x3c6>
+c0108b8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108b92:	8b 50 08             	mov    0x8(%eax),%edx
+c0108b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b98:	83 c0 02             	add    $0x2,%eax
+c0108b9b:	39 c2                	cmp    %eax,%edx
+c0108b9d:	74 24                	je     c0108bc3 <check_vma_struct+0x3ea>
+c0108b9f:	c7 44 24 0c 1c f3 10 	movl   $0xc010f31c,0xc(%esp)
+c0108ba6:	c0 
+c0108ba7:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108bae:	c0 
+c0108baf:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
+c0108bb6:	00 
+c0108bb7:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108bbe:	e8 fe 81 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0108bc3:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c0108bc7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108bca:	89 d0                	mov    %edx,%eax
+c0108bcc:	c1 e0 02             	shl    $0x2,%eax
+c0108bcf:	01 d0                	add    %edx,%eax
+c0108bd1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0108bd4:	0f 8d 20 fe ff ff    	jge    c01089fa <check_vma_struct+0x221>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108bda:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c0108be1:	eb 70                	jmp    c0108c53 <check_vma_struct+0x47a>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c0108be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108be6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108bea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108bed:	89 04 24             	mov    %eax,(%esp)
+c0108bf0:	e8 f2 f4 ff ff       	call   c01080e7 <find_vma>
+c0108bf5:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        if (vma_below_5 != NULL ) {
+c0108bf8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108bfc:	74 27                	je     c0108c25 <check_vma_struct+0x44c>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0108bfe:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108c01:	8b 50 08             	mov    0x8(%eax),%edx
+c0108c04:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108c07:	8b 40 04             	mov    0x4(%eax),%eax
+c0108c0a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0108c0e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c15:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108c19:	c7 04 24 4c f3 10 c0 	movl   $0xc010f34c,(%esp)
+c0108c20:	e8 33 77 ff ff       	call   c0100358 <cprintf>
+        }
+        assert(vma_below_5 == NULL);
+c0108c25:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108c29:	74 24                	je     c0108c4f <check_vma_struct+0x476>
+c0108c2b:	c7 44 24 0c 71 f3 10 	movl   $0xc010f371,0xc(%esp)
+c0108c32:	c0 
+c0108c33:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108c3a:	c0 
+c0108c3b:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
+c0108c42:	00 
+c0108c43:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108c4a:	e8 72 81 ff ff       	call   c0100dc1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108c4f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0108c53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108c57:	79 8a                	jns    c0108be3 <check_vma_struct+0x40a>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c0108c59:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108c5c:	89 04 24             	mov    %eax,(%esp)
+c0108c5f:	e8 08 f7 ff ff       	call   c010836c <mm_destroy>
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0108c64:	c7 04 24 88 f3 10 c0 	movl   $0xc010f388,(%esp)
+c0108c6b:	e8 e8 76 ff ff       	call   c0100358 <cprintf>
+}
+c0108c70:	c9                   	leave  
+c0108c71:	c3                   	ret    
+
+c0108c72 <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c0108c72:	55                   	push   %ebp
+c0108c73:	89 e5                	mov    %esp,%ebp
+c0108c75:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0108c78:	e8 d8 c5 ff ff       	call   c0105255 <nr_free_pages>
+c0108c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c0108c80:	e8 82 f3 ff ff       	call   c0108007 <mm_create>
+c0108c85:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc
+    assert(check_mm_struct != NULL);
+c0108c8a:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c0108c8f:	85 c0                	test   %eax,%eax
+c0108c91:	75 24                	jne    c0108cb7 <check_pgfault+0x45>
+c0108c93:	c7 44 24 0c a7 f3 10 	movl   $0xc010f3a7,0xc(%esp)
+c0108c9a:	c0 
+c0108c9b:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108ca2:	c0 
+c0108ca3:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
+c0108caa:	00 
+c0108cab:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108cb2:	e8 0a 81 ff ff       	call   c0100dc1 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c0108cb7:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
+c0108cbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0108cbf:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
+c0108cc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cc8:	89 50 0c             	mov    %edx,0xc(%eax)
+c0108ccb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cce:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108cd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c0108cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108cd7:	8b 00                	mov    (%eax),%eax
+c0108cd9:	85 c0                	test   %eax,%eax
+c0108cdb:	74 24                	je     c0108d01 <check_pgfault+0x8f>
+c0108cdd:	c7 44 24 0c bf f3 10 	movl   $0xc010f3bf,0xc(%esp)
+c0108ce4:	c0 
+c0108ce5:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108cec:	c0 
+c0108ced:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
+c0108cf4:	00 
+c0108cf5:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108cfc:	e8 c0 80 ff ff       	call   c0100dc1 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0108d01:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+c0108d08:	00 
+c0108d09:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
+c0108d10:	00 
+c0108d11:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0108d18:	e8 8f f3 ff ff       	call   c01080ac <vma_create>
+c0108d1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c0108d20:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0108d24:	75 24                	jne    c0108d4a <check_pgfault+0xd8>
+c0108d26:	c7 44 24 0c 50 f2 10 	movl   $0xc010f250,0xc(%esp)
+c0108d2d:	c0 
+c0108d2e:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108d35:	c0 
+c0108d36:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
+c0108d3d:	00 
+c0108d3e:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108d45:	e8 77 80 ff ff       	call   c0100dc1 <__panic>
+
+    insert_vma_struct(mm, vma);
+c0108d4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108d4d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108d51:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108d54:	89 04 24             	mov    %eax,(%esp)
+c0108d57:	e8 e0 f4 ff ff       	call   c010823c <insert_vma_struct>
+
+    uintptr_t addr = 0x100;
+c0108d5c:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0108d63:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108d66:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108d6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108d6d:	89 04 24             	mov    %eax,(%esp)
+c0108d70:	e8 72 f3 ff ff       	call   c01080e7 <find_vma>
+c0108d75:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108d78:	74 24                	je     c0108d9e <check_pgfault+0x12c>
+c0108d7a:	c7 44 24 0c cd f3 10 	movl   $0xc010f3cd,0xc(%esp)
+c0108d81:	c0 
+c0108d82:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108d89:	c0 
+c0108d8a:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
+c0108d91:	00 
+c0108d92:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108d99:	e8 23 80 ff ff       	call   c0100dc1 <__panic>
+
+    int i, sum = 0;
+c0108d9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c0108da5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108dac:	eb 17                	jmp    c0108dc5 <check_pgfault+0x153>
+        *(char *)(addr + i) = i;
+c0108dae:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108db1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108db4:	01 d0                	add    %edx,%eax
+c0108db6:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108db9:	88 10                	mov    %dl,(%eax)
+        sum += i;
+c0108dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dbe:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c0108dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108dc5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108dc9:	7e e3                	jle    c0108dae <check_pgfault+0x13c>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108dcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108dd2:	eb 15                	jmp    c0108de9 <check_pgfault+0x177>
+        sum -= *(char *)(addr + i);
+c0108dd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108dd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108dda:	01 d0                	add    %edx,%eax
+c0108ddc:	0f b6 00             	movzbl (%eax),%eax
+c0108ddf:	0f be c0             	movsbl %al,%eax
+c0108de2:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108de5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108de9:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108ded:	7e e5                	jle    c0108dd4 <check_pgfault+0x162>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c0108def:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108df3:	74 24                	je     c0108e19 <check_pgfault+0x1a7>
+c0108df5:	c7 44 24 0c e7 f3 10 	movl   $0xc010f3e7,0xc(%esp)
+c0108dfc:	c0 
+c0108dfd:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108e04:	c0 
+c0108e05:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
+c0108e0c:	00 
+c0108e0d:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108e14:	e8 a8 7f ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0108e19:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108e1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108e1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108e22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108e27:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e2e:	89 04 24             	mov    %eax,(%esp)
+c0108e31:	e8 f6 d0 ff ff       	call   c0105f2c <page_remove>
+    free_page(pde2page(pgdir[0]));
+c0108e36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e39:	8b 00                	mov    (%eax),%eax
+c0108e3b:	89 04 24             	mov    %eax,(%esp)
+c0108e3e:	e8 ac f1 ff ff       	call   c0107fef <pde2page>
+c0108e43:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108e4a:	00 
+c0108e4b:	89 04 24             	mov    %eax,(%esp)
+c0108e4e:	e8 d0 c3 ff ff       	call   c0105223 <free_pages>
+    pgdir[0] = 0;
+c0108e53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0108e5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e5f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0108e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e69:	89 04 24             	mov    %eax,(%esp)
+c0108e6c:	e8 fb f4 ff ff       	call   c010836c <mm_destroy>
+    check_mm_struct = NULL;
+c0108e71:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
+c0108e78:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0108e7b:	e8 d5 c3 ff ff       	call   c0105255 <nr_free_pages>
+c0108e80:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108e83:	74 24                	je     c0108ea9 <check_pgfault+0x237>
+c0108e85:	c7 44 24 0c f0 f3 10 	movl   $0xc010f3f0,0xc(%esp)
+c0108e8c:	c0 
+c0108e8d:	c7 44 24 08 5f f1 10 	movl   $0xc010f15f,0x8(%esp)
+c0108e94:	c0 
+c0108e95:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
+c0108e9c:	00 
+c0108e9d:	c7 04 24 74 f1 10 c0 	movl   $0xc010f174,(%esp)
+c0108ea4:	e8 18 7f ff ff       	call   c0100dc1 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c0108ea9:	c7 04 24 17 f4 10 c0 	movl   $0xc010f417,(%esp)
+c0108eb0:	e8 a3 74 ff ff       	call   c0100358 <cprintf>
+}
+c0108eb5:	c9                   	leave  
+c0108eb6:	c3                   	ret    
+
+c0108eb7 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c0108eb7:	55                   	push   %ebp
+c0108eb8:	89 e5                	mov    %esp,%ebp
+c0108eba:	83 ec 38             	sub    $0x38,%esp
+    int ret = -E_INVAL;
+c0108ebd:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c0108ec4:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108ec7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108ecb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ece:	89 04 24             	mov    %eax,(%esp)
+c0108ed1:	e8 11 f2 ff ff       	call   c01080e7 <find_vma>
+c0108ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c0108ed9:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
+c0108ede:	83 c0 01             	add    $0x1,%eax
+c0108ee1:	a3 38 34 1c c0       	mov    %eax,0xc01c3438
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c0108ee6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0108eea:	74 0b                	je     c0108ef7 <do_pgfault+0x40>
+c0108eec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108eef:	8b 40 04             	mov    0x4(%eax),%eax
+c0108ef2:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0108ef5:	76 18                	jbe    c0108f0f <do_pgfault+0x58>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c0108ef7:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108efa:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108efe:	c7 04 24 34 f4 10 c0 	movl   $0xc010f434,(%esp)
+c0108f05:	e8 4e 74 ff ff       	call   c0100358 <cprintf>
+        goto failed;
+c0108f0a:	e9 88 01 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c0108f0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f12:	83 e0 03             	and    $0x3,%eax
+c0108f15:	85 c0                	test   %eax,%eax
+c0108f17:	74 36                	je     c0108f4f <do_pgfault+0x98>
+c0108f19:	83 f8 01             	cmp    $0x1,%eax
+c0108f1c:	74 20                	je     c0108f3e <do_pgfault+0x87>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c0108f1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f21:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f24:	83 e0 02             	and    $0x2,%eax
+c0108f27:	85 c0                	test   %eax,%eax
+c0108f29:	75 11                	jne    c0108f3c <do_pgfault+0x85>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c0108f2b:	c7 04 24 64 f4 10 c0 	movl   $0xc010f464,(%esp)
+c0108f32:	e8 21 74 ff ff       	call   c0100358 <cprintf>
+            goto failed;
+c0108f37:	e9 5b 01 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+        }
+        break;
+c0108f3c:	eb 2f                	jmp    c0108f6d <do_pgfault+0xb6>
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0108f3e:	c7 04 24 c4 f4 10 c0 	movl   $0xc010f4c4,(%esp)
+c0108f45:	e8 0e 74 ff ff       	call   c0100358 <cprintf>
+        goto failed;
+c0108f4a:	e9 48 01 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c0108f4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f52:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f55:	83 e0 05             	and    $0x5,%eax
+c0108f58:	85 c0                	test   %eax,%eax
+c0108f5a:	75 11                	jne    c0108f6d <do_pgfault+0xb6>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0108f5c:	c7 04 24 fc f4 10 c0 	movl   $0xc010f4fc,(%esp)
+c0108f63:	e8 f0 73 ff ff       	call   c0100358 <cprintf>
+            goto failed;
+c0108f68:	e9 2a 01 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0108f6d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0108f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f77:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f7a:	83 e0 02             	and    $0x2,%eax
+c0108f7d:	85 c0                	test   %eax,%eax
+c0108f7f:	74 04                	je     c0108f85 <do_pgfault+0xce>
+        perm |= PTE_W;
+c0108f81:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0108f85:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108f88:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108f8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f8e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108f93:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0108f96:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c0108f9d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+c0108fa4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108fa7:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108faa:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0108fb1:	00 
+c0108fb2:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108fb5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108fb9:	89 04 24             	mov    %eax,(%esp)
+c0108fbc:	e8 5e c9 ff ff       	call   c010591f <get_pte>
+c0108fc1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (ptep == NULL) goto failed;
+c0108fc4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0108fc8:	75 05                	jne    c0108fcf <do_pgfault+0x118>
+c0108fca:	e9 c8 00 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+    if (*ptep == 0) {
+c0108fcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108fd2:	8b 00                	mov    (%eax),%eax
+c0108fd4:	85 c0                	test   %eax,%eax
+c0108fd6:	75 29                	jne    c0109001 <do_pgfault+0x14a>
+	    if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) goto failed;
+c0108fd8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108fdb:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108fde:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108fe1:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108fe5:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108fe8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108fec:	89 04 24             	mov    %eax,(%esp)
+c0108fef:	e8 92 d0 ff ff       	call   c0106086 <pgdir_alloc_page>
+c0108ff4:	85 c0                	test   %eax,%eax
+c0108ff6:	0f 85 94 00 00 00    	jne    c0109090 <do_pgfault+0x1d9>
+c0108ffc:	e9 96 00 00 00       	jmp    c0109097 <do_pgfault+0x1e0>
+    } else {
+	    if (swap_init_ok) {
+c0109001:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
+c0109006:	85 c0                	test   %eax,%eax
+c0109008:	74 6f                	je     c0109079 <do_pgfault+0x1c2>
+		    struct Page *page = NULL;
+c010900a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+		    swap_in(mm, addr, &page);
+c0109011:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c0109014:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109018:	8b 45 10             	mov    0x10(%ebp),%eax
+c010901b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010901f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109022:	89 04 24             	mov    %eax,(%esp)
+c0109025:	e8 0d e1 ff ff       	call   c0107137 <swap_in>
+		    page_insert(mm->pgdir, page, addr, perm);
+c010902a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010902d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109030:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109033:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0109036:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010903a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+c010903d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0109041:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109045:	89 04 24             	mov    %eax,(%esp)
+c0109048:	e8 23 cf ff ff       	call   c0105f70 <page_insert>
+		    swap_map_swappable(mm, addr, page, 1);
+c010904d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109050:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0109057:	00 
+c0109058:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010905c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010905f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109063:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109066:	89 04 24             	mov    %eax,(%esp)
+c0109069:	e8 00 df ff ff       	call   c0106f6e <swap_map_swappable>
+		    page->pra_vaddr = addr; 
+c010906e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109071:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109074:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0109077:	eb 17                	jmp    c0109090 <do_pgfault+0x1d9>
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0109079:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010907c:	8b 00                	mov    (%eax),%eax
+c010907e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109082:	c7 04 24 60 f5 10 c0 	movl   $0xc010f560,(%esp)
+c0109089:	e8 ca 72 ff ff       	call   c0100358 <cprintf>
+            	goto failed;
+c010908e:	eb 07                	jmp    c0109097 <do_pgfault+0x1e0>
+	    }
+    }
+
+   ret = 0;
+c0109090:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c0109097:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010909a:	c9                   	leave  
+c010909b:	c3                   	ret    
+
+c010909c <user_mem_check>:
+
+bool
+user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
+c010909c:	55                   	push   %ebp
+c010909d:	89 e5                	mov    %esp,%ebp
+c010909f:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c01090a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01090a6:	0f 84 e0 00 00 00    	je     c010918c <user_mem_check+0xf0>
+        if (!USER_ACCESS(addr, addr + len)) {
+c01090ac:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c01090b3:	76 1c                	jbe    c01090d1 <user_mem_check+0x35>
+c01090b5:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090b8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090bb:	01 d0                	add    %edx,%eax
+c01090bd:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01090c0:	76 0f                	jbe    c01090d1 <user_mem_check+0x35>
+c01090c2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090c5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090c8:	01 d0                	add    %edx,%eax
+c01090ca:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c01090cf:	76 0a                	jbe    c01090db <user_mem_check+0x3f>
+            return 0;
+c01090d1:	b8 00 00 00 00       	mov    $0x0,%eax
+c01090d6:	e9 e2 00 00 00       	jmp    c01091bd <user_mem_check+0x121>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c01090db:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01090de:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01090e1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090e7:	01 d0                	add    %edx,%eax
+c01090e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end) {
+c01090ec:	e9 88 00 00 00       	jmp    c0109179 <user_mem_check+0xdd>
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+c01090f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01090f4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01090f8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01090fb:	89 04 24             	mov    %eax,(%esp)
+c01090fe:	e8 e4 ef ff ff       	call   c01080e7 <find_vma>
+c0109103:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010910a:	74 0b                	je     c0109117 <user_mem_check+0x7b>
+c010910c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010910f:	8b 40 04             	mov    0x4(%eax),%eax
+c0109112:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109115:	76 0a                	jbe    c0109121 <user_mem_check+0x85>
+                return 0;
+c0109117:	b8 00 00 00 00       	mov    $0x0,%eax
+c010911c:	e9 9c 00 00 00       	jmp    c01091bd <user_mem_check+0x121>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+c0109121:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109124:	8b 50 0c             	mov    0xc(%eax),%edx
+c0109127:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c010912b:	74 07                	je     c0109134 <user_mem_check+0x98>
+c010912d:	b8 02 00 00 00       	mov    $0x2,%eax
+c0109132:	eb 05                	jmp    c0109139 <user_mem_check+0x9d>
+c0109134:	b8 01 00 00 00       	mov    $0x1,%eax
+c0109139:	21 d0                	and    %edx,%eax
+c010913b:	85 c0                	test   %eax,%eax
+c010913d:	75 07                	jne    c0109146 <user_mem_check+0xaa>
+                return 0;
+c010913f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109144:	eb 77                	jmp    c01091bd <user_mem_check+0x121>
+            }
+            if (write && (vma->vm_flags & VM_STACK)) {
+c0109146:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c010914a:	74 24                	je     c0109170 <user_mem_check+0xd4>
+c010914c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010914f:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109152:	83 e0 08             	and    $0x8,%eax
+c0109155:	85 c0                	test   %eax,%eax
+c0109157:	74 17                	je     c0109170 <user_mem_check+0xd4>
+                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+c0109159:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010915c:	8b 40 04             	mov    0x4(%eax),%eax
+c010915f:	05 00 10 00 00       	add    $0x1000,%eax
+c0109164:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109167:	76 07                	jbe    c0109170 <user_mem_check+0xd4>
+                    return 0;
+c0109169:	b8 00 00 00 00       	mov    $0x0,%eax
+c010916e:	eb 4d                	jmp    c01091bd <user_mem_check+0x121>
+                }
+            }
+            start = vma->vm_end;
+c0109170:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109173:	8b 40 08             	mov    0x8(%eax),%eax
+c0109176:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!USER_ACCESS(addr, addr + len)) {
+            return 0;
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+        while (start < end) {
+c0109179:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010917c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c010917f:	0f 82 6c ff ff ff    	jb     c01090f1 <user_mem_check+0x55>
+                    return 0;
+                }
+            }
+            start = vma->vm_end;
+        }
+        return 1;
+c0109185:	b8 01 00 00 00       	mov    $0x1,%eax
+c010918a:	eb 31                	jmp    c01091bd <user_mem_check+0x121>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c010918c:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c0109193:	76 23                	jbe    c01091b8 <user_mem_check+0x11c>
+c0109195:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109198:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010919b:	01 d0                	add    %edx,%eax
+c010919d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01091a0:	76 16                	jbe    c01091b8 <user_mem_check+0x11c>
+c01091a2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01091a5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01091a8:	01 d0                	add    %edx,%eax
+c01091aa:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c01091af:	77 07                	ja     c01091b8 <user_mem_check+0x11c>
+c01091b1:	b8 01 00 00 00       	mov    $0x1,%eax
+c01091b6:	eb 05                	jmp    c01091bd <user_mem_check+0x121>
+c01091b8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01091bd:	c9                   	leave  
+c01091be:	c3                   	ret    
+
+c01091bf <phi_test_sema>:
+semaphore_t s[N]; /* 每个哲学家一个信号量 */
+
+struct proc_struct *philosopher_proc_sema[N];
+
+void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
+{ 
+c01091bf:	55                   	push   %ebp
+c01091c0:	89 e5                	mov    %esp,%ebp
+c01091c2:	83 ec 18             	sub    $0x18,%esp
+    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
+c01091c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091c8:	8b 04 85 e0 55 1c c0 	mov    -0x3fe3aa20(,%eax,4),%eax
+c01091cf:	83 f8 01             	cmp    $0x1,%eax
+c01091d2:	0f 85 85 00 00 00    	jne    c010925d <phi_test_sema+0x9e>
+c01091d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091db:	8d 48 04             	lea    0x4(%eax),%ecx
+c01091de:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c01091e3:	89 c8                	mov    %ecx,%eax
+c01091e5:	f7 ea                	imul   %edx
+c01091e7:	d1 fa                	sar    %edx
+c01091e9:	89 c8                	mov    %ecx,%eax
+c01091eb:	c1 f8 1f             	sar    $0x1f,%eax
+c01091ee:	29 c2                	sub    %eax,%edx
+c01091f0:	89 d0                	mov    %edx,%eax
+c01091f2:	c1 e0 02             	shl    $0x2,%eax
+c01091f5:	01 d0                	add    %edx,%eax
+c01091f7:	29 c1                	sub    %eax,%ecx
+c01091f9:	89 ca                	mov    %ecx,%edx
+c01091fb:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
+c0109202:	83 f8 02             	cmp    $0x2,%eax
+c0109205:	74 56                	je     c010925d <phi_test_sema+0x9e>
+            &&state_sema[RIGHT]!=EATING)
+c0109207:	8b 45 08             	mov    0x8(%ebp),%eax
+c010920a:	8d 48 01             	lea    0x1(%eax),%ecx
+c010920d:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0109212:	89 c8                	mov    %ecx,%eax
+c0109214:	f7 ea                	imul   %edx
+c0109216:	d1 fa                	sar    %edx
+c0109218:	89 c8                	mov    %ecx,%eax
+c010921a:	c1 f8 1f             	sar    $0x1f,%eax
+c010921d:	29 c2                	sub    %eax,%edx
+c010921f:	89 d0                	mov    %edx,%eax
+c0109221:	c1 e0 02             	shl    $0x2,%eax
+c0109224:	01 d0                	add    %edx,%eax
+c0109226:	29 c1                	sub    %eax,%ecx
+c0109228:	89 ca                	mov    %ecx,%edx
+c010922a:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
+c0109231:	83 f8 02             	cmp    $0x2,%eax
+c0109234:	74 27                	je     c010925d <phi_test_sema+0x9e>
+    {
+        state_sema[i]=EATING;
+c0109236:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109239:	c7 04 85 e0 55 1c c0 	movl   $0x2,-0x3fe3aa20(,%eax,4)
+c0109240:	02 00 00 00 
+        up(&s[i]);
+c0109244:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109247:	89 d0                	mov    %edx,%eax
+c0109249:	01 c0                	add    %eax,%eax
+c010924b:	01 d0                	add    %edx,%eax
+c010924d:	c1 e0 02             	shl    $0x2,%eax
+c0109250:	05 80 56 1c c0       	add    $0xc01c5680,%eax
+c0109255:	89 04 24             	mov    %eax,(%esp)
+c0109258:	e8 2a 09 00 00       	call   c0109b87 <up>
+    }
+}
+c010925d:	c9                   	leave  
+c010925e:	c3                   	ret    
+
+c010925f <phi_take_forks_sema>:
+
+void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
+{ 
+c010925f:	55                   	push   %ebp
+c0109260:	89 e5                	mov    %esp,%ebp
+c0109262:	83 ec 18             	sub    $0x18,%esp
+        down(&mutex); /* 进入临界区 */
+c0109265:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
+c010926c:	e8 31 09 00 00       	call   c0109ba2 <down>
+        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
+c0109271:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109274:	c7 04 85 e0 55 1c c0 	movl   $0x1,-0x3fe3aa20(,%eax,4)
+c010927b:	01 00 00 00 
+        phi_test_sema(i); /* 试图得到两只叉子 */
+c010927f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109282:	89 04 24             	mov    %eax,(%esp)
+c0109285:	e8 35 ff ff ff       	call   c01091bf <phi_test_sema>
+        up(&mutex); /* 离开临界区 */
+c010928a:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
+c0109291:	e8 f1 08 00 00       	call   c0109b87 <up>
+        down(&s[i]); /* 如果得不到叉子就阻塞 */
+c0109296:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109299:	89 d0                	mov    %edx,%eax
+c010929b:	01 c0                	add    %eax,%eax
+c010929d:	01 d0                	add    %edx,%eax
+c010929f:	c1 e0 02             	shl    $0x2,%eax
+c01092a2:	05 80 56 1c c0       	add    $0xc01c5680,%eax
+c01092a7:	89 04 24             	mov    %eax,(%esp)
+c01092aa:	e8 f3 08 00 00       	call   c0109ba2 <down>
+}
+c01092af:	c9                   	leave  
+c01092b0:	c3                   	ret    
+
+c01092b1 <phi_put_forks_sema>:
+
+void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
+{ 
+c01092b1:	55                   	push   %ebp
+c01092b2:	89 e5                	mov    %esp,%ebp
+c01092b4:	83 ec 18             	sub    $0x18,%esp
+        down(&mutex); /* 进入临界区 */
+c01092b7:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
+c01092be:	e8 df 08 00 00       	call   c0109ba2 <down>
+        state_sema[i]=THINKING; /* 哲学家进餐结束 */
+c01092c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092c6:	c7 04 85 e0 55 1c c0 	movl   $0x0,-0x3fe3aa20(,%eax,4)
+c01092cd:	00 00 00 00 
+        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
+c01092d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092d4:	8d 48 04             	lea    0x4(%eax),%ecx
+c01092d7:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c01092dc:	89 c8                	mov    %ecx,%eax
+c01092de:	f7 ea                	imul   %edx
+c01092e0:	d1 fa                	sar    %edx
+c01092e2:	89 c8                	mov    %ecx,%eax
+c01092e4:	c1 f8 1f             	sar    $0x1f,%eax
+c01092e7:	29 c2                	sub    %eax,%edx
+c01092e9:	89 d0                	mov    %edx,%eax
+c01092eb:	c1 e0 02             	shl    $0x2,%eax
+c01092ee:	01 d0                	add    %edx,%eax
+c01092f0:	29 c1                	sub    %eax,%ecx
+c01092f2:	89 ca                	mov    %ecx,%edx
+c01092f4:	89 14 24             	mov    %edx,(%esp)
+c01092f7:	e8 c3 fe ff ff       	call   c01091bf <phi_test_sema>
+        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
+c01092fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092ff:	8d 48 01             	lea    0x1(%eax),%ecx
+c0109302:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0109307:	89 c8                	mov    %ecx,%eax
+c0109309:	f7 ea                	imul   %edx
+c010930b:	d1 fa                	sar    %edx
+c010930d:	89 c8                	mov    %ecx,%eax
+c010930f:	c1 f8 1f             	sar    $0x1f,%eax
+c0109312:	29 c2                	sub    %eax,%edx
+c0109314:	89 d0                	mov    %edx,%eax
+c0109316:	c1 e0 02             	shl    $0x2,%eax
+c0109319:	01 d0                	add    %edx,%eax
+c010931b:	29 c1                	sub    %eax,%ecx
+c010931d:	89 ca                	mov    %ecx,%edx
+c010931f:	89 14 24             	mov    %edx,(%esp)
+c0109322:	e8 98 fe ff ff       	call   c01091bf <phi_test_sema>
+        up(&mutex); /* 离开临界区 */
+c0109327:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
+c010932e:	e8 54 08 00 00       	call   c0109b87 <up>
+}
+c0109333:	c9                   	leave  
+c0109334:	c3                   	ret    
+
+c0109335 <philosopher_using_semaphore>:
+
+int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
+{
+c0109335:	55                   	push   %ebp
+c0109336:	89 e5                	mov    %esp,%ebp
+c0109338:	83 ec 28             	sub    $0x28,%esp
+    int i, iter=0;
+c010933b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    i=(int)arg;
+c0109342:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109345:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cprintf("I am No.%d philosopher_sema\n",i);
+c0109348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010934b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010934f:	c7 04 24 88 f5 10 c0 	movl   $0xc010f588,(%esp)
+c0109356:	e8 fd 6f ff ff       	call   c0100358 <cprintf>
+    while(iter++<TIMES)
+c010935b:	eb 62                	jmp    c01093bf <philosopher_using_semaphore+0x8a>
+    { /* 无限循环 */
+        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
+c010935d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109360:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109364:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109367:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010936b:	c7 04 24 a8 f5 10 c0 	movl   $0xc010f5a8,(%esp)
+c0109372:	e8 e1 6f ff ff       	call   c0100358 <cprintf>
+        do_sleep(SLEEP_TIME);
+c0109377:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c010937e:	e8 bf 2b 00 00       	call   c010bf42 <do_sleep>
+        phi_take_forks_sema(i); 
+c0109383:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109386:	89 04 24             	mov    %eax,(%esp)
+c0109389:	e8 d1 fe ff ff       	call   c010925f <phi_take_forks_sema>
+        /* 需要两只叉子，或者阻塞 */
+        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
+c010938e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109391:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109395:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109398:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010939c:	c7 04 24 d8 f5 10 c0 	movl   $0xc010f5d8,(%esp)
+c01093a3:	e8 b0 6f ff ff       	call   c0100358 <cprintf>
+        do_sleep(SLEEP_TIME);
+c01093a8:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c01093af:	e8 8e 2b 00 00       	call   c010bf42 <do_sleep>
+        phi_put_forks_sema(i); 
+c01093b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01093b7:	89 04 24             	mov    %eax,(%esp)
+c01093ba:	e8 f2 fe ff ff       	call   c01092b1 <phi_put_forks_sema>
+int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
+{
+    int i, iter=0;
+    i=(int)arg;
+    cprintf("I am No.%d philosopher_sema\n",i);
+    while(iter++<TIMES)
+c01093bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01093c2:	8d 50 01             	lea    0x1(%eax),%edx
+c01093c5:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01093c8:	83 f8 03             	cmp    $0x3,%eax
+c01093cb:	7e 90                	jle    c010935d <philosopher_using_semaphore+0x28>
+        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
+        do_sleep(SLEEP_TIME);
+        phi_put_forks_sema(i); 
+        /* 把两把叉子同时放回桌子 */
+    }
+    cprintf("No.%d philosopher_sema quit\n",i);
+c01093cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01093d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01093d4:	c7 04 24 03 f6 10 c0 	movl   $0xc010f603,(%esp)
+c01093db:	e8 78 6f ff ff       	call   c0100358 <cprintf>
+    return 0;    
+c01093e0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01093e5:	c9                   	leave  
+c01093e6:	c3                   	ret    
+
+c01093e7 <phi_test_condvar>:
+
+struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
+int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
+monitor_t mt, *mtp=&mt;                          // monitor
+
+void phi_test_condvar (i) { 
+c01093e7:	55                   	push   %ebp
+c01093e8:	89 e5                	mov    %esp,%ebp
+c01093ea:	83 ec 18             	sub    $0x18,%esp
+    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
+c01093ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093f0:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
+c01093f7:	83 f8 01             	cmp    $0x1,%eax
+c01093fa:	0f 85 b5 00 00 00    	jne    c01094b5 <phi_test_condvar+0xce>
+c0109400:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109403:	8d 48 04             	lea    0x4(%eax),%ecx
+c0109406:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c010940b:	89 c8                	mov    %ecx,%eax
+c010940d:	f7 ea                	imul   %edx
+c010940f:	d1 fa                	sar    %edx
+c0109411:	89 c8                	mov    %ecx,%eax
+c0109413:	c1 f8 1f             	sar    $0x1f,%eax
+c0109416:	29 c2                	sub    %eax,%edx
+c0109418:	89 d0                	mov    %edx,%eax
+c010941a:	c1 e0 02             	shl    $0x2,%eax
+c010941d:	01 d0                	add    %edx,%eax
+c010941f:	29 c1                	sub    %eax,%ecx
+c0109421:	89 ca                	mov    %ecx,%edx
+c0109423:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
+c010942a:	83 f8 02             	cmp    $0x2,%eax
+c010942d:	0f 84 82 00 00 00    	je     c01094b5 <phi_test_condvar+0xce>
+            &&state_condvar[RIGHT]!=EATING) {
+c0109433:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109436:	8d 48 01             	lea    0x1(%eax),%ecx
+c0109439:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c010943e:	89 c8                	mov    %ecx,%eax
+c0109440:	f7 ea                	imul   %edx
+c0109442:	d1 fa                	sar    %edx
+c0109444:	89 c8                	mov    %ecx,%eax
+c0109446:	c1 f8 1f             	sar    $0x1f,%eax
+c0109449:	29 c2                	sub    %eax,%edx
+c010944b:	89 d0                	mov    %edx,%eax
+c010944d:	c1 e0 02             	shl    $0x2,%eax
+c0109450:	01 d0                	add    %edx,%eax
+c0109452:	29 c1                	sub    %eax,%ecx
+c0109454:	89 ca                	mov    %ecx,%edx
+c0109456:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
+c010945d:	83 f8 02             	cmp    $0x2,%eax
+c0109460:	74 53                	je     c01094b5 <phi_test_condvar+0xce>
+        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
+c0109462:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109465:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109469:	c7 04 24 20 f6 10 c0 	movl   $0xc010f620,(%esp)
+c0109470:	e8 e3 6e ff ff       	call   c0100358 <cprintf>
+        state_condvar[i] = EATING ;
+c0109475:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109478:	c7 04 85 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%eax,4)
+c010947f:	02 00 00 00 
+        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
+c0109483:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109486:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010948a:	c7 04 24 54 f6 10 c0 	movl   $0xc010f654,(%esp)
+c0109491:	e8 c2 6e ff ff       	call   c0100358 <cprintf>
+        cond_signal(&mtp->cv[i]) ;
+c0109496:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c010949b:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c010949e:	8b 55 08             	mov    0x8(%ebp),%edx
+c01094a1:	89 d0                	mov    %edx,%eax
+c01094a3:	c1 e0 02             	shl    $0x2,%eax
+c01094a6:	01 d0                	add    %edx,%eax
+c01094a8:	c1 e0 02             	shl    $0x2,%eax
+c01094ab:	01 c8                	add    %ecx,%eax
+c01094ad:	89 04 24             	mov    %eax,(%esp)
+c01094b0:	e8 cf 03 00 00       	call   c0109884 <cond_signal>
+    }
+}
+c01094b5:	c9                   	leave  
+c01094b6:	c3                   	ret    
+
+c01094b7 <phi_take_forks_condvar>:
+
+
+void phi_take_forks_condvar(int i) {
+c01094b7:	55                   	push   %ebp
+c01094b8:	89 e5                	mov    %esp,%ebp
+c01094ba:	83 ec 18             	sub    $0x18,%esp
+     down(&(mtp->mutex));
+c01094bd:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c01094c2:	89 04 24             	mov    %eax,(%esp)
+c01094c5:	e8 d8 06 00 00       	call   c0109ba2 <down>
+//--------into routine in monitor--------------
+     // LAB7 EXERCISE1: YOUR CODE
+     // I am hungry
+     // try to get fork
+//--------leave routine in monitor--------------
+      if(mtp->next_count>0)
+c01094ca:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c01094cf:	8b 40 18             	mov    0x18(%eax),%eax
+c01094d2:	85 c0                	test   %eax,%eax
+c01094d4:	7e 12                	jle    c01094e8 <phi_take_forks_condvar+0x31>
+         up(&(mtp->next));
+c01094d6:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c01094db:	83 c0 0c             	add    $0xc,%eax
+c01094de:	89 04 24             	mov    %eax,(%esp)
+c01094e1:	e8 a1 06 00 00       	call   c0109b87 <up>
+c01094e6:	eb 0d                	jmp    c01094f5 <phi_take_forks_condvar+0x3e>
+      else
+         up(&(mtp->mutex));
+c01094e8:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c01094ed:	89 04 24             	mov    %eax,(%esp)
+c01094f0:	e8 92 06 00 00       	call   c0109b87 <up>
+}
+c01094f5:	c9                   	leave  
+c01094f6:	c3                   	ret    
+
+c01094f7 <phi_put_forks_condvar>:
+
+void phi_put_forks_condvar(int i) {
+c01094f7:	55                   	push   %ebp
+c01094f8:	89 e5                	mov    %esp,%ebp
+c01094fa:	83 ec 18             	sub    $0x18,%esp
+     down(&(mtp->mutex));
+c01094fd:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c0109502:	89 04 24             	mov    %eax,(%esp)
+c0109505:	e8 98 06 00 00       	call   c0109ba2 <down>
+//--------into routine in monitor--------------
+     // LAB7 EXERCISE1: YOUR CODE
+     // I ate over
+     // test left and right neighbors
+//--------leave routine in monitor--------------
+     if(mtp->next_count>0)
+c010950a:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c010950f:	8b 40 18             	mov    0x18(%eax),%eax
+c0109512:	85 c0                	test   %eax,%eax
+c0109514:	7e 12                	jle    c0109528 <phi_put_forks_condvar+0x31>
+        up(&(mtp->next));
+c0109516:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c010951b:	83 c0 0c             	add    $0xc,%eax
+c010951e:	89 04 24             	mov    %eax,(%esp)
+c0109521:	e8 61 06 00 00       	call   c0109b87 <up>
+c0109526:	eb 0d                	jmp    c0109535 <phi_put_forks_condvar+0x3e>
+     else
+        up(&(mtp->mutex));
+c0109528:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
+c010952d:	89 04 24             	mov    %eax,(%esp)
+c0109530:	e8 52 06 00 00       	call   c0109b87 <up>
+}
+c0109535:	c9                   	leave  
+c0109536:	c3                   	ret    
+
+c0109537 <philosopher_using_condvar>:
+
+//---------- philosophers using monitor (condition variable) ----------------------
+int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
+c0109537:	55                   	push   %ebp
+c0109538:	89 e5                	mov    %esp,%ebp
+c010953a:	83 ec 28             	sub    $0x28,%esp
+  
+    int i, iter=0;
+c010953d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    i=(int)arg;
+c0109544:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109547:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cprintf("I am No.%d philosopher_condvar\n",i);
+c010954a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010954d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109551:	c7 04 24 7c f6 10 c0 	movl   $0xc010f67c,(%esp)
+c0109558:	e8 fb 6d ff ff       	call   c0100358 <cprintf>
+    while(iter++<TIMES)
+c010955d:	eb 62                	jmp    c01095c1 <philosopher_using_condvar+0x8a>
+    { /* iterate*/
+        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
+c010955f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109562:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109566:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109569:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010956d:	c7 04 24 9c f6 10 c0 	movl   $0xc010f69c,(%esp)
+c0109574:	e8 df 6d ff ff       	call   c0100358 <cprintf>
+        do_sleep(SLEEP_TIME);
+c0109579:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c0109580:	e8 bd 29 00 00       	call   c010bf42 <do_sleep>
+        phi_take_forks_condvar(i); 
+c0109585:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109588:	89 04 24             	mov    %eax,(%esp)
+c010958b:	e8 27 ff ff ff       	call   c01094b7 <phi_take_forks_condvar>
+        /* need two forks, maybe blocked */
+        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
+c0109590:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109593:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109597:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010959a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010959e:	c7 04 24 cc f6 10 c0 	movl   $0xc010f6cc,(%esp)
+c01095a5:	e8 ae 6d ff ff       	call   c0100358 <cprintf>
+        do_sleep(SLEEP_TIME);
+c01095aa:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c01095b1:	e8 8c 29 00 00       	call   c010bf42 <do_sleep>
+        phi_put_forks_condvar(i); 
+c01095b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01095b9:	89 04 24             	mov    %eax,(%esp)
+c01095bc:	e8 36 ff ff ff       	call   c01094f7 <phi_put_forks_condvar>
+int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
+  
+    int i, iter=0;
+    i=(int)arg;
+    cprintf("I am No.%d philosopher_condvar\n",i);
+    while(iter++<TIMES)
+c01095c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095c4:	8d 50 01             	lea    0x1(%eax),%edx
+c01095c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01095ca:	83 f8 03             	cmp    $0x3,%eax
+c01095cd:	7e 90                	jle    c010955f <philosopher_using_condvar+0x28>
+        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
+        do_sleep(SLEEP_TIME);
+        phi_put_forks_condvar(i); 
+        /* return two forks back*/
+    }
+    cprintf("No.%d philosopher_condvar quit\n",i);
+c01095cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01095d2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01095d6:	c7 04 24 fc f6 10 c0 	movl   $0xc010f6fc,(%esp)
+c01095dd:	e8 76 6d ff ff       	call   c0100358 <cprintf>
+    return 0;    
+c01095e2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01095e7:	c9                   	leave  
+c01095e8:	c3                   	ret    
+
+c01095e9 <check_sync>:
+
+void check_sync(void){
+c01095e9:	55                   	push   %ebp
+c01095ea:	89 e5                	mov    %esp,%ebp
+c01095ec:	83 ec 28             	sub    $0x28,%esp
+
+    int i;
+
+    //check semaphore
+    sem_init(&mutex, 1);
+c01095ef:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01095f6:	00 
+c01095f7:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
+c01095fe:	e8 11 04 00 00       	call   c0109a14 <sem_init>
+    for(i=0;i<N;i++){
+c0109603:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010960a:	e9 94 00 00 00       	jmp    c01096a3 <check_sync+0xba>
+        sem_init(&s[i], 0);
+c010960f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109612:	89 d0                	mov    %edx,%eax
+c0109614:	01 c0                	add    %eax,%eax
+c0109616:	01 d0                	add    %edx,%eax
+c0109618:	c1 e0 02             	shl    $0x2,%eax
+c010961b:	05 80 56 1c c0       	add    $0xc01c5680,%eax
+c0109620:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109627:	00 
+c0109628:	89 04 24             	mov    %eax,(%esp)
+c010962b:	e8 e4 03 00 00       	call   c0109a14 <sem_init>
+        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
+c0109630:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109633:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010963a:	00 
+c010963b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010963f:	c7 04 24 35 93 10 c0 	movl   $0xc0109335,(%esp)
+c0109646:	e8 5f 14 00 00       	call   c010aaaa <kernel_thread>
+c010964b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pid <= 0) {
+c010964e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109652:	7f 1c                	jg     c0109670 <check_sync+0x87>
+            panic("create No.%d philosopher_using_semaphore failed.\n");
+c0109654:	c7 44 24 08 1c f7 10 	movl   $0xc010f71c,0x8(%esp)
+c010965b:	c0 
+c010965c:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
+c0109663:	00 
+c0109664:	c7 04 24 4e f7 10 c0 	movl   $0xc010f74e,(%esp)
+c010966b:	e8 51 77 ff ff       	call   c0100dc1 <__panic>
+        }
+        philosopher_proc_sema[i] = find_proc(pid);
+c0109670:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109673:	89 04 24             	mov    %eax,(%esp)
+c0109676:	e8 bb 13 00 00       	call   c010aa36 <find_proc>
+c010967b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010967e:	89 04 95 54 56 1c c0 	mov    %eax,-0x3fe3a9ac(,%edx,4)
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+c0109685:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109688:	8b 04 85 54 56 1c c0 	mov    -0x3fe3a9ac(,%eax,4),%eax
+c010968f:	c7 44 24 04 65 f7 10 	movl   $0xc010f765,0x4(%esp)
+c0109696:	c0 
+c0109697:	89 04 24             	mov    %eax,(%esp)
+c010969a:	e8 7e 0f 00 00       	call   c010a61d <set_proc_name>
+
+    int i;
+
+    //check semaphore
+    sem_init(&mutex, 1);
+    for(i=0;i<N;i++){
+c010969f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01096a3:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+c01096a7:	0f 8e 62 ff ff ff    	jle    c010960f <check_sync+0x26>
+        philosopher_proc_sema[i] = find_proc(pid);
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+    }
+
+    //check condition variable
+    monitor_init(&mt, N);
+c01096ad:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+c01096b4:	00 
+c01096b5:	c7 04 24 20 56 1c c0 	movl   $0xc01c5620,(%esp)
+c01096bc:	e8 99 00 00 00       	call   c010975a <monitor_init>
+    for(i=0;i<N;i++){
+c01096c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01096c8:	e9 81 00 00 00       	jmp    c010974e <check_sync+0x165>
+        state_condvar[i]=THINKING;
+c01096cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096d0:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
+c01096d7:	00 00 00 00 
+        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
+c01096db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096de:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01096e5:	00 
+c01096e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01096ea:	c7 04 24 37 95 10 c0 	movl   $0xc0109537,(%esp)
+c01096f1:	e8 b4 13 00 00       	call   c010aaaa <kernel_thread>
+c01096f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (pid <= 0) {
+c01096f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01096fd:	7f 1c                	jg     c010971b <check_sync+0x132>
+            panic("create No.%d philosopher_using_condvar failed.\n");
+c01096ff:	c7 44 24 08 7c f7 10 	movl   $0xc010f77c,0x8(%esp)
+c0109706:	c0 
+c0109707:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c010970e:	00 
+c010970f:	c7 04 24 4e f7 10 c0 	movl   $0xc010f74e,(%esp)
+c0109716:	e8 a6 76 ff ff       	call   c0100dc1 <__panic>
+        }
+        philosopher_proc_condvar[i] = find_proc(pid);
+c010971b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010971e:	89 04 24             	mov    %eax,(%esp)
+c0109721:	e8 10 13 00 00       	call   c010aa36 <find_proc>
+c0109726:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109729:	89 04 95 f4 55 1c c0 	mov    %eax,-0x3fe3aa0c(,%edx,4)
+        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
+c0109730:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109733:	8b 04 85 f4 55 1c c0 	mov    -0x3fe3aa0c(,%eax,4),%eax
+c010973a:	c7 44 24 04 ac f7 10 	movl   $0xc010f7ac,0x4(%esp)
+c0109741:	c0 
+c0109742:	89 04 24             	mov    %eax,(%esp)
+c0109745:	e8 d3 0e 00 00       	call   c010a61d <set_proc_name>
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+    }
+
+    //check condition variable
+    monitor_init(&mt, N);
+    for(i=0;i<N;i++){
+c010974a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010974e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+c0109752:	0f 8e 75 ff ff ff    	jle    c01096cd <check_sync+0xe4>
+            panic("create No.%d philosopher_using_condvar failed.\n");
+        }
+        philosopher_proc_condvar[i] = find_proc(pid);
+        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
+    }
+}
+c0109758:	c9                   	leave  
+c0109759:	c3                   	ret    
+
+c010975a <monitor_init>:
+#include <assert.h>
+
+
+// Initialize monitor.
+void     
+monitor_init (monitor_t * mtp, size_t num_cv) {
+c010975a:	55                   	push   %ebp
+c010975b:	89 e5                	mov    %esp,%ebp
+c010975d:	83 ec 28             	sub    $0x28,%esp
+    int i;
+    assert(num_cv>0);
+c0109760:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0109764:	75 24                	jne    c010978a <monitor_init+0x30>
+c0109766:	c7 44 24 0c c8 f7 10 	movl   $0xc010f7c8,0xc(%esp)
+c010976d:	c0 
+c010976e:	c7 44 24 08 d1 f7 10 	movl   $0xc010f7d1,0x8(%esp)
+c0109775:	c0 
+c0109776:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
+c010977d:	00 
+c010977e:	c7 04 24 e6 f7 10 c0 	movl   $0xc010f7e6,(%esp)
+c0109785:	e8 37 76 ff ff       	call   c0100dc1 <__panic>
+    mtp->next_count = 0;
+c010978a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010978d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    mtp->cv = NULL;
+c0109794:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109797:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    sem_init(&(mtp->mutex), 1); //unlocked
+c010979e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01097a8:	00 
+c01097a9:	89 04 24             	mov    %eax,(%esp)
+c01097ac:	e8 63 02 00 00       	call   c0109a14 <sem_init>
+    sem_init(&(mtp->next), 0);
+c01097b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097b4:	83 c0 0c             	add    $0xc,%eax
+c01097b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01097be:	00 
+c01097bf:	89 04 24             	mov    %eax,(%esp)
+c01097c2:	e8 4d 02 00 00       	call   c0109a14 <sem_init>
+    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
+c01097c7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01097ca:	89 d0                	mov    %edx,%eax
+c01097cc:	c1 e0 02             	shl    $0x2,%eax
+c01097cf:	01 d0                	add    %edx,%eax
+c01097d1:	c1 e0 02             	shl    $0x2,%eax
+c01097d4:	89 04 24             	mov    %eax,(%esp)
+c01097d7:	e8 67 b5 ff ff       	call   c0104d43 <kmalloc>
+c01097dc:	8b 55 08             	mov    0x8(%ebp),%edx
+c01097df:	89 42 1c             	mov    %eax,0x1c(%edx)
+    assert(mtp->cv!=NULL);
+c01097e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097e5:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01097e8:	85 c0                	test   %eax,%eax
+c01097ea:	75 24                	jne    c0109810 <monitor_init+0xb6>
+c01097ec:	c7 44 24 0c fa f7 10 	movl   $0xc010f7fa,0xc(%esp)
+c01097f3:	c0 
+c01097f4:	c7 44 24 08 d1 f7 10 	movl   $0xc010f7d1,0x8(%esp)
+c01097fb:	c0 
+c01097fc:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
+c0109803:	00 
+c0109804:	c7 04 24 e6 f7 10 c0 	movl   $0xc010f7e6,(%esp)
+c010980b:	e8 b1 75 ff ff       	call   c0100dc1 <__panic>
+    for(i=0; i<num_cv; i++){
+c0109810:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0109817:	eb 61                	jmp    c010987a <monitor_init+0x120>
+        mtp->cv[i].count=0;
+c0109819:	8b 45 08             	mov    0x8(%ebp),%eax
+c010981c:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c010981f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109822:	89 d0                	mov    %edx,%eax
+c0109824:	c1 e0 02             	shl    $0x2,%eax
+c0109827:	01 d0                	add    %edx,%eax
+c0109829:	c1 e0 02             	shl    $0x2,%eax
+c010982c:	01 c8                	add    %ecx,%eax
+c010982e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        sem_init(&(mtp->cv[i].sem),0);
+c0109835:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109838:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c010983b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010983e:	89 d0                	mov    %edx,%eax
+c0109840:	c1 e0 02             	shl    $0x2,%eax
+c0109843:	01 d0                	add    %edx,%eax
+c0109845:	c1 e0 02             	shl    $0x2,%eax
+c0109848:	01 c8                	add    %ecx,%eax
+c010984a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109851:	00 
+c0109852:	89 04 24             	mov    %eax,(%esp)
+c0109855:	e8 ba 01 00 00       	call   c0109a14 <sem_init>
+        mtp->cv[i].owner=mtp;
+c010985a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010985d:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c0109860:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109863:	89 d0                	mov    %edx,%eax
+c0109865:	c1 e0 02             	shl    $0x2,%eax
+c0109868:	01 d0                	add    %edx,%eax
+c010986a:	c1 e0 02             	shl    $0x2,%eax
+c010986d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c0109870:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109873:	89 42 10             	mov    %eax,0x10(%edx)
+    mtp->cv = NULL;
+    sem_init(&(mtp->mutex), 1); //unlocked
+    sem_init(&(mtp->next), 0);
+    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
+    assert(mtp->cv!=NULL);
+    for(i=0; i<num_cv; i++){
+c0109876:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010987a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010987d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0109880:	72 97                	jb     c0109819 <monitor_init+0xbf>
+        mtp->cv[i].count=0;
+        sem_init(&(mtp->cv[i].sem),0);
+        mtp->cv[i].owner=mtp;
+    }
+}
+c0109882:	c9                   	leave  
+c0109883:	c3                   	ret    
+
+c0109884 <cond_signal>:
+
+// Unlock one of threads waiting on the condition variable. 
+void 
+cond_signal (condvar_t *cvp) {
+c0109884:	55                   	push   %ebp
+c0109885:	89 e5                	mov    %esp,%ebp
+c0109887:	83 ec 18             	sub    $0x18,%esp
+   //LAB7 EXERCISE1: 2012011268
+   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
+c010988a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010988d:	8b 40 10             	mov    0x10(%eax),%eax
+c0109890:	8b 50 18             	mov    0x18(%eax),%edx
+c0109893:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109896:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109899:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010989d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01098a1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098a4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01098a8:	c7 04 24 08 f8 10 c0 	movl   $0xc010f808,(%esp)
+c01098af:	e8 a4 6a ff ff       	call   c0100358 <cprintf>
+   *             wait(mt.next);
+   *             mt.next_count--;
+   *          }
+   *       }
+   */
+    if (cvp->count > 0) {
+c01098b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098b7:	8b 40 0c             	mov    0xc(%eax),%eax
+c01098ba:	85 c0                	test   %eax,%eax
+c01098bc:	7e 3a                	jle    c01098f8 <cond_signal+0x74>
+        ++cvp->owner->next_count;
+c01098be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098c1:	8b 40 10             	mov    0x10(%eax),%eax
+c01098c4:	8b 50 18             	mov    0x18(%eax),%edx
+c01098c7:	83 c2 01             	add    $0x1,%edx
+c01098ca:	89 50 18             	mov    %edx,0x18(%eax)
+        up(&(cvp->sem));
+c01098cd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098d0:	89 04 24             	mov    %eax,(%esp)
+c01098d3:	e8 af 02 00 00       	call   c0109b87 <up>
+        down(&(cvp->owner->next));
+c01098d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098db:	8b 40 10             	mov    0x10(%eax),%eax
+c01098de:	83 c0 0c             	add    $0xc,%eax
+c01098e1:	89 04 24             	mov    %eax,(%esp)
+c01098e4:	e8 b9 02 00 00       	call   c0109ba2 <down>
+        --cvp->owner->next_count;
+c01098e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098ec:	8b 40 10             	mov    0x10(%eax),%eax
+c01098ef:	8b 50 18             	mov    0x18(%eax),%edx
+c01098f2:	83 ea 01             	sub    $0x1,%edx
+c01098f5:	89 50 18             	mov    %edx,0x18(%eax)
+    }
+   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c01098f8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098fb:	8b 40 10             	mov    0x10(%eax),%eax
+c01098fe:	8b 50 18             	mov    0x18(%eax),%edx
+c0109901:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109904:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109907:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010990b:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010990f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109912:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109916:	c7 04 24 50 f8 10 c0 	movl   $0xc010f850,(%esp)
+c010991d:	e8 36 6a ff ff       	call   c0100358 <cprintf>
+}
+c0109922:	c9                   	leave  
+c0109923:	c3                   	ret    
+
+c0109924 <cond_wait>:
+
+// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
+// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
+void
+cond_wait (condvar_t *cvp) {
+c0109924:	55                   	push   %ebp
+c0109925:	89 e5                	mov    %esp,%ebp
+c0109927:	83 ec 18             	sub    $0x18,%esp
+    //LAB7 EXERCISE1: 2012011268
+    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c010992a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010992d:	8b 40 10             	mov    0x10(%eax),%eax
+c0109930:	8b 50 18             	mov    0x18(%eax),%edx
+c0109933:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109936:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109939:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010993d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109941:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109944:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109948:	c7 04 24 94 f8 10 c0 	movl   $0xc010f894,(%esp)
+c010994f:	e8 04 6a ff ff       	call   c0100358 <cprintf>
+    *         else
+    *            signal(mt.mutex);
+    *         wait(cv.sem);
+    *         cv.count --;
+    */
+    ++cvp->count;
+c0109954:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109957:	8b 40 0c             	mov    0xc(%eax),%eax
+c010995a:	8d 50 01             	lea    0x1(%eax),%edx
+c010995d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109960:	89 50 0c             	mov    %edx,0xc(%eax)
+    if (cvp->owner->next_count > 0)
+c0109963:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109966:	8b 40 10             	mov    0x10(%eax),%eax
+c0109969:	8b 40 18             	mov    0x18(%eax),%eax
+c010996c:	85 c0                	test   %eax,%eax
+c010996e:	7e 13                	jle    c0109983 <cond_wait+0x5f>
+        up(&(cvp->owner->next));
+c0109970:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109973:	8b 40 10             	mov    0x10(%eax),%eax
+c0109976:	83 c0 0c             	add    $0xc,%eax
+c0109979:	89 04 24             	mov    %eax,(%esp)
+c010997c:	e8 06 02 00 00       	call   c0109b87 <up>
+c0109981:	eb 0e                	jmp    c0109991 <cond_wait+0x6d>
+    else
+        up(&(cvp->owner->mutex));
+c0109983:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109986:	8b 40 10             	mov    0x10(%eax),%eax
+c0109989:	89 04 24             	mov    %eax,(%esp)
+c010998c:	e8 f6 01 00 00       	call   c0109b87 <up>
+    down(&(cvp->sem));
+c0109991:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109994:	89 04 24             	mov    %eax,(%esp)
+c0109997:	e8 06 02 00 00       	call   c0109ba2 <down>
+    --cvp->count;
+c010999c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010999f:	8b 40 0c             	mov    0xc(%eax),%eax
+c01099a2:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01099a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099a8:	89 50 0c             	mov    %edx,0xc(%eax)
+    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c01099ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099ae:	8b 40 10             	mov    0x10(%eax),%eax
+c01099b1:	8b 50 18             	mov    0x18(%eax),%edx
+c01099b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099b7:	8b 40 0c             	mov    0xc(%eax),%eax
+c01099ba:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c01099be:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01099c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099c5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01099c9:	c7 04 24 d8 f8 10 c0 	movl   $0xc010f8d8,(%esp)
+c01099d0:	e8 83 69 ff ff       	call   c0100358 <cprintf>
+}
+c01099d5:	c9                   	leave  
+c01099d6:	c3                   	ret    
+
+c01099d7 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01099d7:	55                   	push   %ebp
+c01099d8:	89 e5                	mov    %esp,%ebp
+c01099da:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01099dd:	9c                   	pushf  
+c01099de:	58                   	pop    %eax
+c01099df:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01099e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01099e5:	25 00 02 00 00       	and    $0x200,%eax
+c01099ea:	85 c0                	test   %eax,%eax
+c01099ec:	74 0c                	je     c01099fa <__intr_save+0x23>
+        intr_disable();
+c01099ee:	e8 26 86 ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c01099f3:	b8 01 00 00 00       	mov    $0x1,%eax
+c01099f8:	eb 05                	jmp    c01099ff <__intr_save+0x28>
+    }
+    return 0;
+c01099fa:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01099ff:	c9                   	leave  
+c0109a00:	c3                   	ret    
+
+c0109a01 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0109a01:	55                   	push   %ebp
+c0109a02:	89 e5                	mov    %esp,%ebp
+c0109a04:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0109a07:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109a0b:	74 05                	je     c0109a12 <__intr_restore+0x11>
+        intr_enable();
+c0109a0d:	e8 01 86 ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c0109a12:	c9                   	leave  
+c0109a13:	c3                   	ret    
+
+c0109a14 <sem_init>:
+#include <proc.h>
+#include <sync.h>
+#include <assert.h>
+
+void
+sem_init(semaphore_t *sem, int value) {
+c0109a14:	55                   	push   %ebp
+c0109a15:	89 e5                	mov    %esp,%ebp
+c0109a17:	83 ec 18             	sub    $0x18,%esp
+    sem->value = value;
+c0109a1a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a1d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109a20:	89 10                	mov    %edx,(%eax)
+    wait_queue_init(&(sem->wait_queue));
+c0109a22:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a25:	83 c0 04             	add    $0x4,%eax
+c0109a28:	89 04 24             	mov    %eax,(%esp)
+c0109a2b:	e8 33 02 00 00       	call   c0109c63 <wait_queue_init>
+}
+c0109a30:	c9                   	leave  
+c0109a31:	c3                   	ret    
+
+c0109a32 <__up>:
+
+static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
+c0109a32:	55                   	push   %ebp
+c0109a33:	89 e5                	mov    %esp,%ebp
+c0109a35:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0109a38:	e8 9a ff ff ff       	call   c01099d7 <__intr_save>
+c0109a3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        wait_t *wait;
+        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
+c0109a40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a43:	83 c0 04             	add    $0x4,%eax
+c0109a46:	89 04 24             	mov    %eax,(%esp)
+c0109a49:	e8 69 04 00 00       	call   c0109eb7 <wait_queue_first>
+c0109a4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109a51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109a55:	75 0f                	jne    c0109a66 <__up+0x34>
+            sem->value ++;
+c0109a57:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a5a:	8b 00                	mov    (%eax),%eax
+c0109a5c:	8d 50 01             	lea    0x1(%eax),%edx
+c0109a5f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a62:	89 10                	mov    %edx,(%eax)
+c0109a64:	eb 58                	jmp    c0109abe <__up+0x8c>
+        }
+        else {
+            assert(wait->proc->wait_state == wait_state);
+c0109a66:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109a69:	8b 00                	mov    (%eax),%eax
+c0109a6b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c0109a71:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0109a74:	74 24                	je     c0109a9a <__up+0x68>
+c0109a76:	c7 44 24 0c 1c f9 10 	movl   $0xc010f91c,0xc(%esp)
+c0109a7d:	c0 
+c0109a7e:	c7 44 24 08 41 f9 10 	movl   $0xc010f941,0x8(%esp)
+c0109a85:	c0 
+c0109a86:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c0109a8d:	00 
+c0109a8e:	c7 04 24 56 f9 10 c0 	movl   $0xc010f956,(%esp)
+c0109a95:	e8 27 73 ff ff       	call   c0100dc1 <__panic>
+            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
+c0109a9a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a9d:	8d 50 04             	lea    0x4(%eax),%edx
+c0109aa0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0109aa7:	00 
+c0109aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109aab:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109aaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ab2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109ab6:	89 14 24             	mov    %edx,(%esp)
+c0109ab9:	e8 95 04 00 00       	call   c0109f53 <wakeup_wait>
+        }
+    }
+    local_intr_restore(intr_flag);
+c0109abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ac1:	89 04 24             	mov    %eax,(%esp)
+c0109ac4:	e8 38 ff ff ff       	call   c0109a01 <__intr_restore>
+}
+c0109ac9:	c9                   	leave  
+c0109aca:	c3                   	ret    
+
+c0109acb <__down>:
+
+static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
+c0109acb:	55                   	push   %ebp
+c0109acc:	89 e5                	mov    %esp,%ebp
+c0109ace:	83 ec 38             	sub    $0x38,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0109ad1:	e8 01 ff ff ff       	call   c01099d7 <__intr_save>
+c0109ad6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (sem->value > 0) {
+c0109ad9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109adc:	8b 00                	mov    (%eax),%eax
+c0109ade:	85 c0                	test   %eax,%eax
+c0109ae0:	7e 22                	jle    c0109b04 <__down+0x39>
+        sem->value --;
+c0109ae2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ae5:	8b 00                	mov    (%eax),%eax
+c0109ae7:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0109aea:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109aed:	89 10                	mov    %edx,(%eax)
+        local_intr_restore(intr_flag);
+c0109aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109af2:	89 04 24             	mov    %eax,(%esp)
+c0109af5:	e8 07 ff ff ff       	call   c0109a01 <__intr_restore>
+        return 0;
+c0109afa:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109aff:	e9 81 00 00 00       	jmp    c0109b85 <__down+0xba>
+    }
+    wait_t __wait, *wait = &__wait;
+c0109b04:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0109b07:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    wait_current_set(&(sem->wait_queue), wait, wait_state);
+c0109b0a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b0d:	8d 50 04             	lea    0x4(%eax),%edx
+c0109b10:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109b13:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b1a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109b1e:	89 14 24             	mov    %edx,(%esp)
+c0109b21:	e8 34 05 00 00       	call   c010a05a <wait_current_set>
+    local_intr_restore(intr_flag);
+c0109b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b29:	89 04 24             	mov    %eax,(%esp)
+c0109b2c:	e8 d0 fe ff ff       	call   c0109a01 <__intr_restore>
+
+    schedule();
+c0109b31:	e8 d4 28 00 00       	call   c010c40a <schedule>
+
+    local_intr_save(intr_flag);
+c0109b36:	e8 9c fe ff ff       	call   c01099d7 <__intr_save>
+c0109b3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    wait_current_del(&(sem->wait_queue), wait);
+c0109b3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b41:	89 04 24             	mov    %eax,(%esp)
+c0109b44:	e8 e2 03 00 00       	call   c0109f2b <wait_in_queue>
+c0109b49:	85 c0                	test   %eax,%eax
+c0109b4b:	74 15                	je     c0109b62 <__down+0x97>
+c0109b4d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b50:	8d 50 04             	lea    0x4(%eax),%edx
+c0109b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b56:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109b5a:	89 14 24             	mov    %edx,(%esp)
+c0109b5d:	e8 c4 01 00 00       	call   c0109d26 <wait_queue_del>
+    local_intr_restore(intr_flag);
+c0109b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b65:	89 04 24             	mov    %eax,(%esp)
+c0109b68:	e8 94 fe ff ff       	call   c0109a01 <__intr_restore>
+
+    if (wait->wakeup_flags != wait_state) {
+c0109b6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b70:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b73:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0109b76:	74 08                	je     c0109b80 <__down+0xb5>
+        return wait->wakeup_flags;
+c0109b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b7b:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b7e:	eb 05                	jmp    c0109b85 <__down+0xba>
+    }
+    return 0;
+c0109b80:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109b85:	c9                   	leave  
+c0109b86:	c3                   	ret    
+
+c0109b87 <up>:
+
+void
+up(semaphore_t *sem) {
+c0109b87:	55                   	push   %ebp
+c0109b88:	89 e5                	mov    %esp,%ebp
+c0109b8a:	83 ec 18             	sub    $0x18,%esp
+    __up(sem, WT_KSEM);
+c0109b8d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
+c0109b94:	00 
+c0109b95:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b98:	89 04 24             	mov    %eax,(%esp)
+c0109b9b:	e8 92 fe ff ff       	call   c0109a32 <__up>
+}
+c0109ba0:	c9                   	leave  
+c0109ba1:	c3                   	ret    
+
+c0109ba2 <down>:
+
+void
+down(semaphore_t *sem) {
+c0109ba2:	55                   	push   %ebp
+c0109ba3:	89 e5                	mov    %esp,%ebp
+c0109ba5:	83 ec 28             	sub    $0x28,%esp
+    uint32_t flags = __down(sem, WT_KSEM);
+c0109ba8:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
+c0109baf:	00 
+c0109bb0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109bb3:	89 04 24             	mov    %eax,(%esp)
+c0109bb6:	e8 10 ff ff ff       	call   c0109acb <__down>
+c0109bbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(flags == 0);
+c0109bbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109bc2:	74 24                	je     c0109be8 <down+0x46>
+c0109bc4:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
+c0109bcb:	c0 
+c0109bcc:	c7 44 24 08 41 f9 10 	movl   $0xc010f941,0x8(%esp)
+c0109bd3:	c0 
+c0109bd4:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
+c0109bdb:	00 
+c0109bdc:	c7 04 24 56 f9 10 c0 	movl   $0xc010f956,(%esp)
+c0109be3:	e8 d9 71 ff ff       	call   c0100dc1 <__panic>
+}
+c0109be8:	c9                   	leave  
+c0109be9:	c3                   	ret    
+
+c0109bea <try_down>:
+
+bool
+try_down(semaphore_t *sem) {
+c0109bea:	55                   	push   %ebp
+c0109beb:	89 e5                	mov    %esp,%ebp
+c0109bed:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag, ret = 0;
+c0109bf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    local_intr_save(intr_flag);
+c0109bf7:	e8 db fd ff ff       	call   c01099d7 <__intr_save>
+c0109bfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (sem->value > 0) {
+c0109bff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c02:	8b 00                	mov    (%eax),%eax
+c0109c04:	85 c0                	test   %eax,%eax
+c0109c06:	7e 14                	jle    c0109c1c <try_down+0x32>
+        sem->value --, ret = 1;
+c0109c08:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c0b:	8b 00                	mov    (%eax),%eax
+c0109c0d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0109c10:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c13:	89 10                	mov    %edx,(%eax)
+c0109c15:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0109c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109c1f:	89 04 24             	mov    %eax,(%esp)
+c0109c22:	e8 da fd ff ff       	call   c0109a01 <__intr_restore>
+    return ret;
+c0109c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0109c2a:	c9                   	leave  
+c0109c2b:	c3                   	ret    
+
+c0109c2c <wait_init>:
+#include <sync.h>
+#include <wait.h>
+#include <proc.h>
+
+void
+wait_init(wait_t *wait, struct proc_struct *proc) {
+c0109c2c:	55                   	push   %ebp
+c0109c2d:	89 e5                	mov    %esp,%ebp
+c0109c2f:	83 ec 10             	sub    $0x10,%esp
+    wait->proc = proc;
+c0109c32:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c35:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109c38:	89 10                	mov    %edx,(%eax)
+    wait->wakeup_flags = WT_INTERRUPTED;
+c0109c3a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c3d:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
+    list_init(&(wait->wait_link));
+c0109c44:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c47:	83 c0 0c             	add    $0xc,%eax
+c0109c4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0109c4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c50:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109c53:	89 50 04             	mov    %edx,0x4(%eax)
+c0109c56:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c59:	8b 50 04             	mov    0x4(%eax),%edx
+c0109c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c5f:	89 10                	mov    %edx,(%eax)
+}
+c0109c61:	c9                   	leave  
+c0109c62:	c3                   	ret    
+
+c0109c63 <wait_queue_init>:
+
+void
+wait_queue_init(wait_queue_t *queue) {
+c0109c63:	55                   	push   %ebp
+c0109c64:	89 e5                	mov    %esp,%ebp
+c0109c66:	83 ec 10             	sub    $0x10,%esp
+    list_init(&(queue->wait_head));
+c0109c69:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0109c6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c72:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109c75:	89 50 04             	mov    %edx,0x4(%eax)
+c0109c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c7b:	8b 50 04             	mov    0x4(%eax),%edx
+c0109c7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109c81:	89 10                	mov    %edx,(%eax)
+}
+c0109c83:	c9                   	leave  
+c0109c84:	c3                   	ret    
+
+c0109c85 <wait_queue_add>:
+
+void
+wait_queue_add(wait_queue_t *queue, wait_t *wait) {
+c0109c85:	55                   	push   %ebp
+c0109c86:	89 e5                	mov    %esp,%ebp
+c0109c88:	83 ec 38             	sub    $0x38,%esp
+    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
+c0109c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109c8e:	83 c0 0c             	add    $0xc,%eax
+c0109c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c97:	8b 40 04             	mov    0x4(%eax),%eax
+c0109c9a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0109c9d:	0f 94 c0             	sete   %al
+c0109ca0:	0f b6 c0             	movzbl %al,%eax
+c0109ca3:	85 c0                	test   %eax,%eax
+c0109ca5:	74 09                	je     c0109cb0 <wait_queue_add+0x2b>
+c0109ca7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109caa:	8b 00                	mov    (%eax),%eax
+c0109cac:	85 c0                	test   %eax,%eax
+c0109cae:	75 24                	jne    c0109cd4 <wait_queue_add+0x4f>
+c0109cb0:	c7 44 24 0c 74 f9 10 	movl   $0xc010f974,0xc(%esp)
+c0109cb7:	c0 
+c0109cb8:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
+c0109cbf:	c0 
+c0109cc0:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
+c0109cc7:	00 
+c0109cc8:	c7 04 24 be f9 10 c0 	movl   $0xc010f9be,(%esp)
+c0109ccf:	e8 ed 70 ff ff       	call   c0100dc1 <__panic>
+    wait->wait_queue = queue;
+c0109cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109cd7:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109cda:	89 50 08             	mov    %edx,0x8(%eax)
+    list_add_before(&(queue->wait_head), &(wait->wait_link));
+c0109cdd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109ce0:	8d 50 0c             	lea    0xc(%eax),%edx
+c0109ce3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ce6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109ce9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0109cec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109cef:	8b 00                	mov    (%eax),%eax
+c0109cf1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109cf4:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0109cf7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0109cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109cfd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0109d00:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109d03:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109d06:	89 10                	mov    %edx,(%eax)
+c0109d08:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109d0b:	8b 10                	mov    (%eax),%edx
+c0109d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109d10:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109d13:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109d16:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109d19:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109d1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109d1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109d22:	89 10                	mov    %edx,(%eax)
+}
+c0109d24:	c9                   	leave  
+c0109d25:	c3                   	ret    
+
+c0109d26 <wait_queue_del>:
+
+void
+wait_queue_del(wait_queue_t *queue, wait_t *wait) {
+c0109d26:	55                   	push   %ebp
+c0109d27:	89 e5                	mov    %esp,%ebp
+c0109d29:	83 ec 38             	sub    $0x38,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c0109d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109d2f:	83 c0 0c             	add    $0xc,%eax
+c0109d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d38:	8b 40 04             	mov    0x4(%eax),%eax
+c0109d3b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0109d3e:	0f 94 c0             	sete   %al
+c0109d41:	0f b6 c0             	movzbl %al,%eax
+c0109d44:	85 c0                	test   %eax,%eax
+c0109d46:	75 0b                	jne    c0109d53 <wait_queue_del+0x2d>
+c0109d48:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109d4b:	8b 40 08             	mov    0x8(%eax),%eax
+c0109d4e:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109d51:	74 24                	je     c0109d77 <wait_queue_del+0x51>
+c0109d53:	c7 44 24 0c d0 f9 10 	movl   $0xc010f9d0,0xc(%esp)
+c0109d5a:	c0 
+c0109d5b:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
+c0109d62:	c0 
+c0109d63:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+c0109d6a:	00 
+c0109d6b:	c7 04 24 be f9 10 c0 	movl   $0xc010f9be,(%esp)
+c0109d72:	e8 4a 70 ff ff       	call   c0100dc1 <__panic>
+    list_del_init(&(wait->wait_link));
+c0109d77:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109d7a:	83 c0 0c             	add    $0xc,%eax
+c0109d7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109d80:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109d83:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0109d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109d89:	8b 40 04             	mov    0x4(%eax),%eax
+c0109d8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109d8f:	8b 12                	mov    (%edx),%edx
+c0109d91:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0109d94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0109d97:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109d9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109d9d:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109da0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109da3:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109da6:	89 10                	mov    %edx,(%eax)
+c0109da8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109dab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0109dae:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109db1:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109db4:	89 50 04             	mov    %edx,0x4(%eax)
+c0109db7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109dba:	8b 50 04             	mov    0x4(%eax),%edx
+c0109dbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109dc0:	89 10                	mov    %edx,(%eax)
+}
+c0109dc2:	c9                   	leave  
+c0109dc3:	c3                   	ret    
+
+c0109dc4 <wait_queue_next>:
+
+wait_t *
+wait_queue_next(wait_queue_t *queue, wait_t *wait) {
+c0109dc4:	55                   	push   %ebp
+c0109dc5:	89 e5                	mov    %esp,%ebp
+c0109dc7:	83 ec 28             	sub    $0x28,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c0109dca:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109dcd:	83 c0 0c             	add    $0xc,%eax
+c0109dd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109dd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109dd6:	8b 40 04             	mov    0x4(%eax),%eax
+c0109dd9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109ddc:	0f 94 c0             	sete   %al
+c0109ddf:	0f b6 c0             	movzbl %al,%eax
+c0109de2:	85 c0                	test   %eax,%eax
+c0109de4:	75 0b                	jne    c0109df1 <wait_queue_next+0x2d>
+c0109de6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109de9:	8b 40 08             	mov    0x8(%eax),%eax
+c0109dec:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109def:	74 24                	je     c0109e15 <wait_queue_next+0x51>
+c0109df1:	c7 44 24 0c d0 f9 10 	movl   $0xc010f9d0,0xc(%esp)
+c0109df8:	c0 
+c0109df9:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
+c0109e00:	c0 
+c0109e01:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
+c0109e08:	00 
+c0109e09:	c7 04 24 be f9 10 c0 	movl   $0xc010f9be,(%esp)
+c0109e10:	e8 ac 6f ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *le = list_next(&(wait->wait_link));
+c0109e15:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e18:	83 c0 0c             	add    $0xc,%eax
+c0109e1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109e1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e21:	8b 40 04             	mov    0x4(%eax),%eax
+c0109e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109e27:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0109e2d:	74 08                	je     c0109e37 <wait_queue_next+0x73>
+        return le2wait(le, wait_link);
+c0109e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e32:	83 e8 0c             	sub    $0xc,%eax
+c0109e35:	eb 05                	jmp    c0109e3c <wait_queue_next+0x78>
+    }
+    return NULL;
+c0109e37:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109e3c:	c9                   	leave  
+c0109e3d:	c3                   	ret    
+
+c0109e3e <wait_queue_prev>:
+
+wait_t *
+wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
+c0109e3e:	55                   	push   %ebp
+c0109e3f:	89 e5                	mov    %esp,%ebp
+c0109e41:	83 ec 28             	sub    $0x28,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c0109e44:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e47:	83 c0 0c             	add    $0xc,%eax
+c0109e4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109e4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109e50:	8b 40 04             	mov    0x4(%eax),%eax
+c0109e53:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109e56:	0f 94 c0             	sete   %al
+c0109e59:	0f b6 c0             	movzbl %al,%eax
+c0109e5c:	85 c0                	test   %eax,%eax
+c0109e5e:	75 0b                	jne    c0109e6b <wait_queue_prev+0x2d>
+c0109e60:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e63:	8b 40 08             	mov    0x8(%eax),%eax
+c0109e66:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109e69:	74 24                	je     c0109e8f <wait_queue_prev+0x51>
+c0109e6b:	c7 44 24 0c d0 f9 10 	movl   $0xc010f9d0,0xc(%esp)
+c0109e72:	c0 
+c0109e73:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
+c0109e7a:	c0 
+c0109e7b:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
+c0109e82:	00 
+c0109e83:	c7 04 24 be f9 10 c0 	movl   $0xc010f9be,(%esp)
+c0109e8a:	e8 32 6f ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *le = list_prev(&(wait->wait_link));
+c0109e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e92:	83 c0 0c             	add    $0xc,%eax
+c0109e95:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0109e98:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e9b:	8b 00                	mov    (%eax),%eax
+c0109e9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109ea0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ea3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0109ea6:	74 08                	je     c0109eb0 <wait_queue_prev+0x72>
+        return le2wait(le, wait_link);
+c0109ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109eab:	83 e8 0c             	sub    $0xc,%eax
+c0109eae:	eb 05                	jmp    c0109eb5 <wait_queue_prev+0x77>
+    }
+    return NULL;
+c0109eb0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109eb5:	c9                   	leave  
+c0109eb6:	c3                   	ret    
+
+c0109eb7 <wait_queue_first>:
+
+wait_t *
+wait_queue_first(wait_queue_t *queue) {
+c0109eb7:	55                   	push   %ebp
+c0109eb8:	89 e5                	mov    %esp,%ebp
+c0109eba:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_next(&(queue->wait_head));
+c0109ebd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ec0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109ec3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109ec6:	8b 40 04             	mov    0x4(%eax),%eax
+c0109ec9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109ecc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ecf:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109ed2:	74 08                	je     c0109edc <wait_queue_first+0x25>
+        return le2wait(le, wait_link);
+c0109ed4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109ed7:	83 e8 0c             	sub    $0xc,%eax
+c0109eda:	eb 05                	jmp    c0109ee1 <wait_queue_first+0x2a>
+    }
+    return NULL;
+c0109edc:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109ee1:	c9                   	leave  
+c0109ee2:	c3                   	ret    
+
+c0109ee3 <wait_queue_last>:
+
+wait_t *
+wait_queue_last(wait_queue_t *queue) {
+c0109ee3:	55                   	push   %ebp
+c0109ee4:	89 e5                	mov    %esp,%ebp
+c0109ee6:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_prev(&(queue->wait_head));
+c0109ee9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109eec:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0109eef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109ef2:	8b 00                	mov    (%eax),%eax
+c0109ef4:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109ef7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109efa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109efd:	74 08                	je     c0109f07 <wait_queue_last+0x24>
+        return le2wait(le, wait_link);
+c0109eff:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109f02:	83 e8 0c             	sub    $0xc,%eax
+c0109f05:	eb 05                	jmp    c0109f0c <wait_queue_last+0x29>
+    }
+    return NULL;
+c0109f07:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109f0c:	c9                   	leave  
+c0109f0d:	c3                   	ret    
+
+c0109f0e <wait_queue_empty>:
+
+bool
+wait_queue_empty(wait_queue_t *queue) {
+c0109f0e:	55                   	push   %ebp
+c0109f0f:	89 e5                	mov    %esp,%ebp
+c0109f11:	83 ec 10             	sub    $0x10,%esp
+    return list_empty(&(queue->wait_head));
+c0109f14:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f17:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109f1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109f1d:	8b 40 04             	mov    0x4(%eax),%eax
+c0109f20:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c0109f23:	0f 94 c0             	sete   %al
+c0109f26:	0f b6 c0             	movzbl %al,%eax
+}
+c0109f29:	c9                   	leave  
+c0109f2a:	c3                   	ret    
+
+c0109f2b <wait_in_queue>:
+
+bool
+wait_in_queue(wait_t *wait) {
+c0109f2b:	55                   	push   %ebp
+c0109f2c:	89 e5                	mov    %esp,%ebp
+c0109f2e:	83 ec 10             	sub    $0x10,%esp
+    return !list_empty(&(wait->wait_link));
+c0109f31:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f34:	83 c0 0c             	add    $0xc,%eax
+c0109f37:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0109f3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109f3d:	8b 40 04             	mov    0x4(%eax),%eax
+c0109f40:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c0109f43:	0f 94 c0             	sete   %al
+c0109f46:	0f b6 c0             	movzbl %al,%eax
+c0109f49:	85 c0                	test   %eax,%eax
+c0109f4b:	0f 94 c0             	sete   %al
+c0109f4e:	0f b6 c0             	movzbl %al,%eax
+}
+c0109f51:	c9                   	leave  
+c0109f52:	c3                   	ret    
+
+c0109f53 <wakeup_wait>:
+
+void
+wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
+c0109f53:	55                   	push   %ebp
+c0109f54:	89 e5                	mov    %esp,%ebp
+c0109f56:	83 ec 18             	sub    $0x18,%esp
+    if (del) {
+c0109f59:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0109f5d:	74 12                	je     c0109f71 <wakeup_wait+0x1e>
+        wait_queue_del(queue, wait);
+c0109f5f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109f62:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109f66:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f69:	89 04 24             	mov    %eax,(%esp)
+c0109f6c:	e8 b5 fd ff ff       	call   c0109d26 <wait_queue_del>
+    }
+    wait->wakeup_flags = wakeup_flags;
+c0109f71:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109f74:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109f77:	89 50 04             	mov    %edx,0x4(%eax)
+    wakeup_proc(wait->proc);
+c0109f7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109f7d:	8b 00                	mov    (%eax),%eax
+c0109f7f:	89 04 24             	mov    %eax,(%esp)
+c0109f82:	e8 e7 23 00 00       	call   c010c36e <wakeup_proc>
+}
+c0109f87:	c9                   	leave  
+c0109f88:	c3                   	ret    
+
+c0109f89 <wakeup_first>:
+
+void
+wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
+c0109f89:	55                   	push   %ebp
+c0109f8a:	89 e5                	mov    %esp,%ebp
+c0109f8c:	83 ec 28             	sub    $0x28,%esp
+    wait_t *wait;
+    if ((wait = wait_queue_first(queue)) != NULL) {
+c0109f8f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f92:	89 04 24             	mov    %eax,(%esp)
+c0109f95:	e8 1d ff ff ff       	call   c0109eb7 <wait_queue_first>
+c0109f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109f9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109fa1:	74 20                	je     c0109fc3 <wakeup_first+0x3a>
+        wakeup_wait(queue, wait, wakeup_flags, del);
+c0109fa3:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109fa6:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109faa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109fad:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fb4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109fb8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109fbb:	89 04 24             	mov    %eax,(%esp)
+c0109fbe:	e8 90 ff ff ff       	call   c0109f53 <wakeup_wait>
+    }
+}
+c0109fc3:	c9                   	leave  
+c0109fc4:	c3                   	ret    
+
+c0109fc5 <wakeup_queue>:
+
+void
+wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
+c0109fc5:	55                   	push   %ebp
+c0109fc6:	89 e5                	mov    %esp,%ebp
+c0109fc8:	83 ec 28             	sub    $0x28,%esp
+    wait_t *wait;
+    if ((wait = wait_queue_first(queue)) != NULL) {
+c0109fcb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109fce:	89 04 24             	mov    %eax,(%esp)
+c0109fd1:	e8 e1 fe ff ff       	call   c0109eb7 <wait_queue_first>
+c0109fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109fdd:	74 79                	je     c010a058 <wakeup_queue+0x93>
+        if (del) {
+c0109fdf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0109fe3:	74 37                	je     c010a01c <wakeup_queue+0x57>
+            do {
+                wakeup_wait(queue, wait, wakeup_flags, 1);
+c0109fe5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0109fec:	00 
+c0109fed:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109ff0:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ff7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109ffb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ffe:	89 04 24             	mov    %eax,(%esp)
+c010a001:	e8 4d ff ff ff       	call   c0109f53 <wakeup_wait>
+            } while ((wait = wait_queue_first(queue)) != NULL);
+c010a006:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a009:	89 04 24             	mov    %eax,(%esp)
+c010a00c:	e8 a6 fe ff ff       	call   c0109eb7 <wait_queue_first>
+c010a011:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a014:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a018:	75 cb                	jne    c0109fe5 <wakeup_queue+0x20>
+c010a01a:	eb 3c                	jmp    c010a058 <wakeup_queue+0x93>
+        }
+        else {
+            do {
+                wakeup_wait(queue, wait, wakeup_flags, 0);
+c010a01c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010a023:	00 
+c010a024:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a027:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a02b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a02e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a032:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a035:	89 04 24             	mov    %eax,(%esp)
+c010a038:	e8 16 ff ff ff       	call   c0109f53 <wakeup_wait>
+            } while ((wait = wait_queue_next(queue, wait)) != NULL);
+c010a03d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a040:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a044:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a047:	89 04 24             	mov    %eax,(%esp)
+c010a04a:	e8 75 fd ff ff       	call   c0109dc4 <wait_queue_next>
+c010a04f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a052:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a056:	75 c4                	jne    c010a01c <wakeup_queue+0x57>
+        }
+    }
+}
+c010a058:	c9                   	leave  
+c010a059:	c3                   	ret    
+
+c010a05a <wait_current_set>:
+
+void
+wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
+c010a05a:	55                   	push   %ebp
+c010a05b:	89 e5                	mov    %esp,%ebp
+c010a05d:	83 ec 18             	sub    $0x18,%esp
+    assert(current != NULL);
+c010a060:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a065:	85 c0                	test   %eax,%eax
+c010a067:	75 24                	jne    c010a08d <wait_current_set+0x33>
+c010a069:	c7 44 24 0c 0d fa 10 	movl   $0xc010fa0d,0xc(%esp)
+c010a070:	c0 
+c010a071:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
+c010a078:	c0 
+c010a079:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
+c010a080:	00 
+c010a081:	c7 04 24 be f9 10 c0 	movl   $0xc010f9be,(%esp)
+c010a088:	e8 34 6d ff ff       	call   c0100dc1 <__panic>
+    wait_init(wait, current);
+c010a08d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a092:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a096:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a099:	89 04 24             	mov    %eax,(%esp)
+c010a09c:	e8 8b fb ff ff       	call   c0109c2c <wait_init>
+    current->state = PROC_SLEEPING;
+c010a0a1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a0a6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+    current->wait_state = wait_state;
+c010a0ac:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a0b1:	8b 55 10             	mov    0x10(%ebp),%edx
+c010a0b4:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
+    wait_queue_add(queue, wait);
+c010a0ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a0bd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a0c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a0c4:	89 04 24             	mov    %eax,(%esp)
+c010a0c7:	e8 b9 fb ff ff       	call   c0109c85 <wait_queue_add>
+}
+c010a0cc:	c9                   	leave  
+c010a0cd:	c3                   	ret    
+
+c010a0ce <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c010a0ce:	55                   	push   %ebp
+c010a0cf:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010a0d1:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a0d4:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c010a0d9:	29 c2                	sub    %eax,%edx
+c010a0db:	89 d0                	mov    %edx,%eax
+c010a0dd:	c1 f8 05             	sar    $0x5,%eax
+}
+c010a0e0:	5d                   	pop    %ebp
+c010a0e1:	c3                   	ret    
+
+c010a0e2 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010a0e2:	55                   	push   %ebp
+c010a0e3:	89 e5                	mov    %esp,%ebp
+c010a0e5:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c010a0e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a0eb:	89 04 24             	mov    %eax,(%esp)
+c010a0ee:	e8 db ff ff ff       	call   c010a0ce <page2ppn>
+c010a0f3:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010a0f6:	c9                   	leave  
+c010a0f7:	c3                   	ret    
+
+c010a0f8 <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c010a0f8:	55                   	push   %ebp
+c010a0f9:	89 e5                	mov    %esp,%ebp
+c010a0fb:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c010a0fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a101:	89 04 24             	mov    %eax,(%esp)
+c010a104:	e8 d9 ff ff ff       	call   c010a0e2 <page2pa>
+c010a109:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a10c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a10f:	c1 e8 0c             	shr    $0xc,%eax
+c010a112:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a115:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c010a11a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010a11d:	72 23                	jb     c010a142 <page2kva+0x4a>
+c010a11f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a122:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a126:	c7 44 24 08 20 fa 10 	movl   $0xc010fa20,0x8(%esp)
+c010a12d:	c0 
+c010a12e:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c010a135:	00 
+c010a136:	c7 04 24 43 fa 10 c0 	movl   $0xc010fa43,(%esp)
+c010a13d:	e8 7f 6c ff ff       	call   c0100dc1 <__panic>
+c010a142:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a145:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c010a14a:	c9                   	leave  
+c010a14b:	c3                   	ret    
+
+c010a14c <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c010a14c:	55                   	push   %ebp
+c010a14d:	89 e5                	mov    %esp,%ebp
+c010a14f:	83 ec 18             	sub    $0x18,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c010a152:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010a159:	e8 b3 79 ff ff       	call   c0101b11 <ide_device_valid>
+c010a15e:	85 c0                	test   %eax,%eax
+c010a160:	75 1c                	jne    c010a17e <swapfs_init+0x32>
+        panic("swap fs isn't available.\n");
+c010a162:	c7 44 24 08 51 fa 10 	movl   $0xc010fa51,0x8(%esp)
+c010a169:	c0 
+c010a16a:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
+c010a171:	00 
+c010a172:	c7 04 24 6b fa 10 c0 	movl   $0xc010fa6b,(%esp)
+c010a179:	e8 43 6c ff ff       	call   c0100dc1 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c010a17e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010a185:	e8 c6 79 ff ff       	call   c0101b50 <ide_device_size>
+c010a18a:	c1 e8 03             	shr    $0x3,%eax
+c010a18d:	a3 9c 55 1c c0       	mov    %eax,0xc01c559c
+}
+c010a192:	c9                   	leave  
+c010a193:	c3                   	ret    
+
+c010a194 <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c010a194:	55                   	push   %ebp
+c010a195:	89 e5                	mov    %esp,%ebp
+c010a197:	83 ec 28             	sub    $0x28,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c010a19a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a19d:	89 04 24             	mov    %eax,(%esp)
+c010a1a0:	e8 53 ff ff ff       	call   c010a0f8 <page2kva>
+c010a1a5:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a1a8:	c1 ea 08             	shr    $0x8,%edx
+c010a1ab:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010a1ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a1b2:	74 0b                	je     c010a1bf <swapfs_read+0x2b>
+c010a1b4:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
+c010a1ba:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c010a1bd:	72 23                	jb     c010a1e2 <swapfs_read+0x4e>
+c010a1bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a1c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a1c6:	c7 44 24 08 7c fa 10 	movl   $0xc010fa7c,0x8(%esp)
+c010a1cd:	c0 
+c010a1ce:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+c010a1d5:	00 
+c010a1d6:	c7 04 24 6b fa 10 c0 	movl   $0xc010fa6b,(%esp)
+c010a1dd:	e8 df 6b ff ff       	call   c0100dc1 <__panic>
+c010a1e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a1e5:	c1 e2 03             	shl    $0x3,%edx
+c010a1e8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c010a1ef:	00 
+c010a1f0:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a1f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a1f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010a1ff:	e8 8b 79 ff ff       	call   c0101b8f <ide_read_secs>
+}
+c010a204:	c9                   	leave  
+c010a205:	c3                   	ret    
+
+c010a206 <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c010a206:	55                   	push   %ebp
+c010a207:	89 e5                	mov    %esp,%ebp
+c010a209:	83 ec 28             	sub    $0x28,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c010a20c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a20f:	89 04 24             	mov    %eax,(%esp)
+c010a212:	e8 e1 fe ff ff       	call   c010a0f8 <page2kva>
+c010a217:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a21a:	c1 ea 08             	shr    $0x8,%edx
+c010a21d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010a220:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a224:	74 0b                	je     c010a231 <swapfs_write+0x2b>
+c010a226:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
+c010a22c:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c010a22f:	72 23                	jb     c010a254 <swapfs_write+0x4e>
+c010a231:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a234:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a238:	c7 44 24 08 7c fa 10 	movl   $0xc010fa7c,0x8(%esp)
+c010a23f:	c0 
+c010a240:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c010a247:	00 
+c010a248:	c7 04 24 6b fa 10 c0 	movl   $0xc010fa6b,(%esp)
+c010a24f:	e8 6d 6b ff ff       	call   c0100dc1 <__panic>
+c010a254:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a257:	c1 e2 03             	shl    $0x3,%edx
+c010a25a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c010a261:	00 
+c010a262:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a266:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a26a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010a271:	e8 5b 7b ff ff       	call   c0101dd1 <ide_write_secs>
+}
+c010a276:	c9                   	leave  
+c010a277:	c3                   	ret    
+
+c010a278 <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c010a278:	52                   	push   %edx
+    call *%ebx              # call fn
+c010a279:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c010a27b:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c010a27c:	e8 e3 0c 00 00       	call   c010af64 <do_exit>
+
+c010a281 <timer_init>:
+#define le2timer(le, member)            \
+to_struct((le), timer_t, member)
+
+// init a timer
+static inline timer_t *
+timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
+c010a281:	55                   	push   %ebp
+c010a282:	89 e5                	mov    %esp,%ebp
+c010a284:	83 ec 10             	sub    $0x10,%esp
+    timer->expires = expires;
+c010a287:	8b 55 10             	mov    0x10(%ebp),%edx
+c010a28a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a28d:	89 10                	mov    %edx,(%eax)
+    timer->proc = proc;
+c010a28f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a292:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a295:	89 50 04             	mov    %edx,0x4(%eax)
+    list_init(&(timer->timer_link));
+c010a298:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a29b:	83 c0 08             	add    $0x8,%eax
+c010a29e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010a2a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a2a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010a2a7:	89 50 04             	mov    %edx,0x4(%eax)
+c010a2aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a2ad:	8b 50 04             	mov    0x4(%eax),%edx
+c010a2b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a2b3:	89 10                	mov    %edx,(%eax)
+    return timer;
+c010a2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010a2b8:	c9                   	leave  
+c010a2b9:	c3                   	ret    
+
+c010a2ba <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010a2ba:	55                   	push   %ebp
+c010a2bb:	89 e5                	mov    %esp,%ebp
+c010a2bd:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010a2c0:	9c                   	pushf  
+c010a2c1:	58                   	pop    %eax
+c010a2c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010a2c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010a2c8:	25 00 02 00 00       	and    $0x200,%eax
+c010a2cd:	85 c0                	test   %eax,%eax
+c010a2cf:	74 0c                	je     c010a2dd <__intr_save+0x23>
+        intr_disable();
+c010a2d1:	e8 43 7d ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c010a2d6:	b8 01 00 00 00       	mov    $0x1,%eax
+c010a2db:	eb 05                	jmp    c010a2e2 <__intr_save+0x28>
+    }
+    return 0;
+c010a2dd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a2e2:	c9                   	leave  
+c010a2e3:	c3                   	ret    
+
+c010a2e4 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010a2e4:	55                   	push   %ebp
+c010a2e5:	89 e5                	mov    %esp,%ebp
+c010a2e7:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010a2ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a2ee:	74 05                	je     c010a2f5 <__intr_restore+0x11>
+        intr_enable();
+c010a2f0:	e8 1e 7d ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c010a2f5:	c9                   	leave  
+c010a2f6:	c3                   	ret    
+
+c010a2f7 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c010a2f7:	55                   	push   %ebp
+c010a2f8:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010a2fa:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a2fd:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c010a302:	29 c2                	sub    %eax,%edx
+c010a304:	89 d0                	mov    %edx,%eax
+c010a306:	c1 f8 05             	sar    $0x5,%eax
+}
+c010a309:	5d                   	pop    %ebp
+c010a30a:	c3                   	ret    
+
+c010a30b <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010a30b:	55                   	push   %ebp
+c010a30c:	89 e5                	mov    %esp,%ebp
+c010a30e:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c010a311:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a314:	89 04 24             	mov    %eax,(%esp)
+c010a317:	e8 db ff ff ff       	call   c010a2f7 <page2ppn>
+c010a31c:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010a31f:	c9                   	leave  
+c010a320:	c3                   	ret    
+
+c010a321 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c010a321:	55                   	push   %ebp
+c010a322:	89 e5                	mov    %esp,%ebp
+c010a324:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c010a327:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a32a:	c1 e8 0c             	shr    $0xc,%eax
+c010a32d:	89 c2                	mov    %eax,%edx
+c010a32f:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c010a334:	39 c2                	cmp    %eax,%edx
+c010a336:	72 1c                	jb     c010a354 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c010a338:	c7 44 24 08 9c fa 10 	movl   $0xc010fa9c,0x8(%esp)
+c010a33f:	c0 
+c010a340:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c010a347:	00 
+c010a348:	c7 04 24 bb fa 10 c0 	movl   $0xc010fabb,(%esp)
+c010a34f:	e8 6d 6a ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c010a354:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
+c010a359:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a35c:	c1 ea 0c             	shr    $0xc,%edx
+c010a35f:	c1 e2 05             	shl    $0x5,%edx
+c010a362:	01 d0                	add    %edx,%eax
+}
+c010a364:	c9                   	leave  
+c010a365:	c3                   	ret    
+
+c010a366 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c010a366:	55                   	push   %ebp
+c010a367:	89 e5                	mov    %esp,%ebp
+c010a369:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c010a36c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a36f:	89 04 24             	mov    %eax,(%esp)
+c010a372:	e8 94 ff ff ff       	call   c010a30b <page2pa>
+c010a377:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a37a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a37d:	c1 e8 0c             	shr    $0xc,%eax
+c010a380:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a383:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
+c010a388:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010a38b:	72 23                	jb     c010a3b0 <page2kva+0x4a>
+c010a38d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a390:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a394:	c7 44 24 08 cc fa 10 	movl   $0xc010facc,0x8(%esp)
+c010a39b:	c0 
+c010a39c:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c010a3a3:	00 
+c010a3a4:	c7 04 24 bb fa 10 c0 	movl   $0xc010fabb,(%esp)
+c010a3ab:	e8 11 6a ff ff       	call   c0100dc1 <__panic>
+c010a3b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a3b3:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c010a3b8:	c9                   	leave  
+c010a3b9:	c3                   	ret    
+
+c010a3ba <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c010a3ba:	55                   	push   %ebp
+c010a3bb:	89 e5                	mov    %esp,%ebp
+c010a3bd:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c010a3c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a3c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a3c6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010a3cd:	77 23                	ja     c010a3f2 <kva2page+0x38>
+c010a3cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a3d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a3d6:	c7 44 24 08 f0 fa 10 	movl   $0xc010faf0,0x8(%esp)
+c010a3dd:	c0 
+c010a3de:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c010a3e5:	00 
+c010a3e6:	c7 04 24 bb fa 10 c0 	movl   $0xc010fabb,(%esp)
+c010a3ed:	e8 cf 69 ff ff       	call   c0100dc1 <__panic>
+c010a3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a3f5:	05 00 00 00 40       	add    $0x40000000,%eax
+c010a3fa:	89 04 24             	mov    %eax,(%esp)
+c010a3fd:	e8 1f ff ff ff       	call   c010a321 <pa2page>
+}
+c010a402:	c9                   	leave  
+c010a403:	c3                   	ret    
+
+c010a404 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c010a404:	55                   	push   %ebp
+c010a405:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c010a407:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a40a:	8b 40 18             	mov    0x18(%eax),%eax
+c010a40d:	8d 50 01             	lea    0x1(%eax),%edx
+c010a410:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a413:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c010a416:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a419:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c010a41c:	5d                   	pop    %ebp
+c010a41d:	c3                   	ret    
+
+c010a41e <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c010a41e:	55                   	push   %ebp
+c010a41f:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c010a421:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a424:	8b 40 18             	mov    0x18(%eax),%eax
+c010a427:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010a42a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a42d:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c010a430:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a433:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c010a436:	5d                   	pop    %ebp
+c010a437:	c3                   	ret    
+
+c010a438 <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c010a438:	55                   	push   %ebp
+c010a439:	89 e5                	mov    %esp,%ebp
+c010a43b:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c010a43e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a442:	74 25                	je     c010a469 <lock_mm+0x31>
+        down(&(mm->mm_sem));
+c010a444:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a447:	83 c0 1c             	add    $0x1c,%eax
+c010a44a:	89 04 24             	mov    %eax,(%esp)
+c010a44d:	e8 50 f7 ff ff       	call   c0109ba2 <down>
+        if (current != NULL) {
+c010a452:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a457:	85 c0                	test   %eax,%eax
+c010a459:	74 0e                	je     c010a469 <lock_mm+0x31>
+            mm->locked_by = current->pid;
+c010a45b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a460:	8b 50 04             	mov    0x4(%eax),%edx
+c010a463:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a466:	89 50 28             	mov    %edx,0x28(%eax)
+        }
+    }
+}
+c010a469:	c9                   	leave  
+c010a46a:	c3                   	ret    
+
+c010a46b <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c010a46b:	55                   	push   %ebp
+c010a46c:	89 e5                	mov    %esp,%ebp
+c010a46e:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c010a471:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a475:	74 18                	je     c010a48f <unlock_mm+0x24>
+        up(&(mm->mm_sem));
+c010a477:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a47a:	83 c0 1c             	add    $0x1c,%eax
+c010a47d:	89 04 24             	mov    %eax,(%esp)
+c010a480:	e8 02 f7 ff ff       	call   c0109b87 <up>
+        mm->locked_by = 0;
+c010a485:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a488:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
+    }
+}
+c010a48f:	c9                   	leave  
+c010a490:	c3                   	ret    
+
+c010a491 <alloc_proc>:
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+c010a491:	55                   	push   %ebp
+c010a492:	89 e5                	mov    %esp,%ebp
+c010a494:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c010a497:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
+c010a49e:	e8 a0 a8 ff ff       	call   c0104d43 <kmalloc>
+c010a4a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (proc != NULL) {
+c010a4a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a4aa:	0f 84 68 01 00 00    	je     c010a618 <alloc_proc+0x187>
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+        proc->state = PROC_UNINIT;
+c010a4b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        proc->pid = -1;
+c010a4b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4bc:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+        proc->runs = 0;
+c010a4c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4c6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        proc->kstack = 0;
+c010a4cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4d0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        proc->need_resched = 0;
+c010a4d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4da:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        proc->parent = NULL;
+c010a4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4e4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        proc->mm = NULL;
+c010a4eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4ee:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+        memset(&(proc->context), 0, sizeof(struct context));
+c010a4f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a4f8:	83 c0 1c             	add    $0x1c,%eax
+c010a4fb:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
+c010a502:	00 
+c010a503:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a50a:	00 
+c010a50b:	89 04 24             	mov    %eax,(%esp)
+c010a50e:	e8 b0 2f 00 00       	call   c010d4c3 <memset>
+        proc->tf = NULL;
+c010a513:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a516:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+        proc->cr3 = boot_cr3;
+c010a51d:	8b 15 ec 54 1c c0    	mov    0xc01c54ec,%edx
+c010a523:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a526:	89 50 40             	mov    %edx,0x40(%eax)
+        proc->flags = 0;
+c010a529:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a52c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+c010a533:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a536:	83 c0 48             	add    $0x48,%eax
+c010a539:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
+c010a540:	00 
+c010a541:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a548:	00 
+c010a549:	89 04 24             	mov    %eax,(%esp)
+c010a54c:	e8 72 2f 00 00       	call   c010d4c3 <memset>
+        proc->wait_state = 0;
+c010a551:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a554:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
+c010a55b:	00 00 00 
+        proc->cptr = proc->yptr = proc->optr = NULL;
+c010a55e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a561:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
+c010a568:	00 00 00 
+c010a56b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a56e:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
+c010a574:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a577:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+c010a57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a580:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
+c010a586:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a589:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+        proc->rq = NULL;
+c010a58f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a592:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
+c010a599:	00 00 00 
+        list_init(&(proc->run_link));
+c010a59c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a59f:	05 a4 00 00 00       	add    $0xa4,%eax
+c010a5a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a5a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a5ad:	89 50 04             	mov    %edx,0x4(%eax)
+c010a5b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5b3:	8b 50 04             	mov    0x4(%eax),%edx
+c010a5b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5b9:	89 10                	mov    %edx,(%eax)
+        proc->time_slice = 0;
+c010a5bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5be:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+c010a5c5:	00 00 00 
+        proc->lab6_run_pool.parent = proc->lab6_run_pool.left = proc->lab6_run_pool.right = NULL;
+c010a5c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5cb:	c7 80 b8 00 00 00 00 	movl   $0x0,0xb8(%eax)
+c010a5d2:	00 00 00 
+c010a5d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5d8:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
+c010a5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5e1:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
+c010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5ea:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
+c010a5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5f3:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
+        proc->lab6_stride = proc->lab6_priority = 0;
+c010a5f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5fc:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
+c010a603:	00 00 00 
+c010a606:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a609:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
+c010a60f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a612:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
+    }
+    return proc;
+c010a618:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010a61b:	c9                   	leave  
+c010a61c:	c3                   	ret    
+
+c010a61d <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+c010a61d:	55                   	push   %ebp
+c010a61e:	89 e5                	mov    %esp,%ebp
+c010a620:	83 ec 18             	sub    $0x18,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c010a623:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a626:	83 c0 48             	add    $0x48,%eax
+c010a629:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
+c010a630:	00 
+c010a631:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a638:	00 
+c010a639:	89 04 24             	mov    %eax,(%esp)
+c010a63c:	e8 82 2e 00 00       	call   c010d4c3 <memset>
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c010a641:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a644:	8d 50 48             	lea    0x48(%eax),%edx
+c010a647:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
+c010a64e:	00 
+c010a64f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a652:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a656:	89 14 24             	mov    %edx,(%esp)
+c010a659:	e8 47 2f 00 00       	call   c010d5a5 <memcpy>
+}
+c010a65e:	c9                   	leave  
+c010a65f:	c3                   	ret    
+
+c010a660 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+c010a660:	55                   	push   %ebp
+c010a661:	89 e5                	mov    %esp,%ebp
+c010a663:	83 ec 18             	sub    $0x18,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c010a666:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
+c010a66d:	00 
+c010a66e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a675:	00 
+c010a676:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
+c010a67d:	e8 41 2e 00 00       	call   c010d4c3 <memset>
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c010a682:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a685:	83 c0 48             	add    $0x48,%eax
+c010a688:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
+c010a68f:	00 
+c010a690:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a694:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
+c010a69b:	e8 05 2f 00 00       	call   c010d5a5 <memcpy>
+}
+c010a6a0:	c9                   	leave  
+c010a6a1:	c3                   	ret    
+
+c010a6a2 <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+c010a6a2:	55                   	push   %ebp
+c010a6a3:	89 e5                	mov    %esp,%ebp
+c010a6a5:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c010a6a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a6ab:	83 c0 7c             	add    $0x7c,%eax
+c010a6ae:	c7 45 fc bc 56 1c c0 	movl   $0xc01c56bc,-0x4(%ebp)
+c010a6b5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c010a6b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a6bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a6be:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010a6c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010a6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a6c7:	8b 40 04             	mov    0x4(%eax),%eax
+c010a6ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a6cd:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010a6d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a6d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010a6d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010a6d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a6dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a6df:	89 10                	mov    %edx,(%eax)
+c010a6e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a6e4:	8b 10                	mov    (%eax),%edx
+c010a6e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a6e9:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010a6ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a6ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a6f2:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010a6f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a6f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010a6fb:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c010a6fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a700:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c010a707:	00 00 00 
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+c010a70a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a70d:	8b 40 14             	mov    0x14(%eax),%eax
+c010a710:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c010a716:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a719:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c010a71f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a722:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010a728:	85 c0                	test   %eax,%eax
+c010a72a:	74 12                	je     c010a73e <set_links+0x9c>
+        proc->optr->yptr = proc;
+c010a72c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a72f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010a735:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a738:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+    }
+    proc->parent->cptr = proc;
+c010a73e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a741:	8b 40 14             	mov    0x14(%eax),%eax
+c010a744:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a747:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    nr_process ++;
+c010a74d:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
+c010a752:	83 c0 01             	add    $0x1,%eax
+c010a755:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
+}
+c010a75a:	c9                   	leave  
+c010a75b:	c3                   	ret    
+
+c010a75c <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+c010a75c:	55                   	push   %ebp
+c010a75d:	89 e5                	mov    %esp,%ebp
+c010a75f:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c010a762:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a765:	83 c0 7c             	add    $0x7c,%eax
+c010a768:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010a76b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a76e:	8b 40 04             	mov    0x4(%eax),%eax
+c010a771:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010a774:	8b 12                	mov    (%edx),%edx
+c010a776:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010a779:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010a77c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010a77f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a782:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010a785:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a788:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010a78b:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL) {
+c010a78d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a790:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010a796:	85 c0                	test   %eax,%eax
+c010a798:	74 18                	je     c010a7b2 <remove_links+0x56>
+        proc->optr->yptr = proc->yptr;
+c010a79a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a79d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010a7a3:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a7a6:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
+c010a7ac:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+    }
+    if (proc->yptr != NULL) {
+c010a7b2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7b5:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010a7bb:	85 c0                	test   %eax,%eax
+c010a7bd:	74 1a                	je     c010a7d9 <remove_links+0x7d>
+        proc->yptr->optr = proc->optr;
+c010a7bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7c2:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010a7c8:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a7cb:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c010a7d1:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c010a7d7:	eb 15                	jmp    c010a7ee <remove_links+0x92>
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+c010a7d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7dc:	8b 40 14             	mov    0x14(%eax),%eax
+c010a7df:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a7e2:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c010a7e8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    }
+    nr_process --;
+c010a7ee:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
+c010a7f3:	83 e8 01             	sub    $0x1,%eax
+c010a7f6:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
+}
+c010a7fb:	c9                   	leave  
+c010a7fc:	c3                   	ret    
+
+c010a7fd <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+c010a7fd:	55                   	push   %ebp
+c010a7fe:	89 e5                	mov    %esp,%ebp
+c010a800:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c010a803:	c7 45 f8 bc 56 1c c0 	movl   $0xc01c56bc,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+c010a80a:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a80f:	83 c0 01             	add    $0x1,%eax
+c010a812:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
+c010a817:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a81c:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c010a821:	7e 0c                	jle    c010a82f <get_pid+0x32>
+        last_pid = 1;
+c010a823:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
+c010a82a:	00 00 00 
+        goto inside;
+c010a82d:	eb 13                	jmp    c010a842 <get_pid+0x45>
+    }
+    if (last_pid >= next_safe) {
+c010a82f:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
+c010a835:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
+c010a83a:	39 c2                	cmp    %eax,%edx
+c010a83c:	0f 8c ac 00 00 00    	jl     c010a8ee <get_pid+0xf1>
+    inside:
+        next_safe = MAX_PID;
+c010a842:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
+c010a849:	20 00 00 
+    repeat:
+        le = list;
+c010a84c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010a84f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list) {
+c010a852:	eb 7f                	jmp    c010a8d3 <get_pid+0xd6>
+            proc = le2proc(le, list_link);
+c010a854:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a857:	83 e8 7c             	sub    $0x7c,%eax
+c010a85a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid) {
+c010a85d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a860:	8b 50 04             	mov    0x4(%eax),%edx
+c010a863:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a868:	39 c2                	cmp    %eax,%edx
+c010a86a:	75 3e                	jne    c010a8aa <get_pid+0xad>
+                if (++ last_pid >= next_safe) {
+c010a86c:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a871:	83 c0 01             	add    $0x1,%eax
+c010a874:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
+c010a879:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
+c010a87f:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
+c010a884:	39 c2                	cmp    %eax,%edx
+c010a886:	7c 4b                	jl     c010a8d3 <get_pid+0xd6>
+                    if (last_pid >= MAX_PID) {
+c010a888:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a88d:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c010a892:	7e 0a                	jle    c010a89e <get_pid+0xa1>
+                        last_pid = 1;
+c010a894:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
+c010a89b:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c010a89e:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
+c010a8a5:	20 00 00 
+                    goto repeat;
+c010a8a8:	eb a2                	jmp    c010a84c <get_pid+0x4f>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+c010a8aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a8ad:	8b 50 04             	mov    0x4(%eax),%edx
+c010a8b0:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+c010a8b5:	39 c2                	cmp    %eax,%edx
+c010a8b7:	7e 1a                	jle    c010a8d3 <get_pid+0xd6>
+c010a8b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a8bc:	8b 50 04             	mov    0x4(%eax),%edx
+c010a8bf:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
+c010a8c4:	39 c2                	cmp    %eax,%edx
+c010a8c6:	7d 0b                	jge    c010a8d3 <get_pid+0xd6>
+                next_safe = proc->pid;
+c010a8c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a8cb:	8b 40 04             	mov    0x4(%eax),%eax
+c010a8ce:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
+c010a8d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a8d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010a8d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a8dc:	8b 40 04             	mov    0x4(%eax),%eax
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+c010a8df:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010a8e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a8e5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c010a8e8:	0f 85 66 ff ff ff    	jne    c010a854 <get_pid+0x57>
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+c010a8ee:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
+}
+c010a8f3:	c9                   	leave  
+c010a8f4:	c3                   	ret    
+
+c010a8f5 <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+c010a8f5:	55                   	push   %ebp
+c010a8f6:	89 e5                	mov    %esp,%ebp
+c010a8f8:	83 ec 28             	sub    $0x28,%esp
+    if (proc != current) {
+c010a8fb:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a900:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010a903:	74 63                	je     c010a968 <proc_run+0x73>
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c010a905:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a90a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a90d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a910:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c010a913:	e8 a2 f9 ff ff       	call   c010a2ba <__intr_save>
+c010a918:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c010a91b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a91e:	a3 48 34 1c c0       	mov    %eax,0xc01c3448
+            load_esp0(next->kstack + KSTACKSIZE);
+c010a923:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a926:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a929:	05 00 20 00 00       	add    $0x2000,%eax
+c010a92e:	89 04 24             	mov    %eax,(%esp)
+c010a931:	e8 34 a7 ff ff       	call   c010506a <load_esp0>
+            lcr3(next->cr3);
+c010a936:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a939:	8b 40 40             	mov    0x40(%eax),%eax
+c010a93c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c010a93f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a942:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c010a945:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a948:	8d 50 1c             	lea    0x1c(%eax),%edx
+c010a94b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a94e:	83 c0 1c             	add    $0x1c,%eax
+c010a951:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a955:	89 04 24             	mov    %eax,(%esp)
+c010a958:	e8 65 16 00 00       	call   c010bfc2 <switch_to>
+        }
+        local_intr_restore(intr_flag);
+c010a95d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a960:	89 04 24             	mov    %eax,(%esp)
+c010a963:	e8 7c f9 ff ff       	call   c010a2e4 <__intr_restore>
+    }
+}
+c010a968:	c9                   	leave  
+c010a969:	c3                   	ret    
+
+c010a96a <forkret>:
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+c010a96a:	55                   	push   %ebp
+c010a96b:	89 e5                	mov    %esp,%ebp
+c010a96d:	83 ec 18             	sub    $0x18,%esp
+    forkrets(current->tf);
+c010a970:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010a975:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a978:	89 04 24             	mov    %eax,(%esp)
+c010a97b:	e8 a0 81 ff ff       	call   c0102b20 <forkrets>
+}
+c010a980:	c9                   	leave  
+c010a981:	c3                   	ret    
+
+c010a982 <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+c010a982:	55                   	push   %ebp
+c010a983:	89 e5                	mov    %esp,%ebp
+c010a985:	53                   	push   %ebx
+c010a986:	83 ec 34             	sub    $0x34,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c010a989:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a98c:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
+c010a992:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a995:	8b 40 04             	mov    0x4(%eax),%eax
+c010a998:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c010a99f:	00 
+c010a9a0:	89 04 24             	mov    %eax,(%esp)
+c010a9a3:	e8 6e 20 00 00       	call   c010ca16 <hash32>
+c010a9a8:	c1 e0 03             	shl    $0x3,%eax
+c010a9ab:	05 60 34 1c c0       	add    $0xc01c3460,%eax
+c010a9b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a9b3:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c010a9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a9b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010a9bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a9bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010a9c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a9c5:	8b 40 04             	mov    0x4(%eax),%eax
+c010a9c8:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010a9cb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010a9ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a9d1:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c010a9d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010a9d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a9da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a9dd:	89 10                	mov    %edx,(%eax)
+c010a9df:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a9e2:	8b 10                	mov    (%eax),%edx
+c010a9e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010a9e7:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010a9ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a9ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010a9f0:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010a9f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a9f6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010a9f9:	89 10                	mov    %edx,(%eax)
+}
+c010a9fb:	83 c4 34             	add    $0x34,%esp
+c010a9fe:	5b                   	pop    %ebx
+c010a9ff:	5d                   	pop    %ebp
+c010aa00:	c3                   	ret    
+
+c010aa01 <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+c010aa01:	55                   	push   %ebp
+c010aa02:	89 e5                	mov    %esp,%ebp
+c010aa04:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c010aa07:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa0a:	05 84 00 00 00       	add    $0x84,%eax
+c010aa0f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010aa12:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010aa15:	8b 40 04             	mov    0x4(%eax),%eax
+c010aa18:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010aa1b:	8b 12                	mov    (%edx),%edx
+c010aa1d:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010aa20:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010aa23:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aa26:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010aa29:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010aa2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa2f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010aa32:	89 10                	mov    %edx,(%eax)
+}
+c010aa34:	c9                   	leave  
+c010aa35:	c3                   	ret    
+
+c010aa36 <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+c010aa36:	55                   	push   %ebp
+c010aa37:	89 e5                	mov    %esp,%ebp
+c010aa39:	83 ec 28             	sub    $0x28,%esp
+    if (0 < pid && pid < MAX_PID) {
+c010aa3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010aa40:	7e 61                	jle    c010aaa3 <find_proc+0x6d>
+c010aa42:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c010aa49:	7f 58                	jg     c010aaa3 <find_proc+0x6d>
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c010aa4b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa4e:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c010aa55:	00 
+c010aa56:	89 04 24             	mov    %eax,(%esp)
+c010aa59:	e8 b8 1f 00 00       	call   c010ca16 <hash32>
+c010aa5e:	c1 e0 03             	shl    $0x3,%eax
+c010aa61:	05 60 34 1c c0       	add    $0xc01c3460,%eax
+c010aa66:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010aa69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aa6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list) {
+c010aa6f:	eb 1b                	jmp    c010aa8c <find_proc+0x56>
+            struct proc_struct *proc = le2proc(le, hash_link);
+c010aa71:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa74:	2d 84 00 00 00       	sub    $0x84,%eax
+c010aa79:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid) {
+c010aa7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa7f:	8b 40 04             	mov    0x4(%eax),%eax
+c010aa82:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010aa85:	75 05                	jne    c010aa8c <find_proc+0x56>
+                return proc;
+c010aa87:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa8a:	eb 1c                	jmp    c010aaa8 <find_proc+0x72>
+c010aa8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010aa92:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010aa95:	8b 40 04             	mov    0x4(%eax),%eax
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+c010aa98:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010aa9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa9e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010aaa1:	75 ce                	jne    c010aa71 <find_proc+0x3b>
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+c010aaa3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aaa8:	c9                   	leave  
+c010aaa9:	c3                   	ret    
+
+c010aaaa <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+c010aaaa:	55                   	push   %ebp
+c010aaab:	89 e5                	mov    %esp,%ebp
+c010aaad:	83 ec 68             	sub    $0x68,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c010aab0:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c010aab7:	00 
+c010aab8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010aabf:	00 
+c010aac0:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c010aac3:	89 04 24             	mov    %eax,(%esp)
+c010aac6:	e8 f8 29 00 00       	call   c010d4c3 <memset>
+    tf.tf_cs = KERNEL_CS;
+c010aacb:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c010aad1:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c010aad7:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c010aadb:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c010aadf:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c010aae3:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c010aae7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aaea:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c010aaed:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aaf0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c010aaf3:	b8 78 a2 10 c0       	mov    $0xc010a278,%eax
+c010aaf8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c010aafb:	8b 45 10             	mov    0x10(%ebp),%eax
+c010aafe:	80 cc 01             	or     $0x1,%ah
+c010ab01:	89 c2                	mov    %eax,%edx
+c010ab03:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c010ab06:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010ab0a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010ab11:	00 
+c010ab12:	89 14 24             	mov    %edx,(%esp)
+c010ab15:	e8 25 03 00 00       	call   c010ae3f <do_fork>
+}
+c010ab1a:	c9                   	leave  
+c010ab1b:	c3                   	ret    
+
+c010ab1c <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+c010ab1c:	55                   	push   %ebp
+c010ab1d:	89 e5                	mov    %esp,%ebp
+c010ab1f:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c010ab22:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c010ab29:	e8 8a a6 ff ff       	call   c01051b8 <alloc_pages>
+c010ab2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c010ab31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ab35:	74 1a                	je     c010ab51 <setup_kstack+0x35>
+        proc->kstack = (uintptr_t)page2kva(page);
+c010ab37:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab3a:	89 04 24             	mov    %eax,(%esp)
+c010ab3d:	e8 24 f8 ff ff       	call   c010a366 <page2kva>
+c010ab42:	89 c2                	mov    %eax,%edx
+c010ab44:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab47:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c010ab4a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010ab4f:	eb 05                	jmp    c010ab56 <setup_kstack+0x3a>
+    }
+    return -E_NO_MEM;
+c010ab51:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c010ab56:	c9                   	leave  
+c010ab57:	c3                   	ret    
+
+c010ab58 <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+c010ab58:	55                   	push   %ebp
+c010ab59:	89 e5                	mov    %esp,%ebp
+c010ab5b:	83 ec 18             	sub    $0x18,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c010ab5e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab61:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ab64:	89 04 24             	mov    %eax,(%esp)
+c010ab67:	e8 4e f8 ff ff       	call   c010a3ba <kva2page>
+c010ab6c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c010ab73:	00 
+c010ab74:	89 04 24             	mov    %eax,(%esp)
+c010ab77:	e8 a7 a6 ff ff       	call   c0105223 <free_pages>
+}
+c010ab7c:	c9                   	leave  
+c010ab7d:	c3                   	ret    
+
+c010ab7e <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+c010ab7e:	55                   	push   %ebp
+c010ab7f:	89 e5                	mov    %esp,%ebp
+c010ab81:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+c010ab84:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010ab8b:	e8 28 a6 ff ff       	call   c01051b8 <alloc_pages>
+c010ab90:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ab93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ab97:	75 0a                	jne    c010aba3 <setup_pgdir+0x25>
+        return -E_NO_MEM;
+c010ab99:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c010ab9e:	e9 80 00 00 00       	jmp    c010ac23 <setup_pgdir+0xa5>
+    }
+    pde_t *pgdir = page2kva(page);
+c010aba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aba6:	89 04 24             	mov    %eax,(%esp)
+c010aba9:	e8 b8 f7 ff ff       	call   c010a366 <page2kva>
+c010abae:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c010abb1:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
+c010abb6:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c010abbd:	00 
+c010abbe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010abc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010abc5:	89 04 24             	mov    %eax,(%esp)
+c010abc8:	e8 d8 29 00 00       	call   c010d5a5 <memcpy>
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c010abcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010abd0:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c010abd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010abd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010abdc:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c010abe3:	77 23                	ja     c010ac08 <setup_pgdir+0x8a>
+c010abe5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010abe8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010abec:	c7 44 24 08 f0 fa 10 	movl   $0xc010faf0,0x8(%esp)
+c010abf3:	c0 
+c010abf4:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
+c010abfb:	00 
+c010abfc:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010ac03:	e8 b9 61 ff ff       	call   c0100dc1 <__panic>
+c010ac08:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ac0b:	05 00 00 00 40       	add    $0x40000000,%eax
+c010ac10:	83 c8 03             	or     $0x3,%eax
+c010ac13:	89 02                	mov    %eax,(%edx)
+    mm->pgdir = pgdir;
+c010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac18:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010ac1b:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c010ac1e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ac23:	c9                   	leave  
+c010ac24:	c3                   	ret    
+
+c010ac25 <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+c010ac25:	55                   	push   %ebp
+c010ac26:	89 e5                	mov    %esp,%ebp
+c010ac28:	83 ec 18             	sub    $0x18,%esp
+    free_page(kva2page(mm->pgdir));
+c010ac2b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac2e:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ac31:	89 04 24             	mov    %eax,(%esp)
+c010ac34:	e8 81 f7 ff ff       	call   c010a3ba <kva2page>
+c010ac39:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010ac40:	00 
+c010ac41:	89 04 24             	mov    %eax,(%esp)
+c010ac44:	e8 da a5 ff ff       	call   c0105223 <free_pages>
+}
+c010ac49:	c9                   	leave  
+c010ac4a:	c3                   	ret    
+
+c010ac4b <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+c010ac4b:	55                   	push   %ebp
+c010ac4c:	89 e5                	mov    %esp,%ebp
+c010ac4e:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c010ac51:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010ac56:	8b 40 18             	mov    0x18(%eax),%eax
+c010ac59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+c010ac5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010ac60:	75 0a                	jne    c010ac6c <copy_mm+0x21>
+        return 0;
+c010ac62:	b8 00 00 00 00       	mov    $0x0,%eax
+c010ac67:	e9 f9 00 00 00       	jmp    c010ad65 <copy_mm+0x11a>
+    }
+    if (clone_flags & CLONE_VM) {
+c010ac6c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac6f:	25 00 01 00 00       	and    $0x100,%eax
+c010ac74:	85 c0                	test   %eax,%eax
+c010ac76:	74 08                	je     c010ac80 <copy_mm+0x35>
+        mm = oldmm;
+c010ac78:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ac7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c010ac7e:	eb 78                	jmp    c010acf8 <copy_mm+0xad>
+    }
+
+    int ret = -E_NO_MEM;
+c010ac80:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL) {
+c010ac87:	e8 7b d3 ff ff       	call   c0108007 <mm_create>
+c010ac8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ac8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ac93:	75 05                	jne    c010ac9a <copy_mm+0x4f>
+        goto bad_mm;
+c010ac95:	e9 c8 00 00 00       	jmp    c010ad62 <copy_mm+0x117>
+    }
+    if (setup_pgdir(mm) != 0) {
+c010ac9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac9d:	89 04 24             	mov    %eax,(%esp)
+c010aca0:	e8 d9 fe ff ff       	call   c010ab7e <setup_pgdir>
+c010aca5:	85 c0                	test   %eax,%eax
+c010aca7:	74 05                	je     c010acae <copy_mm+0x63>
+        goto bad_pgdir_cleanup_mm;
+c010aca9:	e9 a9 00 00 00       	jmp    c010ad57 <copy_mm+0x10c>
+    }
+
+    lock_mm(oldmm);
+c010acae:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010acb1:	89 04 24             	mov    %eax,(%esp)
+c010acb4:	e8 7f f7 ff ff       	call   c010a438 <lock_mm>
+    {
+        ret = dup_mmap(mm, oldmm);
+c010acb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010acbc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010acc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acc3:	89 04 24             	mov    %eax,(%esp)
+c010acc6:	e8 5f d8 ff ff       	call   c010852a <dup_mmap>
+c010accb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c010acce:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010acd1:	89 04 24             	mov    %eax,(%esp)
+c010acd4:	e8 92 f7 ff ff       	call   c010a46b <unlock_mm>
+
+    if (ret != 0) {
+c010acd9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010acdd:	74 19                	je     c010acf8 <copy_mm+0xad>
+        goto bad_dup_cleanup_mmap;
+c010acdf:	90                   	nop
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c010ace0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ace3:	89 04 24             	mov    %eax,(%esp)
+c010ace6:	e8 40 d9 ff ff       	call   c010862b <exit_mmap>
+    put_pgdir(mm);
+c010aceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acee:	89 04 24             	mov    %eax,(%esp)
+c010acf1:	e8 2f ff ff ff       	call   c010ac25 <put_pgdir>
+c010acf6:	eb 5f                	jmp    c010ad57 <copy_mm+0x10c>
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+c010acf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acfb:	89 04 24             	mov    %eax,(%esp)
+c010acfe:	e8 01 f7 ff ff       	call   c010a404 <mm_count_inc>
+    proc->mm = mm;
+c010ad03:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ad06:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010ad09:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c010ad0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ad0f:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ad12:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ad15:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c010ad1c:	77 23                	ja     c010ad41 <copy_mm+0xf6>
+c010ad1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad21:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010ad25:	c7 44 24 08 f0 fa 10 	movl   $0xc010faf0,0x8(%esp)
+c010ad2c:	c0 
+c010ad2d:	c7 44 24 04 6c 01 00 	movl   $0x16c,0x4(%esp)
+c010ad34:	00 
+c010ad35:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010ad3c:	e8 80 60 ff ff       	call   c0100dc1 <__panic>
+c010ad41:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad44:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c010ad4a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ad4d:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c010ad50:	b8 00 00 00 00       	mov    $0x0,%eax
+c010ad55:	eb 0e                	jmp    c010ad65 <copy_mm+0x11a>
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010ad57:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ad5a:	89 04 24             	mov    %eax,(%esp)
+c010ad5d:	e8 0a d6 ff ff       	call   c010836c <mm_destroy>
+bad_mm:
+    return ret;
+c010ad62:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c010ad65:	c9                   	leave  
+c010ad66:	c3                   	ret    
+
+c010ad67 <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+c010ad67:	55                   	push   %ebp
+c010ad68:	89 e5                	mov    %esp,%ebp
+c010ad6a:	57                   	push   %edi
+c010ad6b:	56                   	push   %esi
+c010ad6c:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c010ad6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad70:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ad73:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c010ad78:	89 c2                	mov    %eax,%edx
+c010ad7a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad7d:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c010ad80:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad83:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ad86:	8b 55 10             	mov    0x10(%ebp),%edx
+c010ad89:	bb 4c 00 00 00       	mov    $0x4c,%ebx
+c010ad8e:	89 c1                	mov    %eax,%ecx
+c010ad90:	83 e1 01             	and    $0x1,%ecx
+c010ad93:	85 c9                	test   %ecx,%ecx
+c010ad95:	74 0e                	je     c010ada5 <copy_thread+0x3e>
+c010ad97:	0f b6 0a             	movzbl (%edx),%ecx
+c010ad9a:	88 08                	mov    %cl,(%eax)
+c010ad9c:	83 c0 01             	add    $0x1,%eax
+c010ad9f:	83 c2 01             	add    $0x1,%edx
+c010ada2:	83 eb 01             	sub    $0x1,%ebx
+c010ada5:	89 c1                	mov    %eax,%ecx
+c010ada7:	83 e1 02             	and    $0x2,%ecx
+c010adaa:	85 c9                	test   %ecx,%ecx
+c010adac:	74 0f                	je     c010adbd <copy_thread+0x56>
+c010adae:	0f b7 0a             	movzwl (%edx),%ecx
+c010adb1:	66 89 08             	mov    %cx,(%eax)
+c010adb4:	83 c0 02             	add    $0x2,%eax
+c010adb7:	83 c2 02             	add    $0x2,%edx
+c010adba:	83 eb 02             	sub    $0x2,%ebx
+c010adbd:	89 d9                	mov    %ebx,%ecx
+c010adbf:	c1 e9 02             	shr    $0x2,%ecx
+c010adc2:	89 c7                	mov    %eax,%edi
+c010adc4:	89 d6                	mov    %edx,%esi
+c010adc6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010adc8:	89 f2                	mov    %esi,%edx
+c010adca:	89 f8                	mov    %edi,%eax
+c010adcc:	b9 00 00 00 00       	mov    $0x0,%ecx
+c010add1:	89 de                	mov    %ebx,%esi
+c010add3:	83 e6 02             	and    $0x2,%esi
+c010add6:	85 f6                	test   %esi,%esi
+c010add8:	74 0b                	je     c010ade5 <copy_thread+0x7e>
+c010adda:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
+c010adde:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
+c010ade2:	83 c1 02             	add    $0x2,%ecx
+c010ade5:	83 e3 01             	and    $0x1,%ebx
+c010ade8:	85 db                	test   %ebx,%ebx
+c010adea:	74 07                	je     c010adf3 <copy_thread+0x8c>
+c010adec:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
+c010adf0:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+    proc->tf->tf_regs.reg_eax = 0;
+c010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010adf6:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010adf9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c010ae00:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae03:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ae06:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010ae09:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c010ae0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae0f:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ae12:	8b 55 08             	mov    0x8(%ebp),%edx
+c010ae15:	8b 52 3c             	mov    0x3c(%edx),%edx
+c010ae18:	8b 52 40             	mov    0x40(%edx),%edx
+c010ae1b:	80 ce 02             	or     $0x2,%dh
+c010ae1e:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c010ae21:	ba 6a a9 10 c0       	mov    $0xc010a96a,%edx
+c010ae26:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae29:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c010ae2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae2f:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ae32:	89 c2                	mov    %eax,%edx
+c010ae34:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae37:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c010ae3a:	5b                   	pop    %ebx
+c010ae3b:	5e                   	pop    %esi
+c010ae3c:	5f                   	pop    %edi
+c010ae3d:	5d                   	pop    %ebp
+c010ae3e:	c3                   	ret    
+
+c010ae3f <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+c010ae3f:	55                   	push   %ebp
+c010ae40:	89 e5                	mov    %esp,%ebp
+c010ae42:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_NO_FREE_PROC;
+c010ae45:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+c010ae4c:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
+c010ae51:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c010ae56:	7e 05                	jle    c010ae5d <do_fork+0x1e>
+        goto fork_out;
+c010ae58:	e9 f3 00 00 00       	jmp    c010af50 <do_fork+0x111>
+    }
+    ret = -E_NO_MEM;
+c010ae5d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+c010ae64:	e8 28 f6 ff ff       	call   c010a491 <alloc_proc>
+c010ae69:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ae6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ae70:	75 05                	jne    c010ae77 <do_fork+0x38>
+c010ae72:	e9 d9 00 00 00       	jmp    c010af50 <do_fork+0x111>
+    assert(current->wait_state == 0);
+c010ae77:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010ae7c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010ae82:	85 c0                	test   %eax,%eax
+c010ae84:	74 24                	je     c010aeaa <do_fork+0x6b>
+c010ae86:	c7 44 24 0c 28 fb 10 	movl   $0xc010fb28,0xc(%esp)
+c010ae8d:	c0 
+c010ae8e:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010ae95:	c0 
+c010ae96:	c7 44 24 04 a6 01 00 	movl   $0x1a6,0x4(%esp)
+c010ae9d:	00 
+c010ae9e:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010aea5:	e8 17 5f ff ff       	call   c0100dc1 <__panic>
+    proc->parent = current;
+c010aeaa:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
+c010aeb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aeb3:	89 50 14             	mov    %edx,0x14(%eax)
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+c010aeb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aeb9:	89 04 24             	mov    %eax,(%esp)
+c010aebc:	e8 5b fc ff ff       	call   c010ab1c <setup_kstack>
+c010aec1:	85 c0                	test   %eax,%eax
+c010aec3:	74 05                	je     c010aeca <do_fork+0x8b>
+c010aec5:	e9 8b 00 00 00       	jmp    c010af55 <do_fork+0x116>
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+c010aeca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aecd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010aed1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010aed8:	e8 6e fd ff ff       	call   c010ac4b <copy_mm>
+c010aedd:	85 c0                	test   %eax,%eax
+c010aedf:	74 0e                	je     c010aeef <do_fork+0xb0>
+c010aee1:	90                   	nop
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c010aee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aee5:	89 04 24             	mov    %eax,(%esp)
+c010aee8:	e8 6b fc ff ff       	call   c010ab58 <put_kstack>
+c010aeed:	eb 66                	jmp    c010af55 <do_fork+0x116>
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+    //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
+c010aeef:	8b 45 10             	mov    0x10(%ebp),%eax
+c010aef2:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010aef6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aef9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010aefd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af00:	89 04 24             	mov    %eax,(%esp)
+c010af03:	e8 5f fe ff ff       	call   c010ad67 <copy_thread>
+    //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010af08:	e8 ad f3 ff ff       	call   c010a2ba <__intr_save>
+c010af0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        proc->pid = get_pid();
+c010af10:	e8 e8 f8 ff ff       	call   c010a7fd <get_pid>
+c010af15:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010af18:	89 42 04             	mov    %eax,0x4(%edx)
+        hash_proc(proc);
+c010af1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af1e:	89 04 24             	mov    %eax,(%esp)
+c010af21:	e8 5c fa ff ff       	call   c010a982 <hash_proc>
+        set_links(proc);
+c010af26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af29:	89 04 24             	mov    %eax,(%esp)
+c010af2c:	e8 71 f7 ff ff       	call   c010a6a2 <set_links>
+    }
+    local_intr_restore(intr_flag);
+c010af31:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010af34:	89 04 24             	mov    %eax,(%esp)
+c010af37:	e8 a8 f3 ff ff       	call   c010a2e4 <__intr_restore>
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
+c010af3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af3f:	89 04 24             	mov    %eax,(%esp)
+c010af42:	e8 27 14 00 00       	call   c010c36e <wakeup_proc>
+    //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
+c010af47:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af4a:	8b 40 04             	mov    0x4(%eax),%eax
+c010af4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+c010af50:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010af53:	eb 0d                	jmp    c010af62 <do_fork+0x123>
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+c010af55:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af58:	89 04 24             	mov    %eax,(%esp)
+c010af5b:	e8 fe 9d ff ff       	call   c0104d5e <kfree>
+    goto fork_out;
+c010af60:	eb ee                	jmp    c010af50 <do_fork+0x111>
+}
+c010af62:	c9                   	leave  
+c010af63:	c3                   	ret    
+
+c010af64 <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+c010af64:	55                   	push   %ebp
+c010af65:	89 e5                	mov    %esp,%ebp
+c010af67:	83 ec 28             	sub    $0x28,%esp
+    if (current == idleproc) {
+c010af6a:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
+c010af70:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010af75:	39 c2                	cmp    %eax,%edx
+c010af77:	75 1c                	jne    c010af95 <do_exit+0x31>
+        panic("idleproc exit.\n");
+c010af79:	c7 44 24 08 56 fb 10 	movl   $0xc010fb56,0x8(%esp)
+c010af80:	c0 
+c010af81:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
+c010af88:	00 
+c010af89:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010af90:	e8 2c 5e ff ff       	call   c0100dc1 <__panic>
+    }
+    if (current == initproc) {
+c010af95:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
+c010af9b:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010afa0:	39 c2                	cmp    %eax,%edx
+c010afa2:	75 1c                	jne    c010afc0 <do_exit+0x5c>
+        panic("initproc exit.\n");
+c010afa4:	c7 44 24 08 66 fb 10 	movl   $0xc010fb66,0x8(%esp)
+c010afab:	c0 
+c010afac:	c7 44 24 04 d8 01 00 	movl   $0x1d8,0x4(%esp)
+c010afb3:	00 
+c010afb4:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010afbb:	e8 01 5e ff ff       	call   c0100dc1 <__panic>
+    }
+    
+    struct mm_struct *mm = current->mm;
+c010afc0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010afc5:	8b 40 18             	mov    0x18(%eax),%eax
+c010afc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL) {
+c010afcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010afcf:	74 4a                	je     c010b01b <do_exit+0xb7>
+        lcr3(boot_cr3);
+c010afd1:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
+c010afd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010afd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010afdc:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010afdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010afe2:	89 04 24             	mov    %eax,(%esp)
+c010afe5:	e8 34 f4 ff ff       	call   c010a41e <mm_count_dec>
+c010afea:	85 c0                	test   %eax,%eax
+c010afec:	75 21                	jne    c010b00f <do_exit+0xab>
+            exit_mmap(mm);
+c010afee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aff1:	89 04 24             	mov    %eax,(%esp)
+c010aff4:	e8 32 d6 ff ff       	call   c010862b <exit_mmap>
+            put_pgdir(mm);
+c010aff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010affc:	89 04 24             	mov    %eax,(%esp)
+c010afff:	e8 21 fc ff ff       	call   c010ac25 <put_pgdir>
+            mm_destroy(mm);
+c010b004:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b007:	89 04 24             	mov    %eax,(%esp)
+c010b00a:	e8 5d d3 ff ff       	call   c010836c <mm_destroy>
+        }
+        current->mm = NULL;
+c010b00f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b014:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c010b01b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b020:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c010b026:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b02b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b02e:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c010b034:	e8 81 f2 ff ff       	call   c010a2ba <__intr_save>
+c010b039:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010b03c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b041:	8b 40 14             	mov    0x14(%eax),%eax
+c010b044:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD) {
+c010b047:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b04a:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010b050:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010b055:	75 10                	jne    c010b067 <do_exit+0x103>
+            wakeup_proc(proc);
+c010b057:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b05a:	89 04 24             	mov    %eax,(%esp)
+c010b05d:	e8 0c 13 00 00       	call   c010c36e <wakeup_proc>
+        }
+        while (current->cptr != NULL) {
+c010b062:	e9 ac 00 00 00       	jmp    c010b113 <do_exit+0x1af>
+c010b067:	e9 a7 00 00 00       	jmp    c010b113 <do_exit+0x1af>
+            proc = current->cptr;
+c010b06c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b071:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010b077:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c010b07a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b07f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b082:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c010b088:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    
+            proc->yptr = NULL;
+c010b08e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b091:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c010b098:	00 00 00 
+            if ((proc->optr = initproc->cptr) != NULL) {
+c010b09b:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010b0a0:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c010b0a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b0a9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c010b0af:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b0b2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010b0b8:	85 c0                	test   %eax,%eax
+c010b0ba:	74 14                	je     c010b0d0 <do_exit+0x16c>
+                initproc->cptr->yptr = proc;
+c010b0bc:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010b0c1:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010b0c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b0ca:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+            }
+            proc->parent = initproc;
+c010b0d0:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
+c010b0d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b0d9:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c010b0dc:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010b0e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b0e4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+            if (proc->state == PROC_ZOMBIE) {
+c010b0ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b0ed:	8b 00                	mov    (%eax),%eax
+c010b0ef:	83 f8 03             	cmp    $0x3,%eax
+c010b0f2:	75 1f                	jne    c010b113 <do_exit+0x1af>
+                if (initproc->wait_state == WT_CHILD) {
+c010b0f4:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010b0f9:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010b0ff:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010b104:	75 0d                	jne    c010b113 <do_exit+0x1af>
+                    wakeup_proc(initproc);
+c010b106:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010b10b:	89 04 24             	mov    %eax,(%esp)
+c010b10e:	e8 5b 12 00 00       	call   c010c36e <wakeup_proc>
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+c010b113:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b118:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010b11e:	85 c0                	test   %eax,%eax
+c010b120:	0f 85 46 ff ff ff    	jne    c010b06c <do_exit+0x108>
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b126:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b129:	89 04 24             	mov    %eax,(%esp)
+c010b12c:	e8 b3 f1 ff ff       	call   c010a2e4 <__intr_restore>
+    
+    schedule();
+c010b131:	e8 d4 12 00 00       	call   c010c40a <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c010b136:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b13b:	8b 40 04             	mov    0x4(%eax),%eax
+c010b13e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b142:	c7 44 24 08 78 fb 10 	movl   $0xc010fb78,0x8(%esp)
+c010b149:	c0 
+c010b14a:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
+c010b151:	00 
+c010b152:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b159:	e8 63 5c ff ff       	call   c0100dc1 <__panic>
+
+c010b15e <load_icode>:
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+c010b15e:	55                   	push   %ebp
+c010b15f:	89 e5                	mov    %esp,%ebp
+c010b161:	83 ec 78             	sub    $0x78,%esp
+    if (current->mm != NULL) {
+c010b164:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b169:	8b 40 18             	mov    0x18(%eax),%eax
+c010b16c:	85 c0                	test   %eax,%eax
+c010b16e:	74 1c                	je     c010b18c <load_icode+0x2e>
+        panic("load_icode: current->mm must be empty.\n");
+c010b170:	c7 44 24 08 98 fb 10 	movl   $0xc010fb98,0x8(%esp)
+c010b177:	c0 
+c010b178:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
+c010b17f:	00 
+c010b180:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b187:	e8 35 5c ff ff       	call   c0100dc1 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010b18c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+c010b193:	e8 6f ce ff ff       	call   c0108007 <mm_create>
+c010b198:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010b19b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010b19f:	75 06                	jne    c010b1a7 <load_icode+0x49>
+        goto bad_mm;
+c010b1a1:	90                   	nop
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+c010b1a2:	e9 ef 05 00 00       	jmp    c010b796 <load_icode+0x638>
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+c010b1a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b1aa:	89 04 24             	mov    %eax,(%esp)
+c010b1ad:	e8 cc f9 ff ff       	call   c010ab7e <setup_pgdir>
+c010b1b2:	85 c0                	test   %eax,%eax
+c010b1b4:	74 05                	je     c010b1bb <load_icode+0x5d>
+        goto bad_pgdir_cleanup_mm;
+c010b1b6:	e9 f6 05 00 00       	jmp    c010b7b1 <load_icode+0x653>
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c010b1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1be:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c010b1c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b1c4:	8b 50 1c             	mov    0x1c(%eax),%edx
+c010b1c7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1ca:	01 d0                	add    %edx,%eax
+c010b1cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+c010b1cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b1d2:	8b 00                	mov    (%eax),%eax
+c010b1d4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c010b1d9:	74 0c                	je     c010b1e7 <load_icode+0x89>
+        ret = -E_INVAL_ELF;
+c010b1db:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c010b1e2:	e9 bf 05 00 00       	jmp    c010b7a6 <load_icode+0x648>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c010b1e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b1ea:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c010b1ee:	0f b7 c0             	movzwl %ax,%eax
+c010b1f1:	c1 e0 05             	shl    $0x5,%eax
+c010b1f4:	89 c2                	mov    %eax,%edx
+c010b1f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b1f9:	01 d0                	add    %edx,%eax
+c010b1fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph ++) {
+c010b1fe:	e9 13 03 00 00       	jmp    c010b516 <load_icode+0x3b8>
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+c010b203:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b206:	8b 00                	mov    (%eax),%eax
+c010b208:	83 f8 01             	cmp    $0x1,%eax
+c010b20b:	74 05                	je     c010b212 <load_icode+0xb4>
+            continue ;
+c010b20d:	e9 00 03 00 00       	jmp    c010b512 <load_icode+0x3b4>
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+c010b212:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b215:	8b 50 10             	mov    0x10(%eax),%edx
+c010b218:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b21b:	8b 40 14             	mov    0x14(%eax),%eax
+c010b21e:	39 c2                	cmp    %eax,%edx
+c010b220:	76 0c                	jbe    c010b22e <load_icode+0xd0>
+            ret = -E_INVAL_ELF;
+c010b222:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010b229:	e9 6d 05 00 00       	jmp    c010b79b <load_icode+0x63d>
+        }
+        if (ph->p_filesz == 0) {
+c010b22e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b231:	8b 40 10             	mov    0x10(%eax),%eax
+c010b234:	85 c0                	test   %eax,%eax
+c010b236:	75 05                	jne    c010b23d <load_icode+0xdf>
+            continue ;
+c010b238:	e9 d5 02 00 00       	jmp    c010b512 <load_icode+0x3b4>
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010b23d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010b244:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+c010b24b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b24e:	8b 40 18             	mov    0x18(%eax),%eax
+c010b251:	83 e0 01             	and    $0x1,%eax
+c010b254:	85 c0                	test   %eax,%eax
+c010b256:	74 04                	je     c010b25c <load_icode+0xfe>
+c010b258:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+c010b25c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b25f:	8b 40 18             	mov    0x18(%eax),%eax
+c010b262:	83 e0 02             	and    $0x2,%eax
+c010b265:	85 c0                	test   %eax,%eax
+c010b267:	74 04                	je     c010b26d <load_icode+0x10f>
+c010b269:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+c010b26d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b270:	8b 40 18             	mov    0x18(%eax),%eax
+c010b273:	83 e0 04             	and    $0x4,%eax
+c010b276:	85 c0                	test   %eax,%eax
+c010b278:	74 04                	je     c010b27e <load_icode+0x120>
+c010b27a:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+c010b27e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b281:	83 e0 02             	and    $0x2,%eax
+c010b284:	85 c0                	test   %eax,%eax
+c010b286:	74 04                	je     c010b28c <load_icode+0x12e>
+c010b288:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+c010b28c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b28f:	8b 50 14             	mov    0x14(%eax),%edx
+c010b292:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b295:	8b 40 08             	mov    0x8(%eax),%eax
+c010b298:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010b29f:	00 
+c010b2a0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c010b2a3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010b2a7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b2ab:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b2af:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b2b2:	89 04 24             	mov    %eax,(%esp)
+c010b2b5:	e8 54 d1 ff ff       	call   c010840e <mm_map>
+c010b2ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b2bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b2c1:	74 05                	je     c010b2c8 <load_icode+0x16a>
+            goto bad_cleanup_mmap;
+c010b2c3:	e9 d3 04 00 00       	jmp    c010b79b <load_icode+0x63d>
+        }
+        unsigned char *from = binary + ph->p_offset;
+c010b2c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b2cb:	8b 50 04             	mov    0x4(%eax),%edx
+c010b2ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b2d1:	01 d0                	add    %edx,%eax
+c010b2d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c010b2d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b2d9:	8b 40 08             	mov    0x8(%eax),%eax
+c010b2dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010b2df:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b2e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010b2e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010b2e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010b2ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c010b2f0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c010b2f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b2fa:	8b 50 08             	mov    0x8(%eax),%edx
+c010b2fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b300:	8b 40 10             	mov    0x10(%eax),%eax
+c010b303:	01 d0                	add    %edx,%eax
+c010b305:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010b308:	e9 90 00 00 00       	jmp    c010b39d <load_icode+0x23f>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010b30d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b310:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b313:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b316:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b31a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b31d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b321:	89 04 24             	mov    %eax,(%esp)
+c010b324:	e8 5d ad ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b329:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b32c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b330:	75 05                	jne    c010b337 <load_icode+0x1d9>
+                goto bad_cleanup_mmap;
+c010b332:	e9 64 04 00 00       	jmp    c010b79b <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010b337:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b33a:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010b33d:	29 c2                	sub    %eax,%edx
+c010b33f:	89 d0                	mov    %edx,%eax
+c010b341:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010b344:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010b349:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010b34c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010b34f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010b356:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010b359:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b35c:	73 0d                	jae    c010b36b <load_icode+0x20d>
+                size -= la - end;
+c010b35e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b361:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010b364:	29 c2                	sub    %eax,%edx
+c010b366:	89 d0                	mov    %edx,%eax
+c010b368:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c010b36b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b36e:	89 04 24             	mov    %eax,(%esp)
+c010b371:	e8 f0 ef ff ff       	call   c010a366 <page2kva>
+c010b376:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010b379:	01 c2                	add    %eax,%edx
+c010b37b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b37e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b382:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b385:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b389:	89 14 24             	mov    %edx,(%esp)
+c010b38c:	e8 14 22 00 00       	call   c010d5a5 <memcpy>
+            start += size, from += size;
+c010b391:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b394:	01 45 d8             	add    %eax,-0x28(%ebp)
+c010b397:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b39a:	01 45 e0             	add    %eax,-0x20(%ebp)
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010b39d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b3a0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010b3a3:	0f 82 64 ff ff ff    	jb     c010b30d <load_icode+0x1af>
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c010b3a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b3ac:	8b 50 08             	mov    0x8(%eax),%edx
+c010b3af:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b3b2:	8b 40 14             	mov    0x14(%eax),%eax
+c010b3b5:	01 d0                	add    %edx,%eax
+c010b3b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        if (start < la) {
+c010b3ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b3bd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b3c0:	0f 83 b0 00 00 00    	jae    c010b476 <load_icode+0x318>
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+c010b3c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b3c9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010b3cc:	75 05                	jne    c010b3d3 <load_icode+0x275>
+                continue ;
+c010b3ce:	e9 3f 01 00 00       	jmp    c010b512 <load_icode+0x3b4>
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c010b3d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b3d6:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010b3d9:	29 c2                	sub    %eax,%edx
+c010b3db:	89 d0                	mov    %edx,%eax
+c010b3dd:	05 00 10 00 00       	add    $0x1000,%eax
+c010b3e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010b3e5:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010b3ea:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010b3ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la) {
+c010b3f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010b3f3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b3f6:	73 0d                	jae    c010b405 <load_icode+0x2a7>
+                size -= la - end;
+c010b3f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b3fb:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010b3fe:	29 c2                	sub    %eax,%edx
+c010b400:	89 d0                	mov    %edx,%eax
+c010b402:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010b405:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b408:	89 04 24             	mov    %eax,(%esp)
+c010b40b:	e8 56 ef ff ff       	call   c010a366 <page2kva>
+c010b410:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010b413:	01 c2                	add    %eax,%edx
+c010b415:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b418:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b41c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010b423:	00 
+c010b424:	89 14 24             	mov    %edx,(%esp)
+c010b427:	e8 97 20 00 00       	call   c010d4c3 <memset>
+            start += size;
+c010b42c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b42f:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c010b432:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010b435:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b438:	73 08                	jae    c010b442 <load_icode+0x2e4>
+c010b43a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b43d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010b440:	74 34                	je     c010b476 <load_icode+0x318>
+c010b442:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010b445:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b448:	72 08                	jb     c010b452 <load_icode+0x2f4>
+c010b44a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b44d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b450:	74 24                	je     c010b476 <load_icode+0x318>
+c010b452:	c7 44 24 0c c0 fb 10 	movl   $0xc010fbc0,0xc(%esp)
+c010b459:	c0 
+c010b45a:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010b461:	c0 
+c010b462:	c7 44 24 04 60 02 00 	movl   $0x260,0x4(%esp)
+c010b469:	00 
+c010b46a:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b471:	e8 4b 59 ff ff       	call   c0100dc1 <__panic>
+        }
+        while (start < end) {
+c010b476:	e9 8b 00 00 00       	jmp    c010b506 <load_icode+0x3a8>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010b47b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b47e:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b481:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b484:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b488:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b48b:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b48f:	89 04 24             	mov    %eax,(%esp)
+c010b492:	e8 ef ab ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b497:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b49a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b49e:	75 05                	jne    c010b4a5 <load_icode+0x347>
+                goto bad_cleanup_mmap;
+c010b4a0:	e9 f6 02 00 00       	jmp    c010b79b <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010b4a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b4a8:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010b4ab:	29 c2                	sub    %eax,%edx
+c010b4ad:	89 d0                	mov    %edx,%eax
+c010b4af:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010b4b2:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010b4b7:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010b4ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010b4bd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010b4c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010b4c7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010b4ca:	73 0d                	jae    c010b4d9 <load_icode+0x37b>
+                size -= la - end;
+c010b4cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b4cf:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010b4d2:	29 c2                	sub    %eax,%edx
+c010b4d4:	89 d0                	mov    %edx,%eax
+c010b4d6:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010b4d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b4dc:	89 04 24             	mov    %eax,(%esp)
+c010b4df:	e8 82 ee ff ff       	call   c010a366 <page2kva>
+c010b4e4:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010b4e7:	01 c2                	add    %eax,%edx
+c010b4e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b4ec:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b4f0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010b4f7:	00 
+c010b4f8:	89 14 24             	mov    %edx,(%esp)
+c010b4fb:	e8 c3 1f 00 00       	call   c010d4c3 <memset>
+            start += size;
+c010b500:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b503:	01 45 d8             	add    %eax,-0x28(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+c010b506:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b509:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010b50c:	0f 82 69 ff ff ff    	jb     c010b47b <load_icode+0x31d>
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+c010b512:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c010b516:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b519:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010b51c:	0f 82 e1 fc ff ff    	jb     c010b203 <load_icode+0xa5>
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c010b522:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+c010b529:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010b530:	00 
+c010b531:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b534:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b538:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
+c010b53f:	00 
+c010b540:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
+c010b547:	af 
+c010b548:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b54b:	89 04 24             	mov    %eax,(%esp)
+c010b54e:	e8 bb ce ff ff       	call   c010840e <mm_map>
+c010b553:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b556:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b55a:	74 05                	je     c010b561 <load_icode+0x403>
+        goto bad_cleanup_mmap;
+c010b55c:	e9 3a 02 00 00       	jmp    c010b79b <load_icode+0x63d>
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+c010b561:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b564:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b567:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010b56e:	00 
+c010b56f:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
+c010b576:	af 
+c010b577:	89 04 24             	mov    %eax,(%esp)
+c010b57a:	e8 07 ab ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b57f:	85 c0                	test   %eax,%eax
+c010b581:	75 24                	jne    c010b5a7 <load_icode+0x449>
+c010b583:	c7 44 24 0c fc fb 10 	movl   $0xc010fbfc,0xc(%esp)
+c010b58a:	c0 
+c010b58b:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010b592:	c0 
+c010b593:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
+c010b59a:	00 
+c010b59b:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b5a2:	e8 1a 58 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+c010b5a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b5aa:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b5ad:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010b5b4:	00 
+c010b5b5:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
+c010b5bc:	af 
+c010b5bd:	89 04 24             	mov    %eax,(%esp)
+c010b5c0:	e8 c1 aa ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b5c5:	85 c0                	test   %eax,%eax
+c010b5c7:	75 24                	jne    c010b5ed <load_icode+0x48f>
+c010b5c9:	c7 44 24 0c 40 fc 10 	movl   $0xc010fc40,0xc(%esp)
+c010b5d0:	c0 
+c010b5d1:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010b5d8:	c0 
+c010b5d9:	c7 44 24 04 74 02 00 	movl   $0x274,0x4(%esp)
+c010b5e0:	00 
+c010b5e1:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b5e8:	e8 d4 57 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+c010b5ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b5f0:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b5f3:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010b5fa:	00 
+c010b5fb:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
+c010b602:	af 
+c010b603:	89 04 24             	mov    %eax,(%esp)
+c010b606:	e8 7b aa ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b60b:	85 c0                	test   %eax,%eax
+c010b60d:	75 24                	jne    c010b633 <load_icode+0x4d5>
+c010b60f:	c7 44 24 0c 84 fc 10 	movl   $0xc010fc84,0xc(%esp)
+c010b616:	c0 
+c010b617:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010b61e:	c0 
+c010b61f:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
+c010b626:	00 
+c010b627:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b62e:	e8 8e 57 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+c010b633:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b636:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b639:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010b640:	00 
+c010b641:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
+c010b648:	af 
+c010b649:	89 04 24             	mov    %eax,(%esp)
+c010b64c:	e8 35 aa ff ff       	call   c0106086 <pgdir_alloc_page>
+c010b651:	85 c0                	test   %eax,%eax
+c010b653:	75 24                	jne    c010b679 <load_icode+0x51b>
+c010b655:	c7 44 24 0c c8 fc 10 	movl   $0xc010fcc8,0xc(%esp)
+c010b65c:	c0 
+c010b65d:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010b664:	c0 
+c010b665:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c010b66c:	00 
+c010b66d:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b674:	e8 48 57 ff ff       	call   c0100dc1 <__panic>
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c010b679:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b67c:	89 04 24             	mov    %eax,(%esp)
+c010b67f:	e8 80 ed ff ff       	call   c010a404 <mm_count_inc>
+    current->mm = mm;
+c010b684:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b689:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010b68c:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c010b68f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b694:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010b697:	8b 52 0c             	mov    0xc(%edx),%edx
+c010b69a:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c010b69d:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c010b6a4:	77 23                	ja     c010b6c9 <load_icode+0x56b>
+c010b6a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010b6a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b6ad:	c7 44 24 08 f0 fa 10 	movl   $0xc010faf0,0x8(%esp)
+c010b6b4:	c0 
+c010b6b5:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
+c010b6bc:	00 
+c010b6bd:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b6c4:	e8 f8 56 ff ff       	call   c0100dc1 <__panic>
+c010b6c9:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010b6cc:	81 c2 00 00 00 40    	add    $0x40000000,%edx
+c010b6d2:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c010b6d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b6d8:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b6db:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c010b6de:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
+c010b6e5:	77 23                	ja     c010b70a <load_icode+0x5ac>
+c010b6e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010b6ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b6ee:	c7 44 24 08 f0 fa 10 	movl   $0xc010faf0,0x8(%esp)
+c010b6f5:	c0 
+c010b6f6:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
+c010b6fd:	00 
+c010b6fe:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b705:	e8 b7 56 ff ff       	call   c0100dc1 <__panic>
+c010b70a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010b70d:	05 00 00 00 40       	add    $0x40000000,%eax
+c010b712:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c010b715:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010b718:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c010b71b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b720:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b723:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c010b726:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c010b72d:	00 
+c010b72e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010b735:	00 
+c010b736:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b739:	89 04 24             	mov    %eax,(%esp)
+c010b73c:	e8 82 1d 00 00       	call   c010d4c3 <memset>
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c010b741:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b744:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010b74a:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b74d:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c010b753:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b756:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010b75a:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b75d:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010b761:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b764:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c010b768:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b76b:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c010b76f:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b772:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c010b779:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b77c:	8b 50 18             	mov    0x18(%eax),%edx
+c010b77f:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b782:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
+c010b785:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010b788:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
+    ret = 0;
+c010b78f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c010b796:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b799:	eb 23                	jmp    c010b7be <load_icode+0x660>
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c010b79b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b79e:	89 04 24             	mov    %eax,(%esp)
+c010b7a1:	e8 85 ce ff ff       	call   c010862b <exit_mmap>
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c010b7a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b7a9:	89 04 24             	mov    %eax,(%esp)
+c010b7ac:	e8 74 f4 ff ff       	call   c010ac25 <put_pgdir>
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010b7b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b7b4:	89 04 24             	mov    %eax,(%esp)
+c010b7b7:	e8 b0 cb ff ff       	call   c010836c <mm_destroy>
+bad_mm:
+    goto out;
+c010b7bc:	eb d8                	jmp    c010b796 <load_icode+0x638>
+}
+c010b7be:	c9                   	leave  
+c010b7bf:	c3                   	ret    
+
+c010b7c0 <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+c010b7c0:	55                   	push   %ebp
+c010b7c1:	89 e5                	mov    %esp,%ebp
+c010b7c3:	83 ec 58             	sub    $0x58,%esp
+    struct mm_struct *mm = current->mm;
+c010b7c6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b7cb:	8b 40 18             	mov    0x18(%eax),%eax
+c010b7ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+c010b7d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7d4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010b7db:	00 
+c010b7dc:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b7df:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b7e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b7e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b7ea:	89 04 24             	mov    %eax,(%esp)
+c010b7ed:	e8 aa d8 ff ff       	call   c010909c <user_mem_check>
+c010b7f2:	85 c0                	test   %eax,%eax
+c010b7f4:	75 0a                	jne    c010b800 <do_execve+0x40>
+        return -E_INVAL;
+c010b7f6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010b7fb:	e9 f4 00 00 00       	jmp    c010b8f4 <do_execve+0x134>
+    }
+    if (len > PROC_NAME_LEN) {
+c010b800:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
+c010b804:	76 07                	jbe    c010b80d <do_execve+0x4d>
+        len = PROC_NAME_LEN;
+c010b806:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c010b80d:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
+c010b814:	00 
+c010b815:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010b81c:	00 
+c010b81d:	8d 45 b9             	lea    -0x47(%ebp),%eax
+c010b820:	89 04 24             	mov    %eax,(%esp)
+c010b823:	e8 9b 1c 00 00       	call   c010d4c3 <memset>
+    memcpy(local_name, name, len);
+c010b828:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b82b:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b82f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b832:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b836:	8d 45 b9             	lea    -0x47(%ebp),%eax
+c010b839:	89 04 24             	mov    %eax,(%esp)
+c010b83c:	e8 64 1d 00 00       	call   c010d5a5 <memcpy>
+
+    if (mm != NULL) {
+c010b841:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b845:	74 4a                	je     c010b891 <do_execve+0xd1>
+        lcr3(boot_cr3);
+c010b847:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
+c010b84c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b84f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b852:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010b855:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b858:	89 04 24             	mov    %eax,(%esp)
+c010b85b:	e8 be eb ff ff       	call   c010a41e <mm_count_dec>
+c010b860:	85 c0                	test   %eax,%eax
+c010b862:	75 21                	jne    c010b885 <do_execve+0xc5>
+            exit_mmap(mm);
+c010b864:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b867:	89 04 24             	mov    %eax,(%esp)
+c010b86a:	e8 bc cd ff ff       	call   c010862b <exit_mmap>
+            put_pgdir(mm);
+c010b86f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b872:	89 04 24             	mov    %eax,(%esp)
+c010b875:	e8 ab f3 ff ff       	call   c010ac25 <put_pgdir>
+            mm_destroy(mm);
+c010b87a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b87d:	89 04 24             	mov    %eax,(%esp)
+c010b880:	e8 e7 ca ff ff       	call   c010836c <mm_destroy>
+        }
+        current->mm = NULL;
+c010b885:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b88a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+c010b891:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b894:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b898:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b89b:	89 04 24             	mov    %eax,(%esp)
+c010b89e:	e8 bb f8 ff ff       	call   c010b15e <load_icode>
+c010b8a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b8a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b8aa:	74 2f                	je     c010b8db <do_execve+0x11b>
+        goto execve_exit;
+c010b8ac:	90                   	nop
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+c010b8ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b8b0:	89 04 24             	mov    %eax,(%esp)
+c010b8b3:	e8 ac f6 ff ff       	call   c010af64 <do_exit>
+    panic("already exit: %e.\n", ret);
+c010b8b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b8bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b8bf:	c7 44 24 08 0b fd 10 	movl   $0xc010fd0b,0x8(%esp)
+c010b8c6:	c0 
+c010b8c7:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
+c010b8ce:	00 
+c010b8cf:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010b8d6:	e8 e6 54 ff ff       	call   c0100dc1 <__panic>
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c010b8db:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b8e0:	8d 55 b9             	lea    -0x47(%ebp),%edx
+c010b8e3:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b8e7:	89 04 24             	mov    %eax,(%esp)
+c010b8ea:	e8 2e ed ff ff       	call   c010a61d <set_proc_name>
+    return 0;
+c010b8ef:	b8 00 00 00 00       	mov    $0x0,%eax
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+c010b8f4:	c9                   	leave  
+c010b8f5:	c3                   	ret    
+
+c010b8f6 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+c010b8f6:	55                   	push   %ebp
+c010b8f7:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c010b8f9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b8fe:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c010b905:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b90a:	5d                   	pop    %ebp
+c010b90b:	c3                   	ret    
+
+c010b90c <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+c010b90c:	55                   	push   %ebp
+c010b90d:	89 e5                	mov    %esp,%ebp
+c010b90f:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = current->mm;
+c010b912:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b917:	8b 40 18             	mov    0x18(%eax),%eax
+c010b91a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL) {
+c010b91d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b921:	74 30                	je     c010b953 <do_wait+0x47>
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+c010b923:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b926:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c010b92d:	00 
+c010b92e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+c010b935:	00 
+c010b936:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b93a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b93d:	89 04 24             	mov    %eax,(%esp)
+c010b940:	e8 57 d7 ff ff       	call   c010909c <user_mem_check>
+c010b945:	85 c0                	test   %eax,%eax
+c010b947:	75 0a                	jne    c010b953 <do_wait+0x47>
+            return -E_INVAL;
+c010b949:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010b94e:	e9 57 01 00 00       	jmp    c010baaa <do_wait+0x19e>
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+c010b953:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0) {
+c010b95a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b95e:	74 39                	je     c010b999 <do_wait+0x8d>
+        proc = find_proc(pid);
+c010b960:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b963:	89 04 24             	mov    %eax,(%esp)
+c010b966:	e8 cb f0 ff ff       	call   c010aa36 <find_proc>
+c010b96b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current) {
+c010b96e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b972:	74 5a                	je     c010b9ce <do_wait+0xc2>
+c010b974:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b977:	8b 50 14             	mov    0x14(%eax),%edx
+c010b97a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b97f:	39 c2                	cmp    %eax,%edx
+c010b981:	75 4b                	jne    c010b9ce <do_wait+0xc2>
+            haskid = 1;
+c010b983:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010b98a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b98d:	8b 00                	mov    (%eax),%eax
+c010b98f:	83 f8 03             	cmp    $0x3,%eax
+c010b992:	75 3a                	jne    c010b9ce <do_wait+0xc2>
+                goto found;
+c010b994:	e9 89 00 00 00       	jmp    c010ba22 <do_wait+0x116>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+c010b999:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b99e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010b9a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr) {
+c010b9a7:	eb 1f                	jmp    c010b9c8 <do_wait+0xbc>
+            haskid = 1;
+c010b9a9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010b9b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b9b3:	8b 00                	mov    (%eax),%eax
+c010b9b5:	83 f8 03             	cmp    $0x3,%eax
+c010b9b8:	75 02                	jne    c010b9bc <do_wait+0xb0>
+                goto found;
+c010b9ba:	eb 66                	jmp    c010ba22 <do_wait+0x116>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+c010b9bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b9bf:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010b9c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b9c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b9cc:	75 db                	jne    c010b9a9 <do_wait+0x9d>
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+c010b9ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b9d2:	74 44                	je     c010ba18 <do_wait+0x10c>
+        current->state = PROC_SLEEPING;
+c010b9d4:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b9d9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010b9df:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b9e4:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
+c010b9eb:	00 00 80 
+        schedule();
+c010b9ee:	e8 17 0a 00 00       	call   c010c40a <schedule>
+        if (current->flags & PF_EXITING) {
+c010b9f3:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010b9f8:	8b 40 44             	mov    0x44(%eax),%eax
+c010b9fb:	83 e0 01             	and    $0x1,%eax
+c010b9fe:	85 c0                	test   %eax,%eax
+c010ba00:	74 11                	je     c010ba13 <do_wait+0x107>
+            do_exit(-E_KILLED);
+c010ba02:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c010ba09:	e8 56 f5 ff ff       	call   c010af64 <do_exit>
+        }
+        goto repeat;
+c010ba0e:	e9 40 ff ff ff       	jmp    c010b953 <do_wait+0x47>
+c010ba13:	e9 3b ff ff ff       	jmp    c010b953 <do_wait+0x47>
+    }
+    return -E_BAD_PROC;
+c010ba18:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010ba1d:	e9 88 00 00 00       	jmp    c010baaa <do_wait+0x19e>
+
+found:
+    if (proc == idleproc || proc == initproc) {
+c010ba22:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010ba27:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010ba2a:	74 0a                	je     c010ba36 <do_wait+0x12a>
+c010ba2c:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010ba31:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010ba34:	75 1c                	jne    c010ba52 <do_wait+0x146>
+        panic("wait idleproc or initproc.\n");
+c010ba36:	c7 44 24 08 1e fd 10 	movl   $0xc010fd1e,0x8(%esp)
+c010ba3d:	c0 
+c010ba3e:	c7 44 24 04 f7 02 00 	movl   $0x2f7,0x4(%esp)
+c010ba45:	00 
+c010ba46:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010ba4d:	e8 6f 53 ff ff       	call   c0100dc1 <__panic>
+    }
+    if (code_store != NULL) {
+c010ba52:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010ba56:	74 0e                	je     c010ba66 <do_wait+0x15a>
+        *code_store = proc->exit_code;
+c010ba58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba5b:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+c010ba61:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ba64:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010ba66:	e8 4f e8 ff ff       	call   c010a2ba <__intr_save>
+c010ba6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010ba6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba71:	89 04 24             	mov    %eax,(%esp)
+c010ba74:	e8 88 ef ff ff       	call   c010aa01 <unhash_proc>
+        remove_links(proc);
+c010ba79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba7c:	89 04 24             	mov    %eax,(%esp)
+c010ba7f:	e8 d8 ec ff ff       	call   c010a75c <remove_links>
+    }
+    local_intr_restore(intr_flag);
+c010ba84:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ba87:	89 04 24             	mov    %eax,(%esp)
+c010ba8a:	e8 55 e8 ff ff       	call   c010a2e4 <__intr_restore>
+    put_kstack(proc);
+c010ba8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba92:	89 04 24             	mov    %eax,(%esp)
+c010ba95:	e8 be f0 ff ff       	call   c010ab58 <put_kstack>
+    kfree(proc);
+c010ba9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba9d:	89 04 24             	mov    %eax,(%esp)
+c010baa0:	e8 b9 92 ff ff       	call   c0104d5e <kfree>
+    return 0;
+c010baa5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010baaa:	c9                   	leave  
+c010baab:	c3                   	ret    
+
+c010baac <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+c010baac:	55                   	push   %ebp
+c010baad:	89 e5                	mov    %esp,%ebp
+c010baaf:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+c010bab2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bab5:	89 04 24             	mov    %eax,(%esp)
+c010bab8:	e8 79 ef ff ff       	call   c010aa36 <find_proc>
+c010babd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bac0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010bac4:	74 44                	je     c010bb0a <do_kill+0x5e>
+        if (!(proc->flags & PF_EXITING)) {
+c010bac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bac9:	8b 40 44             	mov    0x44(%eax),%eax
+c010bacc:	83 e0 01             	and    $0x1,%eax
+c010bacf:	85 c0                	test   %eax,%eax
+c010bad1:	75 30                	jne    c010bb03 <do_kill+0x57>
+            proc->flags |= PF_EXITING;
+c010bad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bad6:	8b 40 44             	mov    0x44(%eax),%eax
+c010bad9:	83 c8 01             	or     $0x1,%eax
+c010badc:	89 c2                	mov    %eax,%edx
+c010bade:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bae1:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED) {
+c010bae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bae7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010baed:	85 c0                	test   %eax,%eax
+c010baef:	79 0b                	jns    c010bafc <do_kill+0x50>
+                wakeup_proc(proc);
+c010baf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010baf4:	89 04 24             	mov    %eax,(%esp)
+c010baf7:	e8 72 08 00 00       	call   c010c36e <wakeup_proc>
+            }
+            return 0;
+c010bafc:	b8 00 00 00 00       	mov    $0x0,%eax
+c010bb01:	eb 0c                	jmp    c010bb0f <do_kill+0x63>
+        }
+        return -E_KILLED;
+c010bb03:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010bb08:	eb 05                	jmp    c010bb0f <do_kill+0x63>
+    }
+    return -E_INVAL;
+c010bb0a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010bb0f:	c9                   	leave  
+c010bb10:	c3                   	ret    
+
+c010bb11 <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+c010bb11:	55                   	push   %ebp
+c010bb12:	89 e5                	mov    %esp,%ebp
+c010bb14:	57                   	push   %edi
+c010bb15:	56                   	push   %esi
+c010bb16:	53                   	push   %ebx
+c010bb17:	83 ec 2c             	sub    $0x2c,%esp
+    int ret, len = strlen(name);
+c010bb1a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb1d:	89 04 24             	mov    %eax,(%esp)
+c010bb20:	e8 6f 16 00 00       	call   c010d194 <strlen>
+c010bb25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile (
+c010bb28:	b8 04 00 00 00       	mov    $0x4,%eax
+c010bb2d:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bb30:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010bb33:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010bb36:	8b 75 10             	mov    0x10(%ebp),%esi
+c010bb39:	89 f7                	mov    %esi,%edi
+c010bb3b:	cd 80                	int    $0x80
+c010bb3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+c010bb40:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010bb43:	83 c4 2c             	add    $0x2c,%esp
+c010bb46:	5b                   	pop    %ebx
+c010bb47:	5e                   	pop    %esi
+c010bb48:	5f                   	pop    %edi
+c010bb49:	5d                   	pop    %ebp
+c010bb4a:	c3                   	ret    
+
+c010bb4b <user_main>:
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+c010bb4b:	55                   	push   %ebp
+c010bb4c:	89 e5                	mov    %esp,%ebp
+c010bb4e:	83 ec 18             	sub    $0x18,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010bb51:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bb56:	8b 40 04             	mov    0x4(%eax),%eax
+c010bb59:	c7 44 24 08 3a fd 10 	movl   $0xc010fd3a,0x8(%esp)
+c010bb60:	c0 
+c010bb61:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bb65:	c7 04 24 44 fd 10 c0 	movl   $0xc010fd44,(%esp)
+c010bb6c:	e8 e7 47 ff ff       	call   c0100358 <cprintf>
+c010bb71:	b8 f7 79 00 00       	mov    $0x79f7,%eax
+c010bb76:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010bb7a:	c7 44 24 04 41 57 18 	movl   $0xc0185741,0x4(%esp)
+c010bb81:	c0 
+c010bb82:	c7 04 24 3a fd 10 c0 	movl   $0xc010fd3a,(%esp)
+c010bb89:	e8 83 ff ff ff       	call   c010bb11 <kernel_execve>
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010bb8e:	c7 44 24 08 6b fd 10 	movl   $0xc010fd6b,0x8(%esp)
+c010bb95:	c0 
+c010bb96:	c7 44 24 04 40 03 00 	movl   $0x340,0x4(%esp)
+c010bb9d:	00 
+c010bb9e:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bba5:	e8 17 52 ff ff       	call   c0100dc1 <__panic>
+
+c010bbaa <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+c010bbaa:	55                   	push   %ebp
+c010bbab:	89 e5                	mov    %esp,%ebp
+c010bbad:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010bbb0:	e8 a0 96 ff ff       	call   c0105255 <nr_free_pages>
+c010bbb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010bbb8:	e8 69 90 ff ff       	call   c0104c26 <kallocated>
+c010bbbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010bbc0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010bbc7:	00 
+c010bbc8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010bbcf:	00 
+c010bbd0:	c7 04 24 4b bb 10 c0 	movl   $0xc010bb4b,(%esp)
+c010bbd7:	e8 ce ee ff ff       	call   c010aaaa <kernel_thread>
+c010bbdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010bbdf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010bbe3:	7f 1c                	jg     c010bc01 <init_main+0x57>
+        panic("create user_main failed.\n");
+c010bbe5:	c7 44 24 08 85 fd 10 	movl   $0xc010fd85,0x8(%esp)
+c010bbec:	c0 
+c010bbed:	c7 44 24 04 4b 03 00 	movl   $0x34b,0x4(%esp)
+c010bbf4:	00 
+c010bbf5:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bbfc:	e8 c0 51 ff ff       	call   c0100dc1 <__panic>
+    }
+ extern void check_sync(void);
+    check_sync();                // check philosopher sync problem
+c010bc01:	e8 e3 d9 ff ff       	call   c01095e9 <check_sync>
+
+    while (do_wait(0, NULL) == 0) {
+c010bc06:	eb 05                	jmp    c010bc0d <init_main+0x63>
+        schedule();
+c010bc08:	e8 fd 07 00 00       	call   c010c40a <schedule>
+        panic("create user_main failed.\n");
+    }
+ extern void check_sync(void);
+    check_sync();                // check philosopher sync problem
+
+    while (do_wait(0, NULL) == 0) {
+c010bc0d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010bc14:	00 
+c010bc15:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010bc1c:	e8 eb fc ff ff       	call   c010b90c <do_wait>
+c010bc21:	85 c0                	test   %eax,%eax
+c010bc23:	74 e3                	je     c010bc08 <init_main+0x5e>
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010bc25:	c7 04 24 a0 fd 10 c0 	movl   $0xc010fda0,(%esp)
+c010bc2c:	e8 27 47 ff ff       	call   c0100358 <cprintf>
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010bc31:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010bc36:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010bc3c:	85 c0                	test   %eax,%eax
+c010bc3e:	75 1e                	jne    c010bc5e <init_main+0xb4>
+c010bc40:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010bc45:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010bc4b:	85 c0                	test   %eax,%eax
+c010bc4d:	75 0f                	jne    c010bc5e <init_main+0xb4>
+c010bc4f:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010bc54:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010bc5a:	85 c0                	test   %eax,%eax
+c010bc5c:	74 24                	je     c010bc82 <init_main+0xd8>
+c010bc5e:	c7 44 24 0c c4 fd 10 	movl   $0xc010fdc4,0xc(%esp)
+c010bc65:	c0 
+c010bc66:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010bc6d:	c0 
+c010bc6e:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
+c010bc75:	00 
+c010bc76:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bc7d:	e8 3f 51 ff ff       	call   c0100dc1 <__panic>
+    assert(nr_process == 2);
+c010bc82:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
+c010bc87:	83 f8 02             	cmp    $0x2,%eax
+c010bc8a:	74 24                	je     c010bcb0 <init_main+0x106>
+c010bc8c:	c7 44 24 0c 0f fe 10 	movl   $0xc010fe0f,0xc(%esp)
+c010bc93:	c0 
+c010bc94:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010bc9b:	c0 
+c010bc9c:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
+c010bca3:	00 
+c010bca4:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bcab:	e8 11 51 ff ff       	call   c0100dc1 <__panic>
+c010bcb0:	c7 45 e8 bc 56 1c c0 	movl   $0xc01c56bc,-0x18(%ebp)
+c010bcb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bcba:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010bcbd:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
+c010bcc3:	83 c2 7c             	add    $0x7c,%edx
+c010bcc6:	39 d0                	cmp    %edx,%eax
+c010bcc8:	74 24                	je     c010bcee <init_main+0x144>
+c010bcca:	c7 44 24 0c 20 fe 10 	movl   $0xc010fe20,0xc(%esp)
+c010bcd1:	c0 
+c010bcd2:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010bcd9:	c0 
+c010bcda:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
+c010bce1:	00 
+c010bce2:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bce9:	e8 d3 50 ff ff       	call   c0100dc1 <__panic>
+c010bcee:	c7 45 e4 bc 56 1c c0 	movl   $0xc01c56bc,-0x1c(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010bcf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010bcf8:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010bcfa:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
+c010bd00:	83 c2 7c             	add    $0x7c,%edx
+c010bd03:	39 d0                	cmp    %edx,%eax
+c010bd05:	74 24                	je     c010bd2b <init_main+0x181>
+c010bd07:	c7 44 24 0c 50 fe 10 	movl   $0xc010fe50,0xc(%esp)
+c010bd0e:	c0 
+c010bd0f:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010bd16:	c0 
+c010bd17:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
+c010bd1e:	00 
+c010bd1f:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bd26:	e8 96 50 ff ff       	call   c0100dc1 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010bd2b:	c7 04 24 80 fe 10 c0 	movl   $0xc010fe80,(%esp)
+c010bd32:	e8 21 46 ff ff       	call   c0100358 <cprintf>
+    return 0;
+c010bd37:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bd3c:	c9                   	leave  
+c010bd3d:	c3                   	ret    
+
+c010bd3e <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+c010bd3e:	55                   	push   %ebp
+c010bd3f:	89 e5                	mov    %esp,%ebp
+c010bd41:	83 ec 28             	sub    $0x28,%esp
+c010bd44:	c7 45 ec bc 56 1c c0 	movl   $0xc01c56bc,-0x14(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010bd4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bd4e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010bd51:	89 50 04             	mov    %edx,0x4(%eax)
+c010bd54:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bd57:	8b 50 04             	mov    0x4(%eax),%edx
+c010bd5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bd5d:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010bd5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010bd66:	eb 26                	jmp    c010bd8e <proc_init+0x50>
+        list_init(hash_list + i);
+c010bd68:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bd6b:	c1 e0 03             	shl    $0x3,%eax
+c010bd6e:	05 60 34 1c c0       	add    $0xc01c3460,%eax
+c010bd73:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010bd76:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd79:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010bd7c:	89 50 04             	mov    %edx,0x4(%eax)
+c010bd7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd82:	8b 50 04             	mov    0x4(%eax),%edx
+c010bd85:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd88:	89 10                	mov    %edx,(%eax)
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010bd8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010bd8e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010bd95:	7e d1                	jle    c010bd68 <proc_init+0x2a>
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+c010bd97:	e8 f5 e6 ff ff       	call   c010a491 <alloc_proc>
+c010bd9c:	a3 40 34 1c c0       	mov    %eax,0xc01c3440
+c010bda1:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bda6:	85 c0                	test   %eax,%eax
+c010bda8:	75 1c                	jne    c010bdc6 <proc_init+0x88>
+        panic("cannot alloc idleproc.\n");
+c010bdaa:	c7 44 24 08 99 fe 10 	movl   $0xc010fe99,0x8(%esp)
+c010bdb1:	c0 
+c010bdb2:	c7 44 24 04 6a 03 00 	movl   $0x36a,0x4(%esp)
+c010bdb9:	00 
+c010bdba:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bdc1:	e8 fb 4f ff ff       	call   c0100dc1 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010bdc6:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bdcb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010bdd2:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bdd7:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010bddd:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bde2:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
+c010bde7:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010bdea:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bdef:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010bdf6:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010bdfb:	c7 44 24 04 b1 fe 10 	movl   $0xc010feb1,0x4(%esp)
+c010be02:	c0 
+c010be03:	89 04 24             	mov    %eax,(%esp)
+c010be06:	e8 12 e8 ff ff       	call   c010a61d <set_proc_name>
+    nr_process ++;
+c010be0b:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
+c010be10:	83 c0 01             	add    $0x1,%eax
+c010be13:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
+
+    current = idleproc;
+c010be18:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010be1d:	a3 48 34 1c c0       	mov    %eax,0xc01c3448
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010be22:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010be29:	00 
+c010be2a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010be31:	00 
+c010be32:	c7 04 24 aa bb 10 c0 	movl   $0xc010bbaa,(%esp)
+c010be39:	e8 6c ec ff ff       	call   c010aaaa <kernel_thread>
+c010be3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (pid <= 0) {
+c010be41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010be45:	7f 1c                	jg     c010be63 <proc_init+0x125>
+        panic("create init_main failed.\n");
+c010be47:	c7 44 24 08 b6 fe 10 	movl   $0xc010feb6,0x8(%esp)
+c010be4e:	c0 
+c010be4f:	c7 44 24 04 78 03 00 	movl   $0x378,0x4(%esp)
+c010be56:	00 
+c010be57:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010be5e:	e8 5e 4f ff ff       	call   c0100dc1 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010be63:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010be66:	89 04 24             	mov    %eax,(%esp)
+c010be69:	e8 c8 eb ff ff       	call   c010aa36 <find_proc>
+c010be6e:	a3 44 34 1c c0       	mov    %eax,0xc01c3444
+    set_proc_name(initproc, "init");
+c010be73:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010be78:	c7 44 24 04 d0 fe 10 	movl   $0xc010fed0,0x4(%esp)
+c010be7f:	c0 
+c010be80:	89 04 24             	mov    %eax,(%esp)
+c010be83:	e8 95 e7 ff ff       	call   c010a61d <set_proc_name>
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010be88:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010be8d:	85 c0                	test   %eax,%eax
+c010be8f:	74 0c                	je     c010be9d <proc_init+0x15f>
+c010be91:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010be96:	8b 40 04             	mov    0x4(%eax),%eax
+c010be99:	85 c0                	test   %eax,%eax
+c010be9b:	74 24                	je     c010bec1 <proc_init+0x183>
+c010be9d:	c7 44 24 0c d8 fe 10 	movl   $0xc010fed8,0xc(%esp)
+c010bea4:	c0 
+c010bea5:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010beac:	c0 
+c010bead:	c7 44 24 04 7e 03 00 	movl   $0x37e,0x4(%esp)
+c010beb4:	00 
+c010beb5:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bebc:	e8 00 4f ff ff       	call   c0100dc1 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010bec1:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010bec6:	85 c0                	test   %eax,%eax
+c010bec8:	74 0d                	je     c010bed7 <proc_init+0x199>
+c010beca:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
+c010becf:	8b 40 04             	mov    0x4(%eax),%eax
+c010bed2:	83 f8 01             	cmp    $0x1,%eax
+c010bed5:	74 24                	je     c010befb <proc_init+0x1bd>
+c010bed7:	c7 44 24 0c 00 ff 10 	movl   $0xc010ff00,0xc(%esp)
+c010bede:	c0 
+c010bedf:	c7 44 24 08 41 fb 10 	movl   $0xc010fb41,0x8(%esp)
+c010bee6:	c0 
+c010bee7:	c7 44 24 04 7f 03 00 	movl   $0x37f,0x4(%esp)
+c010beee:	00 
+c010beef:	c7 04 24 14 fb 10 c0 	movl   $0xc010fb14,(%esp)
+c010bef6:	e8 c6 4e ff ff       	call   c0100dc1 <__panic>
+}
+c010befb:	c9                   	leave  
+c010befc:	c3                   	ret    
+
+c010befd <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+c010befd:	55                   	push   %ebp
+c010befe:	89 e5                	mov    %esp,%ebp
+c010bf00:	83 ec 08             	sub    $0x8,%esp
+    while (1) {
+        if (current->need_resched) {
+c010bf03:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf08:	8b 40 10             	mov    0x10(%eax),%eax
+c010bf0b:	85 c0                	test   %eax,%eax
+c010bf0d:	74 07                	je     c010bf16 <cpu_idle+0x19>
+            schedule();
+c010bf0f:	e8 f6 04 00 00       	call   c010c40a <schedule>
+        }
+    }
+c010bf14:	eb ed                	jmp    c010bf03 <cpu_idle+0x6>
+c010bf16:	eb eb                	jmp    c010bf03 <cpu_idle+0x6>
+
+c010bf18 <lab6_set_priority>:
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+c010bf18:	55                   	push   %ebp
+c010bf19:	89 e5                	mov    %esp,%ebp
+    if (priority == 0)
+c010bf1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010bf1f:	75 11                	jne    c010bf32 <lab6_set_priority+0x1a>
+        current->lab6_priority = 1;
+c010bf21:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf26:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
+c010bf2d:	00 00 00 
+c010bf30:	eb 0e                	jmp    c010bf40 <lab6_set_priority+0x28>
+    else current->lab6_priority = priority;
+c010bf32:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf37:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bf3a:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
+}
+c010bf40:	5d                   	pop    %ebp
+c010bf41:	c3                   	ret    
+
+c010bf42 <do_sleep>:
+
+// do_sleep - set current process state to sleep and add timer with "time"
+//          - then call scheduler. if process run again, delete timer first.
+int
+do_sleep(unsigned int time) {
+c010bf42:	55                   	push   %ebp
+c010bf43:	89 e5                	mov    %esp,%ebp
+c010bf45:	83 ec 38             	sub    $0x38,%esp
+    if (time == 0) {
+c010bf48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010bf4c:	75 07                	jne    c010bf55 <do_sleep+0x13>
+        return 0;
+c010bf4e:	b8 00 00 00 00       	mov    $0x0,%eax
+c010bf53:	eb 6b                	jmp    c010bfc0 <do_sleep+0x7e>
+    }
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010bf55:	e8 60 e3 ff ff       	call   c010a2ba <__intr_save>
+c010bf5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    timer_t __timer, *timer = timer_init(&__timer, current, time);
+c010bf5d:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bf60:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf65:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010bf69:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bf6d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c010bf70:	89 04 24             	mov    %eax,(%esp)
+c010bf73:	e8 09 e3 ff ff       	call   c010a281 <timer_init>
+c010bf78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    current->state = PROC_SLEEPING;
+c010bf7b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf80:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+    current->wait_state = WT_TIMER;
+c010bf86:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010bf8b:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
+c010bf92:	00 00 80 
+    add_timer(timer);
+c010bf95:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bf98:	89 04 24             	mov    %eax,(%esp)
+c010bf9b:	e8 f5 04 00 00       	call   c010c495 <add_timer>
+    local_intr_restore(intr_flag);
+c010bfa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bfa3:	89 04 24             	mov    %eax,(%esp)
+c010bfa6:	e8 39 e3 ff ff       	call   c010a2e4 <__intr_restore>
+
+    schedule();
+c010bfab:	e8 5a 04 00 00       	call   c010c40a <schedule>
+
+    del_timer(timer);
+c010bfb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bfb3:	89 04 24             	mov    %eax,(%esp)
+c010bfb6:	e8 18 06 00 00       	call   c010c5d3 <del_timer>
+    return 0;
+c010bfbb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bfc0:	c9                   	leave  
+c010bfc1:	c3                   	ret    
+
+c010bfc2 <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c010bfc2:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c010bfc6:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c010bfc8:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c010bfcb:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c010bfce:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c010bfd1:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c010bfd4:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c010bfd7:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c010bfda:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c010bfdd:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c010bfe1:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c010bfe4:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c010bfe7:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c010bfea:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c010bfed:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c010bff0:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c010bff3:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c010bff6:	ff 30                	pushl  (%eax)
+
+    ret
+c010bff8:	c3                   	ret    
+
+c010bff9 <RR_init>:
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+static void
+RR_init(struct run_queue *rq) {
+c010bff9:	55                   	push   %ebp
+c010bffa:	89 e5                	mov    %esp,%ebp
+c010bffc:	83 ec 10             	sub    $0x10,%esp
+    list_init(&(rq->run_list));
+c010bfff:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c002:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010c005:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c008:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010c00b:	89 50 04             	mov    %edx,0x4(%eax)
+c010c00e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c011:	8b 50 04             	mov    0x4(%eax),%edx
+c010c014:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c017:	89 10                	mov    %edx,(%eax)
+    rq->proc_num = 0;
+c010c019:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c01c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010c023:	c9                   	leave  
+c010c024:	c3                   	ret    
+
+c010c025 <RR_enqueue>:
+
+static void
+RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+c010c025:	55                   	push   %ebp
+c010c026:	89 e5                	mov    %esp,%ebp
+c010c028:	83 ec 38             	sub    $0x38,%esp
+    assert(list_empty(&(proc->run_link)));
+c010c02b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c02e:	05 a4 00 00 00       	add    $0xa4,%eax
+c010c033:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010c036:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c039:	8b 40 04             	mov    0x4(%eax),%eax
+c010c03c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010c03f:	0f 94 c0             	sete   %al
+c010c042:	0f b6 c0             	movzbl %al,%eax
+c010c045:	85 c0                	test   %eax,%eax
+c010c047:	75 24                	jne    c010c06d <RR_enqueue+0x48>
+c010c049:	c7 44 24 0c 28 ff 10 	movl   $0xc010ff28,0xc(%esp)
+c010c050:	c0 
+c010c051:	c7 44 24 08 46 ff 10 	movl   $0xc010ff46,0x8(%esp)
+c010c058:	c0 
+c010c059:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+c010c060:	00 
+c010c061:	c7 04 24 5b ff 10 c0 	movl   $0xc010ff5b,(%esp)
+c010c068:	e8 54 4d ff ff       	call   c0100dc1 <__panic>
+    list_add_before(&(rq->run_list), &(proc->run_link));
+c010c06d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c070:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
+c010c076:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c079:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c07c:	89 55 ec             	mov    %edx,-0x14(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c010c07f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c082:	8b 00                	mov    (%eax),%eax
+c010c084:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c087:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010c08a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010c08d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c090:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010c093:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c096:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010c099:	89 10                	mov    %edx,(%eax)
+c010c09b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c09e:	8b 10                	mov    (%eax),%edx
+c010c0a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c0a3:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010c0a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c0a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010c0ac:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010c0af:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c0b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c0b5:	89 10                	mov    %edx,(%eax)
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+c010c0b7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c0ba:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010c0c0:	85 c0                	test   %eax,%eax
+c010c0c2:	74 13                	je     c010c0d7 <RR_enqueue+0xb2>
+c010c0c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c0c7:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+c010c0cd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0d0:	8b 40 0c             	mov    0xc(%eax),%eax
+c010c0d3:	39 c2                	cmp    %eax,%edx
+c010c0d5:	7e 0f                	jle    c010c0e6 <RR_enqueue+0xc1>
+        proc->time_slice = rq->max_time_slice;
+c010c0d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0da:	8b 50 0c             	mov    0xc(%eax),%edx
+c010c0dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c0e0:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
+    }
+    proc->rq = rq;
+c010c0e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c0e9:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c0ec:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
+    rq->proc_num ++;
+c010c0f2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0f5:	8b 40 08             	mov    0x8(%eax),%eax
+c010c0f8:	8d 50 01             	lea    0x1(%eax),%edx
+c010c0fb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0fe:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010c101:	c9                   	leave  
+c010c102:	c3                   	ret    
+
+c010c103 <RR_dequeue>:
+
+static void
+RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+c010c103:	55                   	push   %ebp
+c010c104:	89 e5                	mov    %esp,%ebp
+c010c106:	83 ec 38             	sub    $0x38,%esp
+    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
+c010c109:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c10c:	05 a4 00 00 00       	add    $0xa4,%eax
+c010c111:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010c114:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c117:	8b 40 04             	mov    0x4(%eax),%eax
+c010c11a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010c11d:	0f 94 c0             	sete   %al
+c010c120:	0f b6 c0             	movzbl %al,%eax
+c010c123:	85 c0                	test   %eax,%eax
+c010c125:	75 0e                	jne    c010c135 <RR_dequeue+0x32>
+c010c127:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c12a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
+c010c130:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010c133:	74 24                	je     c010c159 <RR_dequeue+0x56>
+c010c135:	c7 44 24 0c 7c ff 10 	movl   $0xc010ff7c,0xc(%esp)
+c010c13c:	c0 
+c010c13d:	c7 44 24 08 46 ff 10 	movl   $0xc010ff46,0x8(%esp)
+c010c144:	c0 
+c010c145:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+c010c14c:	00 
+c010c14d:	c7 04 24 5b ff 10 c0 	movl   $0xc010ff5b,(%esp)
+c010c154:	e8 68 4c ff ff       	call   c0100dc1 <__panic>
+    list_del_init(&(proc->run_link));
+c010c159:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c15c:	05 a4 00 00 00       	add    $0xa4,%eax
+c010c161:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c164:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c167:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010c16a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c16d:	8b 40 04             	mov    0x4(%eax),%eax
+c010c170:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c173:	8b 12                	mov    (%edx),%edx
+c010c175:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010c178:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010c17b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c17e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c181:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010c184:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c187:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010c18a:	89 10                	mov    %edx,(%eax)
+c010c18c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c18f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010c192:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c195:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010c198:	89 50 04             	mov    %edx,0x4(%eax)
+c010c19b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c19e:	8b 50 04             	mov    0x4(%eax),%edx
+c010c1a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c1a4:	89 10                	mov    %edx,(%eax)
+    rq->proc_num --;
+c010c1a6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1a9:	8b 40 08             	mov    0x8(%eax),%eax
+c010c1ac:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c1af:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1b2:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010c1b5:	c9                   	leave  
+c010c1b6:	c3                   	ret    
+
+c010c1b7 <RR_pick_next>:
+
+static struct proc_struct *
+RR_pick_next(struct run_queue *rq) {
+c010c1b7:	55                   	push   %ebp
+c010c1b8:	89 e5                	mov    %esp,%ebp
+c010c1ba:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_next(&(rq->run_list));
+c010c1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010c1c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c1c6:	8b 40 04             	mov    0x4(%eax),%eax
+c010c1c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(rq->run_list)) {
+c010c1cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1cf:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010c1d2:	74 0a                	je     c010c1de <RR_pick_next+0x27>
+        return le2proc(le, run_link);
+c010c1d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c1d7:	2d a4 00 00 00       	sub    $0xa4,%eax
+c010c1dc:	eb 05                	jmp    c010c1e3 <RR_pick_next+0x2c>
+    }
+    return NULL;
+c010c1de:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c1e3:	c9                   	leave  
+c010c1e4:	c3                   	ret    
+
+c010c1e5 <RR_proc_tick>:
+
+static void
+RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+c010c1e5:	55                   	push   %ebp
+c010c1e6:	89 e5                	mov    %esp,%ebp
+    if (proc->time_slice > 0) {
+c010c1e8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1eb:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010c1f1:	85 c0                	test   %eax,%eax
+c010c1f3:	7e 15                	jle    c010c20a <RR_proc_tick+0x25>
+        proc->time_slice --;
+c010c1f5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1f8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010c1fe:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c201:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c204:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
+    }
+    if (proc->time_slice == 0) {
+c010c20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c20d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010c213:	85 c0                	test   %eax,%eax
+c010c215:	75 0a                	jne    c010c221 <RR_proc_tick+0x3c>
+        proc->need_resched = 1;
+c010c217:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c21a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010c221:	5d                   	pop    %ebp
+c010c222:	c3                   	ret    
+
+c010c223 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010c223:	55                   	push   %ebp
+c010c224:	89 e5                	mov    %esp,%ebp
+c010c226:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010c229:	9c                   	pushf  
+c010c22a:	58                   	pop    %eax
+c010c22b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010c22e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010c231:	25 00 02 00 00       	and    $0x200,%eax
+c010c236:	85 c0                	test   %eax,%eax
+c010c238:	74 0c                	je     c010c246 <__intr_save+0x23>
+        intr_disable();
+c010c23a:	e8 da 5d ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c010c23f:	b8 01 00 00 00       	mov    $0x1,%eax
+c010c244:	eb 05                	jmp    c010c24b <__intr_save+0x28>
+    }
+    return 0;
+c010c246:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c24b:	c9                   	leave  
+c010c24c:	c3                   	ret    
+
+c010c24d <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010c24d:	55                   	push   %ebp
+c010c24e:	89 e5                	mov    %esp,%ebp
+c010c250:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010c253:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010c257:	74 05                	je     c010c25e <__intr_restore+0x11>
+        intr_enable();
+c010c259:	e8 b5 5d ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c010c25e:	c9                   	leave  
+c010c25f:	c3                   	ret    
+
+c010c260 <sched_class_enqueue>:
+static struct sched_class *sched_class;
+
+static struct run_queue *rq;
+
+static inline void
+sched_class_enqueue(struct proc_struct *proc) {
+c010c260:	55                   	push   %ebp
+c010c261:	89 e5                	mov    %esp,%ebp
+c010c263:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010c266:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010c26b:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010c26e:	74 1a                	je     c010c28a <sched_class_enqueue+0x2a>
+        sched_class->enqueue(rq, proc);
+c010c270:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c275:	8b 40 08             	mov    0x8(%eax),%eax
+c010c278:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
+c010c27e:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010c281:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010c285:	89 14 24             	mov    %edx,(%esp)
+c010c288:	ff d0                	call   *%eax
+    }
+}
+c010c28a:	c9                   	leave  
+c010c28b:	c3                   	ret    
+
+c010c28c <sched_class_dequeue>:
+
+static inline void
+sched_class_dequeue(struct proc_struct *proc) {
+c010c28c:	55                   	push   %ebp
+c010c28d:	89 e5                	mov    %esp,%ebp
+c010c28f:	83 ec 18             	sub    $0x18,%esp
+    sched_class->dequeue(rq, proc);
+c010c292:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c297:	8b 40 0c             	mov    0xc(%eax),%eax
+c010c29a:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
+c010c2a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010c2a3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010c2a7:	89 14 24             	mov    %edx,(%esp)
+c010c2aa:	ff d0                	call   *%eax
+}
+c010c2ac:	c9                   	leave  
+c010c2ad:	c3                   	ret    
+
+c010c2ae <sched_class_pick_next>:
+
+static inline struct proc_struct *
+sched_class_pick_next(void) {
+c010c2ae:	55                   	push   %ebp
+c010c2af:	89 e5                	mov    %esp,%ebp
+c010c2b1:	83 ec 18             	sub    $0x18,%esp
+    return sched_class->pick_next(rq);
+c010c2b4:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c2b9:	8b 40 10             	mov    0x10(%eax),%eax
+c010c2bc:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
+c010c2c2:	89 14 24             	mov    %edx,(%esp)
+c010c2c5:	ff d0                	call   *%eax
+}
+c010c2c7:	c9                   	leave  
+c010c2c8:	c3                   	ret    
+
+c010c2c9 <sched_class_proc_tick>:
+
+static void
+sched_class_proc_tick(struct proc_struct *proc) {
+c010c2c9:	55                   	push   %ebp
+c010c2ca:	89 e5                	mov    %esp,%ebp
+c010c2cc:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010c2cf:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010c2d4:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010c2d7:	74 1c                	je     c010c2f5 <sched_class_proc_tick+0x2c>
+        sched_class->proc_tick(rq, proc);
+c010c2d9:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c2de:	8b 40 14             	mov    0x14(%eax),%eax
+c010c2e1:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
+c010c2e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010c2ea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010c2ee:	89 14 24             	mov    %edx,(%esp)
+c010c2f1:	ff d0                	call   *%eax
+c010c2f3:	eb 0a                	jmp    c010c2ff <sched_class_proc_tick+0x36>
+    }
+    else {
+        proc->need_resched = 1;
+c010c2f5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2f8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010c2ff:	c9                   	leave  
+c010c300:	c3                   	ret    
+
+c010c301 <sched_init>:
+
+static struct run_queue __rq;
+
+void
+sched_init(void) {
+c010c301:	55                   	push   %ebp
+c010c302:	89 e5                	mov    %esp,%ebp
+c010c304:	83 ec 28             	sub    $0x28,%esp
+c010c307:	c7 45 f4 b4 54 1c c0 	movl   $0xc01c54b4,-0xc(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010c30e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c311:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c314:	89 50 04             	mov    %edx,0x4(%eax)
+c010c317:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c31a:	8b 50 04             	mov    0x4(%eax),%edx
+c010c31d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c320:	89 10                	mov    %edx,(%eax)
+    list_init(&timer_list);
+
+    sched_class = &default_sched_class;
+c010c322:	c7 05 bc 54 1c c0 8c 	movl   $0xc0131a8c,0xc01c54bc
+c010c329:	1a 13 c0 
+
+    rq = &__rq;
+c010c32c:	c7 05 c0 54 1c c0 c4 	movl   $0xc01c54c4,0xc01c54c0
+c010c333:	54 1c c0 
+    rq->max_time_slice = 5;
+c010c336:	a1 c0 54 1c c0       	mov    0xc01c54c0,%eax
+c010c33b:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+    sched_class->init(rq);
+c010c342:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c347:	8b 40 04             	mov    0x4(%eax),%eax
+c010c34a:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
+c010c350:	89 14 24             	mov    %edx,(%esp)
+c010c353:	ff d0                	call   *%eax
+
+    cprintf("sched class: %s\n", sched_class->name);
+c010c355:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
+c010c35a:	8b 00                	mov    (%eax),%eax
+c010c35c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c360:	c7 04 24 bc ff 10 c0 	movl   $0xc010ffbc,(%esp)
+c010c367:	e8 ec 3f ff ff       	call   c0100358 <cprintf>
+}
+c010c36c:	c9                   	leave  
+c010c36d:	c3                   	ret    
+
+c010c36e <wakeup_proc>:
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010c36e:	55                   	push   %ebp
+c010c36f:	89 e5                	mov    %esp,%ebp
+c010c371:	83 ec 28             	sub    $0x28,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010c374:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c377:	8b 00                	mov    (%eax),%eax
+c010c379:	83 f8 03             	cmp    $0x3,%eax
+c010c37c:	75 24                	jne    c010c3a2 <wakeup_proc+0x34>
+c010c37e:	c7 44 24 0c cd ff 10 	movl   $0xc010ffcd,0xc(%esp)
+c010c385:	c0 
+c010c386:	c7 44 24 08 e8 ff 10 	movl   $0xc010ffe8,0x8(%esp)
+c010c38d:	c0 
+c010c38e:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
+c010c395:	00 
+c010c396:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c39d:	e8 1f 4a ff ff       	call   c0100dc1 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010c3a2:	e8 7c fe ff ff       	call   c010c223 <__intr_save>
+c010c3a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010c3aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3ad:	8b 00                	mov    (%eax),%eax
+c010c3af:	83 f8 02             	cmp    $0x2,%eax
+c010c3b2:	74 2d                	je     c010c3e1 <wakeup_proc+0x73>
+            proc->state = PROC_RUNNABLE;
+c010c3b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3b7:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010c3bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3c0:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
+c010c3c7:	00 00 00 
+            if (proc != current) {
+c010c3ca:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c3cf:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010c3d2:	74 29                	je     c010c3fd <wakeup_proc+0x8f>
+                sched_class_enqueue(proc);
+c010c3d4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3d7:	89 04 24             	mov    %eax,(%esp)
+c010c3da:	e8 81 fe ff ff       	call   c010c260 <sched_class_enqueue>
+c010c3df:	eb 1c                	jmp    c010c3fd <wakeup_proc+0x8f>
+            }
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010c3e1:	c7 44 24 08 13 00 11 	movl   $0xc0110013,0x8(%esp)
+c010c3e8:	c0 
+c010c3e9:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c010c3f0:	00 
+c010c3f1:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c3f8:	e8 30 4a ff ff       	call   c0100e2d <__warn>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010c3fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c400:	89 04 24             	mov    %eax,(%esp)
+c010c403:	e8 45 fe ff ff       	call   c010c24d <__intr_restore>
+}
+c010c408:	c9                   	leave  
+c010c409:	c3                   	ret    
+
+c010c40a <schedule>:
+
+void
+schedule(void) {
+c010c40a:	55                   	push   %ebp
+c010c40b:	89 e5                	mov    %esp,%ebp
+c010c40d:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    struct proc_struct *next;
+    local_intr_save(intr_flag);
+c010c410:	e8 0e fe ff ff       	call   c010c223 <__intr_save>
+c010c415:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        current->need_resched = 0;
+c010c418:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c41d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        if (current->state == PROC_RUNNABLE) {
+c010c424:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c429:	8b 00                	mov    (%eax),%eax
+c010c42b:	83 f8 02             	cmp    $0x2,%eax
+c010c42e:	75 0d                	jne    c010c43d <schedule+0x33>
+            sched_class_enqueue(current);
+c010c430:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c435:	89 04 24             	mov    %eax,(%esp)
+c010c438:	e8 23 fe ff ff       	call   c010c260 <sched_class_enqueue>
+        }
+        if ((next = sched_class_pick_next()) != NULL) {
+c010c43d:	e8 6c fe ff ff       	call   c010c2ae <sched_class_pick_next>
+c010c442:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010c449:	74 0b                	je     c010c456 <schedule+0x4c>
+            sched_class_dequeue(next);
+c010c44b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c44e:	89 04 24             	mov    %eax,(%esp)
+c010c451:	e8 36 fe ff ff       	call   c010c28c <sched_class_dequeue>
+        }
+        if (next == NULL) {
+c010c456:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010c45a:	75 08                	jne    c010c464 <schedule+0x5a>
+            next = idleproc;
+c010c45c:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
+c010c461:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        next->runs ++;
+c010c464:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c467:	8b 40 08             	mov    0x8(%eax),%eax
+c010c46a:	8d 50 01             	lea    0x1(%eax),%edx
+c010c46d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c470:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010c473:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c478:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010c47b:	74 0b                	je     c010c488 <schedule+0x7e>
+            proc_run(next);
+c010c47d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c480:	89 04 24             	mov    %eax,(%esp)
+c010c483:	e8 6d e4 ff ff       	call   c010a8f5 <proc_run>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010c488:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c48b:	89 04 24             	mov    %eax,(%esp)
+c010c48e:	e8 ba fd ff ff       	call   c010c24d <__intr_restore>
+}
+c010c493:	c9                   	leave  
+c010c494:	c3                   	ret    
+
+c010c495 <add_timer>:
+
+// add timer to timer_list
+void
+add_timer(timer_t *timer) {
+c010c495:	55                   	push   %ebp
+c010c496:	89 e5                	mov    %esp,%ebp
+c010c498:	83 ec 48             	sub    $0x48,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010c49b:	e8 83 fd ff ff       	call   c010c223 <__intr_save>
+c010c4a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        assert(timer->expires > 0 && timer->proc != NULL);
+c010c4a3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c4a6:	8b 00                	mov    (%eax),%eax
+c010c4a8:	85 c0                	test   %eax,%eax
+c010c4aa:	74 0a                	je     c010c4b6 <add_timer+0x21>
+c010c4ac:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c4af:	8b 40 04             	mov    0x4(%eax),%eax
+c010c4b2:	85 c0                	test   %eax,%eax
+c010c4b4:	75 24                	jne    c010c4da <add_timer+0x45>
+c010c4b6:	c7 44 24 0c 30 00 11 	movl   $0xc0110030,0xc(%esp)
+c010c4bd:	c0 
+c010c4be:	c7 44 24 08 e8 ff 10 	movl   $0xc010ffe8,0x8(%esp)
+c010c4c5:	c0 
+c010c4c6:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
+c010c4cd:	00 
+c010c4ce:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c4d5:	e8 e7 48 ff ff       	call   c0100dc1 <__panic>
+        assert(list_empty(&(timer->timer_link)));
+c010c4da:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c4dd:	83 c0 08             	add    $0x8,%eax
+c010c4e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010c4e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c4e6:	8b 40 04             	mov    0x4(%eax),%eax
+c010c4e9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c010c4ec:	0f 94 c0             	sete   %al
+c010c4ef:	0f b6 c0             	movzbl %al,%eax
+c010c4f2:	85 c0                	test   %eax,%eax
+c010c4f4:	75 24                	jne    c010c51a <add_timer+0x85>
+c010c4f6:	c7 44 24 0c 5c 00 11 	movl   $0xc011005c,0xc(%esp)
+c010c4fd:	c0 
+c010c4fe:	c7 44 24 08 e8 ff 10 	movl   $0xc010ffe8,0x8(%esp)
+c010c505:	c0 
+c010c506:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
+c010c50d:	00 
+c010c50e:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c515:	e8 a7 48 ff ff       	call   c0100dc1 <__panic>
+c010c51a:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010c521:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c524:	8b 40 04             	mov    0x4(%eax),%eax
+        list_entry_t *le = list_next(&timer_list);
+c010c527:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while (le != &timer_list) {
+c010c52a:	eb 4a                	jmp    c010c576 <add_timer+0xe1>
+            timer_t *next = le2timer(le, timer_link);
+c010c52c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c52f:	83 e8 08             	sub    $0x8,%eax
+c010c532:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (timer->expires < next->expires) {
+c010c535:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c538:	8b 10                	mov    (%eax),%edx
+c010c53a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c53d:	8b 00                	mov    (%eax),%eax
+c010c53f:	39 c2                	cmp    %eax,%edx
+c010c541:	73 13                	jae    c010c556 <add_timer+0xc1>
+                next->expires -= timer->expires;
+c010c543:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c546:	8b 10                	mov    (%eax),%edx
+c010c548:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c54b:	8b 00                	mov    (%eax),%eax
+c010c54d:	29 c2                	sub    %eax,%edx
+c010c54f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c552:	89 10                	mov    %edx,(%eax)
+                break;
+c010c554:	eb 29                	jmp    c010c57f <add_timer+0xea>
+            }
+            timer->expires -= next->expires;
+c010c556:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c559:	8b 10                	mov    (%eax),%edx
+c010c55b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c55e:	8b 00                	mov    (%eax),%eax
+c010c560:	29 c2                	sub    %eax,%edx
+c010c562:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c565:	89 10                	mov    %edx,(%eax)
+c010c567:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c56a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c56d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c570:	8b 40 04             	mov    0x4(%eax),%eax
+            le = list_next(le);
+c010c573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    local_intr_save(intr_flag);
+    {
+        assert(timer->expires > 0 && timer->proc != NULL);
+        assert(list_empty(&(timer->timer_link)));
+        list_entry_t *le = list_next(&timer_list);
+        while (le != &timer_list) {
+c010c576:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
+c010c57d:	75 ad                	jne    c010c52c <add_timer+0x97>
+                break;
+            }
+            timer->expires -= next->expires;
+            le = list_next(le);
+        }
+        list_add_before(le, &(timer->timer_link));
+c010c57f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c582:	8d 50 08             	lea    0x8(%eax),%edx
+c010c585:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c588:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010c58b:	89 55 d8             	mov    %edx,-0x28(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c010c58e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c591:	8b 00                	mov    (%eax),%eax
+c010c593:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010c596:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010c599:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010c59c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c59f:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010c5a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010c5a5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010c5a8:	89 10                	mov    %edx,(%eax)
+c010c5aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010c5ad:	8b 10                	mov    (%eax),%edx
+c010c5af:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010c5b2:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010c5b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010c5b8:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010c5bb:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010c5be:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010c5c1:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010c5c4:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_restore(intr_flag);
+c010c5c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5c9:	89 04 24             	mov    %eax,(%esp)
+c010c5cc:	e8 7c fc ff ff       	call   c010c24d <__intr_restore>
+}
+c010c5d1:	c9                   	leave  
+c010c5d2:	c3                   	ret    
+
+c010c5d3 <del_timer>:
+
+// del timer from timer_list
+void
+del_timer(timer_t *timer) {
+c010c5d3:	55                   	push   %ebp
+c010c5d4:	89 e5                	mov    %esp,%ebp
+c010c5d6:	83 ec 48             	sub    $0x48,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010c5d9:	e8 45 fc ff ff       	call   c010c223 <__intr_save>
+c010c5de:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (!list_empty(&(timer->timer_link))) {
+c010c5e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c5e4:	83 c0 08             	add    $0x8,%eax
+c010c5e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010c5ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c5ed:	8b 40 04             	mov    0x4(%eax),%eax
+c010c5f0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c010c5f3:	0f 94 c0             	sete   %al
+c010c5f6:	0f b6 c0             	movzbl %al,%eax
+c010c5f9:	85 c0                	test   %eax,%eax
+c010c5fb:	0f 85 89 00 00 00    	jne    c010c68a <del_timer+0xb7>
+            if (timer->expires != 0) {
+c010c601:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c604:	8b 00                	mov    (%eax),%eax
+c010c606:	85 c0                	test   %eax,%eax
+c010c608:	74 35                	je     c010c63f <del_timer+0x6c>
+                list_entry_t *le = list_next(&(timer->timer_link));
+c010c60a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c60d:	83 c0 08             	add    $0x8,%eax
+c010c610:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010c613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c616:	8b 40 04             	mov    0x4(%eax),%eax
+c010c619:	89 45 f0             	mov    %eax,-0x10(%ebp)
+                if (le != &timer_list) {
+c010c61c:	81 7d f0 b4 54 1c c0 	cmpl   $0xc01c54b4,-0x10(%ebp)
+c010c623:	74 1a                	je     c010c63f <del_timer+0x6c>
+                    timer_t *next = le2timer(le, timer_link);
+c010c625:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c628:	83 e8 08             	sub    $0x8,%eax
+c010c62b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+                    next->expires += timer->expires;
+c010c62e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c631:	8b 10                	mov    (%eax),%edx
+c010c633:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c636:	8b 00                	mov    (%eax),%eax
+c010c638:	01 c2                	add    %eax,%edx
+c010c63a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c63d:	89 10                	mov    %edx,(%eax)
+                }
+            }
+            list_del_init(&(timer->timer_link));
+c010c63f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c642:	83 c0 08             	add    $0x8,%eax
+c010c645:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c648:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c64b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010c64e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c651:	8b 40 04             	mov    0x4(%eax),%eax
+c010c654:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010c657:	8b 12                	mov    (%edx),%edx
+c010c659:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c010c65c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010c65f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010c662:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010c665:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010c668:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010c66b:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010c66e:	89 10                	mov    %edx,(%eax)
+c010c670:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c673:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010c676:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010c679:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010c67c:	89 50 04             	mov    %edx,0x4(%eax)
+c010c67f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010c682:	8b 50 04             	mov    0x4(%eax),%edx
+c010c685:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010c688:	89 10                	mov    %edx,(%eax)
+        }
+    }
+    local_intr_restore(intr_flag);
+c010c68a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c68d:	89 04 24             	mov    %eax,(%esp)
+c010c690:	e8 b8 fb ff ff       	call   c010c24d <__intr_restore>
+}
+c010c695:	c9                   	leave  
+c010c696:	c3                   	ret    
+
+c010c697 <run_timer_list>:
+
+// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
+void
+run_timer_list(void) {
+c010c697:	55                   	push   %ebp
+c010c698:	89 e5                	mov    %esp,%ebp
+c010c69a:	83 ec 38             	sub    $0x38,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010c69d:	e8 81 fb ff ff       	call   c010c223 <__intr_save>
+c010c6a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c6a5:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010c6ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c6af:	8b 40 04             	mov    0x4(%eax),%eax
+    {
+        list_entry_t *le = list_next(&timer_list);
+c010c6b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (le != &timer_list) {
+c010c6b5:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
+c010c6bc:	0f 84 fb 00 00 00    	je     c010c7bd <run_timer_list+0x126>
+            timer_t *timer = le2timer(le, timer_link);
+c010c6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c6c5:	83 e8 08             	sub    $0x8,%eax
+c010c6c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+            assert(timer->expires != 0);
+c010c6cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c6ce:	8b 00                	mov    (%eax),%eax
+c010c6d0:	85 c0                	test   %eax,%eax
+c010c6d2:	75 24                	jne    c010c6f8 <run_timer_list+0x61>
+c010c6d4:	c7 44 24 0c 7d 00 11 	movl   $0xc011007d,0xc(%esp)
+c010c6db:	c0 
+c010c6dc:	c7 44 24 08 e8 ff 10 	movl   $0xc010ffe8,0x8(%esp)
+c010c6e3:	c0 
+c010c6e4:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c010c6eb:	00 
+c010c6ec:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c6f3:	e8 c9 46 ff ff       	call   c0100dc1 <__panic>
+            timer->expires --;
+c010c6f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c6fb:	8b 00                	mov    (%eax),%eax
+c010c6fd:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c700:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c703:	89 10                	mov    %edx,(%eax)
+            while (timer->expires == 0) {
+c010c705:	e9 a6 00 00 00       	jmp    c010c7b0 <run_timer_list+0x119>
+c010c70a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c70d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c710:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c713:	8b 40 04             	mov    0x4(%eax),%eax
+                le = list_next(le);
+c010c716:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                struct proc_struct *proc = timer->proc;
+c010c719:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c71c:	8b 40 04             	mov    0x4(%eax),%eax
+c010c71f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+                if (proc->wait_state != 0) {
+c010c722:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c725:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010c72b:	85 c0                	test   %eax,%eax
+c010c72d:	74 31                	je     c010c760 <run_timer_list+0xc9>
+                    assert(proc->wait_state & WT_INTERRUPTED);
+c010c72f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c732:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010c738:	85 c0                	test   %eax,%eax
+c010c73a:	78 4a                	js     c010c786 <run_timer_list+0xef>
+c010c73c:	c7 44 24 0c 94 00 11 	movl   $0xc0110094,0xc(%esp)
+c010c743:	c0 
+c010c744:	c7 44 24 08 e8 ff 10 	movl   $0xc010ffe8,0x8(%esp)
+c010c74b:	c0 
+c010c74c:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c010c753:	00 
+c010c754:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c75b:	e8 61 46 ff ff       	call   c0100dc1 <__panic>
+                }
+                else {
+                    warn("process %d's wait_state == 0.\n", proc->pid);
+c010c760:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c763:	8b 40 04             	mov    0x4(%eax),%eax
+c010c766:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c76a:	c7 44 24 08 b8 00 11 	movl   $0xc01100b8,0x8(%esp)
+c010c771:	c0 
+c010c772:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
+c010c779:	00 
+c010c77a:	c7 04 24 fd ff 10 c0 	movl   $0xc010fffd,(%esp)
+c010c781:	e8 a7 46 ff ff       	call   c0100e2d <__warn>
+                }
+                wakeup_proc(proc);
+c010c786:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c789:	89 04 24             	mov    %eax,(%esp)
+c010c78c:	e8 dd fb ff ff       	call   c010c36e <wakeup_proc>
+                del_timer(timer);
+c010c791:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c794:	89 04 24             	mov    %eax,(%esp)
+c010c797:	e8 37 fe ff ff       	call   c010c5d3 <del_timer>
+                if (le == &timer_list) {
+c010c79c:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
+c010c7a3:	75 02                	jne    c010c7a7 <run_timer_list+0x110>
+                    break;
+c010c7a5:	eb 16                	jmp    c010c7bd <run_timer_list+0x126>
+                }
+                timer = le2timer(le, timer_link);
+c010c7a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c7aa:	83 e8 08             	sub    $0x8,%eax
+c010c7ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        list_entry_t *le = list_next(&timer_list);
+        if (le != &timer_list) {
+            timer_t *timer = le2timer(le, timer_link);
+            assert(timer->expires != 0);
+            timer->expires --;
+            while (timer->expires == 0) {
+c010c7b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c7b3:	8b 00                	mov    (%eax),%eax
+c010c7b5:	85 c0                	test   %eax,%eax
+c010c7b7:	0f 84 4d ff ff ff    	je     c010c70a <run_timer_list+0x73>
+                    break;
+                }
+                timer = le2timer(le, timer_link);
+            }
+        }
+        sched_class_proc_tick(current);
+c010c7bd:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c7c2:	89 04 24             	mov    %eax,(%esp)
+c010c7c5:	e8 ff fa ff ff       	call   c010c2c9 <sched_class_proc_tick>
+    }
+    local_intr_restore(intr_flag);
+c010c7ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c7cd:	89 04 24             	mov    %eax,(%esp)
+c010c7d0:	e8 78 fa ff ff       	call   c010c24d <__intr_restore>
+}
+c010c7d5:	c9                   	leave  
+c010c7d6:	c3                   	ret    
+
+c010c7d7 <sys_exit>:
+#include <pmm.h>
+#include <assert.h>
+#include <clock.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010c7d7:	55                   	push   %ebp
+c010c7d8:	89 e5                	mov    %esp,%ebp
+c010c7da:	83 ec 28             	sub    $0x28,%esp
+    int error_code = (int)arg[0];
+c010c7dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c7e0:	8b 00                	mov    (%eax),%eax
+c010c7e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010c7e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c7e8:	89 04 24             	mov    %eax,(%esp)
+c010c7eb:	e8 74 e7 ff ff       	call   c010af64 <do_exit>
+}
+c010c7f0:	c9                   	leave  
+c010c7f1:	c3                   	ret    
+
+c010c7f2 <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010c7f2:	55                   	push   %ebp
+c010c7f3:	89 e5                	mov    %esp,%ebp
+c010c7f5:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010c7f8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c7fd:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010c800:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010c803:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c806:	8b 40 44             	mov    0x44(%eax),%eax
+c010c809:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010c80c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c80f:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c813:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c816:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c81a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010c821:	e8 19 e6 ff ff       	call   c010ae3f <do_fork>
+}
+c010c826:	c9                   	leave  
+c010c827:	c3                   	ret    
+
+c010c828 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010c828:	55                   	push   %ebp
+c010c829:	89 e5                	mov    %esp,%ebp
+c010c82b:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010c82e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c831:	8b 00                	mov    (%eax),%eax
+c010c833:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010c836:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c839:	83 c0 04             	add    $0x4,%eax
+c010c83c:	8b 00                	mov    (%eax),%eax
+c010c83e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010c841:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c844:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c848:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c84b:	89 04 24             	mov    %eax,(%esp)
+c010c84e:	e8 b9 f0 ff ff       	call   c010b90c <do_wait>
+}
+c010c853:	c9                   	leave  
+c010c854:	c3                   	ret    
+
+c010c855 <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010c855:	55                   	push   %ebp
+c010c856:	89 e5                	mov    %esp,%ebp
+c010c858:	83 ec 28             	sub    $0x28,%esp
+    const char *name = (const char *)arg[0];
+c010c85b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c85e:	8b 00                	mov    (%eax),%eax
+c010c860:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010c863:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c866:	8b 40 04             	mov    0x4(%eax),%eax
+c010c869:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010c86c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c86f:	83 c0 08             	add    $0x8,%eax
+c010c872:	8b 00                	mov    (%eax),%eax
+c010c874:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010c877:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c87a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010c87d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010c880:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c883:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c887:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c88a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c88e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c891:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c895:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c898:	89 04 24             	mov    %eax,(%esp)
+c010c89b:	e8 20 ef ff ff       	call   c010b7c0 <do_execve>
+}
+c010c8a0:	c9                   	leave  
+c010c8a1:	c3                   	ret    
+
+c010c8a2 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010c8a2:	55                   	push   %ebp
+c010c8a3:	89 e5                	mov    %esp,%ebp
+c010c8a5:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010c8a8:	e8 49 f0 ff ff       	call   c010b8f6 <do_yield>
+}
+c010c8ad:	c9                   	leave  
+c010c8ae:	c3                   	ret    
+
+c010c8af <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010c8af:	55                   	push   %ebp
+c010c8b0:	89 e5                	mov    %esp,%ebp
+c010c8b2:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010c8b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c8b8:	8b 00                	mov    (%eax),%eax
+c010c8ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010c8bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c8c0:	89 04 24             	mov    %eax,(%esp)
+c010c8c3:	e8 e4 f1 ff ff       	call   c010baac <do_kill>
+}
+c010c8c8:	c9                   	leave  
+c010c8c9:	c3                   	ret    
+
+c010c8ca <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010c8ca:	55                   	push   %ebp
+c010c8cb:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010c8cd:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c8d2:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010c8d5:	5d                   	pop    %ebp
+c010c8d6:	c3                   	ret    
+
+c010c8d7 <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010c8d7:	55                   	push   %ebp
+c010c8d8:	89 e5                	mov    %esp,%ebp
+c010c8da:	83 ec 28             	sub    $0x28,%esp
+    int c = (int)arg[0];
+c010c8dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c8e0:	8b 00                	mov    (%eax),%eax
+c010c8e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010c8e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c8e8:	89 04 24             	mov    %eax,(%esp)
+c010c8eb:	e8 8e 3a ff ff       	call   c010037e <cputchar>
+    return 0;
+c010c8f0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c8f5:	c9                   	leave  
+c010c8f6:	c3                   	ret    
+
+c010c8f7 <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010c8f7:	55                   	push   %ebp
+c010c8f8:	89 e5                	mov    %esp,%ebp
+c010c8fa:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010c8fd:	e8 a3 a3 ff ff       	call   c0106ca5 <print_pgdir>
+    return 0;
+c010c902:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c907:	c9                   	leave  
+c010c908:	c3                   	ret    
+
+c010c909 <sys_gettime>:
+
+static int
+sys_gettime(uint32_t arg[]) {
+c010c909:	55                   	push   %ebp
+c010c90a:	89 e5                	mov    %esp,%ebp
+    return (int)ticks;
+c010c90c:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
+}
+c010c911:	5d                   	pop    %ebp
+c010c912:	c3                   	ret    
+
+c010c913 <sys_lab6_set_priority>:
+static int
+sys_lab6_set_priority(uint32_t arg[])
+{
+c010c913:	55                   	push   %ebp
+c010c914:	89 e5                	mov    %esp,%ebp
+c010c916:	83 ec 28             	sub    $0x28,%esp
+    uint32_t priority = (uint32_t)arg[0];
+c010c919:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c91c:	8b 00                	mov    (%eax),%eax
+c010c91e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    lab6_set_priority(priority);
+c010c921:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c924:	89 04 24             	mov    %eax,(%esp)
+c010c927:	e8 ec f5 ff ff       	call   c010bf18 <lab6_set_priority>
+    return 0;
+c010c92c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c931:	c9                   	leave  
+c010c932:	c3                   	ret    
+
+c010c933 <sys_sleep>:
+
+static int
+sys_sleep(uint32_t arg[]) {
+c010c933:	55                   	push   %ebp
+c010c934:	89 e5                	mov    %esp,%ebp
+c010c936:	83 ec 28             	sub    $0x28,%esp
+    unsigned int time = (unsigned int)arg[0];
+c010c939:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c93c:	8b 00                	mov    (%eax),%eax
+c010c93e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_sleep(time);
+c010c941:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c944:	89 04 24             	mov    %eax,(%esp)
+c010c947:	e8 f6 f5 ff ff       	call   c010bf42 <do_sleep>
+}
+c010c94c:	c9                   	leave  
+c010c94d:	c3                   	ret    
+
+c010c94e <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010c94e:	55                   	push   %ebp
+c010c94f:	89 e5                	mov    %esp,%ebp
+c010c951:	83 ec 48             	sub    $0x48,%esp
+    struct trapframe *tf = current->tf;
+c010c954:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c959:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010c95c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010c95f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c962:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010c965:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010c968:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010c96c:	78 60                	js     c010c9ce <syscall+0x80>
+c010c96e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c971:	3d ff 00 00 00       	cmp    $0xff,%eax
+c010c976:	77 56                	ja     c010c9ce <syscall+0x80>
+        if (syscalls[num] != NULL) {
+c010c978:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c97b:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
+c010c982:	85 c0                	test   %eax,%eax
+c010c984:	74 48                	je     c010c9ce <syscall+0x80>
+            arg[0] = tf->tf_regs.reg_edx;
+c010c986:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c989:	8b 40 14             	mov    0x14(%eax),%eax
+c010c98c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010c98f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c992:	8b 40 18             	mov    0x18(%eax),%eax
+c010c995:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010c998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c99b:	8b 40 10             	mov    0x10(%eax),%eax
+c010c99e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010c9a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c9a4:	8b 00                	mov    (%eax),%eax
+c010c9a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010c9a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c9ac:	8b 40 04             	mov    0x4(%eax),%eax
+c010c9af:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010c9b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c9b5:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
+c010c9bc:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010c9bf:	89 14 24             	mov    %edx,(%esp)
+c010c9c2:	ff d0                	call   *%eax
+c010c9c4:	89 c2                	mov    %eax,%edx
+c010c9c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c9c9:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010c9cc:	eb 46                	jmp    c010ca14 <syscall+0xc6>
+        }
+    }
+    print_trapframe(tf);
+c010c9ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c9d1:	89 04 24             	mov    %eax,(%esp)
+c010c9d4:	e8 d8 5a ff ff       	call   c01024b1 <print_trapframe>
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010c9d9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c9de:	8d 50 48             	lea    0x48(%eax),%edx
+c010c9e1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
+c010c9e6:	8b 40 04             	mov    0x4(%eax),%eax
+c010c9e9:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010c9ed:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010c9f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c9f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c9f8:	c7 44 24 08 d8 00 11 	movl   $0xc01100d8,0x8(%esp)
+c010c9ff:	c0 
+c010ca00:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
+c010ca07:	00 
+c010ca08:	c7 04 24 04 01 11 c0 	movl   $0xc0110104,(%esp)
+c010ca0f:	e8 ad 43 ff ff       	call   c0100dc1 <__panic>
+            num, current->pid, current->name);
+}
+c010ca14:	c9                   	leave  
+c010ca15:	c3                   	ret    
+
+c010ca16 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010ca16:	55                   	push   %ebp
+c010ca17:	89 e5                	mov    %esp,%ebp
+c010ca19:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010ca1c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ca1f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010ca25:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010ca28:	b8 20 00 00 00       	mov    $0x20,%eax
+c010ca2d:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010ca30:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010ca33:	89 c1                	mov    %eax,%ecx
+c010ca35:	d3 ea                	shr    %cl,%edx
+c010ca37:	89 d0                	mov    %edx,%eax
+}
+c010ca39:	c9                   	leave  
+c010ca3a:	c3                   	ret    
+
+c010ca3b <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010ca3b:	55                   	push   %ebp
+c010ca3c:	89 e5                	mov    %esp,%ebp
+c010ca3e:	83 ec 58             	sub    $0x58,%esp
+c010ca41:	8b 45 10             	mov    0x10(%ebp),%eax
+c010ca44:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010ca47:	8b 45 14             	mov    0x14(%ebp),%eax
+c010ca4a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010ca4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010ca50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010ca53:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ca56:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010ca59:	8b 45 18             	mov    0x18(%ebp),%eax
+c010ca5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010ca5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ca62:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010ca65:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010ca68:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010ca6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ca6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ca71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ca75:	74 1c                	je     c010ca93 <printnum+0x58>
+c010ca77:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ca7a:	ba 00 00 00 00       	mov    $0x0,%edx
+c010ca7f:	f7 75 e4             	divl   -0x1c(%ebp)
+c010ca82:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010ca85:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ca88:	ba 00 00 00 00       	mov    $0x0,%edx
+c010ca8d:	f7 75 e4             	divl   -0x1c(%ebp)
+c010ca90:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ca93:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010ca96:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010ca99:	f7 75 e4             	divl   -0x1c(%ebp)
+c010ca9c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010ca9f:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010caa2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010caa5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010caa8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010caab:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010caae:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010cab1:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010cab4:	8b 45 18             	mov    0x18(%ebp),%eax
+c010cab7:	ba 00 00 00 00       	mov    $0x0,%edx
+c010cabc:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010cabf:	77 56                	ja     c010cb17 <printnum+0xdc>
+c010cac1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010cac4:	72 05                	jb     c010cacb <printnum+0x90>
+c010cac6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010cac9:	77 4c                	ja     c010cb17 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010cacb:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010cace:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010cad1:	8b 45 20             	mov    0x20(%ebp),%eax
+c010cad4:	89 44 24 18          	mov    %eax,0x18(%esp)
+c010cad8:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010cadc:	8b 45 18             	mov    0x18(%ebp),%eax
+c010cadf:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010cae3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010cae6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010cae9:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010caed:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010caf1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010caf4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010caf8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cafb:	89 04 24             	mov    %eax,(%esp)
+c010cafe:	e8 38 ff ff ff       	call   c010ca3b <printnum>
+c010cb03:	eb 1c                	jmp    c010cb21 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010cb05:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cb08:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cb0c:	8b 45 20             	mov    0x20(%ebp),%eax
+c010cb0f:	89 04 24             	mov    %eax,(%esp)
+c010cb12:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb15:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010cb17:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c010cb1b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010cb1f:	7f e4                	jg     c010cb05 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010cb21:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010cb24:	05 24 02 11 c0       	add    $0xc0110224,%eax
+c010cb29:	0f b6 00             	movzbl (%eax),%eax
+c010cb2c:	0f be c0             	movsbl %al,%eax
+c010cb2f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010cb32:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010cb36:	89 04 24             	mov    %eax,(%esp)
+c010cb39:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb3c:	ff d0                	call   *%eax
+}
+c010cb3e:	c9                   	leave  
+c010cb3f:	c3                   	ret    
+
+c010cb40 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010cb40:	55                   	push   %ebp
+c010cb41:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010cb43:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010cb47:	7e 14                	jle    c010cb5d <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010cb49:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb4c:	8b 00                	mov    (%eax),%eax
+c010cb4e:	8d 48 08             	lea    0x8(%eax),%ecx
+c010cb51:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cb54:	89 0a                	mov    %ecx,(%edx)
+c010cb56:	8b 50 04             	mov    0x4(%eax),%edx
+c010cb59:	8b 00                	mov    (%eax),%eax
+c010cb5b:	eb 30                	jmp    c010cb8d <getuint+0x4d>
+    }
+    else if (lflag) {
+c010cb5d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010cb61:	74 16                	je     c010cb79 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010cb63:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb66:	8b 00                	mov    (%eax),%eax
+c010cb68:	8d 48 04             	lea    0x4(%eax),%ecx
+c010cb6b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cb6e:	89 0a                	mov    %ecx,(%edx)
+c010cb70:	8b 00                	mov    (%eax),%eax
+c010cb72:	ba 00 00 00 00       	mov    $0x0,%edx
+c010cb77:	eb 14                	jmp    c010cb8d <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010cb79:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb7c:	8b 00                	mov    (%eax),%eax
+c010cb7e:	8d 48 04             	lea    0x4(%eax),%ecx
+c010cb81:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cb84:	89 0a                	mov    %ecx,(%edx)
+c010cb86:	8b 00                	mov    (%eax),%eax
+c010cb88:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010cb8d:	5d                   	pop    %ebp
+c010cb8e:	c3                   	ret    
+
+c010cb8f <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010cb8f:	55                   	push   %ebp
+c010cb90:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010cb92:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010cb96:	7e 14                	jle    c010cbac <getint+0x1d>
+        return va_arg(*ap, long long);
+c010cb98:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb9b:	8b 00                	mov    (%eax),%eax
+c010cb9d:	8d 48 08             	lea    0x8(%eax),%ecx
+c010cba0:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cba3:	89 0a                	mov    %ecx,(%edx)
+c010cba5:	8b 50 04             	mov    0x4(%eax),%edx
+c010cba8:	8b 00                	mov    (%eax),%eax
+c010cbaa:	eb 28                	jmp    c010cbd4 <getint+0x45>
+    }
+    else if (lflag) {
+c010cbac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010cbb0:	74 12                	je     c010cbc4 <getint+0x35>
+        return va_arg(*ap, long);
+c010cbb2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cbb5:	8b 00                	mov    (%eax),%eax
+c010cbb7:	8d 48 04             	lea    0x4(%eax),%ecx
+c010cbba:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cbbd:	89 0a                	mov    %ecx,(%edx)
+c010cbbf:	8b 00                	mov    (%eax),%eax
+c010cbc1:	99                   	cltd   
+c010cbc2:	eb 10                	jmp    c010cbd4 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010cbc4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cbc7:	8b 00                	mov    (%eax),%eax
+c010cbc9:	8d 48 04             	lea    0x4(%eax),%ecx
+c010cbcc:	8b 55 08             	mov    0x8(%ebp),%edx
+c010cbcf:	89 0a                	mov    %ecx,(%edx)
+c010cbd1:	8b 00                	mov    (%eax),%eax
+c010cbd3:	99                   	cltd   
+    }
+}
+c010cbd4:	5d                   	pop    %ebp
+c010cbd5:	c3                   	ret    
+
+c010cbd6 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010cbd6:	55                   	push   %ebp
+c010cbd7:	89 e5                	mov    %esp,%ebp
+c010cbd9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010cbdc:	8d 45 14             	lea    0x14(%ebp),%eax
+c010cbdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010cbe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010cbe5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010cbe9:	8b 45 10             	mov    0x10(%ebp),%eax
+c010cbec:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010cbf0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cbf3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cbf7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cbfa:	89 04 24             	mov    %eax,(%esp)
+c010cbfd:	e8 02 00 00 00       	call   c010cc04 <vprintfmt>
+    va_end(ap);
+}
+c010cc02:	c9                   	leave  
+c010cc03:	c3                   	ret    
+
+c010cc04 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010cc04:	55                   	push   %ebp
+c010cc05:	89 e5                	mov    %esp,%ebp
+c010cc07:	56                   	push   %esi
+c010cc08:	53                   	push   %ebx
+c010cc09:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010cc0c:	eb 18                	jmp    c010cc26 <vprintfmt+0x22>
+            if (ch == '\0') {
+c010cc0e:	85 db                	test   %ebx,%ebx
+c010cc10:	75 05                	jne    c010cc17 <vprintfmt+0x13>
+                return;
+c010cc12:	e9 d1 03 00 00       	jmp    c010cfe8 <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+c010cc17:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cc1a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cc1e:	89 1c 24             	mov    %ebx,(%esp)
+c010cc21:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cc24:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010cc26:	8b 45 10             	mov    0x10(%ebp),%eax
+c010cc29:	8d 50 01             	lea    0x1(%eax),%edx
+c010cc2c:	89 55 10             	mov    %edx,0x10(%ebp)
+c010cc2f:	0f b6 00             	movzbl (%eax),%eax
+c010cc32:	0f b6 d8             	movzbl %al,%ebx
+c010cc35:	83 fb 25             	cmp    $0x25,%ebx
+c010cc38:	75 d4                	jne    c010cc0e <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010cc3a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010cc3e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010cc45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010cc48:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010cc4b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010cc52:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010cc55:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010cc58:	8b 45 10             	mov    0x10(%ebp),%eax
+c010cc5b:	8d 50 01             	lea    0x1(%eax),%edx
+c010cc5e:	89 55 10             	mov    %edx,0x10(%ebp)
+c010cc61:	0f b6 00             	movzbl (%eax),%eax
+c010cc64:	0f b6 d8             	movzbl %al,%ebx
+c010cc67:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010cc6a:	83 f8 55             	cmp    $0x55,%eax
+c010cc6d:	0f 87 44 03 00 00    	ja     c010cfb7 <vprintfmt+0x3b3>
+c010cc73:	8b 04 85 48 02 11 c0 	mov    -0x3feefdb8(,%eax,4),%eax
+c010cc7a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010cc7c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010cc80:	eb d6                	jmp    c010cc58 <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010cc82:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010cc86:	eb d0                	jmp    c010cc58 <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010cc88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010cc8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010cc92:	89 d0                	mov    %edx,%eax
+c010cc94:	c1 e0 02             	shl    $0x2,%eax
+c010cc97:	01 d0                	add    %edx,%eax
+c010cc99:	01 c0                	add    %eax,%eax
+c010cc9b:	01 d8                	add    %ebx,%eax
+c010cc9d:	83 e8 30             	sub    $0x30,%eax
+c010cca0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010cca3:	8b 45 10             	mov    0x10(%ebp),%eax
+c010cca6:	0f b6 00             	movzbl (%eax),%eax
+c010cca9:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010ccac:	83 fb 2f             	cmp    $0x2f,%ebx
+c010ccaf:	7e 0b                	jle    c010ccbc <vprintfmt+0xb8>
+c010ccb1:	83 fb 39             	cmp    $0x39,%ebx
+c010ccb4:	7f 06                	jg     c010ccbc <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010ccb6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c010ccba:	eb d3                	jmp    c010cc8f <vprintfmt+0x8b>
+            goto process_precision;
+c010ccbc:	eb 33                	jmp    c010ccf1 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+c010ccbe:	8b 45 14             	mov    0x14(%ebp),%eax
+c010ccc1:	8d 50 04             	lea    0x4(%eax),%edx
+c010ccc4:	89 55 14             	mov    %edx,0x14(%ebp)
+c010ccc7:	8b 00                	mov    (%eax),%eax
+c010ccc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010cccc:	eb 23                	jmp    c010ccf1 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+c010ccce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010ccd2:	79 0c                	jns    c010cce0 <vprintfmt+0xdc>
+                width = 0;
+c010ccd4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010ccdb:	e9 78 ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+c010cce0:	e9 73 ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+c010cce5:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010ccec:	e9 67 ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+c010ccf1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010ccf5:	79 12                	jns    c010cd09 <vprintfmt+0x105>
+                width = precision, precision = -1;
+c010ccf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010ccfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ccfd:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010cd04:	e9 4f ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+c010cd09:	e9 4a ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010cd0e:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c010cd12:	e9 41 ff ff ff       	jmp    c010cc58 <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010cd17:	8b 45 14             	mov    0x14(%ebp),%eax
+c010cd1a:	8d 50 04             	lea    0x4(%eax),%edx
+c010cd1d:	89 55 14             	mov    %edx,0x14(%ebp)
+c010cd20:	8b 00                	mov    (%eax),%eax
+c010cd22:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010cd25:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010cd29:	89 04 24             	mov    %eax,(%esp)
+c010cd2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cd2f:	ff d0                	call   *%eax
+            break;
+c010cd31:	e9 ac 02 00 00       	jmp    c010cfe2 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010cd36:	8b 45 14             	mov    0x14(%ebp),%eax
+c010cd39:	8d 50 04             	lea    0x4(%eax),%edx
+c010cd3c:	89 55 14             	mov    %edx,0x14(%ebp)
+c010cd3f:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010cd41:	85 db                	test   %ebx,%ebx
+c010cd43:	79 02                	jns    c010cd47 <vprintfmt+0x143>
+                err = -err;
+c010cd45:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010cd47:	83 fb 18             	cmp    $0x18,%ebx
+c010cd4a:	7f 0b                	jg     c010cd57 <vprintfmt+0x153>
+c010cd4c:	8b 34 9d c0 01 11 c0 	mov    -0x3feefe40(,%ebx,4),%esi
+c010cd53:	85 f6                	test   %esi,%esi
+c010cd55:	75 23                	jne    c010cd7a <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+c010cd57:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c010cd5b:	c7 44 24 08 35 02 11 	movl   $0xc0110235,0x8(%esp)
+c010cd62:	c0 
+c010cd63:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cd66:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cd6a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cd6d:	89 04 24             	mov    %eax,(%esp)
+c010cd70:	e8 61 fe ff ff       	call   c010cbd6 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010cd75:	e9 68 02 00 00       	jmp    c010cfe2 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c010cd7a:	89 74 24 0c          	mov    %esi,0xc(%esp)
+c010cd7e:	c7 44 24 08 3e 02 11 	movl   $0xc011023e,0x8(%esp)
+c010cd85:	c0 
+c010cd86:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cd89:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cd8d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cd90:	89 04 24             	mov    %eax,(%esp)
+c010cd93:	e8 3e fe ff ff       	call   c010cbd6 <printfmt>
+            }
+            break;
+c010cd98:	e9 45 02 00 00       	jmp    c010cfe2 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010cd9d:	8b 45 14             	mov    0x14(%ebp),%eax
+c010cda0:	8d 50 04             	lea    0x4(%eax),%edx
+c010cda3:	89 55 14             	mov    %edx,0x14(%ebp)
+c010cda6:	8b 30                	mov    (%eax),%esi
+c010cda8:	85 f6                	test   %esi,%esi
+c010cdaa:	75 05                	jne    c010cdb1 <vprintfmt+0x1ad>
+                p = "(null)";
+c010cdac:	be 41 02 11 c0       	mov    $0xc0110241,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010cdb1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010cdb5:	7e 3e                	jle    c010cdf5 <vprintfmt+0x1f1>
+c010cdb7:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010cdbb:	74 38                	je     c010cdf5 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010cdbd:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+c010cdc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010cdc3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cdc7:	89 34 24             	mov    %esi,(%esp)
+c010cdca:	e8 ed 03 00 00       	call   c010d1bc <strnlen>
+c010cdcf:	29 c3                	sub    %eax,%ebx
+c010cdd1:	89 d8                	mov    %ebx,%eax
+c010cdd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010cdd6:	eb 17                	jmp    c010cdef <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+c010cdd8:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010cddc:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010cddf:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010cde3:	89 04 24             	mov    %eax,(%esp)
+c010cde6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cde9:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010cdeb:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010cdef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010cdf3:	7f e3                	jg     c010cdd8 <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010cdf5:	eb 38                	jmp    c010ce2f <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010cdf7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010cdfb:	74 1f                	je     c010ce1c <vprintfmt+0x218>
+c010cdfd:	83 fb 1f             	cmp    $0x1f,%ebx
+c010ce00:	7e 05                	jle    c010ce07 <vprintfmt+0x203>
+c010ce02:	83 fb 7e             	cmp    $0x7e,%ebx
+c010ce05:	7e 15                	jle    c010ce1c <vprintfmt+0x218>
+                    putch('?', putdat);
+c010ce07:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ce0a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ce0e:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+c010ce15:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ce18:	ff d0                	call   *%eax
+c010ce1a:	eb 0f                	jmp    c010ce2b <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+c010ce1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ce1f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ce23:	89 1c 24             	mov    %ebx,(%esp)
+c010ce26:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ce29:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010ce2b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010ce2f:	89 f0                	mov    %esi,%eax
+c010ce31:	8d 70 01             	lea    0x1(%eax),%esi
+c010ce34:	0f b6 00             	movzbl (%eax),%eax
+c010ce37:	0f be d8             	movsbl %al,%ebx
+c010ce3a:	85 db                	test   %ebx,%ebx
+c010ce3c:	74 10                	je     c010ce4e <vprintfmt+0x24a>
+c010ce3e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010ce42:	78 b3                	js     c010cdf7 <vprintfmt+0x1f3>
+c010ce44:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c010ce48:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010ce4c:	79 a9                	jns    c010cdf7 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010ce4e:	eb 17                	jmp    c010ce67 <vprintfmt+0x263>
+                putch(' ', putdat);
+c010ce50:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ce53:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ce57:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010ce5e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ce61:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010ce63:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010ce67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010ce6b:	7f e3                	jg     c010ce50 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+c010ce6d:	e9 70 01 00 00       	jmp    c010cfe2 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010ce72:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010ce75:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ce79:	8d 45 14             	lea    0x14(%ebp),%eax
+c010ce7c:	89 04 24             	mov    %eax,(%esp)
+c010ce7f:	e8 0b fd ff ff       	call   c010cb8f <getint>
+c010ce84:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ce87:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010ce8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ce8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010ce90:	85 d2                	test   %edx,%edx
+c010ce92:	79 26                	jns    c010ceba <vprintfmt+0x2b6>
+                putch('-', putdat);
+c010ce94:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ce97:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ce9b:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+c010cea2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cea5:	ff d0                	call   *%eax
+                num = -(long long)num;
+c010cea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ceaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010cead:	f7 d8                	neg    %eax
+c010ceaf:	83 d2 00             	adc    $0x0,%edx
+c010ceb2:	f7 da                	neg    %edx
+c010ceb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ceb7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010ceba:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010cec1:	e9 a8 00 00 00       	jmp    c010cf6e <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010cec6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010cec9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cecd:	8d 45 14             	lea    0x14(%ebp),%eax
+c010ced0:	89 04 24             	mov    %eax,(%esp)
+c010ced3:	e8 68 fc ff ff       	call   c010cb40 <getuint>
+c010ced8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010cedb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010cede:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010cee5:	e9 84 00 00 00       	jmp    c010cf6e <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010ceea:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010ceed:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cef1:	8d 45 14             	lea    0x14(%ebp),%eax
+c010cef4:	89 04 24             	mov    %eax,(%esp)
+c010cef7:	e8 44 fc ff ff       	call   c010cb40 <getuint>
+c010cefc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ceff:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010cf02:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010cf09:	eb 63                	jmp    c010cf6e <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010cf0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cf0e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cf12:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+c010cf19:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cf1c:	ff d0                	call   *%eax
+            putch('x', putdat);
+c010cf1e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cf21:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cf25:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+c010cf2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cf2f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010cf31:	8b 45 14             	mov    0x14(%ebp),%eax
+c010cf34:	8d 50 04             	lea    0x4(%eax),%edx
+c010cf37:	89 55 14             	mov    %edx,0x14(%ebp)
+c010cf3a:	8b 00                	mov    (%eax),%eax
+c010cf3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010cf3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010cf46:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010cf4d:	eb 1f                	jmp    c010cf6e <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010cf4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010cf52:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cf56:	8d 45 14             	lea    0x14(%ebp),%eax
+c010cf59:	89 04 24             	mov    %eax,(%esp)
+c010cf5c:	e8 df fb ff ff       	call   c010cb40 <getuint>
+c010cf61:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010cf64:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010cf67:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010cf6e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010cf72:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010cf75:	89 54 24 18          	mov    %edx,0x18(%esp)
+c010cf79:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010cf7c:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010cf80:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010cf84:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010cf87:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010cf8a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010cf8e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010cf92:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cf95:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cf99:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cf9c:	89 04 24             	mov    %eax,(%esp)
+c010cf9f:	e8 97 fa ff ff       	call   c010ca3b <printnum>
+            break;
+c010cfa4:	eb 3c                	jmp    c010cfe2 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010cfa6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cfa9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cfad:	89 1c 24             	mov    %ebx,(%esp)
+c010cfb0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cfb3:	ff d0                	call   *%eax
+            break;
+c010cfb5:	eb 2b                	jmp    c010cfe2 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010cfb7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cfba:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010cfbe:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+c010cfc5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cfc8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010cfca:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010cfce:	eb 04                	jmp    c010cfd4 <vprintfmt+0x3d0>
+c010cfd0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010cfd4:	8b 45 10             	mov    0x10(%ebp),%eax
+c010cfd7:	83 e8 01             	sub    $0x1,%eax
+c010cfda:	0f b6 00             	movzbl (%eax),%eax
+c010cfdd:	3c 25                	cmp    $0x25,%al
+c010cfdf:	75 ef                	jne    c010cfd0 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+c010cfe1:	90                   	nop
+        }
+    }
+c010cfe2:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010cfe3:	e9 3e fc ff ff       	jmp    c010cc26 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c010cfe8:	83 c4 40             	add    $0x40,%esp
+c010cfeb:	5b                   	pop    %ebx
+c010cfec:	5e                   	pop    %esi
+c010cfed:	5d                   	pop    %ebp
+c010cfee:	c3                   	ret    
+
+c010cfef <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010cfef:	55                   	push   %ebp
+c010cff0:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010cff2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cff5:	8b 40 08             	mov    0x8(%eax),%eax
+c010cff8:	8d 50 01             	lea    0x1(%eax),%edx
+c010cffb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cffe:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010d001:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d004:	8b 10                	mov    (%eax),%edx
+c010d006:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d009:	8b 40 04             	mov    0x4(%eax),%eax
+c010d00c:	39 c2                	cmp    %eax,%edx
+c010d00e:	73 12                	jae    c010d022 <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010d010:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d013:	8b 00                	mov    (%eax),%eax
+c010d015:	8d 48 01             	lea    0x1(%eax),%ecx
+c010d018:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010d01b:	89 0a                	mov    %ecx,(%edx)
+c010d01d:	8b 55 08             	mov    0x8(%ebp),%edx
+c010d020:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010d022:	5d                   	pop    %ebp
+c010d023:	c3                   	ret    
+
+c010d024 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010d024:	55                   	push   %ebp
+c010d025:	89 e5                	mov    %esp,%ebp
+c010d027:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010d02a:	8d 45 14             	lea    0x14(%ebp),%eax
+c010d02d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010d030:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d033:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010d037:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d03a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010d03e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d041:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010d045:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d048:	89 04 24             	mov    %eax,(%esp)
+c010d04b:	e8 08 00 00 00       	call   c010d058 <vsnprintf>
+c010d050:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010d053:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010d056:	c9                   	leave  
+c010d057:	c3                   	ret    
+
+c010d058 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010d058:	55                   	push   %ebp
+c010d059:	89 e5                	mov    %esp,%ebp
+c010d05b:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010d05e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d061:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010d064:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d067:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010d06a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d06d:	01 d0                	add    %edx,%eax
+c010d06f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010d072:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010d079:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010d07d:	74 0a                	je     c010d089 <vsnprintf+0x31>
+c010d07f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010d082:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d085:	39 c2                	cmp    %eax,%edx
+c010d087:	76 07                	jbe    c010d090 <vsnprintf+0x38>
+        return -E_INVAL;
+c010d089:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010d08e:	eb 2a                	jmp    c010d0ba <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010d090:	8b 45 14             	mov    0x14(%ebp),%eax
+c010d093:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010d097:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d09a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010d09e:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010d0a1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010d0a5:	c7 04 24 ef cf 10 c0 	movl   $0xc010cfef,(%esp)
+c010d0ac:	e8 53 fb ff ff       	call   c010cc04 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+c010d0b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010d0b4:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010d0b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010d0ba:	c9                   	leave  
+c010d0bb:	c3                   	ret    
+
+c010d0bc <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010d0bc:	55                   	push   %ebp
+c010d0bd:	89 e5                	mov    %esp,%ebp
+c010d0bf:	57                   	push   %edi
+c010d0c0:	56                   	push   %esi
+c010d0c1:	53                   	push   %ebx
+c010d0c2:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010d0c5:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
+c010d0ca:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
+c010d0d0:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010d0d6:	6b f0 05             	imul   $0x5,%eax,%esi
+c010d0d9:	01 f7                	add    %esi,%edi
+c010d0db:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+c010d0e0:	f7 e6                	mul    %esi
+c010d0e2:	8d 34 17             	lea    (%edi,%edx,1),%esi
+c010d0e5:	89 f2                	mov    %esi,%edx
+c010d0e7:	83 c0 0b             	add    $0xb,%eax
+c010d0ea:	83 d2 00             	adc    $0x0,%edx
+c010d0ed:	89 c7                	mov    %eax,%edi
+c010d0ef:	83 e7 ff             	and    $0xffffffff,%edi
+c010d0f2:	89 f9                	mov    %edi,%ecx
+c010d0f4:	0f b7 da             	movzwl %dx,%ebx
+c010d0f7:	89 0d c0 1e 13 c0    	mov    %ecx,0xc0131ec0
+c010d0fd:	89 1d c4 1e 13 c0    	mov    %ebx,0xc0131ec4
+    unsigned long long result = (next >> 12);
+c010d103:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
+c010d108:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
+c010d10e:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010d112:	c1 ea 0c             	shr    $0xc,%edx
+c010d115:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010d118:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010d11b:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010d122:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010d125:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010d128:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010d12b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010d12e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d131:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010d134:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010d138:	74 1c                	je     c010d156 <rand+0x9a>
+c010d13a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d13d:	ba 00 00 00 00       	mov    $0x0,%edx
+c010d142:	f7 75 dc             	divl   -0x24(%ebp)
+c010d145:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010d148:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d14b:	ba 00 00 00 00       	mov    $0x0,%edx
+c010d150:	f7 75 dc             	divl   -0x24(%ebp)
+c010d153:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010d156:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010d159:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010d15c:	f7 75 dc             	divl   -0x24(%ebp)
+c010d15f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010d162:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010d165:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010d168:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010d16b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010d16e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010d171:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010d174:	83 c4 24             	add    $0x24,%esp
+c010d177:	5b                   	pop    %ebx
+c010d178:	5e                   	pop    %esi
+c010d179:	5f                   	pop    %edi
+c010d17a:	5d                   	pop    %ebp
+c010d17b:	c3                   	ret    
+
+c010d17c <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010d17c:	55                   	push   %ebp
+c010d17d:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010d17f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d182:	ba 00 00 00 00       	mov    $0x0,%edx
+c010d187:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
+c010d18c:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
+}
+c010d192:	5d                   	pop    %ebp
+c010d193:	c3                   	ret    
+
+c010d194 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010d194:	55                   	push   %ebp
+c010d195:	89 e5                	mov    %esp,%ebp
+c010d197:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010d19a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010d1a1:	eb 04                	jmp    c010d1a7 <strlen+0x13>
+        cnt ++;
+c010d1a3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c010d1a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d1aa:	8d 50 01             	lea    0x1(%eax),%edx
+c010d1ad:	89 55 08             	mov    %edx,0x8(%ebp)
+c010d1b0:	0f b6 00             	movzbl (%eax),%eax
+c010d1b3:	84 c0                	test   %al,%al
+c010d1b5:	75 ec                	jne    c010d1a3 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010d1b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010d1ba:	c9                   	leave  
+c010d1bb:	c3                   	ret    
+
+c010d1bc <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010d1bc:	55                   	push   %ebp
+c010d1bd:	89 e5                	mov    %esp,%ebp
+c010d1bf:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010d1c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010d1c9:	eb 04                	jmp    c010d1cf <strnlen+0x13>
+        cnt ++;
+c010d1cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c010d1cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010d1d2:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010d1d5:	73 10                	jae    c010d1e7 <strnlen+0x2b>
+c010d1d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d1da:	8d 50 01             	lea    0x1(%eax),%edx
+c010d1dd:	89 55 08             	mov    %edx,0x8(%ebp)
+c010d1e0:	0f b6 00             	movzbl (%eax),%eax
+c010d1e3:	84 c0                	test   %al,%al
+c010d1e5:	75 e4                	jne    c010d1cb <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010d1e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010d1ea:	c9                   	leave  
+c010d1eb:	c3                   	ret    
+
+c010d1ec <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010d1ec:	55                   	push   %ebp
+c010d1ed:	89 e5                	mov    %esp,%ebp
+c010d1ef:	57                   	push   %edi
+c010d1f0:	56                   	push   %esi
+c010d1f1:	83 ec 20             	sub    $0x20,%esp
+c010d1f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d1f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010d1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d1fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010d200:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010d203:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010d206:	89 d1                	mov    %edx,%ecx
+c010d208:	89 c2                	mov    %eax,%edx
+c010d20a:	89 ce                	mov    %ecx,%esi
+c010d20c:	89 d7                	mov    %edx,%edi
+c010d20e:	ac                   	lods   %ds:(%esi),%al
+c010d20f:	aa                   	stos   %al,%es:(%edi)
+c010d210:	84 c0                	test   %al,%al
+c010d212:	75 fa                	jne    c010d20e <strcpy+0x22>
+c010d214:	89 fa                	mov    %edi,%edx
+c010d216:	89 f1                	mov    %esi,%ecx
+c010d218:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010d21b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010d21e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010d221:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010d224:	83 c4 20             	add    $0x20,%esp
+c010d227:	5e                   	pop    %esi
+c010d228:	5f                   	pop    %edi
+c010d229:	5d                   	pop    %ebp
+c010d22a:	c3                   	ret    
+
+c010d22b <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010d22b:	55                   	push   %ebp
+c010d22c:	89 e5                	mov    %esp,%ebp
+c010d22e:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010d231:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d234:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010d237:	eb 21                	jmp    c010d25a <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c010d239:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d23c:	0f b6 10             	movzbl (%eax),%edx
+c010d23f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010d242:	88 10                	mov    %dl,(%eax)
+c010d244:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010d247:	0f b6 00             	movzbl (%eax),%eax
+c010d24a:	84 c0                	test   %al,%al
+c010d24c:	74 04                	je     c010d252 <strncpy+0x27>
+            src ++;
+c010d24e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c010d252:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010d256:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c010d25a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d25e:	75 d9                	jne    c010d239 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c010d260:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010d263:	c9                   	leave  
+c010d264:	c3                   	ret    
+
+c010d265 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010d265:	55                   	push   %ebp
+c010d266:	89 e5                	mov    %esp,%ebp
+c010d268:	57                   	push   %edi
+c010d269:	56                   	push   %esi
+c010d26a:	83 ec 20             	sub    $0x20,%esp
+c010d26d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d270:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010d273:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d276:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c010d279:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010d27c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d27f:	89 d1                	mov    %edx,%ecx
+c010d281:	89 c2                	mov    %eax,%edx
+c010d283:	89 ce                	mov    %ecx,%esi
+c010d285:	89 d7                	mov    %edx,%edi
+c010d287:	ac                   	lods   %ds:(%esi),%al
+c010d288:	ae                   	scas   %es:(%edi),%al
+c010d289:	75 08                	jne    c010d293 <strcmp+0x2e>
+c010d28b:	84 c0                	test   %al,%al
+c010d28d:	75 f8                	jne    c010d287 <strcmp+0x22>
+c010d28f:	31 c0                	xor    %eax,%eax
+c010d291:	eb 04                	jmp    c010d297 <strcmp+0x32>
+c010d293:	19 c0                	sbb    %eax,%eax
+c010d295:	0c 01                	or     $0x1,%al
+c010d297:	89 fa                	mov    %edi,%edx
+c010d299:	89 f1                	mov    %esi,%ecx
+c010d29b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010d29e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010d2a1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c010d2a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010d2a7:	83 c4 20             	add    $0x20,%esp
+c010d2aa:	5e                   	pop    %esi
+c010d2ab:	5f                   	pop    %edi
+c010d2ac:	5d                   	pop    %ebp
+c010d2ad:	c3                   	ret    
+
+c010d2ae <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010d2ae:	55                   	push   %ebp
+c010d2af:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010d2b1:	eb 0c                	jmp    c010d2bf <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c010d2b3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010d2b7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010d2bb:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010d2bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d2c3:	74 1a                	je     c010d2df <strncmp+0x31>
+c010d2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d2c8:	0f b6 00             	movzbl (%eax),%eax
+c010d2cb:	84 c0                	test   %al,%al
+c010d2cd:	74 10                	je     c010d2df <strncmp+0x31>
+c010d2cf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d2d2:	0f b6 10             	movzbl (%eax),%edx
+c010d2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d2d8:	0f b6 00             	movzbl (%eax),%eax
+c010d2db:	38 c2                	cmp    %al,%dl
+c010d2dd:	74 d4                	je     c010d2b3 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010d2df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d2e3:	74 18                	je     c010d2fd <strncmp+0x4f>
+c010d2e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d2e8:	0f b6 00             	movzbl (%eax),%eax
+c010d2eb:	0f b6 d0             	movzbl %al,%edx
+c010d2ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d2f1:	0f b6 00             	movzbl (%eax),%eax
+c010d2f4:	0f b6 c0             	movzbl %al,%eax
+c010d2f7:	29 c2                	sub    %eax,%edx
+c010d2f9:	89 d0                	mov    %edx,%eax
+c010d2fb:	eb 05                	jmp    c010d302 <strncmp+0x54>
+c010d2fd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010d302:	5d                   	pop    %ebp
+c010d303:	c3                   	ret    
+
+c010d304 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010d304:	55                   	push   %ebp
+c010d305:	89 e5                	mov    %esp,%ebp
+c010d307:	83 ec 04             	sub    $0x4,%esp
+c010d30a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d30d:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010d310:	eb 14                	jmp    c010d326 <strchr+0x22>
+        if (*s == c) {
+c010d312:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d315:	0f b6 00             	movzbl (%eax),%eax
+c010d318:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010d31b:	75 05                	jne    c010d322 <strchr+0x1e>
+            return (char *)s;
+c010d31d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d320:	eb 13                	jmp    c010d335 <strchr+0x31>
+        }
+        s ++;
+c010d322:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c010d326:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d329:	0f b6 00             	movzbl (%eax),%eax
+c010d32c:	84 c0                	test   %al,%al
+c010d32e:	75 e2                	jne    c010d312 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c010d330:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010d335:	c9                   	leave  
+c010d336:	c3                   	ret    
+
+c010d337 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010d337:	55                   	push   %ebp
+c010d338:	89 e5                	mov    %esp,%ebp
+c010d33a:	83 ec 04             	sub    $0x4,%esp
+c010d33d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d340:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010d343:	eb 11                	jmp    c010d356 <strfind+0x1f>
+        if (*s == c) {
+c010d345:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d348:	0f b6 00             	movzbl (%eax),%eax
+c010d34b:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010d34e:	75 02                	jne    c010d352 <strfind+0x1b>
+            break;
+c010d350:	eb 0e                	jmp    c010d360 <strfind+0x29>
+        }
+        s ++;
+c010d352:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c010d356:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d359:	0f b6 00             	movzbl (%eax),%eax
+c010d35c:	84 c0                	test   %al,%al
+c010d35e:	75 e5                	jne    c010d345 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+c010d360:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010d363:	c9                   	leave  
+c010d364:	c3                   	ret    
+
+c010d365 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010d365:	55                   	push   %ebp
+c010d366:	89 e5                	mov    %esp,%ebp
+c010d368:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010d36b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010d372:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010d379:	eb 04                	jmp    c010d37f <strtol+0x1a>
+        s ++;
+c010d37b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010d37f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d382:	0f b6 00             	movzbl (%eax),%eax
+c010d385:	3c 20                	cmp    $0x20,%al
+c010d387:	74 f2                	je     c010d37b <strtol+0x16>
+c010d389:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d38c:	0f b6 00             	movzbl (%eax),%eax
+c010d38f:	3c 09                	cmp    $0x9,%al
+c010d391:	74 e8                	je     c010d37b <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010d393:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d396:	0f b6 00             	movzbl (%eax),%eax
+c010d399:	3c 2b                	cmp    $0x2b,%al
+c010d39b:	75 06                	jne    c010d3a3 <strtol+0x3e>
+        s ++;
+c010d39d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010d3a1:	eb 15                	jmp    c010d3b8 <strtol+0x53>
+    }
+    else if (*s == '-') {
+c010d3a3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d3a6:	0f b6 00             	movzbl (%eax),%eax
+c010d3a9:	3c 2d                	cmp    $0x2d,%al
+c010d3ab:	75 0b                	jne    c010d3b8 <strtol+0x53>
+        s ++, neg = 1;
+c010d3ad:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010d3b1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010d3b8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d3bc:	74 06                	je     c010d3c4 <strtol+0x5f>
+c010d3be:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010d3c2:	75 24                	jne    c010d3e8 <strtol+0x83>
+c010d3c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d3c7:	0f b6 00             	movzbl (%eax),%eax
+c010d3ca:	3c 30                	cmp    $0x30,%al
+c010d3cc:	75 1a                	jne    c010d3e8 <strtol+0x83>
+c010d3ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d3d1:	83 c0 01             	add    $0x1,%eax
+c010d3d4:	0f b6 00             	movzbl (%eax),%eax
+c010d3d7:	3c 78                	cmp    $0x78,%al
+c010d3d9:	75 0d                	jne    c010d3e8 <strtol+0x83>
+        s += 2, base = 16;
+c010d3db:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010d3df:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010d3e6:	eb 2a                	jmp    c010d412 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010d3e8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d3ec:	75 17                	jne    c010d405 <strtol+0xa0>
+c010d3ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d3f1:	0f b6 00             	movzbl (%eax),%eax
+c010d3f4:	3c 30                	cmp    $0x30,%al
+c010d3f6:	75 0d                	jne    c010d405 <strtol+0xa0>
+        s ++, base = 8;
+c010d3f8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010d3fc:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010d403:	eb 0d                	jmp    c010d412 <strtol+0xad>
+    }
+    else if (base == 0) {
+c010d405:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010d409:	75 07                	jne    c010d412 <strtol+0xad>
+        base = 10;
+c010d40b:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010d412:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d415:	0f b6 00             	movzbl (%eax),%eax
+c010d418:	3c 2f                	cmp    $0x2f,%al
+c010d41a:	7e 1b                	jle    c010d437 <strtol+0xd2>
+c010d41c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d41f:	0f b6 00             	movzbl (%eax),%eax
+c010d422:	3c 39                	cmp    $0x39,%al
+c010d424:	7f 11                	jg     c010d437 <strtol+0xd2>
+            dig = *s - '0';
+c010d426:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d429:	0f b6 00             	movzbl (%eax),%eax
+c010d42c:	0f be c0             	movsbl %al,%eax
+c010d42f:	83 e8 30             	sub    $0x30,%eax
+c010d432:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010d435:	eb 48                	jmp    c010d47f <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010d437:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d43a:	0f b6 00             	movzbl (%eax),%eax
+c010d43d:	3c 60                	cmp    $0x60,%al
+c010d43f:	7e 1b                	jle    c010d45c <strtol+0xf7>
+c010d441:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d444:	0f b6 00             	movzbl (%eax),%eax
+c010d447:	3c 7a                	cmp    $0x7a,%al
+c010d449:	7f 11                	jg     c010d45c <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c010d44b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d44e:	0f b6 00             	movzbl (%eax),%eax
+c010d451:	0f be c0             	movsbl %al,%eax
+c010d454:	83 e8 57             	sub    $0x57,%eax
+c010d457:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010d45a:	eb 23                	jmp    c010d47f <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010d45c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d45f:	0f b6 00             	movzbl (%eax),%eax
+c010d462:	3c 40                	cmp    $0x40,%al
+c010d464:	7e 3d                	jle    c010d4a3 <strtol+0x13e>
+c010d466:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d469:	0f b6 00             	movzbl (%eax),%eax
+c010d46c:	3c 5a                	cmp    $0x5a,%al
+c010d46e:	7f 33                	jg     c010d4a3 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+c010d470:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d473:	0f b6 00             	movzbl (%eax),%eax
+c010d476:	0f be c0             	movsbl %al,%eax
+c010d479:	83 e8 37             	sub    $0x37,%eax
+c010d47c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010d47f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010d482:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010d485:	7c 02                	jl     c010d489 <strtol+0x124>
+            break;
+c010d487:	eb 1a                	jmp    c010d4a3 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+c010d489:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010d48d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010d490:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010d494:	89 c2                	mov    %eax,%edx
+c010d496:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010d499:	01 d0                	add    %edx,%eax
+c010d49b:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c010d49e:	e9 6f ff ff ff       	jmp    c010d412 <strtol+0xad>
+
+    if (endptr) {
+c010d4a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010d4a7:	74 08                	je     c010d4b1 <strtol+0x14c>
+        *endptr = (char *) s;
+c010d4a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d4ac:	8b 55 08             	mov    0x8(%ebp),%edx
+c010d4af:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010d4b1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010d4b5:	74 07                	je     c010d4be <strtol+0x159>
+c010d4b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010d4ba:	f7 d8                	neg    %eax
+c010d4bc:	eb 03                	jmp    c010d4c1 <strtol+0x15c>
+c010d4be:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010d4c1:	c9                   	leave  
+c010d4c2:	c3                   	ret    
+
+c010d4c3 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010d4c3:	55                   	push   %ebp
+c010d4c4:	89 e5                	mov    %esp,%ebp
+c010d4c6:	57                   	push   %edi
+c010d4c7:	83 ec 24             	sub    $0x24,%esp
+c010d4ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d4cd:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010d4d0:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010d4d4:	8b 55 08             	mov    0x8(%ebp),%edx
+c010d4d7:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010d4da:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010d4dd:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d4e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010d4e3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010d4e6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010d4ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010d4ed:	89 d7                	mov    %edx,%edi
+c010d4ef:	f3 aa                	rep stos %al,%es:(%edi)
+c010d4f1:	89 fa                	mov    %edi,%edx
+c010d4f3:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010d4f6:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010d4f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010d4fc:	83 c4 24             	add    $0x24,%esp
+c010d4ff:	5f                   	pop    %edi
+c010d500:	5d                   	pop    %ebp
+c010d501:	c3                   	ret    
+
+c010d502 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010d502:	55                   	push   %ebp
+c010d503:	89 e5                	mov    %esp,%ebp
+c010d505:	57                   	push   %edi
+c010d506:	56                   	push   %esi
+c010d507:	53                   	push   %ebx
+c010d508:	83 ec 30             	sub    $0x30,%esp
+c010d50b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d50e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010d511:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d514:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010d517:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d51a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010d51d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d520:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010d523:	73 42                	jae    c010d567 <memmove+0x65>
+c010d525:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d528:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010d52b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010d52e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010d531:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d534:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010d537:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010d53a:	c1 e8 02             	shr    $0x2,%eax
+c010d53d:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010d53f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010d542:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010d545:	89 d7                	mov    %edx,%edi
+c010d547:	89 c6                	mov    %eax,%esi
+c010d549:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010d54b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010d54e:	83 e1 03             	and    $0x3,%ecx
+c010d551:	74 02                	je     c010d555 <memmove+0x53>
+c010d553:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010d555:	89 f0                	mov    %esi,%eax
+c010d557:	89 fa                	mov    %edi,%edx
+c010d559:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010d55c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010d55f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010d562:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010d565:	eb 36                	jmp    c010d59d <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010d567:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d56a:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010d56d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010d570:	01 c2                	add    %eax,%edx
+c010d572:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d575:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010d578:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d57b:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c010d57e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010d581:	89 c1                	mov    %eax,%ecx
+c010d583:	89 d8                	mov    %ebx,%eax
+c010d585:	89 d6                	mov    %edx,%esi
+c010d587:	89 c7                	mov    %eax,%edi
+c010d589:	fd                   	std    
+c010d58a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010d58c:	fc                   	cld    
+c010d58d:	89 f8                	mov    %edi,%eax
+c010d58f:	89 f2                	mov    %esi,%edx
+c010d591:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010d594:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010d597:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c010d59a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010d59d:	83 c4 30             	add    $0x30,%esp
+c010d5a0:	5b                   	pop    %ebx
+c010d5a1:	5e                   	pop    %esi
+c010d5a2:	5f                   	pop    %edi
+c010d5a3:	5d                   	pop    %ebp
+c010d5a4:	c3                   	ret    
+
+c010d5a5 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010d5a5:	55                   	push   %ebp
+c010d5a6:	89 e5                	mov    %esp,%ebp
+c010d5a8:	57                   	push   %edi
+c010d5a9:	56                   	push   %esi
+c010d5aa:	83 ec 20             	sub    $0x20,%esp
+c010d5ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d5b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010d5b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d5b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010d5b9:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d5bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010d5bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010d5c2:	c1 e8 02             	shr    $0x2,%eax
+c010d5c5:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010d5c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010d5ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010d5cd:	89 d7                	mov    %edx,%edi
+c010d5cf:	89 c6                	mov    %eax,%esi
+c010d5d1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010d5d3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010d5d6:	83 e1 03             	and    $0x3,%ecx
+c010d5d9:	74 02                	je     c010d5dd <memcpy+0x38>
+c010d5db:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010d5dd:	89 f0                	mov    %esi,%eax
+c010d5df:	89 fa                	mov    %edi,%edx
+c010d5e1:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010d5e4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010d5e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010d5ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010d5ed:	83 c4 20             	add    $0x20,%esp
+c010d5f0:	5e                   	pop    %esi
+c010d5f1:	5f                   	pop    %edi
+c010d5f2:	5d                   	pop    %ebp
+c010d5f3:	c3                   	ret    
+
+c010d5f4 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010d5f4:	55                   	push   %ebp
+c010d5f5:	89 e5                	mov    %esp,%ebp
+c010d5f7:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010d5fa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010d5fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010d600:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010d603:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010d606:	eb 30                	jmp    c010d638 <memcmp+0x44>
+        if (*s1 != *s2) {
+c010d608:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010d60b:	0f b6 10             	movzbl (%eax),%edx
+c010d60e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010d611:	0f b6 00             	movzbl (%eax),%eax
+c010d614:	38 c2                	cmp    %al,%dl
+c010d616:	74 18                	je     c010d630 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010d618:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010d61b:	0f b6 00             	movzbl (%eax),%eax
+c010d61e:	0f b6 d0             	movzbl %al,%edx
+c010d621:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010d624:	0f b6 00             	movzbl (%eax),%eax
+c010d627:	0f b6 c0             	movzbl %al,%eax
+c010d62a:	29 c2                	sub    %eax,%edx
+c010d62c:	89 d0                	mov    %edx,%eax
+c010d62e:	eb 1a                	jmp    c010d64a <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c010d630:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010d634:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c010d638:	8b 45 10             	mov    0x10(%ebp),%eax
+c010d63b:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010d63e:	89 55 10             	mov    %edx,0x10(%ebp)
+c010d641:	85 c0                	test   %eax,%eax
+c010d643:	75 c3                	jne    c010d608 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c010d645:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010d64a:	c9                   	leave  
+c010d64b:	c3                   	ret    
diff -r -u -P _lab7/obj/kernel.sym lab7/obj/kernel.sym
--- _lab7/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kernel.sym	2020-05-28 05:09:50.757519207 +0800
@@ -0,0 +1,777 @@
+c0100000 .text
+c010d660 .rodata
+c01103a0 .stab
+c0127555 .stabstr
+c012f000 .data
+c01c2400 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c0131018 __gdtdesc
+c0100019 relocated
+c0100028 spin
+c0131000 __gdt
+00000000 init.c
+c0100146 lab1_print_cur_status
+c01c2400 round.2058
+c010020c lab1_switch_to_user
+c0100211 lab1_switch_to_kernel
+c0100216 lab1_switch_test
+00000000 readline.c
+c01c2420 buf
+00000000 stdio.c
+c0100305 cputch
+00000000 kdebug.c
+c01003f9 stab_binsearch
+c0100abd read_eip
+00000000 kmonitor.c
+c0131020 commands
+c0100b74 parse
+c0100c2e runcmd
+00000000 panic.c
+c01c2820 is_panic
+00000000 clock.c
+00000000 console.c
+c0100ee0 __intr_save
+c0100f0a __intr_restore
+c0100f1d delay
+c01c2840 crt_buf
+c01c2844 crt_pos
+c01c2846 addr_6845
+c0100f65 cga_init
+c01c2848 serial_exists
+c010104b serial_init
+c010112e lpt_putc_sub
+c01011a7 lpt_putc
+c01011e6 cga_putc
+c01013ba serial_putc_sub
+c0101413 serial_putc
+c01c2860 cons
+c0101452 cons_intr
+c010149d serial_proc_data
+c0131060 shiftcode
+c0131160 togglecode
+c0131260 normalmap
+c0131360 shiftmap
+c0131460 ctlmap
+c0131560 charcode
+c0101511 kbd_proc_data
+c01c2a68 shift.1630
+c010169a kbd_intr
+c01016ae kbd_init
+00000000 ide.c
+c010d9b8 channels
+c01c2a80 ide_devices
+c010179e ide_wait_ready
+00000000 intr.c
+00000000 picirq.c
+c0131570 irq_mask
+c01c2b60 did_init
+c010201f pic_setmask
+00000000 trap.c
+c01021e0 print_ticks
+c01c2b80 idt
+c0131580 idt_pd
+c010246a trapname
+c010df60 excnames.1939
+c01315a0 IA32flags
+c010272d print_pgfault
+c01027aa pgfault_handler
+c01c3380 in_swap_tick_event
+c0102876 trap_dispatch
+00000000 default_pmm.c
+c0103599 page2ppn
+c01035ad page2pa
+c01035c3 page_ref
+c01035cd set_page_ref
+c01035da default_init
+c0103607 default_init_memmap
+c010375b default_alloc_pages
+c01038e1 default_free_pages
+c0103bad default_nr_free_pages
+c0103bb7 basic_check
+c01040f3 default_check
+00000000 kmalloc.c
+c010474b __intr_save
+c0104775 __intr_restore
+c0104788 page2ppn
+c010479c page2pa
+c01047b2 pa2page
+c01047f7 page2kva
+c010484b kva2page
+c0131a00 arena
+c0131a08 slobfree
+c01c3384 bigblocks
+c0104895 __slob_get_free_pages
+c01048ce __slob_free_pages
+c0104902 slob_alloc
+c0104ad7 slob_free
+c0104c30 find_order
+c0104c54 __kmalloc
+00000000 pmm.c
+c0104e9a page2ppn
+c0104eae page2pa
+c0104ec4 pa2page
+c0104f09 page2kva
+c0104f5d pte2page
+c0104f9b pde2page
+c0104fb3 page_ref
+c0104fbd set_page_ref
+c0104fca page_ref_inc
+c0104fe1 page_ref_dec
+c0104ff8 __intr_save
+c0105022 __intr_restore
+c01c33c0 ts
+c0131a20 gdt
+c0131a50 gdt_pd
+c0105035 lgdt
+c0105077 gdt_init
+c0105166 init_pmm_manager
+c0105199 init_memmap
+c0105280 page_init
+c0105661 enable_paging
+c010569a boot_map_segment
+c01057a7 boot_alloc_page
+c010615a check_alloc_page
+c0106178 check_pgdir
+c0106813 check_boot_pgdir
+c0105ab0 page_remove_pte
+c0106ba1 perm2str
+c01c3428 str.2207
+c0106bef get_pgtable_items
+00000000 swap.c
+c0106e13 pa2page
+c0106e58 pte2page
+c0106e96 pde2page
+c01c3434 sm
+c01073dd check_swap
+c010720d check_content_set
+c01073c5 check_content_access
+00000000 swap_fifo.c
+c0107a7b _fifo_init_mm
+c0107aad _fifo_map_swappable
+c0107b40 _fifo_swap_out_victim
+c0107c1e _fifo_check_swap
+c0107f73 _fifo_init
+c0107f7d _fifo_set_unswappable
+c0107f87 _fifo_tick_event
+00000000 vmm.c
+c0107f91 mm_count
+c0107f9c set_mm_count
+c0107faa pa2page
+c0107fef pde2page
+c0108198 check_vma_overlap
+c01087b3 check_vmm
+c01087d9 check_vma_struct
+c0108c72 check_pgfault
+00000000 check_sync.c
+00000000 monitor.c
+00000000 sem.c
+c01099d7 __intr_save
+c0109a01 __intr_restore
+c0109a32 __up
+c0109acb __down
+00000000 wait.c
+00000000 swapfs.c
+c010a0ce page2ppn
+c010a0e2 page2pa
+c010a0f8 page2kva
+00000000 proc.c
+c010a281 timer_init
+c010a2ba __intr_save
+c010a2e4 __intr_restore
+c010a2f7 page2ppn
+c010a30b page2pa
+c010a321 pa2page
+c010a366 page2kva
+c010a3ba kva2page
+c010a404 mm_count_inc
+c010a41e mm_count_dec
+c010a438 lock_mm
+c010a46b unlock_mm
+c01c3460 hash_list
+c01c5460 nr_process
+c010a491 alloc_proc
+c01c5480 name.1964
+c010a6a2 set_links
+c010a75c remove_links
+c010a7fd get_pid
+c0131a84 last_pid.1980
+c0131a88 next_safe.1979
+c010a96a forkret
+c010a982 hash_proc
+c010aa01 unhash_proc
+c010ab1c setup_kstack
+c010ab58 put_kstack
+c010ab7e setup_pgdir
+c010ac25 put_pgdir
+c010ac4b copy_mm
+c010ad67 copy_thread
+c010b15e load_icode
+c010bb11 kernel_execve
+c010bb4b user_main
+c010bbaa init_main
+00000000 default_sched.c
+c010bff9 RR_init
+c010c025 RR_enqueue
+c010c103 RR_dequeue
+c010c1b7 RR_pick_next
+c010c1e5 RR_proc_tick
+00000000 sched.c
+c010c223 __intr_save
+c010c24d __intr_restore
+c01c54b4 timer_list
+c01c54bc sched_class
+c01c54c0 rq
+c010c260 sched_class_enqueue
+c010c28c sched_class_dequeue
+c010c2ae sched_class_pick_next
+c010c2c9 sched_class_proc_tick
+c01c54c4 __rq
+00000000 syscall.c
+c010c7d7 sys_exit
+c010c7f2 sys_fork
+c010c828 sys_wait
+c010c855 sys_exec
+c010c8a2 sys_yield
+c010c8af sys_kill
+c010c8ca sys_getpid
+c010c8d7 sys_putc
+c010c8f7 sys_pgdir
+c010c909 sys_gettime
+c010c913 sys_lab6_set_priority
+c010c933 sys_sleep
+c0131ac0 syscalls
+00000000 hash.c
+00000000 printfmt.c
+c01101c0 error_string
+c010ca3b printnum
+c010cb40 getuint
+c010cb8f getint
+c010cfef sprintputch
+00000000 rand.c
+c0131ec0 next
+00000000 string.c
+00000000 
+c01034f1 vector242
+c0102f48 vector119
+c0100984 print_kerninfo
+c0102e28 vector87
+c0102e1f vector86
+c010355d vector251
+c010d1ec strcpy
+c0101b11 ide_device_valid
+c0102e4c vector91
+c0102c42 vector33
+c0103131 vector162
+c0103395 vector213
+c0102ee5 vector108
+c0102c9c vector43
+c0109fc5 wakeup_queue
+0000795d _binary_obj___user_yield_out_size
+c0104c1c slob_allocated
+c0100000 kern_entry
+c0100daf mon_backtrace
+c0103155 vector165
+c0139826 _binary_obj___user_badsegment_out_start
+c0103245 vector185
+c0109884 cond_signal
+c0102f24 vector115
+c0102f63 vector122
+0000795d _binary_obj___user_hello_out_size
+c0108703 copy_from_user
+c01670f0 _binary_obj___user_forktest_out_end
+c0105f70 page_insert
+c01030e9 vector156
+c0103515 vector245
+c0109c85 wait_queue_add
+c0103275 vector189
+c0102b68 vector7
+c0102d3e vector61
+c0102bf1 vector24
+c0102f00 vector111
+c01093e7 phi_test_condvar
+c01032f9 vector200
+000079b4 _binary_obj___user_testbss_out_size
+c0102d74 vector67
+c010c36e wakeup_proc
+c0104c26 kallocated
+c0106086 pgdir_alloc_page
+c0103011 vector138
+c0102db3 vector74
+c010d502 memmove
+c0102d1a vector57
+c01504ae _binary_obj___user_exit_out_end
+c0108007 mm_create
+c010d024 snprintf
+c010c94e syscall
+c01024b1 print_trapframe
+c01033a1 vector214
+c010cc04 vprintfmt
+c0102e94 vector99
+c0105a57 get_page
+c0102afe __alltraps
+c010172f cons_getc
+c0103035 vector141
+c0100e73 is_kernel_panic
+c01031a9 vector172
+c0109ee3 wait_queue_last
+c0100ace print_stackframe
+c01034e5 vector241
+c01c55c4 pra_list_head
+c0103575 vector253
+c0102b44 vector3
+c0102b20 forkrets
+c0102b3b vector2
+c010ae3f do_fork
+c010343d vector227
+c010aaaa kernel_thread
+c0103371 vector210
+c01c3440 idleproc
+c0103419 vector224
+c010a05a wait_current_set
+c01094f7 phi_put_forks_condvar
+c0102c8a vector41
+c0131a60 swap_manager_fifo
+c0100358 cprintf
+c01b307c _binary_obj___user_testbss_out_end
+c01c56bc proc_list
+c0102bd6 vector21
+c01031e5 vector177
+c0109b87 up
+c0102f3f vector118
+c0102d8f vector70
+c010840e mm_map
+c0102d86 vector69
+c01034b5 vector237
+c0102d59 vector64
+c0102c0c vector27
+c010852a dup_mmap
+c01087a6 vmm_init
+c0102fc9 vector132
+c0131ec8 _binary_obj___user_badarg_out_start
+c010862b exit_mmap
+c0103251 vector186
+0000795e _binary_obj___user_badarg_out_size
+c01033c5 vector217
+c010836c mm_destroy
+c010a278 kernel_thread_entry
+c010b90c do_wait
+c010d5a5 memcpy
+c0102b32 vector1
+c01031f1 vector178
+c0102c6f vector38
+c0104d5e kfree
+c0185741 _binary_obj___user_pgdir_out_end
+c01034c1 vector238
+c01baa9c _binary_obj___user_yield_out_start
+c010024f readline
+c016ea83 _binary_obj___user_hello_out_start
+c0102fd5 vector133
+c0102daa vector73
+c0103059 vector144
+c010e4b0 vpd
+c010002a kern_init
+c0148b38 _binary_obj___user_exit_out_start
+c0103581 vector254
+c0102ea6 vector101
+c010337d vector211
+c01031c1 vector174
+c01034fd vector243
+c01092b1 phi_put_forks_sema
+c0105d0c copy_range
+c0102f99 vector128
+c017dde4 _binary_obj___user_matrix_out_end
+c0109eb7 wait_queue_first
+c0102df2 vector81
+c010bf18 lab6_set_priority
+c0105223 free_pages
+c0102b94 vector13
+c010d058 vsnprintf
+c0102ce4 vector51
+c0102bab vector16
+c01c23f9 edata
+c01016c7 cons_init
+c0107137 swap_in
+c0101dd1 ide_write_secs
+c01c54e8 pmm_manager
+c01034d9 vector240
+c0102cff vector54
+c0102bc4 vector19
+c0127554 __STAB_END__
+c0102e55 vector92
+c0103509 vector244
+c01c342c swap_init_ok
+c01c55e0 state_sema
+c010506a load_esp0
+c0103029 vector140
+c0102cae vector45
+c0102de0 vector79
+c0103455 vector229
+c0106eae swap_init
+c0103101 vector158
+c0102077 pic_enable
+c010a14c swapfs_init
+c01c5500 check_rp
+0000795f _binary_obj___user_softint_out_size
+c0105c05 exit_range
+c0102c78 vector39
+c0103179 vector168
+c01baa9c _binary_obj___user_waitkill_out_end
+c0102c54 vector35
+c0102f12 vector113
+c0127555 __STABSTR_BEGIN__
+c010baac do_kill
+c0102f7e vector125
+c0100dc1 __panic
+c01763e0 _binary_obj___user_hello_out_end
+00007961 _binary_obj___user_sleepkill_out_size
+c0109335 philosopher_using_semaphore
+c01c3444 initproc
+c01033b9 vector216
+c0102d50 vector63
+c0102c03 vector26
+c01014f4 serial_intr
+c01032a5 vector193
+c01032c9 vector196
+c0100107 grade_backtrace0
+c0109537 philosopher_using_condvar
+c0103365 vector209
+c01c55f4 philosopher_proc_condvar
+c0102b4d vector4
+c0103191 vector170
+c010c40a schedule
+c0102ff9 vector136
+c0102b7f vector10
+c01091bf phi_test_sema
+c01a3d6c _binary_obj___user_softint_out_end
+c0103341 vector206
+c010358d vector255
+c0103215 vector181
+c0102d2c vector59
+c0100121 grade_backtrace
+c0102e16 vector85
+c0102e0d vector84
+c010bfc2 switch_to
+c010322d vector183
+c010310d vector159
+c0103389 vector212
+c0102cc0 vector47
+c010d365 strtol
+c0103449 vector228
+c0102c93 vector42
+c0102f1b vector114
+c010d1bc strnlen
+c019c40d _binary_obj___user_softint_out_start
+c01504ae _binary_obj___user_faultread_out_start
+c01031cd vector175
+c010304d vector143
+c0102fb1 vector130
+c010e328 default_pmm_manager
+c0103521 vector246
+c0102b78 vector9
+c0103041 vector142
+c0102e9d vector100
+00007993 _binary_obj___user_forktree_out_size
+c0103305 vector201
+c0102222 idt_init
+c0100a1a print_debuginfo
+c01080e7 find_vma
+c01c5520 swap_in_seq_no
+c01670f0 _binary_obj___user_forktree_out_start
+c0102d35 vector60
+c0102be8 vector23
+c01034a9 vector236
+c01c33a0 npage
+c0108eb7 do_pgfault
+c010346d vector231
+000079b0 _binary_obj___user_divzero_out_size
+c010a61d set_proc_name
+c010925f phi_take_forks_sema
+c0102d6b vector66
+c0102c1e vector29
+c0106ca5 print_pgdir
+c0102fed vector135
+c0100ce0 kmonitor
+00007962 _binary_obj___user_badsegment_out_size
+c0102dce vector77
+c0103209 vector180
+c0100e7d clock_init
+c0103359 vector208
+c0102e8b vector98
+c0102e82 vector97
+c0105255 nr_free_pages
+c0104e1a ksize
+0000795d _binary_obj___user_pgdir_out_size
+c01031d9 vector176
+c01ab6c8 _binary_obj___user_testbss_out_start
+c01032b1 vector194
+c0102c39 vector32
+c01c54ec boot_cr3
+c01c5608 mutex
+c01c56c4 end
+c01032ed vector199
+c010af64 do_exit
+c01c5620 mt
+c0102fbd vector131
+c0103569 vector252
+c0102b29 vector0
+c0157e0f _binary_obj___user_faultreadkernel_out_start
+c0141188 _binary_obj___user_badsegment_out_end
+c010d337 strfind
+00007a20 _binary_obj___user_waitkill_out_size
+c01016f3 cons_putc
+c01c5560 swap_out_seq_no
+c010d64c etext
+c0103065 vector145
+c0102edc vector107
+c01c33a4 boot_pgdir
+c0102c81 vector40
+c010c495 add_timer
+c0102013 intr_enable
+c0102eaf vector102
+c01ab6c8 _binary_obj___user_spin_out_end
+c0109a14 sem_init
+c0109ba2 down
+c0102d11 vector56
+c0102d7d vector68
+c0102b5f vector6
+c010d0bc rand
+c0102fa5 vector129
+c01032d5 vector197
+c01030b9 vector152
+c0131600 __vectors
+c010bf42 do_sleep
+c0103461 vector230
+c010d2ae strncmp
+c0109e3e wait_queue_prev
+c0104bef slob_init
+c010591f get_pte
+c0101b50 ide_device_size
+c0102c66 vector37
+c01c5588 check_swap_addr
+c0103335 vector205
+c0103125 vector161
+c01c3448 current
+c010d22b strncpy
+c0108754 copy_to_user
+c0102d98 vector71
+c0103119 vector160
+c015f776 _binary_obj___user_forktest_out_start
+c0104c03 kmalloc_init
+c01033ad vector215
+c0109f89 wakeup_first
+0000795c _binary_obj___user_spin_out_size
+c01030f5 vector157
+c0102019 intr_disable
+c0102676 print_regs
+c0109c2c wait_init
+c0109f2b wait_in_queue
+c0102f09 vector112
+c01000b6 grade_backtrace2
+c0103221 vector182
+c0102b8d vector12
+c010d5f4 memcmp
+c0109c63 wait_queue_init
+c0102eee vector109
+c0102bcd vector20
+c0102cf6 vector53
+c0102bbb vector18
+c010befd cpu_idle
+c0102e70 vector95
+c010b7c0 do_execve
+c0103431 vector226
+c0102cd2 vector49
+c0102ca5 vector44
+c0102dd7 vector78
+c01031b5 vector173
+c010a194 swapfs_read
+c0102f36 vector117
+c010249b trap_in_kernel
+c0106f9b swap_set_unswappable
+c0102dfb vector82
+c0103401 vector222
+c010c697 run_timer_list
+c0102b71 vector8
+c0103095 vector149
+c010037e cputchar
+c010d4c3 memset
+c0103479 vector232
+c0101b8f ide_read_secs
+c0102ed3 vector106
+c01033e9 vector220
+c0102e43 vector90
+c010313d vector163
+c010d17c srand
+c0109f53 wakeup_wait
+c0103491 vector234
+c0106f6e swap_map_swappable
+c0102d47 vector62
+c0102bfa vector25
+c01032e1 vector198
+c0102f51 vector120
+c0139826 _binary_obj___user_badarg_out_end
+c01003e0 getchar
+c0105f2c page_remove
+c010ca16 hash32
+c0102cdb vector50
+c0102ba2 vector15
+c01c3430 swap_out_num
+c010cbd6 printfmt
+c015f776 _binary_obj___user_faultreadkernel_out_end
+c010b8f6 do_yield
+c01c5640 state_condvar
+c01030ad vector151
+c0131a80 mtp
+c0102e04 vector83
+c0102e3a vector89
+c0102e31 vector88
+c0102a74 trap
+c01031fd vector179
+c0102c4b vector34
+c012e39d __STABSTR_END__
+c0102cb7 vector46
+c010d265 strcmp
+c0102fe1 vector134
+c010340d vector223
+c010975a monitor_init
+c0194aac _binary_obj___user_sleepkill_out_start
+c01033d1 vector218
+c010054f debuginfo_eip
+c01c5654 philosopher_proc_sema
+c01c559c max_swap_offset
+00007967 _binary_obj___user_faultreadkernel_out_size
+c010823c insert_vma_struct
+c01020a5 pic_init
+c0103425 vector225
+c010325d vector187
+c01057eb pmm_init
+c0102c27 vector30
+c0109d26 wait_queue_del
+c0102f90 vector127
+c01c5680 s
+c01c54d8 ticks
+c0103299 vector192
+c0103161 vector166
+c0102dc5 vector76
+c0102dbc vector75
+c01032bd vector195
+c01030a1 vector150
+c0102d23 vector58
+c0103539 vector248
+c016ea83 _binary_obj___user_forktree_out_end
+c0102f6c vector123
+c0102e79 vector96
+00007976 _binary_obj___user_exit_out_size
+c0102c30 vector31
+c01094b7 phi_take_forks_condvar
+c010331d vector203
+c01051b8 alloc_pages
+c01b307c _binary_obj___user_waitkill_out_start
+c010301d vector139
+c01030c5 vector153
+c0103149 vector164
+c018d138 _binary_obj___user_priority_out_end
+c0102f5a vector121
+c0102b56 vector5
+c01a3d6c _binary_obj___user_spin_out_start
+c010316d vector167
+c01030dd vector155
+c0103545 vector249
+c010e4ac vpt
+c0103551 vector250
+c0102f75 vector124
+00007974 _binary_obj___user_sleep_out_size
+c0102ef7 vector110
+c0103329 vector204
+c0157e0f _binary_obj___user_faultread_out_end
+c01c55a0 swap_page
+c017dde4 _binary_obj___user_pgdir_out_start
+c0102b15 __trapret
+c01763e0 _binary_obj___user_matrix_out_start
+c0100325 vcprintf
+c0103005 vector137
+c019c40d _binary_obj___user_sleepkill_out_end
+00007961 _binary_obj___user_faultread_out_size
+c0100e2d __warn
+c010352d vector247
+c01095e9 check_sync
+c0102bdf vector22
+c0103311 vector202
+c0102da1 vector72
+c0102d08 vector55
+c0100391 cputs
+c0131000 bootstacktop
+c010aa36 find_proc
+c0102f87 vector126
+c0102d62 vector65
+c0102c15 vector28
+c0103185 vector169
+c0106f56 swap_tick_event
+c0103485 vector233
+00007a04 _binary_obj___user_matrix_out_size
+c0106fba swap_out
+c0104d43 kmalloc
+c0148b38 _binary_obj___user_divzero_out_end
+c01080ac vma_create
+c0109f0e wait_queue_empty
+c010307d vector147
+c010a8f5 proc_run
+c012f000 bootstack
+c0102ec1 vector104
+c01c54dc free_area
+c0102f2d vector116
+c0141188 _binary_obj___user_divzero_out_start
+000079f7 _binary_obj___user_priority_out_size
+c010a206 swapfs_write
+c01103a0 __STAB_BEGIN__
+c010909c user_mem_check
+c010c301 sched_init
+c01c55b4 check_ptep
+c0102ced vector52
+c0102bb4 vector17
+c0109dc4 wait_queue_next
+c0103239 vector184
+c010d194 strlen
+c0131a8c default_sched_class
+c010c5d3 del_timer
+c010a660 get_proc_name
+c0185741 _binary_obj___user_priority_out_start
+c01c3438 pgfault_num
+c010334d vector207
+c01c23f9 _binary_obj___user_yield_out_end
+c0103281 vector190
+c01017f8 ide_init
+c01034cd vector239
+c0102e67 vector94
+c0102e5e vector93
+c0103269 vector188
+c010d304 strchr
+c0102cc9 vector48
+c01c55cc check_mm_struct
+c0106f3e swap_init_mm
+c01000da grade_backtrace1
+c01033dd vector219
+c0103089 vector148
+c01033f5 vector221
+c0102de9 vector80
+c010319d vector171
+c01030d1 vector154
+c0102c5d vector36
+c010349d vector235
+c0102eca vector105
+c0100d9d mon_kerninfo
+c0109bea try_down
+c01c54f0 pages
+c0103071 vector146
+c0105b11 unmap_range
+c010328d vector191
+c010bd3e proc_init
+c0102eb8 vector103
+c0109924 cond_wait
+c018d138 _binary_obj___user_sleep_out_start
+c0100d40 mon_help
+c0194aac _binary_obj___user_sleep_out_end
+c0102b86 vector11
+0000797a _binary_obj___user_forktest_out_size
+c0106029 tlb_invalidate
+c0102b9b vector14
diff -r -u -P _lab7/obj/libs/hash.d lab7/obj/libs/hash.d
--- _lab7/obj/libs/hash.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/hash.d	2020-05-28 05:02:22.377519207 +0800
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
Binary files _lab7/obj/libs/hash.o and lab7/obj/libs/hash.o differ
diff -r -u -P _lab7/obj/libs/printfmt.d lab7/obj/libs/printfmt.d
--- _lab7/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/printfmt.d	2020-05-28 05:02:22.365519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files _lab7/obj/libs/printfmt.o and lab7/obj/libs/printfmt.o differ
diff -r -u -P _lab7/obj/libs/rand.d lab7/obj/libs/rand.d
--- _lab7/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/rand.d	2020-05-28 05:02:22.373519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files _lab7/obj/libs/rand.o and lab7/obj/libs/rand.o differ
diff -r -u -P _lab7/obj/libs/string.d lab7/obj/libs/string.d
--- _lab7/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/string.d	2020-05-28 05:02:22.369519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files _lab7/obj/libs/string.o and lab7/obj/libs/string.o differ
diff -r -u -P _lab7/obj/sign/tools/sign.d lab7/obj/sign/tools/sign.d
--- _lab7/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/sign/tools/sign.d	2020-05-28 05:02:22.173519207 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files _lab7/obj/sign/tools/sign.o and lab7/obj/sign/tools/sign.o differ
diff -r -u -P _lab7/obj/user/badarg.asm lab7/obj/user/badarg.asm
--- _lab7/obj/user/badarg.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.asm	2020-05-28 05:02:26.005519207 +0800
@@ -0,0 +1,2645 @@
+
+obj/__user_badarg.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 11 80 00 	movl   $0x801160,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 11 80 00 	movl   $0x80117c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 11 80 00 	movl   $0x801198,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 12 80 00       	add    $0x8012c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 12 80 00 	mov    0x8012e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 12 80 00 	mov    0x801260(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 12 80 	movl   $0x8012d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 12 80 	movl   $0x8012de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 12 80 00       	mov    $0x8012e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  801017:	e8 f3 f2 ff ff       	call   80030f <fork>
+  80101c:	89 44 24 18          	mov    %eax,0x18(%esp)
+  801020:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801025:	75 33                	jne    80105a <main+0x4c>
+        cprintf("fork ok.\n");
+  801027:	c7 04 24 40 14 80 00 	movl   $0x801440,(%esp)
+  80102e:	e8 e5 f0 ff ff       	call   800118 <cprintf>
+        int i;
+        for (i = 0; i < 10; i ++) {
+  801033:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80103a:	00 
+  80103b:	eb 0a                	jmp    801047 <main+0x39>
+            yield();
+  80103d:	e8 10 f3 ff ff       	call   800352 <yield>
+main(void) {
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+        cprintf("fork ok.\n");
+        int i;
+        for (i = 0; i < 10; i ++) {
+  801042:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801047:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
+  80104c:	7e ef                	jle    80103d <main+0x2f>
+            yield();
+        }
+        exit(0xbeaf);
+  80104e:	c7 04 24 af be 00 00 	movl   $0xbeaf,(%esp)
+  801055:	e8 96 f2 ff ff       	call   8002f0 <exit>
+    }
+    assert(pid > 0);
+  80105a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  80105f:	7f 24                	jg     801085 <main+0x77>
+  801061:	c7 44 24 0c 4a 14 80 	movl   $0x80144a,0xc(%esp)
+  801068:	00 
+  801069:	c7 44 24 08 52 14 80 	movl   $0x801452,0x8(%esp)
+  801070:	00 
+  801071:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+  801078:	00 
+  801079:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  801080:	e8 aa ef ff ff       	call   80002f <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  801085:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80108c:	00 
+  80108d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801094:	e8 9f f2 ff ff       	call   800338 <waitpid>
+  801099:	85 c0                	test   %eax,%eax
+  80109b:	75 24                	jne    8010c1 <main+0xb3>
+  80109d:	c7 44 24 0c 75 14 80 	movl   $0x801475,0xc(%esp)
+  8010a4:	00 
+  8010a5:	c7 44 24 08 52 14 80 	movl   $0x801452,0x8(%esp)
+  8010ac:	00 
+  8010ad:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+  8010b4:	00 
+  8010b5:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  8010bc:	e8 6e ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  8010c1:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+  8010c8:	c0 
+  8010c9:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010cd:	89 04 24             	mov    %eax,(%esp)
+  8010d0:	e8 63 f2 ff ff       	call   800338 <waitpid>
+  8010d5:	85 c0                	test   %eax,%eax
+  8010d7:	75 24                	jne    8010fd <main+0xef>
+  8010d9:	c7 44 24 0c 8c 14 80 	movl   $0x80148c,0xc(%esp)
+  8010e0:	00 
+  8010e1:	c7 44 24 08 52 14 80 	movl   $0x801452,0x8(%esp)
+  8010e8:	00 
+  8010e9:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
+  8010f0:	00 
+  8010f1:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  8010f8:	e8 32 ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  8010fd:	8d 44 24 14          	lea    0x14(%esp),%eax
+  801101:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801105:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801109:	89 04 24             	mov    %eax,(%esp)
+  80110c:	e8 27 f2 ff ff       	call   800338 <waitpid>
+  801111:	85 c0                	test   %eax,%eax
+  801113:	75 0b                	jne    801120 <main+0x112>
+  801115:	8b 44 24 14          	mov    0x14(%esp),%eax
+  801119:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  80111e:	74 24                	je     801144 <main+0x136>
+  801120:	c7 44 24 0c b4 14 80 	movl   $0x8014b4,0xc(%esp)
+  801127:	00 
+  801128:	c7 44 24 08 52 14 80 	movl   $0x801452,0x8(%esp)
+  80112f:	00 
+  801130:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  801137:	00 
+  801138:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  80113f:	e8 eb ee ff ff       	call   80002f <__panic>
+    cprintf("badarg pass.\n");
+  801144:	c7 04 24 e9 14 80 00 	movl   $0x8014e9,(%esp)
+  80114b:	e8 c8 ef ff ff       	call   800118 <cprintf>
+    return 0;
+  801150:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801155:	c9                   	leave  
+  801156:	c3                   	ret    
diff -r -u -P _lab7/obj/user/badarg.d lab7/obj/user/badarg.d
--- _lab7/obj/user/badarg.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.d	2020-05-28 05:02:22.325519207 +0800
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/badarg.o and lab7/obj/user/badarg.o differ
diff -r -u -P _lab7/obj/user/badarg.sym lab7/obj/user/badarg.sym
--- _lab7/obj/user/badarg.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.sym	2020-05-28 05:02:26.157519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801160 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cb1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801260 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badarg.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202cb0 __STAB_END__
+00800248 sys_kill
+00202cb1 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203a83 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/badsegment.asm lab7/obj/user/badsegment.asm
--- _lab7/obj/user/badsegment.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.asm	2020-05-28 05:02:26.025519207 +0800
@@ -0,0 +1,2556 @@
+
+obj/__user_badsegment.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 10 80 00 	movl   $0x801040,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 10 80 00 	movl   $0x80105c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 78 10 80 00 	movl   $0x801078,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 b5 11 80 	movl   $0x8011b5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 be 11 80 	movl   $0x8011be,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  801017:	66 b8 28 00          	mov    $0x28,%ax
+  80101b:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  80101d:	c7 44 24 08 20 13 80 	movl   $0x801320,0x8(%esp)
+  801024:	00 
+  801025:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  80102c:	00 
+  80102d:	c7 04 24 2b 13 80 00 	movl   $0x80132b,(%esp)
+  801034:	e8 f6 ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/badsegment.d lab7/obj/user/badsegment.d
--- _lab7/obj/user/badsegment.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.d	2020-05-28 05:02:22.317519207 +0800
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/badsegment.o and lab7/obj/user/badsegment.o differ
diff -r -u -P _lab7/obj/user/badsegment.sym lab7/obj/user/badsegment.sym
--- _lab7/obj/user/badsegment.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.sym	2020-05-28 05:02:26.181519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b91 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801140 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badsegment.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202b90 __STAB_END__
+00800248 sys_kill
+00202b91 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0020394d __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/divzero.asm lab7/obj/user/divzero.asm
--- _lab7/obj/user/divzero.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.asm	2020-05-28 05:02:26.097519207 +0800
@@ -0,0 +1,2561 @@
+
+obj/__user_divzero.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  801017:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  80101d:	b8 01 00 00 00       	mov    $0x1,%eax
+  801022:	99                   	cltd   
+  801023:	f7 f9                	idiv   %ecx
+  801025:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801029:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  801030:	e8 e3 f0 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  801035:	c7 44 24 08 4e 13 80 	movl   $0x80134e,0x8(%esp)
+  80103c:	00 
+  80103d:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  801044:	00 
+  801045:	c7 04 24 59 13 80 00 	movl   $0x801359,(%esp)
+  80104c:	e8 de ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/divzero.d lab7/obj/user/divzero.d
--- _lab7/obj/user/divzero.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.d	2020-05-28 05:02:22.317519207 +0800
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/divzero.o and lab7/obj/user/divzero.o differ
diff -r -u -P _lab7/obj/user/divzero.sym lab7/obj/user/divzero.sym
--- _lab7/obj/user/divzero.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.sym	2020-05-28 05:02:26.237519207 +0800
@@ -0,0 +1,81 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202b9d .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 divzero.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202b9c __STAB_END__
+00800248 sys_kill
+00202b9d __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203962 __STABSTR_END__
+00800c27 strcmp
+00802008 zero
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/exit.asm lab7/obj/user/exit.asm
--- _lab7/obj/user/exit.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.asm	2020-05-28 05:02:26.249519207 +0800
@@ -0,0 +1,2652 @@
+
+obj/__user_exit.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 80 11 80 00 	movl   $0x801180,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 9a 11 80 00 	movl   $0x80119a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 9c 11 80 00 	movl   $0x80119c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 9a 11 80 00 	movl   $0x80119a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 b8 11 80 00 	movl   $0x8011b8,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 e4 12 80 00       	add    $0x8012e4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 08 13 80 00 	mov    0x801308(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 80 12 80 00 	mov    0x801280(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 f5 12 80 	movl   $0x8012f5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 fe 12 80 	movl   $0x8012fe,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 01 13 80 00       	mov    $0x801301,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  801017:	c7 04 24 60 14 80 00 	movl   $0x801460,(%esp)
+  80101e:	e8 f5 f0 ff ff       	call   800118 <cprintf>
+    if ((pid = fork()) == 0) {
+  801023:	e8 e7 f2 ff ff       	call   80030f <fork>
+  801028:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  80102c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801031:	75 3c                	jne    80106f <main+0x61>
+        cprintf("I am the child.\n");
+  801033:	c7 04 24 87 14 80 00 	movl   $0x801487,(%esp)
+  80103a:	e8 d9 f0 ff ff       	call   800118 <cprintf>
+        yield();
+  80103f:	e8 0e f3 ff ff       	call   800352 <yield>
+        yield();
+  801044:	e8 09 f3 ff ff       	call   800352 <yield>
+        yield();
+  801049:	e8 04 f3 ff ff       	call   800352 <yield>
+        yield();
+  80104e:	e8 ff f2 ff ff       	call   800352 <yield>
+        yield();
+  801053:	e8 fa f2 ff ff       	call   800352 <yield>
+        yield();
+  801058:	e8 f5 f2 ff ff       	call   800352 <yield>
+        yield();
+  80105d:	e8 f0 f2 ff ff       	call   800352 <yield>
+        exit(magic);
+  801062:	a1 08 20 80 00       	mov    0x802008,%eax
+  801067:	89 04 24             	mov    %eax,(%esp)
+  80106a:	e8 81 f2 ff ff       	call   8002f0 <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  80106f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801073:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801077:	c7 04 24 98 14 80 00 	movl   $0x801498,(%esp)
+  80107e:	e8 95 f0 ff ff       	call   800118 <cprintf>
+    }
+    assert(pid > 0);
+  801083:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801088:	7f 24                	jg     8010ae <main+0xa0>
+  80108a:	c7 44 24 0c ba 14 80 	movl   $0x8014ba,0xc(%esp)
+  801091:	00 
+  801092:	c7 44 24 08 c2 14 80 	movl   $0x8014c2,0x8(%esp)
+  801099:	00 
+  80109a:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%esp)
+  8010a1:	00 
+  8010a2:	c7 04 24 d7 14 80 00 	movl   $0x8014d7,(%esp)
+  8010a9:	e8 81 ef ff ff       	call   80002f <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  8010ae:	c7 04 24 e4 14 80 00 	movl   $0x8014e4,(%esp)
+  8010b5:	e8 5e f0 ff ff       	call   800118 <cprintf>
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  8010ba:	8d 44 24 18          	lea    0x18(%esp),%eax
+  8010be:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010c2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010c6:	89 04 24             	mov    %eax,(%esp)
+  8010c9:	e8 6a f2 ff ff       	call   800338 <waitpid>
+  8010ce:	85 c0                	test   %eax,%eax
+  8010d0:	75 0d                	jne    8010df <main+0xd1>
+  8010d2:	8b 54 24 18          	mov    0x18(%esp),%edx
+  8010d6:	a1 08 20 80 00       	mov    0x802008,%eax
+  8010db:	39 c2                	cmp    %eax,%edx
+  8010dd:	74 24                	je     801103 <main+0xf5>
+  8010df:	c7 44 24 0c 04 15 80 	movl   $0x801504,0xc(%esp)
+  8010e6:	00 
+  8010e7:	c7 44 24 08 c2 14 80 	movl   $0x8014c2,0x8(%esp)
+  8010ee:	00 
+  8010ef:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
+  8010f6:	00 
+  8010f7:	c7 04 24 d7 14 80 00 	movl   $0x8014d7,(%esp)
+  8010fe:	e8 2c ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  801103:	8d 44 24 18          	lea    0x18(%esp),%eax
+  801107:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80110b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80110f:	89 04 24             	mov    %eax,(%esp)
+  801112:	e8 21 f2 ff ff       	call   800338 <waitpid>
+  801117:	85 c0                	test   %eax,%eax
+  801119:	74 09                	je     801124 <main+0x116>
+  80111b:	e8 fc f1 ff ff       	call   80031c <wait>
+  801120:	85 c0                	test   %eax,%eax
+  801122:	75 24                	jne    801148 <main+0x13a>
+  801124:	c7 44 24 0c 30 15 80 	movl   $0x801530,0xc(%esp)
+  80112b:	00 
+  80112c:	c7 44 24 08 c2 14 80 	movl   $0x8014c2,0x8(%esp)
+  801133:	00 
+  801134:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  80113b:	00 
+  80113c:	c7 04 24 d7 14 80 00 	movl   $0x8014d7,(%esp)
+  801143:	e8 e7 ee ff ff       	call   80002f <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  801148:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80114c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801150:	c7 04 24 58 15 80 00 	movl   $0x801558,(%esp)
+  801157:	e8 bc ef ff ff       	call   800118 <cprintf>
+
+    cprintf("exit pass.\n");
+  80115c:	c7 04 24 68 15 80 00 	movl   $0x801568,(%esp)
+  801163:	e8 b0 ef ff ff       	call   800118 <cprintf>
+    return 0;
+  801168:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80116d:	c9                   	leave  
+  80116e:	c3                   	ret    
diff -r -u -P _lab7/obj/user/exit.d lab7/obj/user/exit.d
--- _lab7/obj/user/exit.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.d	2020-05-28 05:02:22.289519207 +0800
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/exit.o and lab7/obj/user/exit.o differ
diff -r -u -P _lab7/obj/user/exit.sym lab7/obj/user/exit.sym
--- _lab7/obj/user/exit.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.sym	2020-05-28 05:02:26.349519207 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801180 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ce1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801280 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 exit.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202ce0 __STAB_END__
+00800248 sys_kill
+00202ce1 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203ab9 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+00802008 magic
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/faultread.asm lab7/obj/user/faultread.asm
--- _lab7/obj/user/faultread.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.asm	2020-05-28 05:02:26.241519207 +0800
@@ -0,0 +1,2558 @@
+
+obj/__user_faultread.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  801017:	b8 00 00 00 00       	mov    $0x0,%eax
+  80101c:	8b 00                	mov    (%eax),%eax
+  80101e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801022:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  801029:	e8 ea f0 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  80102e:	c7 44 24 08 54 13 80 	movl   $0x801354,0x8(%esp)
+  801035:	00 
+  801036:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  80103d:	00 
+  80103e:	c7 04 24 5f 13 80 00 	movl   $0x80135f,(%esp)
+  801045:	e8 e5 ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/faultread.d lab7/obj/user/faultread.d
--- _lab7/obj/user/faultread.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.d	2020-05-28 05:02:22.305519207 +0800
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -r -u -P _lab7/obj/user/faultreadkernel.asm lab7/obj/user/faultreadkernel.asm
--- _lab7/obj/user/faultreadkernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.asm	2020-05-28 05:02:26.313519207 +0800
@@ -0,0 +1,2558 @@
+
+obj/__user_faultreadkernel.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  801017:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  80101c:	8b 00                	mov    (%eax),%eax
+  80101e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801022:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  801029:	e8 ea f0 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  80102e:	c7 44 24 08 5e 13 80 	movl   $0x80135e,0x8(%esp)
+  801035:	00 
+  801036:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  80103d:	00 
+  80103e:	c7 04 24 69 13 80 00 	movl   $0x801369,(%esp)
+  801045:	e8 e5 ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/faultreadkernel.d lab7/obj/user/faultreadkernel.d
--- _lab7/obj/user/faultreadkernel.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.d	2020-05-28 05:02:22.297519207 +0800
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
Binary files _lab7/obj/user/faultreadkernel.o and lab7/obj/user/faultreadkernel.o differ
diff -r -u -P _lab7/obj/user/faultreadkernel.sym lab7/obj/user/faultreadkernel.sym
--- _lab7/obj/user/faultreadkernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.sym	2020-05-28 05:02:26.341519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b91 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultreadkernel.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202b90 __STAB_END__
+00800248 sys_kill
+00202b91 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203952 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
Binary files _lab7/obj/user/faultread.o and lab7/obj/user/faultread.o differ
diff -r -u -P _lab7/obj/user/faultread.sym lab7/obj/user/faultread.sym
--- _lab7/obj/user/faultread.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.sym	2020-05-28 05:02:26.309519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b91 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultread.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202b90 __STAB_END__
+00800248 sys_kill
+00202b91 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0020394c __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/forktest.asm lab7/obj/user/forktest.asm
--- _lab7/obj/user/forktest.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.asm	2020-05-28 05:02:26.317519207 +0800
@@ -0,0 +1,2654 @@
+
+obj/__user_forktest.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 11 80 00 	movl   $0x801140,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 11 80 00 	movl   $0x80115c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 78 11 80 00 	movl   $0x801178,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 a4 12 80 00       	add    $0x8012a4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 c8 12 80 00 	mov    0x8012c8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 40 12 80 00 	mov    0x801240(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 b5 12 80 	movl   $0x8012b5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 be 12 80 	movl   $0x8012be,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be c1 12 80 00       	mov    $0x8012c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  801017:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80101e:	00 
+  80101f:	eb 60                	jmp    801081 <main+0x73>
+        if ((pid = fork()) == 0) {
+  801021:	e8 e9 f2 ff ff       	call   80030f <fork>
+  801026:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80102a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  80102f:	75 20                	jne    801051 <main+0x43>
+            cprintf("I am child %d\n", n);
+  801031:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801035:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801039:	c7 04 24 24 14 80 00 	movl   $0x801424,(%esp)
+  801040:	e8 d3 f0 ff ff       	call   800118 <cprintf>
+            exit(0);
+  801045:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  80104c:	e8 9f f2 ff ff       	call   8002f0 <exit>
+        }
+        assert(pid > 0);
+  801051:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801056:	7f 24                	jg     80107c <main+0x6e>
+  801058:	c7 44 24 0c 33 14 80 	movl   $0x801433,0xc(%esp)
+  80105f:	00 
+  801060:	c7 44 24 08 3b 14 80 	movl   $0x80143b,0x8(%esp)
+  801067:	00 
+  801068:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  80106f:	00 
+  801070:	c7 04 24 50 14 80 00 	movl   $0x801450,(%esp)
+  801077:	e8 b3 ef ff ff       	call   80002f <__panic>
+const int max_child = 32;
+
+int
+main(void) {
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  80107c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801081:	b8 20 00 00 00       	mov    $0x20,%eax
+  801086:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  80108a:	7c 95                	jl     801021 <main+0x13>
+            exit(0);
+        }
+        assert(pid > 0);
+    }
+
+    if (n > max_child) {
+  80108c:	b8 20 00 00 00       	mov    $0x20,%eax
+  801091:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  801095:	7e 24                	jle    8010bb <main+0xad>
+        panic("fork claimed to work %d times!\n", n);
+  801097:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80109b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80109f:	c7 44 24 08 60 14 80 	movl   $0x801460,0x8(%esp)
+  8010a6:	00 
+  8010a7:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  8010ae:	00 
+  8010af:	c7 04 24 50 14 80 00 	movl   $0x801450,(%esp)
+  8010b6:	e8 74 ef ff ff       	call   80002f <__panic>
+    }
+
+    for (; n > 0; n --) {
+  8010bb:	eb 2a                	jmp    8010e7 <main+0xd9>
+        if (wait() != 0) {
+  8010bd:	e8 5a f2 ff ff       	call   80031c <wait>
+  8010c2:	85 c0                	test   %eax,%eax
+  8010c4:	74 1c                	je     8010e2 <main+0xd4>
+            panic("wait stopped early\n");
+  8010c6:	c7 44 24 08 80 14 80 	movl   $0x801480,0x8(%esp)
+  8010cd:	00 
+  8010ce:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010d5:	00 
+  8010d6:	c7 04 24 50 14 80 00 	movl   $0x801450,(%esp)
+  8010dd:	e8 4d ef ff ff       	call   80002f <__panic>
+
+    if (n > max_child) {
+        panic("fork claimed to work %d times!\n", n);
+    }
+
+    for (; n > 0; n --) {
+  8010e2:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
+  8010e7:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  8010ec:	7f cf                	jg     8010bd <main+0xaf>
+        if (wait() != 0) {
+            panic("wait stopped early\n");
+        }
+    }
+
+    if (wait() == 0) {
+  8010ee:	e8 29 f2 ff ff       	call   80031c <wait>
+  8010f3:	85 c0                	test   %eax,%eax
+  8010f5:	75 1c                	jne    801113 <main+0x105>
+        panic("wait got too many\n");
+  8010f7:	c7 44 24 08 94 14 80 	movl   $0x801494,0x8(%esp)
+  8010fe:	00 
+  8010ff:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  801106:	00 
+  801107:	c7 04 24 50 14 80 00 	movl   $0x801450,(%esp)
+  80110e:	e8 1c ef ff ff       	call   80002f <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  801113:	c7 04 24 a7 14 80 00 	movl   $0x8014a7,(%esp)
+  80111a:	e8 f9 ef ff ff       	call   800118 <cprintf>
+    return 0;
+  80111f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801124:	c9                   	leave  
+  801125:	c3                   	ret    
diff -r -u -P _lab7/obj/user/forktest.d lab7/obj/user/forktest.d
--- _lab7/obj/user/forktest.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.d	2020-05-28 05:02:22.293519207 +0800
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab7/obj/user/forktest.o and lab7/obj/user/forktest.o differ
diff -r -u -P _lab7/obj/user/forktest.sym lab7/obj/user/forktest.sym
--- _lab7/obj/user/forktest.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.sym	2020-05-28 05:02:26.385519207 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801140 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cb1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801240 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktest.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202cb0 __STAB_END__
+00800248 sys_kill
+00202cb1 __STABSTR_BEGIN__
+0080002f __panic
+00801420 max_child
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203a8e __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/forktree.asm lab7/obj/user/forktree.asm
--- _lab7/obj/user/forktree.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.asm	2020-05-28 05:02:26.513519207 +0800
@@ -0,0 +1,2634 @@
+
+obj/__user_forktree.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 fb 0c 00 00       	call   8010c5 <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 64 12 80 00       	add    $0x801264,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 ec 38             	sub    $0x38,%esp
+  801014:	8b 45 0c             	mov    0xc(%ebp),%eax
+  801017:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  80101a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80101d:	89 04 24             	mov    %eax,(%esp)
+  801020:	e8 31 fb ff ff       	call   800b56 <strlen>
+  801025:	83 f8 03             	cmp    $0x3,%eax
+  801028:	77 4f                	ja     801079 <forkchild+0x6b>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  80102a:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  80102e:	89 44 24 10          	mov    %eax,0x10(%esp)
+  801032:	8b 45 08             	mov    0x8(%ebp),%eax
+  801035:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801039:	c7 44 24 08 e0 13 80 	movl   $0x8013e0,0x8(%esp)
+  801040:	00 
+  801041:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+  801048:	00 
+  801049:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  80104c:	89 04 24             	mov    %eax,(%esp)
+  80104f:	e8 92 f9 ff ff       	call   8009e6 <snprintf>
+    if (fork() == 0) {
+  801054:	e8 b6 f2 ff ff       	call   80030f <fork>
+  801059:	85 c0                	test   %eax,%eax
+  80105b:	75 1c                	jne    801079 <forkchild+0x6b>
+        forktree(nxt);
+  80105d:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  801060:	89 04 24             	mov    %eax,(%esp)
+  801063:	e8 13 00 00 00       	call   80107b <forktree>
+        yield();
+  801068:	e8 e5 f2 ff ff       	call   800352 <yield>
+        exit(0);
+  80106d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801074:	e8 77 f2 ff ff       	call   8002f0 <exit>
+    }
+}
+  801079:	c9                   	leave  
+  80107a:	c3                   	ret    
+
+0080107b <forktree>:
+
+void
+forktree(const char *cur) {
+  80107b:	55                   	push   %ebp
+  80107c:	89 e5                	mov    %esp,%ebp
+  80107e:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  801081:	e8 ec f2 ff ff       	call   800372 <getpid>
+  801086:	8b 55 08             	mov    0x8(%ebp),%edx
+  801089:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80108d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801091:	c7 04 24 e5 13 80 00 	movl   $0x8013e5,(%esp)
+  801098:	e8 7b f0 ff ff       	call   800118 <cprintf>
+
+    forkchild(cur, '0');
+  80109d:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
+  8010a4:	00 
+  8010a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8010a8:	89 04 24             	mov    %eax,(%esp)
+  8010ab:	e8 5e ff ff ff       	call   80100e <forkchild>
+    forkchild(cur, '1');
+  8010b0:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
+  8010b7:	00 
+  8010b8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8010bb:	89 04 24             	mov    %eax,(%esp)
+  8010be:	e8 4b ff ff ff       	call   80100e <forkchild>
+}
+  8010c3:	c9                   	leave  
+  8010c4:	c3                   	ret    
+
+008010c5 <main>:
+
+int
+main(void) {
+  8010c5:	55                   	push   %ebp
+  8010c6:	89 e5                	mov    %esp,%ebp
+  8010c8:	83 e4 f0             	and    $0xfffffff0,%esp
+  8010cb:	83 ec 10             	sub    $0x10,%esp
+    forktree("");
+  8010ce:	c7 04 24 f6 13 80 00 	movl   $0x8013f6,(%esp)
+  8010d5:	e8 a1 ff ff ff       	call   80107b <forktree>
+    return 0;
+  8010da:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010df:	c9                   	leave  
+  8010e0:	c3                   	ret    
diff -r -u -P _lab7/obj/user/forktree.d lab7/obj/user/forktree.d
--- _lab7/obj/user/forktree.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.d	2020-05-28 05:02:22.261519207 +0800
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files _lab7/obj/user/forktree.o and lab7/obj/user/forktree.o differ
diff -r -u -P _lab7/obj/user/forktree.sym lab7/obj/user/forktree.sym
--- _lab7/obj/user/forktree.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.sym	2020-05-28 05:02:26.533519207 +0800
@@ -0,0 +1,81 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cb1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktree.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202cb0 __STAB_END__
+00800248 sys_kill
+00202cb1 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080107b forktree
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+008010c5 main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203afc __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
+0080100e forkchild
diff -r -u -P _lab7/obj/user/hello.asm lab7/obj/user/hello.asm
--- _lab7/obj/user/hello.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.asm	2020-05-28 05:02:26.361519207 +0800
@@ -0,0 +1,2561 @@
+
+obj/__user_hello.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    cprintf("Hello world!!.\n");
+  801017:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  80101e:	e8 f5 f0 ff ff       	call   800118 <cprintf>
+    cprintf("I am process %d.\n", getpid());
+  801023:	e8 4a f3 ff ff       	call   800372 <getpid>
+  801028:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80102c:	c7 04 24 50 13 80 00 	movl   $0x801350,(%esp)
+  801033:	e8 e0 f0 ff ff       	call   800118 <cprintf>
+    cprintf("hello pass.\n");
+  801038:	c7 04 24 62 13 80 00 	movl   $0x801362,(%esp)
+  80103f:	e8 d4 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  801044:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801049:	c9                   	leave  
+  80104a:	c3                   	ret    
diff -r -u -P _lab7/obj/user/hello.d lab7/obj/user/hello.d
--- _lab7/obj/user/hello.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.d	2020-05-28 05:02:22.253519207 +0800
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/hello.o and lab7/obj/user/hello.o differ
diff -r -u -P _lab7/obj/user/hello.sym lab7/obj/user/hello.sym
--- _lab7/obj/user/hello.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.sym	2020-05-28 05:02:26.425519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202bb5 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 hello.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202bb4 __STAB_END__
+00800248 sys_kill
+00202bb5 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0020396c __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/libs/initcode.d lab7/obj/user/libs/initcode.d
--- _lab7/obj/user/libs/initcode.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/initcode.d	2020-05-28 05:02:22.369519207 +0800
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
Binary files _lab7/obj/user/libs/initcode.o and lab7/obj/user/libs/initcode.o differ
diff -r -u -P _lab7/obj/user/libs/panic.d lab7/obj/user/libs/panic.d
--- _lab7/obj/user/libs/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/panic.d	2020-05-28 05:02:22.373519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
Binary files _lab7/obj/user/libs/panic.o and lab7/obj/user/libs/panic.o differ
diff -r -u -P _lab7/obj/user/libs/stdio.d lab7/obj/user/libs/stdio.d
--- _lab7/obj/user/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/stdio.d	2020-05-28 05:02:22.345519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
Binary files _lab7/obj/user/libs/stdio.o and lab7/obj/user/libs/stdio.o differ
diff -r -u -P _lab7/obj/user/libs/syscall.d lab7/obj/user/libs/syscall.d
--- _lab7/obj/user/libs/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/syscall.d	2020-05-28 05:02:22.353519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
Binary files _lab7/obj/user/libs/syscall.o and lab7/obj/user/libs/syscall.o differ
diff -r -u -P _lab7/obj/user/libs/ulib.d lab7/obj/user/libs/ulib.d
--- _lab7/obj/user/libs/ulib.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/ulib.d	2020-05-28 05:02:22.341519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/libs/ulib.o and lab7/obj/user/libs/ulib.o differ
diff -r -u -P _lab7/obj/user/libs/umain.d lab7/obj/user/libs/umain.d
--- _lab7/obj/user/libs/umain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/umain.d	2020-05-28 05:02:22.329519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
Binary files _lab7/obj/user/libs/umain.o and lab7/obj/user/libs/umain.o differ
diff -r -u -P _lab7/obj/user/matrix.asm lab7/obj/user/matrix.asm
--- _lab7/obj/user/matrix.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.asm	2020-05-28 05:02:26.397519207 +0800
@@ -0,0 +1,2984 @@
+
+obj/__user_matrix.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 14 80 00 	movl   $0x801400,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 14 80 00 	movl   $0x80141a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 14 80 00 	movl   $0x80141c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 14 80 00 	movl   $0x80141a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 38 14 80 00 	movl   $0x801438,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 7c 0e 00 00       	call   801246 <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 64 15 80 00       	add    $0x801564,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 88 15 80 00 	mov    0x801588(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 00 15 80 00 	mov    0x801500(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 75 15 80 	movl   $0x801575,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 7e 15 80 	movl   $0x80157e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 81 15 80 00       	mov    $0x801581,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <work>:
+static int mata[MATSIZE][MATSIZE];
+static int matb[MATSIZE][MATSIZE];
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	53                   	push   %ebx
+  801012:	83 ec 24             	sub    $0x24,%esp
+    int i, j, k, size = MATSIZE;
+  801015:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)
+    for (i = 0; i < size; i ++) {
+  80101c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801023:	eb 65                	jmp    80108a <work+0x7c>
+        for (j = 0; j < size; j ++) {
+  801025:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  80102c:	eb 50                	jmp    80107e <work+0x70>
+            mata[i][j] = matb[i][j] = 1;
+  80102e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801031:	89 d0                	mov    %edx,%eax
+  801033:	c1 e0 02             	shl    $0x2,%eax
+  801036:	01 d0                	add    %edx,%eax
+  801038:	01 c0                	add    %eax,%eax
+  80103a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80103d:	01 d0                	add    %edx,%eax
+  80103f:	c7 04 85 c0 21 80 00 	movl   $0x1,0x8021c0(,%eax,4)
+  801046:	01 00 00 00 
+  80104a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80104d:	89 d0                	mov    %edx,%eax
+  80104f:	c1 e0 02             	shl    $0x2,%eax
+  801052:	01 d0                	add    %edx,%eax
+  801054:	01 c0                	add    %eax,%eax
+  801056:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801059:	01 d0                	add    %edx,%eax
+  80105b:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  801062:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801065:	89 d0                	mov    %edx,%eax
+  801067:	c1 e0 02             	shl    $0x2,%eax
+  80106a:	01 d0                	add    %edx,%eax
+  80106c:	01 c0                	add    %eax,%eax
+  80106e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801071:	01 d0                	add    %edx,%eax
+  801073:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+        for (j = 0; j < size; j ++) {
+  80107a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  80107e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801081:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801084:	7c a8                	jl     80102e <work+0x20>
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+  801086:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80108a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80108d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801090:	7c 93                	jl     801025 <work+0x17>
+        for (j = 0; j < size; j ++) {
+            mata[i][j] = matb[i][j] = 1;
+        }
+    }
+
+    yield();
+  801092:	e8 bb f2 ff ff       	call   800352 <yield>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+  801097:	e8 d6 f2 ff ff       	call   800372 <getpid>
+  80109c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80109f:	89 54 24 08          	mov    %edx,0x8(%esp)
+  8010a3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010a7:	c7 04 24 e0 16 80 00 	movl   $0x8016e0,(%esp)
+  8010ae:	e8 65 f0 ff ff       	call   800118 <cprintf>
+
+    while (times -- > 0) {
+  8010b3:	e9 5c 01 00 00       	jmp    801214 <work+0x206>
+        for (i = 0; i < size; i ++) {
+  8010b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8010bf:	e9 b6 00 00 00       	jmp    80117a <work+0x16c>
+            for (j = 0; j < size; j ++) {
+  8010c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8010cb:	e9 9a 00 00 00       	jmp    80116a <work+0x15c>
+                matc[i][j] = 0;
+  8010d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010d3:	89 d0                	mov    %edx,%eax
+  8010d5:	c1 e0 02             	shl    $0x2,%eax
+  8010d8:	01 d0                	add    %edx,%eax
+  8010da:	01 c0                	add    %eax,%eax
+  8010dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010df:	01 d0                	add    %edx,%eax
+  8010e1:	c7 04 85 60 23 80 00 	movl   $0x0,0x802360(,%eax,4)
+  8010e8:	00 00 00 00 
+                for (k = 0; k < size; k ++) {
+  8010ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  8010f3:	eb 69                	jmp    80115e <work+0x150>
+                    matc[i][j] += mata[i][k] * matb[k][j];
+  8010f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010f8:	89 d0                	mov    %edx,%eax
+  8010fa:	c1 e0 02             	shl    $0x2,%eax
+  8010fd:	01 d0                	add    %edx,%eax
+  8010ff:	01 c0                	add    %eax,%eax
+  801101:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801104:	01 d0                	add    %edx,%eax
+  801106:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  80110d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801110:	89 d0                	mov    %edx,%eax
+  801112:	c1 e0 02             	shl    $0x2,%eax
+  801115:	01 d0                	add    %edx,%eax
+  801117:	01 c0                	add    %eax,%eax
+  801119:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80111c:	01 d0                	add    %edx,%eax
+  80111e:	8b 1c 85 20 20 80 00 	mov    0x802020(,%eax,4),%ebx
+  801125:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  801128:	89 d0                	mov    %edx,%eax
+  80112a:	c1 e0 02             	shl    $0x2,%eax
+  80112d:	01 d0                	add    %edx,%eax
+  80112f:	01 c0                	add    %eax,%eax
+  801131:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801134:	01 d0                	add    %edx,%eax
+  801136:	8b 04 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%eax
+  80113d:	0f af c3             	imul   %ebx,%eax
+  801140:	01 c1                	add    %eax,%ecx
+  801142:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801145:	89 d0                	mov    %edx,%eax
+  801147:	c1 e0 02             	shl    $0x2,%eax
+  80114a:	01 d0                	add    %edx,%eax
+  80114c:	01 c0                	add    %eax,%eax
+  80114e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801151:	01 d0                	add    %edx,%eax
+  801153:	89 0c 85 60 23 80 00 	mov    %ecx,0x802360(,%eax,4)
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+                matc[i][j] = 0;
+                for (k = 0; k < size; k ++) {
+  80115a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+  80115e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801161:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801164:	7c 8f                	jl     8010f5 <work+0xe7>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  801166:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  80116a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80116d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801170:	0f 8c 5a ff ff ff    	jl     8010d0 <work+0xc2>
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+  801176:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80117a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80117d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801180:	0f 8c 3e ff ff ff    	jl     8010c4 <work+0xb6>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  801186:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  80118d:	eb 79                	jmp    801208 <work+0x1fa>
+            for (j = 0; j < size; j ++) {
+  80118f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  801196:	eb 64                	jmp    8011fc <work+0x1ee>
+                mata[i][j] = matb[i][j] = matc[i][j];
+  801198:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80119b:	89 d0                	mov    %edx,%eax
+  80119d:	c1 e0 02             	shl    $0x2,%eax
+  8011a0:	01 d0                	add    %edx,%eax
+  8011a2:	01 c0                	add    %eax,%eax
+  8011a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011a7:	01 d0                	add    %edx,%eax
+  8011a9:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  8011b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011b3:	89 d0                	mov    %edx,%eax
+  8011b5:	c1 e0 02             	shl    $0x2,%eax
+  8011b8:	01 d0                	add    %edx,%eax
+  8011ba:	01 c0                	add    %eax,%eax
+  8011bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011bf:	01 d0                	add    %edx,%eax
+  8011c1:	89 0c 85 c0 21 80 00 	mov    %ecx,0x8021c0(,%eax,4)
+  8011c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011cb:	89 d0                	mov    %edx,%eax
+  8011cd:	c1 e0 02             	shl    $0x2,%eax
+  8011d0:	01 d0                	add    %edx,%eax
+  8011d2:	01 c0                	add    %eax,%eax
+  8011d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011d7:	01 d0                	add    %edx,%eax
+  8011d9:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  8011e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011e3:	89 d0                	mov    %edx,%eax
+  8011e5:	c1 e0 02             	shl    $0x2,%eax
+  8011e8:	01 d0                	add    %edx,%eax
+  8011ea:	01 c0                	add    %eax,%eax
+  8011ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011ef:	01 d0                	add    %edx,%eax
+  8011f1:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  8011f8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8011fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8011ff:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801202:	7c 94                	jl     801198 <work+0x18a>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  801204:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801208:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80120b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80120e:	0f 8c 7b ff ff ff    	jl     80118f <work+0x181>
+
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+  801214:	8b 45 08             	mov    0x8(%ebp),%eax
+  801217:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80121a:	89 55 08             	mov    %edx,0x8(%ebp)
+  80121d:	85 c0                	test   %eax,%eax
+  80121f:	0f 85 93 fe ff ff    	jne    8010b8 <work+0xaa>
+            for (j = 0; j < size; j ++) {
+                mata[i][j] = matb[i][j] = matc[i][j];
+            }
+        }
+    }
+    cprintf("pid %d done!.\n", getpid());
+  801225:	e8 48 f1 ff ff       	call   800372 <getpid>
+  80122a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80122e:	c7 04 24 00 17 80 00 	movl   $0x801700,(%esp)
+  801235:	e8 de ee ff ff       	call   800118 <cprintf>
+    exit(0);
+  80123a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801241:	e8 aa f0 ff ff       	call   8002f0 <exit>
+
+00801246 <main>:
+}
+
+const int total = 21;
+
+int
+main(void) {
+  801246:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  80124a:	83 e4 f0             	and    $0xfffffff0,%esp
+  80124d:	ff 71 fc             	pushl  -0x4(%ecx)
+  801250:	55                   	push   %ebp
+  801251:	89 e5                	mov    %esp,%ebp
+  801253:	56                   	push   %esi
+  801254:	53                   	push   %ebx
+  801255:	51                   	push   %ecx
+  801256:	83 ec 2c             	sub    $0x2c,%esp
+  801259:	89 e0                	mov    %esp,%eax
+  80125b:	89 c3                	mov    %eax,%ebx
+    int pids[total];
+  80125d:	b8 15 00 00 00       	mov    $0x15,%eax
+  801262:	83 e8 01             	sub    $0x1,%eax
+  801265:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  801268:	b8 15 00 00 00       	mov    $0x15,%eax
+  80126d:	c1 e0 02             	shl    $0x2,%eax
+  801270:	8d 50 03             	lea    0x3(%eax),%edx
+  801273:	b8 10 00 00 00       	mov    $0x10,%eax
+  801278:	83 e8 01             	sub    $0x1,%eax
+  80127b:	01 d0                	add    %edx,%eax
+  80127d:	be 10 00 00 00       	mov    $0x10,%esi
+  801282:	ba 00 00 00 00       	mov    $0x0,%edx
+  801287:	f7 f6                	div    %esi
+  801289:	6b c0 10             	imul   $0x10,%eax,%eax
+  80128c:	29 c4                	sub    %eax,%esp
+  80128e:	8d 44 24 0c          	lea    0xc(%esp),%eax
+  801292:	83 c0 03             	add    $0x3,%eax
+  801295:	c1 e8 02             	shr    $0x2,%eax
+  801298:	c1 e0 02             	shl    $0x2,%eax
+  80129b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    memset(pids, 0, sizeof(pids));
+  80129e:	b8 15 00 00 00       	mov    $0x15,%eax
+  8012a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  8012aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8012ad:	89 54 24 08          	mov    %edx,0x8(%esp)
+  8012b1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8012b8:	00 
+  8012b9:	89 04 24             	mov    %eax,(%esp)
+  8012bc:	e8 c4 fb ff ff       	call   800e85 <memset>
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  8012c1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  8012c8:	eb 70                	jmp    80133a <main+0xf4>
+        if ((pids[i] = fork()) == 0) {
+  8012ca:	e8 40 f0 ff ff       	call   80030f <fork>
+  8012cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
+  8012d2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+  8012d5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
+  8012d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8012db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8012de:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012e1:	85 c0                	test   %eax,%eax
+  8012e3:	75 42                	jne    801327 <main+0xe1>
+            srand(i * i);
+  8012e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8012e8:	0f af 45 e4          	imul   -0x1c(%ebp),%eax
+  8012ec:	89 04 24             	mov    %eax,(%esp)
+  8012ef:	e8 4a f8 ff ff       	call   800b3e <srand>
+            int times = (((unsigned int)rand()) % total);
+  8012f4:	e8 85 f7 ff ff       	call   800a7e <rand>
+  8012f9:	ba 15 00 00 00       	mov    $0x15,%edx
+  8012fe:	89 d1                	mov    %edx,%ecx
+  801300:	ba 00 00 00 00       	mov    $0x0,%edx
+  801305:	f7 f1                	div    %ecx
+  801307:	89 d0                	mov    %edx,%eax
+  801309:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            times = (times * times + 10) * 100;
+  80130c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80130f:	0f af 45 d8          	imul   -0x28(%ebp),%eax
+  801313:	83 c0 0a             	add    $0xa,%eax
+  801316:	6b c0 64             	imul   $0x64,%eax,%eax
+  801319:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            work(times);
+  80131c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80131f:	89 04 24             	mov    %eax,(%esp)
+  801322:	e8 e7 fc ff ff       	call   80100e <work>
+        }
+        if (pids[i] < 0) {
+  801327:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80132a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80132d:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801330:	85 c0                	test   %eax,%eax
+  801332:	79 02                	jns    801336 <main+0xf0>
+            goto failed;
+  801334:	eb 5d                	jmp    801393 <main+0x14d>
+main(void) {
+    int pids[total];
+    memset(pids, 0, sizeof(pids));
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  801336:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  80133a:	b8 15 00 00 00       	mov    $0x15,%eax
+  80133f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  801342:	7c 86                	jl     8012ca <main+0x84>
+        if (pids[i] < 0) {
+            goto failed;
+        }
+    }
+
+    cprintf("fork ok.\n");
+  801344:	c7 04 24 14 17 80 00 	movl   $0x801714,(%esp)
+  80134b:	e8 c8 ed ff ff       	call   800118 <cprintf>
+
+    for (i = 0; i < total; i ++) {
+  801350:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  801357:	eb 1b                	jmp    801374 <main+0x12e>
+        if (wait() != 0) {
+  801359:	e8 be ef ff ff       	call   80031c <wait>
+  80135e:	85 c0                	test   %eax,%eax
+  801360:	74 0e                	je     801370 <main+0x12a>
+            cprintf("wait failed.\n");
+  801362:	c7 04 24 1e 17 80 00 	movl   $0x80171e,(%esp)
+  801369:	e8 aa ed ff ff       	call   800118 <cprintf>
+            goto failed;
+  80136e:	eb 23                	jmp    801393 <main+0x14d>
+        }
+    }
+
+    cprintf("fork ok.\n");
+
+    for (i = 0; i < total; i ++) {
+  801370:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  801374:	b8 15 00 00 00       	mov    $0x15,%eax
+  801379:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  80137c:	7c db                	jl     801359 <main+0x113>
+            cprintf("wait failed.\n");
+            goto failed;
+        }
+    }
+
+    cprintf("matrix pass.\n");
+  80137e:	c7 04 24 2c 17 80 00 	movl   $0x80172c,(%esp)
+  801385:	e8 8e ed ff ff       	call   800118 <cprintf>
+    return 0;
+  80138a:	b8 00 00 00 00       	mov    $0x0,%eax
+  80138f:	89 dc                	mov    %ebx,%esp
+  801391:	eb 51                	jmp    8013e4 <main+0x19e>
+
+failed:
+    for (i = 0; i < total; i ++) {
+  801393:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  80139a:	eb 22                	jmp    8013be <main+0x178>
+        if (pids[i] > 0) {
+  80139c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80139f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8013a2:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8013a5:	85 c0                	test   %eax,%eax
+  8013a7:	7e 11                	jle    8013ba <main+0x174>
+            kill(pids[i]);
+  8013a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8013ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8013af:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8013b2:	89 04 24             	mov    %eax,(%esp)
+  8013b5:	e8 a5 ef ff ff       	call   80035f <kill>
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  8013ba:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  8013be:	b8 15 00 00 00       	mov    $0x15,%eax
+  8013c3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  8013c6:	7c d4                	jl     80139c <main+0x156>
+        if (pids[i] > 0) {
+            kill(pids[i]);
+        }
+    }
+    panic("FAIL: T.T\n");
+  8013c8:	c7 44 24 08 3a 17 80 	movl   $0x80173a,0x8(%esp)
+  8013cf:	00 
+  8013d0:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
+  8013d7:	00 
+  8013d8:	c7 04 24 45 17 80 00 	movl   $0x801745,(%esp)
+  8013df:	e8 4b ec ff ff       	call   80002f <__panic>
+}
+  8013e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  8013e7:	59                   	pop    %ecx
+  8013e8:	5b                   	pop    %ebx
+  8013e9:	5e                   	pop    %esi
+  8013ea:	5d                   	pop    %ebp
+  8013eb:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  8013ee:	c3                   	ret    
diff -r -u -P _lab7/obj/user/matrix.d lab7/obj/user/matrix.d
--- _lab7/obj/user/matrix.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.d	2020-05-28 05:02:22.265519207 +0800
@@ -0,0 +1,2 @@
+obj/user/matrix.o obj/user/matrix.d: user/matrix.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files _lab7/obj/user/matrix.o and lab7/obj/user/matrix.o differ
diff -r -u -P _lab7/obj/user/matrix.sym lab7/obj/user/matrix.sym
--- _lab7/obj/user/matrix.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.sym	2020-05-28 05:02:26.441519207 +0800
@@ -0,0 +1,85 @@
+00800020 .text
+00801400 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202f39 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801500 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 matrix.c
+00802020 mata
+008021c0 matb
+00802360 matc
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202f38 __STAB_END__
+00800248 sys_kill
+00202f39 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+00801246 main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203da3 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+00801710 total
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
+0080100e work
diff -r -u -P _lab7/obj/user/pgdir.asm lab7/obj/user/pgdir.asm
--- _lab7/obj/user/pgdir.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.asm	2020-05-28 05:02:26.405519207 +0800
@@ -0,0 +1,2560 @@
+
+obj/__user_pgdir.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  801017:	e8 56 f3 ff ff       	call   800372 <getpid>
+  80101c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801020:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  801027:	e8 ec f0 ff ff       	call   800118 <cprintf>
+    print_pgdir();
+  80102c:	e8 4e f3 ff ff       	call   80037f <print_pgdir>
+    cprintf("pgdir pass.\n");
+  801031:	c7 04 24 57 13 80 00 	movl   $0x801357,(%esp)
+  801038:	e8 db f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  80103d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801042:	c9                   	leave  
+  801043:	c3                   	ret    
diff -r -u -P _lab7/obj/user/pgdir.d lab7/obj/user/pgdir.d
--- _lab7/obj/user/pgdir.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.d	2020-05-28 05:02:22.277519207 +0800
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/pgdir.o and lab7/obj/user/pgdir.o differ
diff -r -u -P _lab7/obj/user/pgdir.sym lab7/obj/user/pgdir.sym
--- _lab7/obj/user/pgdir.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.sym	2020-05-28 05:02:26.453519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202bb5 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 pgdir.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202bb4 __STAB_END__
+00800248 sys_kill
+00202bb5 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0020396c __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/priority.asm lab7/obj/user/priority.asm
--- _lab7/obj/user/priority.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.asm	2020-05-28 05:02:26.473519207 +0800
@@ -0,0 +1,2836 @@
+
+obj/__user_priority.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 13 80 00 	movl   $0x80131a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 13 80 00 	movl   $0x80131c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 13 80 00 	movl   $0x80131a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 38 13 80 00 	movl   $0x801338,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 70 0c 00 00       	call   80103a <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 64 14 80 00       	add    $0x801464,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 88 14 80 00 	mov    0x801488(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 00 14 80 00 	mov    0x801400(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 75 14 80 	movl   $0x801475,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 7e 14 80 	movl   $0x80147e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 81 14 80 00       	mov    $0x801481,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <spin_delay>:
+int status[TOTAL];
+int pids[TOTAL];
+
+static void
+spin_delay(void)
+{
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 ec 10             	sub    $0x10,%esp
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  801014:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  80101b:	eb 12                	jmp    80102f <spin_delay+0x21>
+     {
+          j = !j;
+  80101d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  801020:	85 c0                	test   %eax,%eax
+  801022:	0f 94 c0             	sete   %al
+  801025:	0f b6 c0             	movzbl %al,%eax
+  801028:	89 45 f8             	mov    %eax,-0x8(%ebp)
+static void
+spin_delay(void)
+{
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  80102b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80102f:	81 7d fc c8 00 00 00 	cmpl   $0xc8,-0x4(%ebp)
+  801036:	75 e5                	jne    80101d <spin_delay+0xf>
+     {
+          j = !j;
+     }
+}
+  801038:	c9                   	leave  
+  801039:	c3                   	ret    
+
+0080103a <main>:
+
+int
+main(void) {
+  80103a:	55                   	push   %ebp
+  80103b:	89 e5                	mov    %esp,%ebp
+  80103d:	56                   	push   %esi
+  80103e:	53                   	push   %ebx
+  80103f:	83 e4 f0             	and    $0xfffffff0,%esp
+  801042:	83 ec 20             	sub    $0x20,%esp
+     int i,time;
+     cprintf("priority process will sleep %d ticks\n",SLEEP_TIME);
+  801045:	c7 44 24 04 90 01 00 	movl   $0x190,0x4(%esp)
+  80104c:	00 
+  80104d:	c7 04 24 e0 15 80 00 	movl   $0x8015e0,(%esp)
+  801054:	e8 bf f0 ff ff       	call   800118 <cprintf>
+     sleep(SLEEP_TIME);
+  801059:	c7 04 24 90 01 00 00 	movl   $0x190,(%esp)
+  801060:	e8 47 f3 ff ff       	call   8003ac <sleep>
+     memset(pids, 0, sizeof(pids));
+  801065:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
+  80106c:	00 
+  80106d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801074:	00 
+  801075:	c7 04 24 30 20 80 00 	movl   $0x802030,(%esp)
+  80107c:	e8 04 fe ff ff       	call   800e85 <memset>
+     lab6_set_priority(TOTAL + 1);
+  801081:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+  801088:	e8 0c f3 ff ff       	call   800399 <lab6_set_priority>
+
+     for (i = 0; i < TOTAL; i ++) {
+  80108d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801094:	00 
+  801095:	e9 0e 01 00 00       	jmp    8011a8 <main+0x16e>
+          acc[i]=0;
+  80109a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80109e:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  8010a5:	00 00 00 00 
+          if ((pids[i] = fork()) == 0) {
+  8010a9:	e8 61 f2 ff ff       	call   80030f <fork>
+  8010ae:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  8010b2:	89 04 95 30 20 80 00 	mov    %eax,0x802030(,%edx,4)
+  8010b9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010bd:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8010c4:	85 c0                	test   %eax,%eax
+  8010c6:	0f 85 ba 00 00 00    	jne    801186 <main+0x14c>
+               lab6_set_priority(i + 1);
+  8010cc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010d0:	83 c0 01             	add    $0x1,%eax
+  8010d3:	89 04 24             	mov    %eax,(%esp)
+  8010d6:	e8 be f2 ff ff       	call   800399 <lab6_set_priority>
+               acc[i] = 0;
+  8010db:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010df:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  8010e6:	00 00 00 00 
+               while (1) {
+                    spin_delay();
+  8010ea:	e8 1f ff ff ff       	call   80100e <spin_delay>
+                    ++ acc[i];
+  8010ef:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010f3:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  8010fa:	8d 50 01             	lea    0x1(%eax),%edx
+  8010fd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801101:	89 14 85 08 20 80 00 	mov    %edx,0x802008(,%eax,4)
+                    if(acc[i]%4000==0) {
+  801108:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80110c:	8b 0c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ecx
+  801113:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+  801118:	89 c8                	mov    %ecx,%eax
+  80111a:	f7 e2                	mul    %edx
+  80111c:	89 d0                	mov    %edx,%eax
+  80111e:	c1 e8 08             	shr    $0x8,%eax
+  801121:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
+  801127:	29 c1                	sub    %eax,%ecx
+  801129:	89 c8                	mov    %ecx,%eax
+  80112b:	85 c0                	test   %eax,%eax
+  80112d:	75 52                	jne    801181 <main+0x147>
+                        if((time=gettime_msec())>MAX_TIME+SLEEP_TIME) {
+  80112f:	e8 58 f2 ff ff       	call   80038c <gettime_msec>
+  801134:	89 44 24 18          	mov    %eax,0x18(%esp)
+  801138:	81 7c 24 18 78 05 00 	cmpl   $0x578,0x18(%esp)
+  80113f:	00 
+  801140:	7e 3f                	jle    801181 <main+0x147>
+                            cprintf("child pid %d, acc %d, time %d\n",getpid(),acc[i],time);
+  801142:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801146:	8b 1c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ebx
+  80114d:	e8 20 f2 ff ff       	call   800372 <getpid>
+  801152:	8b 54 24 18          	mov    0x18(%esp),%edx
+  801156:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80115a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+  80115e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801162:	c7 04 24 08 16 80 00 	movl   $0x801608,(%esp)
+  801169:	e8 aa ef ff ff       	call   800118 <cprintf>
+                            exit(acc[i]);
+  80116e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801172:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  801179:	89 04 24             	mov    %eax,(%esp)
+  80117c:	e8 6f f1 ff ff       	call   8002f0 <exit>
+                        }
+                    }
+               }
+  801181:	e9 64 ff ff ff       	jmp    8010ea <main+0xb0>
+               
+          }
+          if (pids[i] < 0) {
+  801186:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80118a:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801191:	85 c0                	test   %eax,%eax
+  801193:	79 0e                	jns    8011a3 <main+0x169>
+               goto failed;
+  801195:	90                   	nop
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  801196:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80119d:	00 
+  80119e:	e9 32 01 00 00       	jmp    8012d5 <main+0x29b>
+     cprintf("priority process will sleep %d ticks\n",SLEEP_TIME);
+     sleep(SLEEP_TIME);
+     memset(pids, 0, sizeof(pids));
+     lab6_set_priority(TOTAL + 1);
+
+     for (i = 0; i < TOTAL; i ++) {
+  8011a3:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  8011a8:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  8011ad:	0f 8e e7 fe ff ff    	jle    80109a <main+0x60>
+          if (pids[i] < 0) {
+               goto failed;
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+  8011b3:	c7 04 24 28 16 80 00 	movl   $0x801628,(%esp)
+  8011ba:	e8 59 ef ff ff       	call   800118 <cprintf>
+
+     for (i = 0; i < TOTAL; i ++) {
+  8011bf:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  8011c6:	00 
+  8011c7:	eb 6b                	jmp    801234 <main+0x1fa>
+         status[i]=0;
+  8011c9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8011cd:	c7 04 85 1c 20 80 00 	movl   $0x0,0x80201c(,%eax,4)
+  8011d4:	00 00 00 00 
+         waitpid(pids[i],&status[i]);
+  8011d8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8011dc:	c1 e0 02             	shl    $0x2,%eax
+  8011df:	8d 90 1c 20 80 00    	lea    0x80201c(%eax),%edx
+  8011e5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8011e9:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011f0:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8011f4:	89 04 24             	mov    %eax,(%esp)
+  8011f7:	e8 3c f1 ff ff       	call   800338 <waitpid>
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+  8011fc:	e8 8b f1 ff ff       	call   80038c <gettime_msec>
+  801201:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801205:	8b 0c 95 1c 20 80 00 	mov    0x80201c(,%edx,4),%ecx
+  80120c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801210:	8b 14 95 30 20 80 00 	mov    0x802030(,%edx,4),%edx
+  801217:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80121b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+  80121f:	89 54 24 04          	mov    %edx,0x4(%esp)
+  801223:	c7 04 24 50 16 80 00 	movl   $0x801650,(%esp)
+  80122a:	e8 e9 ee ff ff       	call   800118 <cprintf>
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+
+     for (i = 0; i < TOTAL; i ++) {
+  80122f:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801234:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801239:	7e 8e                	jle    8011c9 <main+0x18f>
+         status[i]=0;
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+  80123b:	c7 04 24 6f 16 80 00 	movl   $0x80166f,(%esp)
+  801242:	e8 d1 ee ff ff       	call   800118 <cprintf>
+     cprintf("stride sched correct result:");
+  801247:	c7 04 24 85 16 80 00 	movl   $0x801685,(%esp)
+  80124e:	e8 c5 ee ff ff       	call   800118 <cprintf>
+     for (i = 0; i < TOTAL; i ++)
+  801253:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80125a:	00 
+  80125b:	eb 37                	jmp    801294 <main+0x25a>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+  80125d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801261:	8b 04 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%eax
+  801268:	01 c0                	add    %eax,%eax
+  80126a:	8b 35 1c 20 80 00    	mov    0x80201c,%esi
+  801270:	99                   	cltd   
+  801271:	f7 fe                	idiv   %esi
+  801273:	83 c0 01             	add    $0x1,%eax
+  801276:	89 c2                	mov    %eax,%edx
+  801278:	c1 ea 1f             	shr    $0x1f,%edx
+  80127b:	01 d0                	add    %edx,%eax
+  80127d:	d1 f8                	sar    %eax
+  80127f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801283:	c7 04 24 a2 16 80 00 	movl   $0x8016a2,(%esp)
+  80128a:	e8 89 ee ff ff       	call   800118 <cprintf>
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+     cprintf("stride sched correct result:");
+     for (i = 0; i < TOTAL; i ++)
+  80128f:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801294:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801299:	7e c2                	jle    80125d <main+0x223>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+     }
+     cprintf("\n");
+  80129b:	c7 04 24 a6 16 80 00 	movl   $0x8016a6,(%esp)
+  8012a2:	e8 71 ee ff ff       	call   800118 <cprintf>
+
+     return 0;
+  8012a7:	b8 00 00 00 00       	mov    $0x0,%eax
+  8012ac:	eb 4a                	jmp    8012f8 <main+0x2be>
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+          if (pids[i] > 0) {
+  8012ae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8012b2:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8012b9:	85 c0                	test   %eax,%eax
+  8012bb:	7e 13                	jle    8012d0 <main+0x296>
+               kill(pids[i]);
+  8012bd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8012c1:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8012c8:	89 04 24             	mov    %eax,(%esp)
+  8012cb:	e8 8f f0 ff ff       	call   80035f <kill>
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  8012d0:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  8012d5:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  8012da:	7e d2                	jle    8012ae <main+0x274>
+          if (pids[i] > 0) {
+               kill(pids[i]);
+          }
+     }
+     panic("FAIL: T.T\n");
+  8012dc:	c7 44 24 08 a8 16 80 	movl   $0x8016a8,0x8(%esp)
+  8012e3:	00 
+  8012e4:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
+  8012eb:	00 
+  8012ec:	c7 04 24 b3 16 80 00 	movl   $0x8016b3,(%esp)
+  8012f3:	e8 37 ed ff ff       	call   80002f <__panic>
+}
+  8012f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  8012fb:	5b                   	pop    %ebx
+  8012fc:	5e                   	pop    %esi
+  8012fd:	5d                   	pop    %ebp
+  8012fe:	c3                   	ret    
diff -r -u -P _lab7/obj/user/priority.d lab7/obj/user/priority.d
--- _lab7/obj/user/priority.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.d	2020-05-28 05:02:22.269519207 +0800
@@ -0,0 +1,2 @@
+obj/user/priority.o obj/user/priority.d: user/priority.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files _lab7/obj/user/priority.o and lab7/obj/user/priority.o differ
diff -r -u -P _lab7/obj/user/priority.sym lab7/obj/user/priority.sym
--- _lab7/obj/user/priority.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.sym	2020-05-28 05:02:26.497519207 +0800
@@ -0,0 +1,84 @@
+00800020 .text
+00801300 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202e55 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801400 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 priority.c
+0080100e spin_delay
+00000000 
+00800bae strcpy
+00800352 yield
+00802008 acc
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202e54 __STAB_END__
+00800248 sys_kill
+00202e55 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080103a main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203c99 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
+0080201c status
+00802030 pids
diff -r -u -P _lab7/obj/user/sleep.asm lab7/obj/user/sleep.asm
--- _lab7/obj/user/sleep.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.asm	2020-05-28 05:02:26.449519207 +0800
@@ -0,0 +1,2635 @@
+
+obj/__user_sleep.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 98 0c 00 00       	call   801062 <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 64 12 80 00       	add    $0x801264,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <sleepy>:
+#include <stdio.h>
+#include <ulib.h>
+
+void
+sleepy(int pid) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 ec 28             	sub    $0x28,%esp
+    int i, time = 100;
+  801014:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%ebp)
+    for (i = 0; i < 10; i ++) {
+  80101b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801022:	eb 2c                	jmp    801050 <sleepy+0x42>
+        sleep(time);
+  801024:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801027:	89 04 24             	mov    %eax,(%esp)
+  80102a:	e8 7d f3 ff ff       	call   8003ac <sleep>
+        cprintf("sleep %d x %d slices.\n", i + 1, time);
+  80102f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801032:	8d 50 01             	lea    0x1(%eax),%edx
+  801035:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801038:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80103c:	89 54 24 04          	mov    %edx,0x4(%esp)
+  801040:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  801047:	e8 cc f0 ff ff       	call   800118 <cprintf>
+#include <ulib.h>
+
+void
+sleepy(int pid) {
+    int i, time = 100;
+    for (i = 0; i < 10; i ++) {
+  80104c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801050:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+  801054:	7e ce                	jle    801024 <sleepy+0x16>
+        sleep(time);
+        cprintf("sleep %d x %d slices.\n", i + 1, time);
+    }
+    exit(0);
+  801056:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  80105d:	e8 8e f2 ff ff       	call   8002f0 <exit>
+
+00801062 <main>:
+}
+
+int
+main(void) {
+  801062:	55                   	push   %ebp
+  801063:	89 e5                	mov    %esp,%ebp
+  801065:	83 e4 f0             	and    $0xfffffff0,%esp
+  801068:	83 ec 20             	sub    $0x20,%esp
+    unsigned int time = gettime_msec();
+  80106b:	e8 1c f3 ff ff       	call   80038c <gettime_msec>
+  801070:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+    int pid1, exit_code;
+
+    if ((pid1 = fork()) == 0) {
+  801074:	e8 96 f2 ff ff       	call   80030f <fork>
+  801079:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80107d:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801082:	75 0c                	jne    801090 <main+0x2e>
+        sleepy(pid1);
+  801084:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801088:	89 04 24             	mov    %eax,(%esp)
+  80108b:	e8 7e ff ff ff       	call   80100e <sleepy>
+    }
+    
+    assert(waitpid(pid1, &exit_code) == 0 && exit_code == 0);
+  801090:	8d 44 24 14          	lea    0x14(%esp),%eax
+  801094:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801098:	8b 44 24 18          	mov    0x18(%esp),%eax
+  80109c:	89 04 24             	mov    %eax,(%esp)
+  80109f:	e8 94 f2 ff ff       	call   800338 <waitpid>
+  8010a4:	85 c0                	test   %eax,%eax
+  8010a6:	75 08                	jne    8010b0 <main+0x4e>
+  8010a8:	8b 44 24 14          	mov    0x14(%esp),%eax
+  8010ac:	85 c0                	test   %eax,%eax
+  8010ae:	74 24                	je     8010d4 <main+0x72>
+  8010b0:	c7 44 24 0c f8 13 80 	movl   $0x8013f8,0xc(%esp)
+  8010b7:	00 
+  8010b8:	c7 44 24 08 29 14 80 	movl   $0x801429,0x8(%esp)
+  8010bf:	00 
+  8010c0:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010c7:	00 
+  8010c8:	c7 04 24 3e 14 80 00 	movl   $0x80143e,(%esp)
+  8010cf:	e8 5b ef ff ff       	call   80002f <__panic>
+    cprintf("use %04d msecs.\n", gettime_msec() - time);
+  8010d4:	e8 b3 f2 ff ff       	call   80038c <gettime_msec>
+  8010d9:	2b 44 24 1c          	sub    0x1c(%esp),%eax
+  8010dd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010e1:	c7 04 24 4b 14 80 00 	movl   $0x80144b,(%esp)
+  8010e8:	e8 2b f0 ff ff       	call   800118 <cprintf>
+    cprintf("sleep pass.\n");
+  8010ed:	c7 04 24 5c 14 80 00 	movl   $0x80145c,(%esp)
+  8010f4:	e8 1f f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010fe:	c9                   	leave  
+  8010ff:	c3                   	ret    
diff -r -u -P _lab7/obj/user/sleep.d lab7/obj/user/sleep.d
--- _lab7/obj/user/sleep.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.d	2020-05-28 05:02:22.257519207 +0800
@@ -0,0 +1,2 @@
+obj/user/sleep.o obj/user/sleep.d: user/sleep.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
diff -r -u -P _lab7/obj/user/sleepkill.asm lab7/obj/user/sleepkill.asm
--- _lab7/obj/user/sleepkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.asm	2020-05-28 05:02:26.477519207 +0800
@@ -0,0 +1,2595 @@
+
+obj/__user_sleepkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 10 80 00 	movl   $0x8010c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 10 80 00 	movl   $0x8010dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 f8 10 80 00 	movl   $0x8010f8,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 24 12 80 00       	add    $0x801224,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 35 12 80 	movl   $0x801235,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 3e 12 80 	movl   $0x80123e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int pid;
+    if ((pid = fork()) == 0) {
+  801017:	e8 f3 f2 ff ff       	call   80030f <fork>
+  80101c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  801020:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801025:	75 18                	jne    80103f <main+0x31>
+        sleep(~0);
+  801027:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  80102e:	e8 79 f3 ff ff       	call   8003ac <sleep>
+        exit(0xdead);
+  801033:	c7 04 24 ad de 00 00 	movl   $0xdead,(%esp)
+  80103a:	e8 b1 f2 ff ff       	call   8002f0 <exit>
+    }
+    assert(pid > 0);
+  80103f:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801044:	7f 24                	jg     80106a <main+0x5c>
+  801046:	c7 44 24 0c a0 13 80 	movl   $0x8013a0,0xc(%esp)
+  80104d:	00 
+  80104e:	c7 44 24 08 a8 13 80 	movl   $0x8013a8,0x8(%esp)
+  801055:	00 
+  801056:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
+  80105d:	00 
+  80105e:	c7 04 24 bd 13 80 00 	movl   $0x8013bd,(%esp)
+  801065:	e8 c5 ef ff ff       	call   80002f <__panic>
+
+    sleep(100);
+  80106a:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
+  801071:	e8 36 f3 ff ff       	call   8003ac <sleep>
+    assert(kill(pid) == 0);
+  801076:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80107a:	89 04 24             	mov    %eax,(%esp)
+  80107d:	e8 dd f2 ff ff       	call   80035f <kill>
+  801082:	85 c0                	test   %eax,%eax
+  801084:	74 24                	je     8010aa <main+0x9c>
+  801086:	c7 44 24 0c ce 13 80 	movl   $0x8013ce,0xc(%esp)
+  80108d:	00 
+  80108e:	c7 44 24 08 a8 13 80 	movl   $0x8013a8,0x8(%esp)
+  801095:	00 
+  801096:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  80109d:	00 
+  80109e:	c7 04 24 bd 13 80 00 	movl   $0x8013bd,(%esp)
+  8010a5:	e8 85 ef ff ff       	call   80002f <__panic>
+    cprintf("sleepkill pass.\n");
+  8010aa:	c7 04 24 dd 13 80 00 	movl   $0x8013dd,(%esp)
+  8010b1:	e8 62 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010b6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010bb:	c9                   	leave  
+  8010bc:	c3                   	ret    
diff -r -u -P _lab7/obj/user/sleepkill.d lab7/obj/user/sleepkill.d
--- _lab7/obj/user/sleepkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.d	2020-05-28 05:02:22.245519207 +0800
@@ -0,0 +1,2 @@
+obj/user/sleepkill.o obj/user/sleepkill.d: user/sleepkill.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/sleepkill.o and lab7/obj/user/sleepkill.o differ
diff -r -u -P _lab7/obj/user/sleepkill.sym lab7/obj/user/sleepkill.sym
--- _lab7/obj/user/sleepkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.sym	2020-05-28 05:02:26.525519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c21 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011c0 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 sleepkill.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202c20 __STAB_END__
+00800248 sys_kill
+00202c21 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+002039e6 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
Binary files _lab7/obj/user/sleep.o and lab7/obj/user/sleep.o differ
diff -r -u -P _lab7/obj/user/sleep.sym lab7/obj/user/sleep.sym
--- _lab7/obj/user/sleep.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.sym	2020-05-28 05:02:26.485519207 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cd5 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 sleep.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+0080100e sleepy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202cd4 __STAB_END__
+00800248 sys_kill
+00202cd5 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+00801062 main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203acc __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/softint.asm lab7/obj/user/softint.asm
--- _lab7/obj/user/softint.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.asm	2020-05-28 05:02:26.553519207 +0800
@@ -0,0 +1,2554 @@
+
+obj/__user_softint.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 10 80 00 	movl   $0x801040,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 10 80 00 	movl   $0x80105c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 78 10 80 00 	movl   $0x801078,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 b5 11 80 	movl   $0x8011b5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 be 11 80 	movl   $0x8011be,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("int $14");
+  801017:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  801019:	c7 44 24 08 20 13 80 	movl   $0x801320,0x8(%esp)
+  801020:	00 
+  801021:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  801028:	00 
+  801029:	c7 04 24 2b 13 80 00 	movl   $0x80132b,(%esp)
+  801030:	e8 fa ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/softint.d lab7/obj/user/softint.d
--- _lab7/obj/user/softint.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.d	2020-05-28 05:02:22.217519207 +0800
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/softint.o and lab7/obj/user/softint.o differ
diff -r -u -P _lab7/obj/user/softint.sym lab7/obj/user/softint.sym
--- _lab7/obj/user/softint.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.sym	2020-05-28 05:02:26.585519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b91 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801140 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 softint.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202b90 __STAB_END__
+00800248 sys_kill
+00202b91 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0020394a __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/spin.asm lab7/obj/user/spin.asm
--- _lab7/obj/user/spin.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.asm	2020-05-28 05:02:26.525519207 +0800
@@ -0,0 +1,2638 @@
+
+obj/__user_spin.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 11 80 00 	movl   $0x801160,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 11 80 00 	movl   $0x80117c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 98 11 80 00 	movl   $0x801198,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 c4 12 80 00       	add    $0x8012c4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 e8 12 80 00 	mov    0x8012e8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 60 12 80 00 	mov    0x801260(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 d5 12 80 	movl   $0x8012d5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 de 12 80 	movl   $0x8012de,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be e1 12 80 00       	mov    $0x8012e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  801017:	c7 04 24 40 14 80 00 	movl   $0x801440,(%esp)
+  80101e:	e8 f5 f0 ff ff       	call   800118 <cprintf>
+    pid = fork();
+  801023:	e8 e7 f2 ff ff       	call   80030f <fork>
+  801028:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+    if (pid== 0) {
+  80102c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801031:	75 0e                	jne    801041 <main+0x33>
+        cprintf("I am the child. spinning ...\n");
+  801033:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  80103a:	e8 d9 f0 ff ff       	call   800118 <cprintf>
+        while (1);
+  80103f:	eb fe                	jmp    80103f <main+0x31>
+    }else if (pid<0) {
+  801041:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801046:	79 1c                	jns    801064 <main+0x56>
+        panic("fork child error\n");
+  801048:	c7 44 24 08 85 14 80 	movl   $0x801485,0x8(%esp)
+  80104f:	00 
+  801050:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
+  801057:	00 
+  801058:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  80105f:	e8 cb ef ff ff       	call   80002f <__panic>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  801064:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  80106b:	e8 a8 f0 ff ff       	call   800118 <cprintf>
+
+    yield();
+  801070:	e8 dd f2 ff ff       	call   800352 <yield>
+    yield();
+  801075:	e8 d8 f2 ff ff       	call   800352 <yield>
+    yield();
+  80107a:	e8 d3 f2 ff ff       	call   800352 <yield>
+    
+    cprintf("I am the parent.  Killing the child...\n");
+  80107f:	c7 04 24 cc 14 80 00 	movl   $0x8014cc,(%esp)
+  801086:	e8 8d f0 ff ff       	call   800118 <cprintf>
+
+    assert((ret = kill(pid)) == 0);
+  80108b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80108f:	89 04 24             	mov    %eax,(%esp)
+  801092:	e8 c8 f2 ff ff       	call   80035f <kill>
+  801097:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80109b:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  8010a0:	74 24                	je     8010c6 <main+0xb8>
+  8010a2:	c7 44 24 0c f4 14 80 	movl   $0x8014f4,0xc(%esp)
+  8010a9:	00 
+  8010aa:	c7 44 24 08 0b 15 80 	movl   $0x80150b,0x8(%esp)
+  8010b1:	00 
+  8010b2:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010b9:	00 
+  8010ba:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  8010c1:	e8 69 ef ff ff       	call   80002f <__panic>
+    cprintf("kill returns %d\n", ret);
+  8010c6:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010ce:	c7 04 24 20 15 80 00 	movl   $0x801520,(%esp)
+  8010d5:	e8 3e f0 ff ff       	call   800118 <cprintf>
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  8010da:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  8010e1:	00 
+  8010e2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010e6:	89 04 24             	mov    %eax,(%esp)
+  8010e9:	e8 4a f2 ff ff       	call   800338 <waitpid>
+  8010ee:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8010f2:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  8010f7:	74 24                	je     80111d <main+0x10f>
+  8010f9:	c7 44 24 0c 34 15 80 	movl   $0x801534,0xc(%esp)
+  801100:	00 
+  801101:	c7 44 24 08 0b 15 80 	movl   $0x80150b,0x8(%esp)
+  801108:	00 
+  801109:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+  801110:	00 
+  801111:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  801118:	e8 12 ef ff ff       	call   80002f <__panic>
+    cprintf("wait returns %d\n", ret);
+  80111d:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801121:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801125:	c7 04 24 54 15 80 00 	movl   $0x801554,(%esp)
+  80112c:	e8 e7 ef ff ff       	call   800118 <cprintf>
+
+    cprintf("spin may pass.\n");
+  801131:	c7 04 24 65 15 80 00 	movl   $0x801565,(%esp)
+  801138:	e8 db ef ff ff       	call   800118 <cprintf>
+    return 0;
+  80113d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801142:	c9                   	leave  
+  801143:	c3                   	ret    
diff -r -u -P _lab7/obj/user/spin.d lab7/obj/user/spin.d
--- _lab7/obj/user/spin.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.d	2020-05-28 05:02:22.245519207 +0800
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/spin.o and lab7/obj/user/spin.o differ
diff -r -u -P _lab7/obj/user/spin.sym lab7/obj/user/spin.sym
--- _lab7/obj/user/spin.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.sym	2020-05-28 05:02:26.557519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801160 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ca5 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801260 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 spin.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202ca4 __STAB_END__
+00800248 sys_kill
+00202ca5 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203a65 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/testbss.asm lab7/obj/user/testbss.asm
--- _lab7/obj/user/testbss.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.asm	2020-05-28 05:02:26.581519207 +0800
@@ -0,0 +1,2655 @@
+
+obj/__user_testbss.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 11 80 00 	movl   $0x801140,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 11 80 00 	movl   $0x80115c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 78 11 80 00 	movl   $0x801178,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 a4 12 80 00       	add    $0x8012a4,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 c8 12 80 00 	mov    0x8012c8(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d 40 12 80 00 	mov    0x801240(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 b5 12 80 	movl   $0x8012b5,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 be 12 80 	movl   $0x8012be,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be c1 12 80 00       	mov    $0x8012c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    cprintf("Making sure bss works right...\n");
+  801017:	c7 04 24 20 14 80 00 	movl   $0x801420,(%esp)
+  80101e:	e8 f5 f0 ff ff       	call   800118 <cprintf>
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801023:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80102a:	00 
+  80102b:	eb 38                	jmp    801065 <main+0x57>
+        if (bigarray[i] != 0) {
+  80102d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801031:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  801038:	85 c0                	test   %eax,%eax
+  80103a:	74 24                	je     801060 <main+0x52>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  80103c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801040:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801044:	c7 44 24 08 40 14 80 	movl   $0x801440,0x8(%esp)
+  80104b:	00 
+  80104c:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  801053:	00 
+  801054:	c7 04 24 5d 14 80 00 	movl   $0x80145d,(%esp)
+  80105b:	e8 cf ef ff ff       	call   80002f <__panic>
+
+int
+main(void) {
+    cprintf("Making sure bss works right...\n");
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801060:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801065:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  80106c:	00 
+  80106d:	7e be                	jle    80102d <main+0x1f>
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80106f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801076:	00 
+  801077:	eb 14                	jmp    80108d <main+0x7f>
+        bigarray[i] = i;
+  801079:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  80107d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801081:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801088:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  80108d:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  801094:	00 
+  801095:	7e e2                	jle    801079 <main+0x6b>
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801097:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80109e:	00 
+  80109f:	eb 3c                	jmp    8010dd <main+0xcf>
+        if (bigarray[i] != i) {
+  8010a1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010a5:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  8010ac:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010b0:	39 c2                	cmp    %eax,%edx
+  8010b2:	74 24                	je     8010d8 <main+0xca>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  8010b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8010bc:	c7 44 24 08 6c 14 80 	movl   $0x80146c,0x8(%esp)
+  8010c3:	00 
+  8010c4:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
+  8010cb:	00 
+  8010cc:	c7 04 24 5d 14 80 00 	movl   $0x80145d,(%esp)
+  8010d3:	e8 57 ef ff ff       	call   80002f <__panic>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  8010d8:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  8010dd:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  8010e4:	00 
+  8010e5:	7e ba                	jle    8010a1 <main+0x93>
+        if (bigarray[i] != i) {
+            panic("bigarray[%d] didn't hold its value!\n", i);
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  8010e7:	c7 04 24 94 14 80 00 	movl   $0x801494,(%esp)
+  8010ee:	e8 25 f0 ff ff       	call   800118 <cprintf>
+    cprintf("testbss may pass.\n");
+  8010f3:	c7 04 24 c7 14 80 00 	movl   $0x8014c7,(%esp)
+  8010fa:	e8 19 f0 ff ff       	call   800118 <cprintf>
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  8010ff:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  801106:	00 00 00 
+    asm volatile ("int $0x14");
+  801109:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  80110b:	c7 44 24 08 da 14 80 	movl   $0x8014da,0x8(%esp)
+  801112:	00 
+  801113:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
+  80111a:	00 
+  80111b:	c7 04 24 5d 14 80 00 	movl   $0x80145d,(%esp)
+  801122:	e8 08 ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/testbss.d lab7/obj/user/testbss.d
--- _lab7/obj/user/testbss.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.d	2020-05-28 05:02:22.245519207 +0800
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab7/obj/user/testbss.o and lab7/obj/user/testbss.o differ
diff -r -u -P _lab7/obj/user/testbss.sym lab7/obj/user/testbss.sym
--- _lab7/obj/user/testbss.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.sym	2020-05-28 05:02:26.589519207 +0800
@@ -0,0 +1,81 @@
+00800020 .text
+00801140 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202c99 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801240 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 testbss.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202c98 __STAB_END__
+00800248 sys_kill
+00202c99 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+00802020 bigarray
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+00203a92 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
diff -r -u -P _lab7/obj/user/waitkill.asm lab7/obj/user/waitkill.asm
--- _lab7/obj/user/waitkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.asm	2020-05-28 05:02:26.597519207 +0800
@@ -0,0 +1,2697 @@
+
+obj/__user_waitkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 a0 11 80 00 	movl   $0x8011a0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 ba 11 80 00 	movl   $0x8011ba,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 bc 11 80 00 	movl   $0x8011bc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 ba 11 80 00 	movl   $0x8011ba,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 d8 11 80 00 	movl   $0x8011d8,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 ec 0c 00 00       	call   8010b6 <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 04 13 80 00       	add    $0x801304,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 28 13 80 00 	mov    0x801328(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d a0 12 80 00 	mov    0x8012a0(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 15 13 80 	movl   $0x801315,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 1e 13 80 	movl   $0x80131e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 21 13 80 00       	mov    $0x801321,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  801014:	e8 39 f3 ff ff       	call   800352 <yield>
+    yield();
+  801019:	e8 34 f3 ff ff       	call   800352 <yield>
+    yield();
+  80101e:	e8 2f f3 ff ff       	call   800352 <yield>
+    yield();
+  801023:	e8 2a f3 ff ff       	call   800352 <yield>
+    yield();
+  801028:	e8 25 f3 ff ff       	call   800352 <yield>
+    yield();
+  80102d:	e8 20 f3 ff ff       	call   800352 <yield>
+}
+  801032:	c9                   	leave  
+  801033:	c3                   	ret    
+
+00801034 <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  801034:	55                   	push   %ebp
+  801035:	89 e5                	mov    %esp,%ebp
+  801037:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 1.\n");
+  80103a:	c7 04 24 80 14 80 00 	movl   $0x801480,(%esp)
+  801041:	e8 d2 f0 ff ff       	call   800118 <cprintf>
+    while (1);
+  801046:	eb fe                	jmp    801046 <loop+0x12>
+
+00801048 <work>:
+}
+
+void
+work(void) {
+  801048:	55                   	push   %ebp
+  801049:	89 e5                	mov    %esp,%ebp
+  80104b:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 2.\n");
+  80104e:	c7 04 24 8a 14 80 00 	movl   $0x80148a,(%esp)
+  801055:	e8 be f0 ff ff       	call   800118 <cprintf>
+    do_yield();
+  80105a:	e8 af ff ff ff       	call   80100e <do_yield>
+    if (kill(parent) == 0) {
+  80105f:	a1 08 20 80 00       	mov    0x802008,%eax
+  801064:	89 04 24             	mov    %eax,(%esp)
+  801067:	e8 f3 f2 ff ff       	call   80035f <kill>
+  80106c:	85 c0                	test   %eax,%eax
+  80106e:	75 3a                	jne    8010aa <work+0x62>
+        cprintf("kill parent ok.\n");
+  801070:	c7 04 24 94 14 80 00 	movl   $0x801494,(%esp)
+  801077:	e8 9c f0 ff ff       	call   800118 <cprintf>
+        do_yield();
+  80107c:	e8 8d ff ff ff       	call   80100e <do_yield>
+        if (kill(pid1) == 0) {
+  801081:	a1 10 20 80 00       	mov    0x802010,%eax
+  801086:	89 04 24             	mov    %eax,(%esp)
+  801089:	e8 d1 f2 ff ff       	call   80035f <kill>
+  80108e:	85 c0                	test   %eax,%eax
+  801090:	75 18                	jne    8010aa <work+0x62>
+            cprintf("kill child1 ok.\n");
+  801092:	c7 04 24 a5 14 80 00 	movl   $0x8014a5,(%esp)
+  801099:	e8 7a f0 ff ff       	call   800118 <cprintf>
+            exit(0);
+  80109e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8010a5:	e8 46 f2 ff ff       	call   8002f0 <exit>
+        }
+    }
+    exit(-1);
+  8010aa:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  8010b1:	e8 3a f2 ff ff       	call   8002f0 <exit>
+
+008010b6 <main>:
+}
+
+int
+main(void) {
+  8010b6:	55                   	push   %ebp
+  8010b7:	89 e5                	mov    %esp,%ebp
+  8010b9:	83 e4 f0             	and    $0xfffffff0,%esp
+  8010bc:	83 ec 10             	sub    $0x10,%esp
+    parent = getpid();
+  8010bf:	e8 ae f2 ff ff       	call   800372 <getpid>
+  8010c4:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  8010c9:	e8 41 f2 ff ff       	call   80030f <fork>
+  8010ce:	a3 10 20 80 00       	mov    %eax,0x802010
+  8010d3:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010d8:	85 c0                	test   %eax,%eax
+  8010da:	75 05                	jne    8010e1 <main+0x2b>
+        loop();
+  8010dc:	e8 53 ff ff ff       	call   801034 <loop>
+    }
+
+    assert(pid1 > 0);
+  8010e1:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010e6:	85 c0                	test   %eax,%eax
+  8010e8:	7f 24                	jg     80110e <main+0x58>
+  8010ea:	c7 44 24 0c b6 14 80 	movl   $0x8014b6,0xc(%esp)
+  8010f1:	00 
+  8010f2:	c7 44 24 08 bf 14 80 	movl   $0x8014bf,0x8(%esp)
+  8010f9:	00 
+  8010fa:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
+  801101:	00 
+  801102:	c7 04 24 d4 14 80 00 	movl   $0x8014d4,(%esp)
+  801109:	e8 21 ef ff ff       	call   80002f <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  80110e:	e8 fc f1 ff ff       	call   80030f <fork>
+  801113:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  801118:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  80111d:	85 c0                	test   %eax,%eax
+  80111f:	75 05                	jne    801126 <main+0x70>
+        work();
+  801121:	e8 22 ff ff ff       	call   801048 <work>
+    }
+    if (pid2 > 0) {
+  801126:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  80112b:	85 c0                	test   %eax,%eax
+  80112d:	7e 46                	jle    801175 <main+0xbf>
+        cprintf("wait child 1.\n");
+  80112f:	c7 04 24 e4 14 80 00 	movl   $0x8014e4,(%esp)
+  801136:	e8 dd ef ff ff       	call   800118 <cprintf>
+        waitpid(pid1, NULL);
+  80113b:	a1 10 20 80 00       	mov    0x802010,%eax
+  801140:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801147:	00 
+  801148:	89 04 24             	mov    %eax,(%esp)
+  80114b:	e8 e8 f1 ff ff       	call   800338 <waitpid>
+        panic("waitpid %d returns\n", pid1);
+  801150:	a1 10 20 80 00       	mov    0x802010,%eax
+  801155:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801159:	c7 44 24 08 f3 14 80 	movl   $0x8014f3,0x8(%esp)
+  801160:	00 
+  801161:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+  801168:	00 
+  801169:	c7 04 24 d4 14 80 00 	movl   $0x8014d4,(%esp)
+  801170:	e8 ba ee ff ff       	call   80002f <__panic>
+    }
+    else {
+        kill(pid1);
+  801175:	a1 10 20 80 00       	mov    0x802010,%eax
+  80117a:	89 04 24             	mov    %eax,(%esp)
+  80117d:	e8 dd f1 ff ff       	call   80035f <kill>
+    }
+    panic("FAIL: T.T\n");
+  801182:	c7 44 24 08 07 15 80 	movl   $0x801507,0x8(%esp)
+  801189:	00 
+  80118a:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
+  801191:	00 
+  801192:	c7 04 24 d4 14 80 00 	movl   $0x8014d4,(%esp)
+  801199:	e8 91 ee ff ff       	call   80002f <__panic>
diff -r -u -P _lab7/obj/user/waitkill.d lab7/obj/user/waitkill.d
--- _lab7/obj/user/waitkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.d	2020-05-28 05:02:22.229519207 +0800
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab7/obj/user/waitkill.o and lab7/obj/user/waitkill.o differ
diff -r -u -P _lab7/obj/user/waitkill.sym lab7/obj/user/waitkill.sym
--- _lab7/obj/user/waitkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.sym	2020-05-28 05:02:26.625519207 +0800
@@ -0,0 +1,86 @@
+00800020 .text
+008011a0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202d65 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008012a0 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 waitkill.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00801034 loop
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00802008 parent
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202d64 __STAB_END__
+00800248 sys_kill
+00202d65 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+0080200c pid2
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+008010b6 main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+0080100e do_yield
+00203b70 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+00802010 pid1
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
+00801048 work
diff -r -u -P _lab7/obj/user/yield.asm lab7/obj/user/yield.asm
--- _lab7/obj/user/yield.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.asm	2020-05-28 05:02:26.625519207 +0800
@@ -0,0 +1,2589 @@
+
+obj/__user_yield.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 92 03 00 00       	call   8003bf <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 a0 10 80 00 	movl   $0x8010a0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 ba 10 80 00 	movl   $0x8010ba,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 71 02 00 00       	call   8002f0 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 bc 10 80 00 	movl   $0x8010bc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 ba 10 80 00 	movl   $0x8010ba,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 b3 04 00 00       	call   8005c6 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_sleep, time);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002e2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
+  8002e9:	e8 9f fe ff ff       	call   80018d <syscall>
+}
+  8002ee:	c9                   	leave  
+  8002ef:	c3                   	ret    
+
+008002f0 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002f0:	55                   	push   %ebp
+  8002f1:	89 e5                	mov    %esp,%ebp
+  8002f3:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002f9:	89 04 24             	mov    %eax,(%esp)
+  8002fc:	e8 e2 fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800301:	c7 04 24 d8 10 80 00 	movl   $0x8010d8,(%esp)
+  800308:	e8 0b fe ff ff       	call   800118 <cprintf>
+    while (1);
+  80030d:	eb fe                	jmp    80030d <exit+0x1d>
+
+0080030f <fork>:
+}
+
+int
+fork(void) {
+  80030f:	55                   	push   %ebp
+  800310:	89 e5                	mov    %esp,%ebp
+  800312:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800315:	e8 e4 fe ff ff       	call   8001fe <sys_fork>
+}
+  80031a:	c9                   	leave  
+  80031b:	c3                   	ret    
+
+0080031c <wait>:
+
+int
+wait(void) {
+  80031c:	55                   	push   %ebp
+  80031d:	89 e5                	mov    %esp,%ebp
+  80031f:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800322:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800329:	00 
+  80032a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800331:	e8 dc fe ff ff       	call   800212 <sys_wait>
+}
+  800336:	c9                   	leave  
+  800337:	c3                   	ret    
+
+00800338 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800338:	55                   	push   %ebp
+  800339:	89 e5                	mov    %esp,%ebp
+  80033b:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800341:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800345:	8b 45 08             	mov    0x8(%ebp),%eax
+  800348:	89 04 24             	mov    %eax,(%esp)
+  80034b:	e8 c2 fe ff ff       	call   800212 <sys_wait>
+}
+  800350:	c9                   	leave  
+  800351:	c3                   	ret    
+
+00800352 <yield>:
+
+void
+yield(void) {
+  800352:	55                   	push   %ebp
+  800353:	89 e5                	mov    %esp,%ebp
+  800355:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800358:	e8 d7 fe ff ff       	call   800234 <sys_yield>
+}
+  80035d:	c9                   	leave  
+  80035e:	c3                   	ret    
+
+0080035f <kill>:
+
+int
+kill(int pid) {
+  80035f:	55                   	push   %ebp
+  800360:	89 e5                	mov    %esp,%ebp
+  800362:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800365:	8b 45 08             	mov    0x8(%ebp),%eax
+  800368:	89 04 24             	mov    %eax,(%esp)
+  80036b:	e8 d8 fe ff ff       	call   800248 <sys_kill>
+}
+  800370:	c9                   	leave  
+  800371:	c3                   	ret    
+
+00800372 <getpid>:
+
+int
+getpid(void) {
+  800372:	55                   	push   %ebp
+  800373:	89 e5                	mov    %esp,%ebp
+  800375:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800378:	e8 e6 fe ff ff       	call   800263 <sys_getpid>
+}
+  80037d:	c9                   	leave  
+  80037e:	c3                   	ret    
+
+0080037f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80037f:	55                   	push   %ebp
+  800380:	89 e5                	mov    %esp,%ebp
+  800382:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800385:	e8 08 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80038a:	c9                   	leave  
+  80038b:	c3                   	ret    
+
+0080038c <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80038c:	55                   	push   %ebp
+  80038d:	89 e5                	mov    %esp,%ebp
+  80038f:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800392:	e8 0f ff ff ff       	call   8002a6 <sys_gettime>
+}
+  800397:	c9                   	leave  
+  800398:	c3                   	ret    
+
+00800399 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800399:	55                   	push   %ebp
+  80039a:	89 e5                	mov    %esp,%ebp
+  80039c:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  80039f:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 10 ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  8003aa:	c9                   	leave  
+  8003ab:	c3                   	ret    
+
+008003ac <sleep>:
+
+int
+sleep(unsigned int time) {
+  8003ac:	55                   	push   %ebp
+  8003ad:	89 e5                	mov    %esp,%ebp
+  8003af:	83 ec 18             	sub    $0x18,%esp
+    return sys_sleep(time);
+  8003b2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b5:	89 04 24             	mov    %eax,(%esp)
+  8003b8:	e8 18 ff ff ff       	call   8002d5 <sys_sleep>
+}
+  8003bd:	c9                   	leave  
+  8003be:	c3                   	ret    
+
+008003bf <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  8003bf:	55                   	push   %ebp
+  8003c0:	89 e5                	mov    %esp,%ebp
+  8003c2:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  8003c5:	e8 44 0c 00 00       	call   80100e <main>
+  8003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d0:	89 04 24             	mov    %eax,(%esp)
+  8003d3:	e8 18 ff ff ff       	call   8002f0 <exit>
+
+008003d8 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003d8:	55                   	push   %ebp
+  8003d9:	89 e5                	mov    %esp,%ebp
+  8003db:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003de:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003ea:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003ef:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003f5:	89 c1                	mov    %eax,%ecx
+  8003f7:	d3 ea                	shr    %cl,%edx
+  8003f9:	89 d0                	mov    %edx,%eax
+}
+  8003fb:	c9                   	leave  
+  8003fc:	c3                   	ret    
+
+008003fd <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003fd:	55                   	push   %ebp
+  8003fe:	89 e5                	mov    %esp,%ebp
+  800400:	83 ec 58             	sub    $0x58,%esp
+  800403:	8b 45 10             	mov    0x10(%ebp),%eax
+  800406:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800409:	8b 45 14             	mov    0x14(%ebp),%eax
+  80040c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80040f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800412:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800418:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  80041b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80041e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800421:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800424:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800427:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80042a:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80042d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800430:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800437:	74 1c                	je     800455 <printnum+0x58>
+  800439:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80043c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800441:	f7 75 e4             	divl   -0x1c(%ebp)
+  800444:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800447:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80044a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80044f:	f7 75 e4             	divl   -0x1c(%ebp)
+  800452:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800455:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800458:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80045b:	f7 75 e4             	divl   -0x1c(%ebp)
+  80045e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800461:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800464:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800467:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80046a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80046d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800473:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800476:	8b 45 18             	mov    0x18(%ebp),%eax
+  800479:	ba 00 00 00 00       	mov    $0x0,%edx
+  80047e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800481:	77 56                	ja     8004d9 <printnum+0xdc>
+  800483:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800486:	72 05                	jb     80048d <printnum+0x90>
+  800488:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80048b:	77 4c                	ja     8004d9 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80048d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800490:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800493:	8b 45 20             	mov    0x20(%ebp),%eax
+  800496:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80049a:	89 54 24 14          	mov    %edx,0x14(%esp)
+  80049e:	8b 45 18             	mov    0x18(%ebp),%eax
+  8004a1:	89 44 24 10          	mov    %eax,0x10(%esp)
+  8004a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8004a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8004ab:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8004af:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8004b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bd:	89 04 24             	mov    %eax,(%esp)
+  8004c0:	e8 38 ff ff ff       	call   8003fd <printnum>
+  8004c5:	eb 1c                	jmp    8004e3 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004ce:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004d1:	89 04 24             	mov    %eax,(%esp)
+  8004d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d7:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004e1:	7f e4                	jg     8004c7 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004e6:	05 04 12 80 00       	add    $0x801204,%eax
+  8004eb:	0f b6 00             	movzbl (%eax),%eax
+  8004ee:	0f be c0             	movsbl %al,%eax
+  8004f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004f8:	89 04 24             	mov    %eax,(%esp)
+  8004fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fe:	ff d0                	call   *%eax
+}
+  800500:	c9                   	leave  
+  800501:	c3                   	ret    
+
+00800502 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800502:	55                   	push   %ebp
+  800503:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800505:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800509:	7e 14                	jle    80051f <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80050b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80050e:	8b 00                	mov    (%eax),%eax
+  800510:	8d 48 08             	lea    0x8(%eax),%ecx
+  800513:	8b 55 08             	mov    0x8(%ebp),%edx
+  800516:	89 0a                	mov    %ecx,(%edx)
+  800518:	8b 50 04             	mov    0x4(%eax),%edx
+  80051b:	8b 00                	mov    (%eax),%eax
+  80051d:	eb 30                	jmp    80054f <getuint+0x4d>
+    }
+    else if (lflag) {
+  80051f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800523:	74 16                	je     80053b <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800525:	8b 45 08             	mov    0x8(%ebp),%eax
+  800528:	8b 00                	mov    (%eax),%eax
+  80052a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80052d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800530:	89 0a                	mov    %ecx,(%edx)
+  800532:	8b 00                	mov    (%eax),%eax
+  800534:	ba 00 00 00 00       	mov    $0x0,%edx
+  800539:	eb 14                	jmp    80054f <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80053b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053e:	8b 00                	mov    (%eax),%eax
+  800540:	8d 48 04             	lea    0x4(%eax),%ecx
+  800543:	8b 55 08             	mov    0x8(%ebp),%edx
+  800546:	89 0a                	mov    %ecx,(%edx)
+  800548:	8b 00                	mov    (%eax),%eax
+  80054a:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  80054f:	5d                   	pop    %ebp
+  800550:	c3                   	ret    
+
+00800551 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800551:	55                   	push   %ebp
+  800552:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800554:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800558:	7e 14                	jle    80056e <getint+0x1d>
+        return va_arg(*ap, long long);
+  80055a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055d:	8b 00                	mov    (%eax),%eax
+  80055f:	8d 48 08             	lea    0x8(%eax),%ecx
+  800562:	8b 55 08             	mov    0x8(%ebp),%edx
+  800565:	89 0a                	mov    %ecx,(%edx)
+  800567:	8b 50 04             	mov    0x4(%eax),%edx
+  80056a:	8b 00                	mov    (%eax),%eax
+  80056c:	eb 28                	jmp    800596 <getint+0x45>
+    }
+    else if (lflag) {
+  80056e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800572:	74 12                	je     800586 <getint+0x35>
+        return va_arg(*ap, long);
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+  800577:	8b 00                	mov    (%eax),%eax
+  800579:	8d 48 04             	lea    0x4(%eax),%ecx
+  80057c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80057f:	89 0a                	mov    %ecx,(%edx)
+  800581:	8b 00                	mov    (%eax),%eax
+  800583:	99                   	cltd   
+  800584:	eb 10                	jmp    800596 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	8b 00                	mov    (%eax),%eax
+  80058b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80058e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800591:	89 0a                	mov    %ecx,(%edx)
+  800593:	8b 00                	mov    (%eax),%eax
+  800595:	99                   	cltd   
+    }
+}
+  800596:	5d                   	pop    %ebp
+  800597:	c3                   	ret    
+
+00800598 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80059e:	8d 45 14             	lea    0x14(%ebp),%eax
+  8005a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8005a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8005a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8005ab:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ae:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005bc:	89 04 24             	mov    %eax,(%esp)
+  8005bf:	e8 02 00 00 00       	call   8005c6 <vprintfmt>
+    va_end(ap);
+}
+  8005c4:	c9                   	leave  
+  8005c5:	c3                   	ret    
+
+008005c6 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8005c6:	55                   	push   %ebp
+  8005c7:	89 e5                	mov    %esp,%ebp
+  8005c9:	56                   	push   %esi
+  8005ca:	53                   	push   %ebx
+  8005cb:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ce:	eb 18                	jmp    8005e8 <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005d0:	85 db                	test   %ebx,%ebx
+  8005d2:	75 05                	jne    8005d9 <vprintfmt+0x13>
+                return;
+  8005d4:	e9 d1 03 00 00       	jmp    8009aa <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005e0:	89 1c 24             	mov    %ebx,(%esp)
+  8005e3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e6:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005e8:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005eb:	8d 50 01             	lea    0x1(%eax),%edx
+  8005ee:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f1:	0f b6 00             	movzbl (%eax),%eax
+  8005f4:	0f b6 d8             	movzbl %al,%ebx
+  8005f7:	83 fb 25             	cmp    $0x25,%ebx
+  8005fa:	75 d4                	jne    8005d0 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800600:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  80060d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800614:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800617:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  80061a:	8b 45 10             	mov    0x10(%ebp),%eax
+  80061d:	8d 50 01             	lea    0x1(%eax),%edx
+  800620:	89 55 10             	mov    %edx,0x10(%ebp)
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f b6 d8             	movzbl %al,%ebx
+  800629:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  80062c:	83 f8 55             	cmp    $0x55,%eax
+  80062f:	0f 87 44 03 00 00    	ja     800979 <vprintfmt+0x3b3>
+  800635:	8b 04 85 28 12 80 00 	mov    0x801228(,%eax,4),%eax
+  80063c:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  80063e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800642:	eb d6                	jmp    80061a <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800644:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800648:	eb d0                	jmp    80061a <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800651:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800654:	89 d0                	mov    %edx,%eax
+  800656:	c1 e0 02             	shl    $0x2,%eax
+  800659:	01 d0                	add    %edx,%eax
+  80065b:	01 c0                	add    %eax,%eax
+  80065d:	01 d8                	add    %ebx,%eax
+  80065f:	83 e8 30             	sub    $0x30,%eax
+  800662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800665:	8b 45 10             	mov    0x10(%ebp),%eax
+  800668:	0f b6 00             	movzbl (%eax),%eax
+  80066b:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  80066e:	83 fb 2f             	cmp    $0x2f,%ebx
+  800671:	7e 0b                	jle    80067e <vprintfmt+0xb8>
+  800673:	83 fb 39             	cmp    $0x39,%ebx
+  800676:	7f 06                	jg     80067e <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800678:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80067c:	eb d3                	jmp    800651 <vprintfmt+0x8b>
+            goto process_precision;
+  80067e:	eb 33                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800680:	8b 45 14             	mov    0x14(%ebp),%eax
+  800683:	8d 50 04             	lea    0x4(%eax),%edx
+  800686:	89 55 14             	mov    %edx,0x14(%ebp)
+  800689:	8b 00                	mov    (%eax),%eax
+  80068b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  80068e:	eb 23                	jmp    8006b3 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800690:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800694:	79 0c                	jns    8006a2 <vprintfmt+0xdc>
+                width = 0;
+  800696:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80069d:	e9 78 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006a2:	e9 73 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  8006a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  8006ae:	e9 67 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  8006b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8006b7:	79 12                	jns    8006cb <vprintfmt+0x105>
+                width = precision, precision = -1;
+  8006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8006bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8006bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  8006c6:	e9 4f ff ff ff       	jmp    80061a <vprintfmt+0x54>
+  8006cb:	e9 4a ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006d4:	e9 41 ff ff ff       	jmp    80061a <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006d9:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006dc:	8d 50 04             	lea    0x4(%eax),%edx
+  8006df:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006e2:	8b 00                	mov    (%eax),%eax
+  8006e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006eb:	89 04 24             	mov    %eax,(%esp)
+  8006ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006f1:	ff d0                	call   *%eax
+            break;
+  8006f3:	e9 ac 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006f8:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006fb:	8d 50 04             	lea    0x4(%eax),%edx
+  8006fe:	89 55 14             	mov    %edx,0x14(%ebp)
+  800701:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800703:	85 db                	test   %ebx,%ebx
+  800705:	79 02                	jns    800709 <vprintfmt+0x143>
+                err = -err;
+  800707:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800709:	83 fb 18             	cmp    $0x18,%ebx
+  80070c:	7f 0b                	jg     800719 <vprintfmt+0x153>
+  80070e:	8b 34 9d a0 11 80 00 	mov    0x8011a0(,%ebx,4),%esi
+  800715:	85 f6                	test   %esi,%esi
+  800717:	75 23                	jne    80073c <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  800719:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  80071d:	c7 44 24 08 15 12 80 	movl   $0x801215,0x8(%esp)
+  800724:	00 
+  800725:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800728:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80072c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80072f:	89 04 24             	mov    %eax,(%esp)
+  800732:	e8 61 fe ff ff       	call   800598 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800737:	e9 68 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80073c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800740:	c7 44 24 08 1e 12 80 	movl   $0x80121e,0x8(%esp)
+  800747:	00 
+  800748:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80074b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80074f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800752:	89 04 24             	mov    %eax,(%esp)
+  800755:	e8 3e fe ff ff       	call   800598 <printfmt>
+            }
+            break;
+  80075a:	e9 45 02 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  80075f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800762:	8d 50 04             	lea    0x4(%eax),%edx
+  800765:	89 55 14             	mov    %edx,0x14(%ebp)
+  800768:	8b 30                	mov    (%eax),%esi
+  80076a:	85 f6                	test   %esi,%esi
+  80076c:	75 05                	jne    800773 <vprintfmt+0x1ad>
+                p = "(null)";
+  80076e:	be 21 12 80 00       	mov    $0x801221,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800773:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800777:	7e 3e                	jle    8007b7 <vprintfmt+0x1f1>
+  800779:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80077d:	74 38                	je     8007b7 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800785:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800789:	89 34 24             	mov    %esi,(%esp)
+  80078c:	e8 ed 03 00 00       	call   800b7e <strnlen>
+  800791:	29 c3                	sub    %eax,%ebx
+  800793:	89 d8                	mov    %ebx,%eax
+  800795:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800798:	eb 17                	jmp    8007b1 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80079a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  80079e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8007a1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8007a5:	89 04 24             	mov    %eax,(%esp)
+  8007a8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ab:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  8007ad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007b5:	7f e3                	jg     80079a <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007b7:	eb 38                	jmp    8007f1 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  8007b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  8007bd:	74 1f                	je     8007de <vprintfmt+0x218>
+  8007bf:	83 fb 1f             	cmp    $0x1f,%ebx
+  8007c2:	7e 05                	jle    8007c9 <vprintfmt+0x203>
+  8007c4:	83 fb 7e             	cmp    $0x7e,%ebx
+  8007c7:	7e 15                	jle    8007de <vprintfmt+0x218>
+                    putch('?', putdat);
+  8007c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007d0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007da:	ff d0                	call   *%eax
+  8007dc:	eb 0f                	jmp    8007ed <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e1:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007e5:	89 1c 24             	mov    %ebx,(%esp)
+  8007e8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007eb:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007ed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007f1:	89 f0                	mov    %esi,%eax
+  8007f3:	8d 70 01             	lea    0x1(%eax),%esi
+  8007f6:	0f b6 00             	movzbl (%eax),%eax
+  8007f9:	0f be d8             	movsbl %al,%ebx
+  8007fc:	85 db                	test   %ebx,%ebx
+  8007fe:	74 10                	je     800810 <vprintfmt+0x24a>
+  800800:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800804:	78 b3                	js     8007b9 <vprintfmt+0x1f3>
+  800806:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  80080a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  80080e:	79 a9                	jns    8007b9 <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800810:	eb 17                	jmp    800829 <vprintfmt+0x263>
+                putch(' ', putdat);
+  800812:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800815:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800819:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800820:	8b 45 08             	mov    0x8(%ebp),%eax
+  800823:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800825:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800829:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  80082d:	7f e3                	jg     800812 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  80082f:	e9 70 01 00 00       	jmp    8009a4 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800837:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80083b:	8d 45 14             	lea    0x14(%ebp),%eax
+  80083e:	89 04 24             	mov    %eax,(%esp)
+  800841:	e8 0b fd ff ff       	call   800551 <getint>
+  800846:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800849:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800852:	85 d2                	test   %edx,%edx
+  800854:	79 26                	jns    80087c <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800856:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800859:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80085d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800864:	8b 45 08             	mov    0x8(%ebp),%eax
+  800867:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80086f:	f7 d8                	neg    %eax
+  800871:	83 d2 00             	adc    $0x0,%edx
+  800874:	f7 da                	neg    %edx
+  800876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800879:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80087c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800883:	e9 a8 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800888:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80088f:	8d 45 14             	lea    0x14(%ebp),%eax
+  800892:	89 04 24             	mov    %eax,(%esp)
+  800895:	e8 68 fc ff ff       	call   800502 <getuint>
+  80089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80089d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  8008a0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  8008a7:	e9 84 00 00 00       	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  8008ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008af:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b3:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008b6:	89 04 24             	mov    %eax,(%esp)
+  8008b9:	e8 44 fc ff ff       	call   800502 <getuint>
+  8008be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  8008c4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  8008cb:	eb 63                	jmp    800930 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  8008cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008d4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008de:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008e3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008e7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008f1:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008f3:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008f6:	8d 50 04             	lea    0x4(%eax),%edx
+  8008f9:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008fc:	8b 00                	mov    (%eax),%eax
+  8008fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800908:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  80090f:	eb 1f                	jmp    800930 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800911:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800914:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800918:	8d 45 14             	lea    0x14(%ebp),%eax
+  80091b:	89 04 24             	mov    %eax,(%esp)
+  80091e:	e8 df fb ff ff       	call   800502 <getuint>
+  800923:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800926:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800929:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800930:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800934:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800937:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80093b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  80093e:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800942:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800946:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800949:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80094c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800950:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800954:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800957:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80095b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095e:	89 04 24             	mov    %eax,(%esp)
+  800961:	e8 97 fa ff ff       	call   8003fd <printnum>
+            break;
+  800966:	eb 3c                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800968:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80096b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80096f:	89 1c 24             	mov    %ebx,(%esp)
+  800972:	8b 45 08             	mov    0x8(%ebp),%eax
+  800975:	ff d0                	call   *%eax
+            break;
+  800977:	eb 2b                	jmp    8009a4 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800979:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80097c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800987:	8b 45 08             	mov    0x8(%ebp),%eax
+  80098a:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80098c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800990:	eb 04                	jmp    800996 <vprintfmt+0x3d0>
+  800992:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800996:	8b 45 10             	mov    0x10(%ebp),%eax
+  800999:	83 e8 01             	sub    $0x1,%eax
+  80099c:	0f b6 00             	movzbl (%eax),%eax
+  80099f:	3c 25                	cmp    $0x25,%al
+  8009a1:	75 ef                	jne    800992 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  8009a3:	90                   	nop
+        }
+    }
+  8009a4:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009a5:	e9 3e fc ff ff       	jmp    8005e8 <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  8009aa:	83 c4 40             	add    $0x40,%esp
+  8009ad:	5b                   	pop    %ebx
+  8009ae:	5e                   	pop    %esi
+  8009af:	5d                   	pop    %ebp
+  8009b0:	c3                   	ret    
+
+008009b1 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  8009b1:	55                   	push   %ebp
+  8009b2:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  8009b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009b7:	8b 40 08             	mov    0x8(%eax),%eax
+  8009ba:	8d 50 01             	lea    0x1(%eax),%edx
+  8009bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c0:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  8009c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009c6:	8b 10                	mov    (%eax),%edx
+  8009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009cb:	8b 40 04             	mov    0x4(%eax),%eax
+  8009ce:	39 c2                	cmp    %eax,%edx
+  8009d0:	73 12                	jae    8009e4 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	8b 00                	mov    (%eax),%eax
+  8009d7:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009da:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009dd:	89 0a                	mov    %ecx,(%edx)
+  8009df:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009e2:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009e4:	5d                   	pop    %ebp
+  8009e5:	c3                   	ret    
+
+008009e6 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009e6:	55                   	push   %ebp
+  8009e7:	89 e5                	mov    %esp,%ebp
+  8009e9:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009ec:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009f9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a0a:	89 04 24             	mov    %eax,(%esp)
+  800a0d:	e8 08 00 00 00       	call   800a1a <vsnprintf>
+  800a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a18:	c9                   	leave  
+  800a19:	c3                   	ret    
+
+00800a1a <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800a1a:	55                   	push   %ebp
+  800a1b:	89 e5                	mov    %esp,%ebp
+  800a1d:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800a20:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800a26:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a29:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a2f:	01 d0                	add    %edx,%eax
+  800a31:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a3f:	74 0a                	je     800a4b <vsnprintf+0x31>
+  800a41:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a47:	39 c2                	cmp    %eax,%edx
+  800a49:	76 07                	jbe    800a52 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a50:	eb 2a                	jmp    800a7c <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a52:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a55:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a59:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a60:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a63:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a67:	c7 04 24 b1 09 80 00 	movl   $0x8009b1,(%esp)
+  800a6e:	e8 53 fb ff ff       	call   8005c6 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a76:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a7c:	c9                   	leave  
+  800a7d:	c3                   	ret    
+
+00800a7e <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a7e:	55                   	push   %ebp
+  800a7f:	89 e5                	mov    %esp,%ebp
+  800a81:	57                   	push   %edi
+  800a82:	56                   	push   %esi
+  800a83:	53                   	push   %ebx
+  800a84:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a87:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a8c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a98:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a9b:	01 f7                	add    %esi,%edi
+  800a9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800aa2:	f7 e6                	mul    %esi
+  800aa4:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800aa7:	89 f2                	mov    %esi,%edx
+  800aa9:	83 c0 0b             	add    $0xb,%eax
+  800aac:	83 d2 00             	adc    $0x0,%edx
+  800aaf:	89 c7                	mov    %eax,%edi
+  800ab1:	83 e7 ff             	and    $0xffffffff,%edi
+  800ab4:	89 f9                	mov    %edi,%ecx
+  800ab6:	0f b7 da             	movzwl %dx,%ebx
+  800ab9:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800abf:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ac5:	a1 00 20 80 00       	mov    0x802000,%eax
+  800aca:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ad0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ad4:	c1 ea 0c             	shr    $0xc,%edx
+  800ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ada:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800add:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ae4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800aed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800af6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800afa:	74 1c                	je     800b18 <rand+0x9a>
+  800afc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800aff:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b04:	f7 75 dc             	divl   -0x24(%ebp)
+  800b07:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b0d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b12:	f7 75 dc             	divl   -0x24(%ebp)
+  800b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800b1e:	f7 75 dc             	divl   -0x24(%ebp)
+  800b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800b24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800b2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800b2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b36:	83 c4 24             	add    $0x24,%esp
+  800b39:	5b                   	pop    %ebx
+  800b3a:	5e                   	pop    %esi
+  800b3b:	5f                   	pop    %edi
+  800b3c:	5d                   	pop    %ebp
+  800b3d:	c3                   	ret    
+
+00800b3e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b3e:	55                   	push   %ebp
+  800b3f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b44:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b49:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b4e:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b54:	5d                   	pop    %ebp
+  800b55:	c3                   	ret    
+
+00800b56 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b56:	55                   	push   %ebp
+  800b57:	89 e5                	mov    %esp,%ebp
+  800b59:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b63:	eb 04                	jmp    800b69 <strlen+0x13>
+        cnt ++;
+  800b65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b69:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b6f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b72:	0f b6 00             	movzbl (%eax),%eax
+  800b75:	84 c0                	test   %al,%al
+  800b77:	75 ec                	jne    800b65 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7c:	c9                   	leave  
+  800b7d:	c3                   	ret    
+
+00800b7e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b7e:	55                   	push   %ebp
+  800b7f:	89 e5                	mov    %esp,%ebp
+  800b81:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b8b:	eb 04                	jmp    800b91 <strnlen+0x13>
+        cnt ++;
+  800b8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b94:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b97:	73 10                	jae    800ba9 <strnlen+0x2b>
+  800b99:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b9c:	8d 50 01             	lea    0x1(%eax),%edx
+  800b9f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800ba2:	0f b6 00             	movzbl (%eax),%eax
+  800ba5:	84 c0                	test   %al,%al
+  800ba7:	75 e4                	jne    800b8d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800bac:	c9                   	leave  
+  800bad:	c3                   	ret    
+
+00800bae <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800bae:	55                   	push   %ebp
+  800baf:	89 e5                	mov    %esp,%ebp
+  800bb1:	57                   	push   %edi
+  800bb2:	56                   	push   %esi
+  800bb3:	83 ec 20             	sub    $0x20,%esp
+  800bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800bc8:	89 d1                	mov    %edx,%ecx
+  800bca:	89 c2                	mov    %eax,%edx
+  800bcc:	89 ce                	mov    %ecx,%esi
+  800bce:	89 d7                	mov    %edx,%edi
+  800bd0:	ac                   	lods   %ds:(%esi),%al
+  800bd1:	aa                   	stos   %al,%es:(%edi)
+  800bd2:	84 c0                	test   %al,%al
+  800bd4:	75 fa                	jne    800bd0 <strcpy+0x22>
+  800bd6:	89 fa                	mov    %edi,%edx
+  800bd8:	89 f1                	mov    %esi,%ecx
+  800bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800be6:	83 c4 20             	add    $0x20,%esp
+  800be9:	5e                   	pop    %esi
+  800bea:	5f                   	pop    %edi
+  800beb:	5d                   	pop    %ebp
+  800bec:	c3                   	ret    
+
+00800bed <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bed:	55                   	push   %ebp
+  800bee:	89 e5                	mov    %esp,%ebp
+  800bf0:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bf9:	eb 21                	jmp    800c1c <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bfe:	0f b6 10             	movzbl (%eax),%edx
+  800c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c04:	88 10                	mov    %dl,(%eax)
+  800c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800c09:	0f b6 00             	movzbl (%eax),%eax
+  800c0c:	84 c0                	test   %al,%al
+  800c0e:	74 04                	je     800c14 <strncpy+0x27>
+            src ++;
+  800c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c20:	75 d9                	jne    800bfb <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800c22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800c25:	c9                   	leave  
+  800c26:	c3                   	ret    
+
+00800c27 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800c27:	55                   	push   %ebp
+  800c28:	89 e5                	mov    %esp,%ebp
+  800c2a:	57                   	push   %edi
+  800c2b:	56                   	push   %esi
+  800c2c:	83 ec 20             	sub    $0x20,%esp
+  800c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c41:	89 d1                	mov    %edx,%ecx
+  800c43:	89 c2                	mov    %eax,%edx
+  800c45:	89 ce                	mov    %ecx,%esi
+  800c47:	89 d7                	mov    %edx,%edi
+  800c49:	ac                   	lods   %ds:(%esi),%al
+  800c4a:	ae                   	scas   %es:(%edi),%al
+  800c4b:	75 08                	jne    800c55 <strcmp+0x2e>
+  800c4d:	84 c0                	test   %al,%al
+  800c4f:	75 f8                	jne    800c49 <strcmp+0x22>
+  800c51:	31 c0                	xor    %eax,%eax
+  800c53:	eb 04                	jmp    800c59 <strcmp+0x32>
+  800c55:	19 c0                	sbb    %eax,%eax
+  800c57:	0c 01                	or     $0x1,%al
+  800c59:	89 fa                	mov    %edi,%edx
+  800c5b:	89 f1                	mov    %esi,%ecx
+  800c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c69:	83 c4 20             	add    $0x20,%esp
+  800c6c:	5e                   	pop    %esi
+  800c6d:	5f                   	pop    %edi
+  800c6e:	5d                   	pop    %ebp
+  800c6f:	c3                   	ret    
+
+00800c70 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c70:	55                   	push   %ebp
+  800c71:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c73:	eb 0c                	jmp    800c81 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c85:	74 1a                	je     800ca1 <strncmp+0x31>
+  800c87:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c8a:	0f b6 00             	movzbl (%eax),%eax
+  800c8d:	84 c0                	test   %al,%al
+  800c8f:	74 10                	je     800ca1 <strncmp+0x31>
+  800c91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c94:	0f b6 10             	movzbl (%eax),%edx
+  800c97:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c9a:	0f b6 00             	movzbl (%eax),%eax
+  800c9d:	38 c2                	cmp    %al,%dl
+  800c9f:	74 d4                	je     800c75 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800ca5:	74 18                	je     800cbf <strncmp+0x4f>
+  800ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800caa:	0f b6 00             	movzbl (%eax),%eax
+  800cad:	0f b6 d0             	movzbl %al,%edx
+  800cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cb3:	0f b6 00             	movzbl (%eax),%eax
+  800cb6:	0f b6 c0             	movzbl %al,%eax
+  800cb9:	29 c2                	sub    %eax,%edx
+  800cbb:	89 d0                	mov    %edx,%eax
+  800cbd:	eb 05                	jmp    800cc4 <strncmp+0x54>
+  800cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc4:	5d                   	pop    %ebp
+  800cc5:	c3                   	ret    
+
+00800cc6 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800cc6:	55                   	push   %ebp
+  800cc7:	89 e5                	mov    %esp,%ebp
+  800cc9:	83 ec 04             	sub    $0x4,%esp
+  800ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd2:	eb 14                	jmp    800ce8 <strchr+0x22>
+        if (*s == c) {
+  800cd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cd7:	0f b6 00             	movzbl (%eax),%eax
+  800cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800cdd:	75 05                	jne    800ce4 <strchr+0x1e>
+            return (char *)s;
+  800cdf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce2:	eb 13                	jmp    800cf7 <strchr+0x31>
+        }
+        s ++;
+  800ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ceb:	0f b6 00             	movzbl (%eax),%eax
+  800cee:	84 c0                	test   %al,%al
+  800cf0:	75 e2                	jne    800cd4 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cf2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 04             	sub    $0x4,%esp
+  800cff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d02:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800d05:	eb 11                	jmp    800d18 <strfind+0x1f>
+        if (*s == c) {
+  800d07:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d0a:	0f b6 00             	movzbl (%eax),%eax
+  800d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800d10:	75 02                	jne    800d14 <strfind+0x1b>
+            break;
+  800d12:	eb 0e                	jmp    800d22 <strfind+0x29>
+        }
+        s ++;
+  800d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800d18:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d1b:	0f b6 00             	movzbl (%eax),%eax
+  800d1e:	84 c0                	test   %al,%al
+  800d20:	75 e5                	jne    800d07 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800d22:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800d25:	c9                   	leave  
+  800d26:	c3                   	ret    
+
+00800d27 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800d27:	55                   	push   %ebp
+  800d28:	89 e5                	mov    %esp,%ebp
+  800d2a:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d3b:	eb 04                	jmp    800d41 <strtol+0x1a>
+        s ++;
+  800d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d44:	0f b6 00             	movzbl (%eax),%eax
+  800d47:	3c 20                	cmp    $0x20,%al
+  800d49:	74 f2                	je     800d3d <strtol+0x16>
+  800d4b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4e:	0f b6 00             	movzbl (%eax),%eax
+  800d51:	3c 09                	cmp    $0x9,%al
+  800d53:	74 e8                	je     800d3d <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d55:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d58:	0f b6 00             	movzbl (%eax),%eax
+  800d5b:	3c 2b                	cmp    $0x2b,%al
+  800d5d:	75 06                	jne    800d65 <strtol+0x3e>
+        s ++;
+  800d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d63:	eb 15                	jmp    800d7a <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d65:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 2d                	cmp    $0x2d,%al
+  800d6d:	75 0b                	jne    800d7a <strtol+0x53>
+        s ++, neg = 1;
+  800d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d7e:	74 06                	je     800d86 <strtol+0x5f>
+  800d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d84:	75 24                	jne    800daa <strtol+0x83>
+  800d86:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d89:	0f b6 00             	movzbl (%eax),%eax
+  800d8c:	3c 30                	cmp    $0x30,%al
+  800d8e:	75 1a                	jne    800daa <strtol+0x83>
+  800d90:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d93:	83 c0 01             	add    $0x1,%eax
+  800d96:	0f b6 00             	movzbl (%eax),%eax
+  800d99:	3c 78                	cmp    $0x78,%al
+  800d9b:	75 0d                	jne    800daa <strtol+0x83>
+        s += 2, base = 16;
+  800d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800da8:	eb 2a                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dae:	75 17                	jne    800dc7 <strtol+0xa0>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 30                	cmp    $0x30,%al
+  800db8:	75 0d                	jne    800dc7 <strtol+0xa0>
+        s ++, base = 8;
+  800dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800dc5:	eb 0d                	jmp    800dd4 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800dcb:	75 07                	jne    800dd4 <strtol+0xad>
+        base = 10;
+  800dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800dd4:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd7:	0f b6 00             	movzbl (%eax),%eax
+  800dda:	3c 2f                	cmp    $0x2f,%al
+  800ddc:	7e 1b                	jle    800df9 <strtol+0xd2>
+  800dde:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de1:	0f b6 00             	movzbl (%eax),%eax
+  800de4:	3c 39                	cmp    $0x39,%al
+  800de6:	7f 11                	jg     800df9 <strtol+0xd2>
+            dig = *s - '0';
+  800de8:	8b 45 08             	mov    0x8(%ebp),%eax
+  800deb:	0f b6 00             	movzbl (%eax),%eax
+  800dee:	0f be c0             	movsbl %al,%eax
+  800df1:	83 e8 30             	sub    $0x30,%eax
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800df7:	eb 48                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800df9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfc:	0f b6 00             	movzbl (%eax),%eax
+  800dff:	3c 60                	cmp    $0x60,%al
+  800e01:	7e 1b                	jle    800e1e <strtol+0xf7>
+  800e03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e06:	0f b6 00             	movzbl (%eax),%eax
+  800e09:	3c 7a                	cmp    $0x7a,%al
+  800e0b:	7f 11                	jg     800e1e <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800e0d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e10:	0f b6 00             	movzbl (%eax),%eax
+  800e13:	0f be c0             	movsbl %al,%eax
+  800e16:	83 e8 57             	sub    $0x57,%eax
+  800e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800e1c:	eb 23                	jmp    800e41 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800e1e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e21:	0f b6 00             	movzbl (%eax),%eax
+  800e24:	3c 40                	cmp    $0x40,%al
+  800e26:	7e 3d                	jle    800e65 <strtol+0x13e>
+  800e28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e2b:	0f b6 00             	movzbl (%eax),%eax
+  800e2e:	3c 5a                	cmp    $0x5a,%al
+  800e30:	7f 33                	jg     800e65 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e32:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e35:	0f b6 00             	movzbl (%eax),%eax
+  800e38:	0f be c0             	movsbl %al,%eax
+  800e3b:	83 e8 37             	sub    $0x37,%eax
+  800e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e44:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e47:	7c 02                	jl     800e4b <strtol+0x124>
+            break;
+  800e49:	eb 1a                	jmp    800e65 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e52:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e56:	89 c2                	mov    %eax,%edx
+  800e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e5b:	01 d0                	add    %edx,%eax
+  800e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e60:	e9 6f ff ff ff       	jmp    800dd4 <strtol+0xad>
+
+    if (endptr) {
+  800e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e69:	74 08                	je     800e73 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e6e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e71:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e77:	74 07                	je     800e80 <strtol+0x159>
+  800e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e7c:	f7 d8                	neg    %eax
+  800e7e:	eb 03                	jmp    800e83 <strtol+0x15c>
+  800e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e83:	c9                   	leave  
+  800e84:	c3                   	ret    
+
+00800e85 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e85:	55                   	push   %ebp
+  800e86:	89 e5                	mov    %esp,%ebp
+  800e88:	57                   	push   %edi
+  800e89:	83 ec 24             	sub    $0x24,%esp
+  800e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e96:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e9f:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800eaf:	89 d7                	mov    %edx,%edi
+  800eb1:	f3 aa                	rep stos %al,%es:(%edi)
+  800eb3:	89 fa                	mov    %edi,%edx
+  800eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800ebe:	83 c4 24             	add    $0x24,%esp
+  800ec1:	5f                   	pop    %edi
+  800ec2:	5d                   	pop    %ebp
+  800ec3:	c3                   	ret    
+
+00800ec4 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800ec4:	55                   	push   %ebp
+  800ec5:	89 e5                	mov    %esp,%ebp
+  800ec7:	57                   	push   %edi
+  800ec8:	56                   	push   %esi
+  800ec9:	53                   	push   %ebx
+  800eca:	83 ec 30             	sub    $0x30,%esp
+  800ecd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ed9:	8b 45 10             	mov    0x10(%ebp),%eax
+  800edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800ee5:	73 42                	jae    800f29 <memmove+0x65>
+  800ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800efc:	c1 e8 02             	shr    $0x2,%eax
+  800eff:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f07:	89 d7                	mov    %edx,%edi
+  800f09:	89 c6                	mov    %eax,%esi
+  800f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800f10:	83 e1 03             	and    $0x3,%ecx
+  800f13:	74 02                	je     800f17 <memmove+0x53>
+  800f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f17:	89 f0                	mov    %esi,%eax
+  800f19:	89 fa                	mov    %edi,%edx
+  800f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800f27:	eb 36                	jmp    800f5f <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f32:	01 c2                	add    %eax,%edx
+  800f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f43:	89 c1                	mov    %eax,%ecx
+  800f45:	89 d8                	mov    %ebx,%eax
+  800f47:	89 d6                	mov    %edx,%esi
+  800f49:	89 c7                	mov    %eax,%edi
+  800f4b:	fd                   	std    
+  800f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f4e:	fc                   	cld    
+  800f4f:	89 f8                	mov    %edi,%eax
+  800f51:	89 f2                	mov    %esi,%edx
+  800f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f5f:	83 c4 30             	add    $0x30,%esp
+  800f62:	5b                   	pop    %ebx
+  800f63:	5e                   	pop    %esi
+  800f64:	5f                   	pop    %edi
+  800f65:	5d                   	pop    %ebp
+  800f66:	c3                   	ret    
+
+00800f67 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f67:	55                   	push   %ebp
+  800f68:	89 e5                	mov    %esp,%ebp
+  800f6a:	57                   	push   %edi
+  800f6b:	56                   	push   %esi
+  800f6c:	83 ec 20             	sub    $0x20,%esp
+  800f6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f75:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f7b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f84:	c1 e8 02             	shr    $0x2,%eax
+  800f87:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f8f:	89 d7                	mov    %edx,%edi
+  800f91:	89 c6                	mov    %eax,%esi
+  800f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f98:	83 e1 03             	and    $0x3,%ecx
+  800f9b:	74 02                	je     800f9f <memcpy+0x38>
+  800f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f9f:	89 f0                	mov    %esi,%eax
+  800fa1:	89 fa                	mov    %edi,%edx
+  800fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800faf:	83 c4 20             	add    $0x20,%esp
+  800fb2:	5e                   	pop    %esi
+  800fb3:	5f                   	pop    %edi
+  800fb4:	5d                   	pop    %ebp
+  800fb5:	c3                   	ret    
+
+00800fb6 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800fb6:	55                   	push   %ebp
+  800fb7:	89 e5                	mov    %esp,%ebp
+  800fb9:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800fbc:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800fc8:	eb 30                	jmp    800ffa <memcmp+0x44>
+        if (*s1 != *s2) {
+  800fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fcd:	0f b6 10             	movzbl (%eax),%edx
+  800fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fd3:	0f b6 00             	movzbl (%eax),%eax
+  800fd6:	38 c2                	cmp    %al,%dl
+  800fd8:	74 18                	je     800ff2 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800fdd:	0f b6 00             	movzbl (%eax),%eax
+  800fe0:	0f b6 d0             	movzbl %al,%edx
+  800fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fe6:	0f b6 00             	movzbl (%eax),%eax
+  800fe9:	0f b6 c0             	movzbl %al,%eax
+  800fec:	29 c2                	sub    %eax,%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	eb 1a                	jmp    80100c <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800ffa:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801000:	89 55 10             	mov    %edx,0x10(%ebp)
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 c3                	jne    800fca <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  801007:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80100c:	c9                   	leave  
+  80100d:	c3                   	ret    
+
+0080100e <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  80100e:	55                   	push   %ebp
+  80100f:	89 e5                	mov    %esp,%ebp
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  801017:	e8 56 f3 ff ff       	call   800372 <getpid>
+  80101c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801020:	c7 04 24 80 13 80 00 	movl   $0x801380,(%esp)
+  801027:	e8 ec f0 ff ff       	call   800118 <cprintf>
+    for (i = 0; i < 5; i ++) {
+  80102c:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801033:	00 
+  801034:	eb 27                	jmp    80105d <main+0x4f>
+        yield();
+  801036:	e8 17 f3 ff ff       	call   800352 <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  80103b:	e8 32 f3 ff ff       	call   800372 <getpid>
+  801040:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801044:	89 54 24 08          	mov    %edx,0x8(%esp)
+  801048:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80104c:	c7 04 24 9c 13 80 00 	movl   $0x80139c,(%esp)
+  801053:	e8 c0 f0 ff ff       	call   800118 <cprintf>
+
+int
+main(void) {
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+    for (i = 0; i < 5; i ++) {
+  801058:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  80105d:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801062:	7e d2                	jle    801036 <main+0x28>
+        yield();
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+    }
+    cprintf("All done in process %d.\n", getpid());
+  801064:	e8 09 f3 ff ff       	call   800372 <getpid>
+  801069:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80106d:	c7 04 24 bf 13 80 00 	movl   $0x8013bf,(%esp)
+  801074:	e8 9f f0 ff ff       	call   800118 <cprintf>
+    cprintf("yield pass.\n");
+  801079:	c7 04 24 d8 13 80 00 	movl   $0x8013d8,(%esp)
+  801080:	e8 93 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  801085:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80108a:	c9                   	leave  
+  80108b:	c3                   	ret    
diff -r -u -P _lab7/obj/user/yield.d lab7/obj/user/yield.d
--- _lab7/obj/user/yield.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.d	2020-05-28 05:02:22.201519207 +0800
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab7/obj/user/yield.o and lab7/obj/user/yield.o differ
diff -r -u -P _lab7/obj/user/yield.sym lab7/obj/user/yield.sym
--- _lab7/obj/user/yield.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.sym	2020-05-28 05:02:26.669519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+008010a0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c21 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011a0 error_string
+008003fd printnum
+00800502 getuint
+00800551 getint
+008009b1 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 yield.c
+00000000 
+00800bae strcpy
+00800352 yield
+00800338 waitpid
+00800234 sys_yield
+00800ec4 memmove
+008009e6 snprintf
+008005c6 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800372 getpid
+00800f67 memcpy
+008003ac sleep
+00800399 lab6_set_priority
+00800a1a vsnprintf
+008003bf umain
+00202c20 __STAB_END__
+00800248 sys_kill
+00202c21 __STABSTR_BEGIN__
+0080002f __panic
+008002d5 sys_sleep
+00800d27 strtol
+00800b7e strnlen
+0080037f print_pgdir
+0080035f kill
+00800cf9 strfind
+0080031c wait
+00800020 _start
+00800a7e rand
+00800c70 strncmp
+00800277 sys_putc
+00800bed strncpy
+00800fb6 memcmp
+0080030f fork
+00800e85 memset
+0080100e main
+00800b3e srand
+008003d8 hash32
+00800598 printfmt
+002039d8 __STABSTR_END__
+00800c27 strcmp
+0080038c gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002f0 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b56 strlen
+00800292 sys_pgdir
+00800cc6 strchr
+00800263 sys_getpid
Binary files _lab7/obj/__user_badarg.out and lab7/obj/__user_badarg.out differ
Binary files _lab7/obj/__user_badsegment.out and lab7/obj/__user_badsegment.out differ
Binary files _lab7/obj/__user_divzero.out and lab7/obj/__user_divzero.out differ
Binary files _lab7/obj/__user_exit.out and lab7/obj/__user_exit.out differ
Binary files _lab7/obj/__user_faultreadkernel.out and lab7/obj/__user_faultreadkernel.out differ
Binary files _lab7/obj/__user_faultread.out and lab7/obj/__user_faultread.out differ
Binary files _lab7/obj/__user_forktest.out and lab7/obj/__user_forktest.out differ
Binary files _lab7/obj/__user_forktree.out and lab7/obj/__user_forktree.out differ
Binary files _lab7/obj/__user_hello.out and lab7/obj/__user_hello.out differ
Binary files _lab7/obj/__user_matrix.out and lab7/obj/__user_matrix.out differ
Binary files _lab7/obj/__user_pgdir.out and lab7/obj/__user_pgdir.out differ
Binary files _lab7/obj/__user_priority.out and lab7/obj/__user_priority.out differ
Binary files _lab7/obj/__user_sleepkill.out and lab7/obj/__user_sleepkill.out differ
Binary files _lab7/obj/__user_sleep.out and lab7/obj/__user_sleep.out differ
Binary files _lab7/obj/__user_softint.out and lab7/obj/__user_softint.out differ
Binary files _lab7/obj/__user_spin.out and lab7/obj/__user_spin.out differ
Binary files _lab7/obj/__user_testbss.out and lab7/obj/__user_testbss.out differ
Binary files _lab7/obj/__user_waitkill.out and lab7/obj/__user_waitkill.out differ
Binary files _lab7/obj/__user_yield.out and lab7/obj/__user_yield.out differ
diff -r -u -P _lab7/.qemu.out lab7/.qemu.out
--- _lab7/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.qemu.out	2020-05-28 05:04:14.569519207 +0800
@@ -0,0 +1,247 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010d64c (phys)
+  edata  0xc01c23f9 (phys)
+  end    0xc01c56c4 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f38 eip:0xc0100ae5 args:0x00010094 0x00000000 0xc0130f68 0xc01000d8
+    kern/debug/kdebug.c:352: print_stackframe+22
+ebp:0xc0130f48 eip:0xc0100dba args:0x00000000 0x00000000 0x00000000 0xc0130fb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f68 eip:0xc01000d8 args:0x00000000 0xc0130f90 0xffff0000 0xc0130f94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc0130f88 eip:0xc0100101 args:0x00000000 0xffff0000 0xc0130fb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc0130fa8 eip:0xc010011f args:0x00000000 0xc010002a 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc0130fc8 eip:0xc0100144 args:0xc010d67c 0xc010d660 0x000032cb 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc0130ff8 eip:0xc010007f args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: RR_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31828
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "matrix".
+fork ok.
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+pid 13 is running (1000 times)!.
+pid 14 is running (1000 times)!.
+pid 14 done!.
+pid 15 is running (1100 times)!.
+pid 16 is running (1900 times)!.
+pid 17 is running (4600 times)!.
+pid 18 is running (11000 times)!.
+pid 19 is running (20600 times)!.
+pid 20 is running (37100 times)!.
+pid 21 is running (2600 times)!.
+pid 22 is running (13100 times)!.
+pid 23 is running (37100 times)!.
+pid 24 is running (4600 times)!.
+pid 25 is running (23500 times)!.
+pid 26 is running (2600 times)!.
+pid 27 is running (23500 times)!.
+pid 28 is running (4600 times)!.
+pid 29 is running (33400 times)!.
+pid 30 is running (13100 times)!.
+pid 31 is running (2600 times)!.
+pid 32 is running (26600 times)!.
+pid 33 is running (13100 times)!.
+pid 13 done!.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+Iter 1, No.0 philosopher_condvar is eating
+Iter 1, No.1 philosopher_condvar is eating
+Iter 1, No.2 philosopher_condvar is eating
+Iter 1, No.3 philosopher_condvar is eating
+Iter 1, No.4 philosopher_condvar is eating
+pid 15 done!.
+pid 16 done!.
+Iter 2, No.0 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is thinking
+Iter 2, No.0 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.2 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+Iter 2, No.4 philosopher_condvar is thinking
+pid 26 done!.
+Iter 1, No.4 philosopher_sema is eating
+Iter 1, No.1 philosopher_sema is eating
+Iter 2, No.0 philosopher_condvar is eating
+Iter 2, No.1 philosopher_condvar is eating
+Iter 2, No.2 philosopher_condvar is eating
+Iter 2, No.3 philosopher_condvar is eating
+Iter 2, No.4 philosopher_condvar is eating
+pid 21 done!.
+pid 31 done!.
+Iter 2, No.4 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_condvar is thinking
+Iter 3, No.1 philosopher_condvar is thinking
+Iter 3, No.2 philosopher_condvar is thinking
+Iter 3, No.3 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_condvar is thinking
+pid 17 done!.
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is eating
+Iter 3, No.0 philosopher_condvar is eating
+Iter 3, No.1 philosopher_condvar is eating
+Iter 3, No.2 philosopher_condvar is eating
+Iter 3, No.3 philosopher_condvar is eating
+Iter 3, No.4 philosopher_condvar is eating
+pid 24 done!.
+pid 28 done!.
+Iter 2, No.3 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is thinking
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 2, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is eating
+Iter 4, No.0 philosopher_condvar is eating
+Iter 4, No.1 philosopher_condvar is eating
+Iter 4, No.2 philosopher_condvar is eating
+Iter 4, No.3 philosopher_condvar is eating
+Iter 4, No.4 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 3, No.4 philosopher_sema is thinking
+No.0 philosopher_condvar quit
+No.1 philosopher_condvar quit
+No.2 philosopher_condvar quit
+No.3 philosopher_condvar quit
+No.4 philosopher_condvar quit
+Iter 2, No.1 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is eating
+pid 18 done!.
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.2 philosopher_sema is eating
+Iter 4, No.0 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is thinking
+pid 33 done!.
+pid 22 done!.
+Iter 3, No.4 philosopher_sema is eating
+Iter 3, No.1 philosopher_sema is eating
+pid 30 done!.
+Iter 4, No.4 philosopher_sema is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is eating
+Iter 4, No.0 philosopher_sema is eating
+Iter 4, No.3 philosopher_sema is thinking
+No.0 philosopher_sema quit
+Iter 4, No.2 philosopher_sema is eating
+Iter 4, No.4 philosopher_sema is eating
+pid 19 done!.
+No.2 philosopher_sema quit
+No.4 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+Iter 4, No.3 philosopher_sema is eating
+No.1 philosopher_sema quit
+No.3 philosopher_sema quit
+pid 25 done!.
+pid 27 done!.
+pid 32 done!.
+pid 29 done!.
+pid 20 done!.
+pid 23 done!.
+matrix pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:472:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P _lab7/tools/grade.sh lab7/tools/grade.sh
--- _lab7/tools/grade.sh	2020-05-26 17:16:54.422663000 +0800
+++ lab7/tools/grade.sh	2020-05-28 03:22:11.505519207 +0800
@@ -105,7 +105,7 @@
     echo $1
     shift
     if [ $# -gt 0 ]; then
-        echo -e "$@" | awk '{printf "   %s\n", $0}'
+        echo "$@" | awk '{printf "   %s\n", $0}'
         echo
     fi
 }
@@ -146,13 +146,9 @@
     if [ -n "$brkfun" ]; then
         # find the address of the kernel $brkfun function
         brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
-        brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
         (
             echo "target remote localhost:$gdbport"
             echo "break *0x$brkaddr"
-            if [ "$brkaddr" != "$brkaddr_phys" ]; then
-                echo "break *0x$brkaddr_phys"
-            fi
             echo "continue"
         ) > $gdb_in
 
@@ -183,8 +179,6 @@
     run_qemu
 
     show_time
-
-    cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
 }
 
 check_result() {
@@ -638,3 +632,4 @@
 
 ## print final-score
 show_final
+
diff -r -u -P _lab7/tools/grade.sh.orig lab7/tools/grade.sh.orig
--- _lab7/tools/grade.sh.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab7/tools/grade.sh.orig	2020-05-26 17:16:54.422663000 +0800
@@ -0,0 +1,640 @@
+#!/bin/sh
+
+verbose=false
+if [ "x$1" = "x-v" ]; then
+    verbose=true
+    out=/dev/stdout
+    err=/dev/stderr
+else
+    out=/dev/null
+    err=/dev/null
+fi
+
+## make & makeopts
+if gmake --version > /dev/null 2>&1; then
+    make=gmake;
+else
+    make=make;
+fi
+
+makeopts="--quiet --no-print-directory -j"
+
+make_print() {
+    echo `$make $makeopts print-$1`
+}
+
+## command tools
+awk='awk'
+bc='bc'
+date='date'
+grep='grep'
+rm='rm -f'
+sed='sed'
+
+## symbol table
+sym_table='obj/kernel.sym'
+
+## gdb & gdbopts
+gdb="$(make_print GDB)"
+gdbport='1234'
+
+gdb_in="$(make_print GRADE_GDB_IN)"
+
+## qemu & qemuopts
+qemu="$(make_print qemu)"
+
+qemu_out="$(make_print GRADE_QEMU_OUT)"
+
+if $qemu -nographic -help | grep -q '^-gdb'; then
+    qemugdb="-gdb tcp::$gdbport"
+else
+    qemugdb="-s -p $gdbport"
+fi
+
+## default variables
+default_timeout=30
+default_pts=5
+
+pts=5
+part=0
+part_pos=0
+total=0
+total_pos=0
+
+## default functions
+update_score() {
+    total=`expr $total + $part`
+    total_pos=`expr $total_pos + $part_pos`
+    part=0
+    part_pos=0
+}
+
+get_time() {
+    echo `$date +%s.%N 2> /dev/null`
+}
+
+show_part() {
+    echo "Part $1 Score: $part/$part_pos"
+    echo
+    update_score
+}
+
+show_final() {
+    update_score
+    echo "Total Score: $total/$total_pos"
+    if [ $total -lt $total_pos ]; then
+        exit 1
+    fi
+}
+
+show_time() {
+    t1=$(get_time)
+    time=`echo "scale=1; ($t1-$t0)/1" | $sed 's/.N/.0/g' | $bc 2> /dev/null`
+    echo "(${time}s)"
+}
+
+show_build_tag() {
+    echo "$1:" | $awk '{printf "%-24s ", $0}'
+}
+
+show_check_tag() {
+    echo "$1:" | $awk '{printf "  -%-40s  ", $0}'
+}
+
+show_msg() {
+    echo $1
+    shift
+    if [ $# -gt 0 ]; then
+        echo -e "$@" | awk '{printf "   %s\n", $0}'
+        echo
+    fi
+}
+
+pass() {
+    show_msg OK "$@"
+    part=`expr $part + $pts`
+    part_pos=`expr $part_pos + $pts`
+}
+
+fail() {
+    show_msg WRONG "$@"
+    part_pos=`expr $part_pos + $pts`
+}
+
+run_qemu() {
+    # Run qemu with serial output redirected to $qemu_out. If $brkfun is non-empty,
+    # wait until $brkfun is reached or $timeout expires, then kill QEMU
+    qemuextra=
+    if [ "$brkfun" ]; then
+        qemuextra="-S $qemugdb"
+    fi
+
+    if [ -z "$timeout" ] || [ $timeout -le 0 ]; then
+        timeout=$default_timeout;
+    fi
+
+    t0=$(get_time)
+    (
+        ulimit -t $timeout
+        exec $qemu -nographic $qemuopts -serial file:$qemu_out -monitor null -no-reboot $qemuextra
+    ) > $out 2> $err &
+    pid=$!
+
+    # wait for QEMU to start
+    sleep 1
+
+    if [ -n "$brkfun" ]; then
+        # find the address of the kernel $brkfun function
+        brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
+        brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
+        (
+            echo "target remote localhost:$gdbport"
+            echo "break *0x$brkaddr"
+            if [ "$brkaddr" != "$brkaddr_phys" ]; then
+                echo "break *0x$brkaddr_phys"
+            fi
+            echo "continue"
+        ) > $gdb_in
+
+        $gdb -batch -nx -x $gdb_in > /dev/null 2>&1
+
+        # make sure that QEMU is dead
+        # on OS X, exiting gdb doesn't always exit qemu
+        kill $pid > /dev/null 2>&1
+    fi
+}
+
+build_run() {
+    # usage: build_run <tag> <args>
+    show_build_tag "$1"
+    shift
+
+    if $verbose; then
+        echo "$make $@ ..."
+    fi
+    $make $makeopts $@ 'DEFS+=-DDEBUG_GRADE' > $out 2> $err
+
+    if [ $? -ne 0 ]; then
+        echo $make $@ failed
+        exit 1
+    fi
+
+    # now run qemu and save the output
+    run_qemu
+
+    show_time
+
+    cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
+}
+
+check_result() {
+    # usage: check_result <tag> <check> <check args...>
+    show_check_tag "$1"
+    shift
+
+    # give qemu some time to run (for asynchronous mode)
+    if [ ! -s $qemu_out ]; then
+        sleep 4
+    fi
+
+    if [ ! -s $qemu_out ]; then
+        fail > /dev/null
+        echo 'no $qemu_out'
+    else
+        check=$1
+        shift
+        $check "$@"
+    fi
+}
+
+check_regexps() {
+    okay=yes
+    not=0
+    reg=0
+    error=
+    for i do
+        if [ "x$i" = "x!" ]; then
+            not=1
+        elif [ "x$i" = "x-" ]; then
+            reg=1
+        else
+            if [ $reg -ne 0 ]; then
+                $grep '-E' "^$i\$" $qemu_out > /dev/null
+            else
+                $grep '-F' "$i" $qemu_out > /dev/null
+            fi
+            found=$(($? == 0))
+            if [ $found -eq $not ]; then
+                if [ $found -eq 0 ]; then
+                    msg="!! error: missing '$i'"
+                else
+                    msg="!! error: got unexpected line '$i'"
+                fi
+                okay=no
+                if [ -z "$error" ]; then
+                    error="$msg"
+                else
+                    error="$error\n$msg"
+                fi
+            fi
+            not=0
+            reg=0
+        fi
+    done
+    if [ "$okay" = "yes" ]; then
+        pass
+    else
+        fail "$error"
+        if $verbose; then
+            exit 1
+        fi
+    fi
+}
+
+run_test() {
+    # usage: run_test [-tag <tag>] [-prog <prog>] [-Ddef...] [-check <check>] checkargs ...
+    tag=
+    prog=
+    check=check_regexps
+    while true; do
+        select=
+        case $1 in
+            -tag|-prog)
+                select=`expr substr $1 2 ${#1}`
+                eval $select='$2'
+                ;;
+        esac
+        if [ -z "$select" ]; then
+            break
+        fi
+        shift
+        shift
+    done
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
+    if [ "x$1" = "x-check" ]; then
+        check=$2
+        shift
+        shift
+    fi
+
+    if [ -z "$prog" ]; then
+        $make $makeopts touch > /dev/null 2>&1
+        args="$defs"
+    else
+        if [ -z "$tag" ]; then
+            tag="$prog"
+        fi
+        args="build-$prog $defs"
+    fi
+
+    build_run "$tag" "$args"
+
+    check_result 'check result' "$check" "$@"
+}
+
+quick_run() {
+    # usage: quick_run <tag> [-Ddef...]
+    tag="$1"
+    shift
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
+
+    $make $makeopts touch > /dev/null 2>&1
+    build_run "$tag" "$defs"
+}
+
+quick_check() {
+    # usage: quick_check <tag> checkargs ...
+    tag="$1"
+    shift
+    check_result "$tag" check_regexps "$@"
+}
+
+## kernel image
+osimg=$(make_print ucoreimg)
+
+## swap image
+swapimg=$(make_print swapimg)
+
+## set default qemu-options
+qemuopts="-hda $osimg -drive file=$swapimg,media=disk,cache=writeback"
+
+## set break-function, default is readline
+brkfun=readline
+
+default_check() {
+    pts=7
+    check_regexps "$@"
+
+    pts=3
+    quick_check 'check output'                                  \
+    'memory management: default_pmm_manager'                      \
+    'check_alloc_page() succeeded!'                             \
+    'check_pgdir() succeeded!'                                  \
+    'check_boot_pgdir() succeeded!'				\
+    'PDE(0e0) c0000000-f8000000 38000000 urw'                   \
+    '  |-- PTE(38000) c0000000-f8000000 38000000 -rw'           \
+    'PDE(001) fac00000-fb000000 00400000 -rw'                   \
+    '  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw'           \
+    '  |-- PTE(00001) fafeb000-fafec000 00001000 -rw'		\
+    'check_vma_struct() succeeded!'                             \
+    'page fault at 0x00000100: K/W [no page found].'            \
+    'check_pgfault() succeeded!'                                \
+    'check_vmm() succeeded.'					\
+    'page fault at 0x00001000: K/W [no page found].'            \
+    'page fault at 0x00002000: K/W [no page found].'            \
+    'page fault at 0x00003000: K/W [no page found].'            \
+    'page fault at 0x00004000: K/W [no page found].'            \
+    'write Virt Page e in fifo_check_swap'			\
+    'page fault at 0x00005000: K/W [no page found].'		\
+    'page fault at 0x00001000: K/W [no page found]'		\
+    'page fault at 0x00002000: K/W [no page found].'		\
+    'page fault at 0x00003000: K/W [no page found].'		\
+    'page fault at 0x00004000: K/W [no page found].'		\
+    'check_swap() succeeded!'					\
+    '++ setup timer interrupts'
+}
+
+## check now!!
+
+run_test -prog 'badsegment' -check default_check                \
+      - 'kernel_execve: pid = ., name = "badsegment".*'          \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000d General Protection'                    \
+        '  err  0x00000028'                                     \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'divzero' -check default_check                   \
+      - 'kernel_execve: pid = ., name = "divzero".*'             \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x00000000 Divide error'                          \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'softint' -check default_check                   \
+      - 'kernel_execve: pid = ., name = "softint".*'             \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000d General Protection'                    \
+        '  err  0x00000072'                                     \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+pts=10
+
+run_test -prog 'faultread'  -check default_check                                     \
+      - 'kernel_execve: pid = ., name = "faultread".*'           \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000004'                                     \
+      - '  eip  0x008.....'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'faultreadkernel' -check default_check                                \
+      - 'kernel_execve: pid = ., name = "faultreadkernel".*'     \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000005'                                     \
+      - '  eip  0x008.....'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'hello' -check default_check                                          \
+      - 'kernel_execve: pid = ., name = "hello".*'               \
+        'Hello world!!.'                                        \
+      - 'I am process .*'                                       \
+        'hello pass.'
+
+run_test -prog 'testbss' -check default_check                                        \
+      - 'kernel_execve: pid = ., name = "testbss".*'             \
+        'Making sure bss works right...'                        \
+        'Yes, good.  Now doing a wild write off the end...'     \
+        'testbss may pass.'                                     \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000006'                                     \
+      - '  eip  0x008.....'                                     \
+        'killed by kernel.'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'pgdir' -check default_check                                          \
+      - 'kernel_execve: pid = ., name = "pgdir".*'               \
+      - 'I am .*'                                  \
+        'PDE(001) 00800000-00c00000 00400000 urw'               \
+        '  |-- PTE(00002) 00800000-00802000 00002000 ur-'       \
+        '  |-- PTE(00001) 00802000-00803000 00001000 urw'       \
+        'PDE(001) afc00000-b0000000 00400000 urw'               \
+        '  |-- PTE(00004) afffc000-b0000000 00004000 urw'       \
+        'PDE(0e0) c0000000-f8000000 38000000 urw'               \
+        '  |-- PTE(38000) c0000000-f8000000 38000000 -rw'       \
+        'pgdir pass.'
+
+run_test -prog 'yield' -check default_check                                          \
+      - 'kernel_execve: pid = ., name = "yield".*'               \
+        'Hello, I am process 2.'                                \
+      - 'Back in process ., iteration 0.'                       \
+      - 'Back in process ., iteration 1.'                       \
+      - 'Back in process ., iteration 2.'                       \
+      - 'Back in process ., iteration 3.'                       \
+      - 'Back in process ., iteration 4.'                       \
+      - 'All done in process .*'                                \
+        'yield pass.'
+
+
+run_test -prog 'badarg' -check default_check                    \
+      - 'kernel_execve: pid = ., name = "badarg".*'              \
+        'fork ok.'                                              \
+        'badarg pass.'                                          \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=10
+
+run_test -prog 'exit'  -check default_check                                          \
+      - 'kernel_execve: pid = ., name = "exit".*'                \
+        'I am the parent. Forking the child...'                 \
+        'I am the parent, waiting now..'                        \
+        'I am the child.'                                       \
+      - 'waitpid [0-9]+ ok\.'                                   \
+        'exit pass.'                                            \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+run_test -prog 'spin'  -check default_check                                          \
+      - 'kernel_execve: pid = ., name = "spin".*'                \
+        'I am the parent. Forking the child...'                 \
+        'I am the parent. Running the child...'                 \
+        'I am the child. spinning ...'                          \
+        'I am the parent.  Killing the child...'                \
+        'kill returns 0'                                        \
+        'wait returns 0'                                        \
+        'spin may pass.'                                        \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+run_test -prog 'waitkill'  -check default_check                                      \
+      - 'kernel_execve: pid = ., name = "waitkill".*'            \
+        'wait child 1.'                                         \
+        'child 2.'                                              \
+        'child 1.'                                              \
+        'kill parent ok.'                                       \
+        'kill child1 ok.'                                       \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=15
+
+run_test -prog 'forktest'   -check default_check                                     \
+      - 'kernel_execve: pid = ., name = "forktest".*'            \
+        'I am child 31'                                         \
+        'I am child 19'                                         \
+        'I am child 13'                                         \
+        'I am child 0'                                          \
+        'forktest pass.'                                        \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'fork claimed to work [0-9]+ times!'                    \
+    !   'wait stopped early'                                    \
+    !   'wait got too many'                                     \
+    ! - 'user panic at .*'
+
+pts=10
+run_test -prog 'forktree'    -check default_check               \
+      - 'kernel_execve: pid = ., name = "forktree".*'            \
+      - '....: I am '\'''\'                                     \
+      - '....: I am '\''0'\'                                    \
+      - '....: I am '\'''\'                                     \
+      - '....: I am '\''1'\'                                    \
+      - '....: I am '\''0'\'                                    \
+      - '....: I am '\''01'\'                                   \
+      - '....: I am '\''00'\'                                   \
+      - '....: I am '\''11'\'                                   \
+      - '....: I am '\''10'\'                                   \
+      - '....: I am '\''101'\'                                  \
+      - '....: I am '\''100'\'                                  \
+      - '....: I am '\''111'\'                                  \
+      - '....: I am '\''110'\'                                  \
+      - '....: I am '\''001'\'                                  \
+      - '....: I am '\''000'\'                                  \
+      - '....: I am '\''011'\'                                  \
+      - '....: I am '\''010'\'                                  \
+      - '....: I am '\''0101'\'                                 \
+      - '....: I am '\''0100'\'                                 \
+      - '....: I am '\''0111'\'                                 \
+      - '....: I am '\''0110'\'                                 \
+      - '....: I am '\''0001'\'                                 \
+      - '....: I am '\''0000'\'                                 \
+      - '....: I am '\''0011'\'                                 \
+      - '....: I am '\''0010'\'                                 \
+      - '....: I am '\''1101'\'                                 \
+      - '....: I am '\''1100'\'                                 \
+      - '....: I am '\''1111'\'                                 \
+      - '....: I am '\''1110'\'                                 \
+      - '....: I am '\''1001'\'                                 \
+      - '....: I am '\''1000'\'                                 \
+      - '....: I am '\''1011'\'                                 \
+      - '....: I am '\''1010'\'                                 \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'
+
+pts=20
+timeout=150
+run_test -prog 'priority'      -check default_check             \
+	'sched class: stride_scheduler'                         \
+      - 'kernel_execve: pid = ., name = "priority".*'            \
+        'main: fork ok,now need to wait pids.'                  \
+        'stride sched correct result: 1 2 3 4 5'                \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=20
+timeout=240
+
+run_test -prog 'sleep'         -check default_check             \
+      - 'kernel_execve: pid = ., name = "sleep".*'               \
+        'sleep 1 x 100 slices.'                                 \
+        'sleep 3 x 100 slices.'                                 \
+        'sleep 7 x 100 slices.'                                 \
+        'sleep 10 x 100 slices.'                                \
+      - 'use 1... msecs.'                                       \
+        'sleep pass.'                                           \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    !   '  trap 0x0000000e Page Fault'                          \
+    !   'killed by kernel.'                                     \
+    ! - 'user panic at .*'
+
+pts=20
+timeout=240
+run_test -prog 'sleepkill'   -check default_check               \
+      - 'kernel_execve: pid = ., name = "sleepkill".*'           \
+        'sleepkill pass.'                                       \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=40
+timeout=500
+run_test -prog 'matrix'     -check default_check                \
+        'Iter 1, No.0 philosopher_sema is thinking'                  \
+        'Iter 1, No.1 philosopher_sema is thinking'                  \
+        'Iter 1, No.2 philosopher_sema is thinking'                  \
+        'Iter 1, No.3 philosopher_sema is thinking'                  \
+        'Iter 1, No.4 philosopher_sema is thinking'                  \
+        'Iter 1, No.0 philosopher_sema is eating'                  \
+        'Iter 1, No.1 philosopher_sema is eating'                  \
+        'Iter 1, No.2 philosopher_sema is eating'                  \
+        'Iter 1, No.3 philosopher_sema is eating'                  \
+        'Iter 1, No.4 philosopher_sema is eating'                  \
+        'No.0 philosopher_sema quit'                                \
+        'No.1 philosopher_sema quit'                                \
+        'No.2 philosopher_sema quit'                                \
+        'No.3 philosopher_sema quit'                                \
+        'No.4 philosopher_sema quit'                                \
+        'Iter 1, No.0 philosopher_condvar is thinking'                  \
+        'Iter 1, No.1 philosopher_condvar is thinking'                  \
+        'Iter 1, No.2 philosopher_condvar is thinking'                  \
+        'Iter 1, No.3 philosopher_condvar is thinking'                  \
+        'Iter 1, No.4 philosopher_condvar is thinking'                  \
+        'Iter 1, No.0 philosopher_condvar is eating'                  \
+        'Iter 1, No.1 philosopher_condvar is eating'                  \
+        'Iter 1, No.2 philosopher_condvar is eating'                  \
+        'Iter 1, No.3 philosopher_condvar is eating'                  \
+        'Iter 1, No.4 philosopher_condvar is eating'                  \
+        'No.0 philosopher_condvar quit'                                \
+        'No.1 philosopher_condvar quit'                                \
+        'No.2 philosopher_condvar quit'                                \
+        'No.3 philosopher_condvar quit'                                \
+        'No.4 philosopher_condvar quit'                                \
+      - 'kernel_execve: pid = ., name = "matrix".*'              \
+        'fork ok.'                                              \
+        'pid 13 done!.'                                         \
+        'pid 17 done!.'                                         \
+        'pid 23 done!.'                                         \
+        'matrix pass.'                                          \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+## print final-score
+show_final
diff -r -u -P _lab7/tools/kernel.ld lab7/tools/kernel.ld
--- _lab7/tools/kernel.ld	2020-05-26 17:16:54.422663000 +0800
+++ lab7/tools/kernel.ld	2020-05-28 03:22:14.509519207 +0800
@@ -44,11 +44,6 @@
         *(.data)
     }
 
-    . = ALIGN(0x1000);
-    .data.pgdir : {
-        *(.data.pgdir)
-    }
-
     PROVIDE(edata = .);
 
     .bss : {
diff -r -u -P _lab7/tools/vector.c lab7/tools/vector.c
--- _lab7/tools/vector.c	2020-05-26 17:16:54.422663000 +0800
+++ lab7/tools/vector.c	2020-05-28 03:22:14.513519207 +0800
@@ -10,7 +10,7 @@
     for (i = 0; i < 256; i ++) {
         printf(".globl vector%d\n", i);
         printf("vector%d:\n", i);
-        if (i != 8 && (i < 10 || i > 14) && i != 17) {
+        if ((i < 8 || i > 14) && i != 17) {
             printf("  pushl $0\n");
         }
         printf("  pushl $%d\n", i);
