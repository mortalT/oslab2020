Binary files _lab6/bin/bootblock and lab6/bin/bootblock differ
Binary files _lab6/bin/kernel and lab6/bin/kernel differ
Binary files _lab6/bin/sign and lab6/bin/sign differ
Binary files _lab6/bin/swap.img and lab6/bin/swap.img differ
Binary files _lab6/bin/ucore.img and lab6/bin/ucore.img differ
diff -r -u -P _lab6/.gdb.in lab6/.gdb.in
--- _lab6/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.gdb.in	2020-05-28 03:12:00.209519207 +0800
@@ -0,0 +1,3 @@
+target remote localhost:1234
+break *0xc010024f
+continue
diff -r -u -P _lab6/kern/debug/kdebug.c lab6/kern/debug/kdebug.c
--- _lab6/kern/debug/kdebug.c	2020-05-26 17:16:54.402663000 +0800
+++ lab6/kern/debug/kdebug.c	2020-05-28 01:27:47.756204547 +0800
@@ -340,12 +340,23 @@
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
       *    (3.1) printf value of ebp, eip
-      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
       *    (3.3) cprintf("\n");
       *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
       *    (3.5) popup a calling stackframe
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+	eip = read_eip();
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+		cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, *((uintptr_t*)ebp+2), *((uintptr_t*)ebp+3), *((uintptr_t*)ebp+4), *((uintptr_t*)ebp+5));
+		print_debuginfo(eip - 1);
+		eip = *((uintptr_t*)ebp+1);
+		ebp = *((uintptr_t*)ebp);
+		if(ebp == 0)
+			break;
+	}
 }
 
diff -r -u -P _lab6/kern/debug/kdebug.c~ lab6/kern/debug/kdebug.c~
--- _lab6/kern/debug/kdebug.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/debug/kdebug.c~	2020-05-28 01:27:47.756204547 +0800
@@ -0,0 +1,309 @@
+#include <defs.h>
+#include <x86.h>
+#include <stab.h>
+#include <stdio.h>
+#include <string.h>
+#include <sync.h>
+#include <kdebug.h>
+#include <kmonitor.h>
+#include <assert.h>
+
+#define STACKFRAME_DEPTH 20
+
+extern const struct stab __STAB_BEGIN__[];  // beginning of stabs table
+extern const struct stab __STAB_END__[];    // end of stabs table
+extern const char __STABSTR_BEGIN__[];      // beginning of string table
+extern const char __STABSTR_END__[];        // end of string table
+
+/* debug information about a particular instruction pointer */
+struct eipdebuginfo {
+    const char *eip_file;                   // source code filename for eip
+    int eip_line;                           // source code line number for eip
+    const char *eip_fn_name;                // name of function containing eip
+    int eip_fn_namelen;                     // length of function's name
+    uintptr_t eip_fn_addr;                  // start address of function
+    int eip_fn_narg;                        // number of function arguments
+};
+
+/* *
+ * stab_binsearch - according to the input, the initial value of
+ * range [*@region_left, *@region_right], find a single stab entry
+ * that includes the address @addr and matches the type @type,
+ * and then save its boundary to the locations that pointed
+ * by @region_left and @region_right.
+ *
+ * Some stab types are arranged in increasing order by instruction address.
+ * For example, N_FUN stabs (stab entries with n_type == N_FUN), which
+ * mark functions, and N_SO stabs, which mark source files.
+ *
+ * Given an instruction address, this function finds the single stab entry
+ * of type @type that contains that address.
+ *
+ * The search takes place within the range [*@region_left, *@region_right].
+ * Thus, to search an entire set of N stabs, you might do:
+ *
+ *      left = 0;
+ *      right = N - 1;    (rightmost stab)
+ *      stab_binsearch(stabs, &left, &right, type, addr);
+ *
+ * The search modifies *region_left and *region_right to bracket the @addr.
+ * *@region_left points to the matching stab that contains @addr,
+ * and *@region_right points just before the next stab.
+ * If *@region_left > *region_right, then @addr is not contained in any
+ * matching stab.
+ *
+ * For example, given these N_SO stabs:
+ *      Index  Type   Address
+ *      0      SO     f0100000
+ *      13     SO     f0100040
+ *      117    SO     f0100176
+ *      118    SO     f0100178
+ *      555    SO     f0100652
+ *      556    SO     f0100654
+ *      657    SO     f0100849
+ * this code:
+ *      left = 0, right = 657;
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+            l = true_m + 1;
+            continue;
+        }
+
+        // actual binary search
+        any_matches = 1;
+        if (stabs[m].n_value < addr) {
+            *region_left = m;
+            l = true_m + 1;
+        } else if (stabs[m].n_value > addr) {
+            *region_right = m - 1;
+            r = m - 1;
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+
+/* *
+ * debuginfo_eip - Fill in the @info structure with information about
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+    info->eip_line = 0;
+    info->eip_fn_name = "<unknown>";
+    info->eip_fn_namelen = 9;
+    info->eip_fn_addr = addr;
+    info->eip_fn_narg = 0;
+
+    stabs = __STAB_BEGIN__;
+    stab_end = __STAB_END__;
+    stabstr = __STABSTR_BEGIN__;
+    stabstr_end = __STABSTR_END__;
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+        return -1;
+    }
+
+    // Now we find the right stabs that define the function containing
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+    if (lfile == 0)
+        return -1;
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+
+    if (lfun <= rfun) {
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+        addr -= info->eip_fn_addr;
+        // Search within the function definition for the line number.
+        lline = lfun;
+        rline = rfun;
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+        lline = lfile;
+        rline = rfile;
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+    }
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+        info->eip_file = stabstr + stabs[lline].n_strx;
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+}
+
+/* *
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+    cprintf("  etext  0x%08x (phys)\n", etext);
+    cprintf("  edata  0x%08x (phys)\n", edata);
+    cprintf("  end    0x%08x (phys)\n", end);
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+}
+
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+
+static __noinline uint32_t
+read_eip(void) {
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+    return eip;
+}
+
+/* *
+ * print_stackframe - print a list of the saved eip values from the nested 'call'
+ * instructions that led to the current point of execution
+ *
+ * The x86 stack pointer, namely esp, points to the lowest location on the stack
+ * that is currently in use. Everything below that location in stack is free. Pushing
+ * a value onto the stack will invole decreasing the stack pointer and then writing
+ * the value to the place that stack pointer pointes to. And popping a value do the
+ * opposite.
+ *
+ * The ebp (base pointer) register, in contrast, is associated with the stack
+ * primarily by software convention. On entry to a C function, the function's
+ * prologue code normally saves the previous function's base pointer by pushing
+ * it onto the stack, and then copies the current esp value into ebp for the duration
+ * of the function. If all the functions in a program obey this convention,
+ * then at any given point during the program's execution, it is possible to trace
+ * back through the stack by following the chain of saved ebp pointers and determining
+ * exactly what nested sequence of function calls caused this particular point in the
+ * program to be reached. This capability can be particularly useful, for example,
+ * when a particular function causes an assert failure or panic because bad arguments
+ * were passed to it, but you aren't sure who passed the bad arguments. A stack
+ * backtrace lets you find the offending function.
+ *
+ * The inline function read_ebp() can tell us the value of current ebp. And the
+ * non-inline function read_eip() is useful, it can read the value of current eip,
+ * since while calling this function, read_eip() can read the caller's eip from
+ * stack easily.
+ *
+ * In print_debuginfo(), the function debuginfo_eip() can get enough information about
+ * calling-chain. Finally print_stackframe() will trace and print them for debugging.
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+     /* LAB1 YOUR CODE : STEP 1 */
+     /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
+      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
+      * (3) from 0 .. STACKFRAME_DEPTH
+      *    (3.1) printf value of ebp, eip
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
+      *    (3.3) cprintf("\n");
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+}
+
diff -r -u -P _lab6/kern/debug/panic.c lab6/kern/debug/panic.c
--- _lab6/kern/debug/panic.c	2020-05-26 17:16:54.402663000 +0800
+++ lab6/kern/debug/panic.c	2020-05-28 01:27:47.756204547 +0800
@@ -22,10 +22,6 @@
     cprintf("kernel panic at %s:%d:\n    ", file, line);
     vcprintf(fmt, ap);
     cprintf("\n");
-    
-    cprintf("stack trackback:\n");
-    print_stackframe();
-    
     va_end(ap);
 
 panic_dead:
diff -r -u -P _lab6/kern/init/entry.S lab6/kern/init/entry.S
--- _lab6/kern/init/entry.S	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/init/entry.S	2020-05-28 01:27:47.756204547 +0800
@@ -6,26 +6,17 @@
 .text
 .globl kern_entry
 kern_entry:
-    # load pa of boot pgdir
-    movl $REALLOC(__boot_pgdir), %eax
-    movl %eax, %cr3
-
-    # enable paging
-    movl %cr0, %eax
-    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
-    andl $~(CR0_TS | CR0_EM), %eax
-    movl %eax, %cr0
-
-    # update eip
-    # now, eip = 0x1.....
-    leal next, %eax
-    # set eip = KERNBASE + 0x1.....
-    jmp *%eax
-next:
-
-    # unmap va 0 ~ 4M, it's temporary mapping
-    xorl %eax, %eax
-    movl %eax, __boot_pgdir
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+    movl $KERNEL_DS, %eax
+    movw %ax, %ds
+    movw %ax, %es
+    movw %ax, %ss
+
+    ljmp $KERNEL_CS, $relocated
+
+relocated:
 
     # set ebp, esp
     movl $0x0, %ebp
@@ -47,24 +38,12 @@
     .globl bootstacktop
 bootstacktop:
 
-# kernel builtin pgdir
-# an initial page directory (Page Directory Table, PDT)
-# These page directory table and page table can be reused!
-.section .data.pgdir
-.align PGSIZE
-__boot_pgdir:
-.globl __boot_pgdir
-    # map va 0 ~ 4M to pa 0 ~ 4M (temporary)
-    .long REALLOC(__boot_pt1) + (PTE_P | PTE_U | PTE_W)
-    .space (KERNBASE >> PGSHIFT >> 10 << 2) - (. - __boot_pgdir) # pad to PDE of KERNBASE
-    # map va KERNBASE + (0 ~ 4M) to pa 0 ~ 4M
-    .long REALLOC(__boot_pt1) + (PTE_P | PTE_U | PTE_W)
-    .space PGSIZE - (. - __boot_pgdir) # pad to PGSIZE
-
-.set i, 0
-__boot_pt1:
-.rept 1024
-    .long i * PGSIZE + (PTE_P | PTE_W)
-    .set i, i + 1
-.endr
+.align 4
+__gdt:
+    SEG_NULL
+    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment
+    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment
+__gdtdesc:
+    .word 0x17                                          # sizeof(__gdt) - 1
+    .long REALLOC(__gdt)
 
diff -r -u -P _lab6/kern/mm/default_pmm.c lab6/kern/mm/default_pmm.c
--- _lab6/kern/mm/default_pmm.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/mm/default_pmm.c	2020-05-28 01:27:47.756204547 +0800
@@ -3,95 +3,56 @@
 #include <string.h>
 #include <default_pmm.h>
 
-/*  In the First Fit algorithm, the allocator keeps a list of free blocks
- * (known as the free list). Once receiving a allocation request for memory,
- * it scans along the list for the first block that is large enough to satisfy
- * the request. If the chosen block is significantly larger than requested, it
- * is usually splitted, and the remainder will be added into the list as
- * another free block.
- *  Please refer to Page 196~198, Section 8.2 of Yan Wei Min's Chinese book
- * "Data Structure -- C programming language".
+/* In the first fit algorithm, the allocator keeps a list of free blocks (known as the free list) and,
+   on receiving a request for memory, scans along the list for the first block that is large enough to
+   satisfy the request. If the chosen block is significantly larger than that requested, then it is 
+   usually split, and the remainder added to the list as another free block.
+   Please see Page 196~198, Section 8.2 of Yan Wei Ming's chinese book "Data Structure -- C programming language"
 */
-// LAB2 EXERCISE 1: YOUR CODE
-// you should rewrite functions: `default_init`, `default_init_memmap`,
-// `default_alloc_pages`, `default_free_pages`.
+// LAB2 EXERCISE 1: 2012011268
+// you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
 /*
  * Details of FFMA
- * (1) Preparation:
- *  In order to implement the First-Fit Memory Allocation (FFMA), we should
- * manage the free memory blocks using a list. The struct `free_area_t` is used
- * for the management of free memory blocks.
- *  First, you should get familiar with the struct `list` in list.h. Struct
- * `list` is a simple doubly linked list implementation. You should know how to
- * USE `list_init`, `list_add`(`list_add_after`), `list_add_before`, `list_del`,
- * `list_next`, `list_prev`.
- *  There's a tricky method that is to transform a general `list` struct to a
- * special struct (such as struct `page`), using the following MACROs: `le2page`
- * (in memlayout.h), (and in future labs: `le2vma` (in vmm.h), `le2proc` (in
- * proc.h), etc).
- * (2) `default_init`:
- *  You can reuse the demo `default_init` function to initialize the `free_list`
- * and set `nr_free` to 0. `free_list` is used to record the free memory blocks.
- * `nr_free` is the total number of the free memory blocks.
- * (3) `default_init_memmap`:
- *  CALL GRAPH: `kern_init` --> `pmm_init` --> `page_init` --> `init_memmap` -->
- * `pmm_manager` --> `init_memmap`.
- *  This function is used to initialize a free block (with parameter `addr_base`,
- * `page_number`). In order to initialize a free block, firstly, you should
- * initialize each page (defined in memlayout.h) in this free block. This
- * procedure includes:
- *  - Setting the bit `PG_property` of `p->flags`, which means this page is
- * valid. P.S. In function `pmm_init` (in pmm.c), the bit `PG_reserved` of
- * `p->flags` is already set.
- *  - If this page is free and is not the first page of a free block,
- * `p->property` should be set to 0.
- *  - If this page is free and is the first page of a free block, `p->property`
- * should be set to be the total number of pages in the block.
- *  - `p->ref` should be 0, because now `p` is free and has no reference.
- *  After that, We can use `p->page_link` to link this page into `free_list`.
- * (e.g.: `list_add_before(&free_list, &(p->page_link));` )
- *  Finally, we should update the sum of the free memory blocks: `nr_free += n`.
- * (4) `default_alloc_pages`:
- *  Search for the first free block (block size >= n) in the free list and reszie
- * the block found, returning the address of this block as the address required by
- * `malloc`.
- *  (4.1)
- *      So you should search the free list like this:
- *          list_entry_t le = &free_list;
- *          while((le=list_next(le)) != &free_list) {
- *          ...
- *      (4.1.1)
- *          In the while loop, get the struct `page` and check if `p->property`
- *      (recording the num of free pages in this block) >= n.
- *              struct Page *p = le2page(le, page_link);
- *              if(p->property >= n){ ...
- *      (4.1.2)
- *          If we find this `p`, it means we've found a free block with its size
- *      >= n, whose first `n` pages can be malloced. Some flag bits of this page
- *      should be set as the following: `PG_reserved = 1`, `PG_property = 0`.
- *      Then, unlink the pages from `free_list`.
- *          (4.1.2.1)
- *              If `p->property > n`, we should re-calculate number of the rest
- *          pages of this free block. (e.g.: `le2page(le,page_link))->property
- *          = p->property - n;`)
- *          (4.1.3)
- *              Re-caluclate `nr_free` (number of the the rest of all free block).
- *          (4.1.4)
- *              return `p`.
- *      (4.2)
- *          If we can not find a free block with its size >=n, then return NULL.
- * (5) `default_free_pages`:
- *  re-link the pages into the free list, and may merge small free blocks into
- * the big ones.
- *  (5.1)
- *      According to the base address of the withdrawed blocks, search the free
- *  list for its correct position (with address from low to high), and insert
- *  the pages. (May use `list_next`, `le2page`, `list_add_before`)
- *  (5.2)
- *      Reset the fields of the pages, such as `p->ref` and `p->flags` (PageProperty)
- *  (5.3)
- *      Try to merge blocks at lower or higher addresses. Notice: This should
- *  change some pages' `p->property` correctly.
+ * (1) Prepare: In order to implement the First-Fit Mem Alloc (FFMA), we should manage the free mem block use some list.
+ *              The struct free_area_t is used for the management of free mem blocks. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list implementation.
+ *              You should know howto USE: list_init, list_add(list_add_after), list_add_before, list_del, list_next, list_prev
+ *              Another tricky method is to transform a general list struct to a special struct (such as struct page):
+ *              you can find some MACRO: le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.)
+ * (2) default_init: you can reuse the  demo default_init fun to init the free_list and set nr_free to 0.
+ *              free_list is used to record the free mem blocks. nr_free is the total number for free mem blocks.
+ * (3) default_init_memmap:  CALL GRAPH: kern_init --> pmm_init-->page_init-->init_memmap--> pmm_manager->init_memmap
+ *              This fun is used to init a free block (with parameter: addr_base, page_number).
+ *              First you should init each page (in memlayout.h) in this free block, include:
+ *                  p->flags should be set bit PG_property (means this page is valid. In pmm_init fun (in pmm.c),
+ *                  the bit PG_reserved is setted in p->flags)
+ *                  if this page  is free and is not the first page of free block, p->property should be set to 0.
+ *                  if this page  is free and is the first page of free block, p->property should be set to total num of block.
+ *                  p->ref should be 0, because now p is free and no reference.
+ *                  We can use p->page_link to link this page to free_list, (such as: list_add_before(&free_list, &(p->page_link)); )
+ *              Finally, we should sum the number of free mem block: nr_free+=n
+ * (4) default_alloc_pages: search find a first free block (block size >=n) in free list and reszie the free block, return the addr
+ *              of malloced block.
+ *              (4.1) So you should search freelist like this:
+ *                       list_entry_t le = &free_list;
+ *                       while((le=list_next(le)) != &free_list) {
+ *                       ....
+ *                 (4.1.1) In while loop, get the struct page and check the p->property (record the num of free block) >=n?
+ *                       struct Page *p = le2page(le, page_link);
+ *                       if(p->property >= n){ ...
+ *                 (4.1.2) If we find this p, then it' means we find a free block(block size >=n), and the first n pages can be malloced.
+ *                     Some flag bits of this page should be setted: PG_reserved =1, PG_property =0
+ *                     unlink the pages from free_list
+ *                     (4.1.2.1) If (p->property >n), we should re-caluclate number of the the rest of this free block,
+ *                           (such as: le2page(le,page_link))->property = p->property - n;)
+ *                 (4.1.3)  re-caluclate nr_free (number of the the rest of all free block)
+ *                 (4.1.4)  return p
+ *               (4.2) If we can not find a free block (block size >=n), then return NULL
+ * (5) default_free_pages: relink the pages into  free list, maybe merge small free blocks into big free blocks.
+ *               (5.1) according the base addr of withdrawed blocks, search free list, find the correct position
+ *                     (from low to high addr), and insert the pages. (may use list_next, le2page, list_add_before)
+ *               (5.2) reset the fields of pages, such as p->ref, p->flags (PageProperty)
+ *               (5.3) try to merge low addr or high addr blocks. Notice: should change some pages's p->property correctly.
  */
 free_area_t free_area;
 
@@ -135,12 +96,14 @@
         }
     }
     if (page != NULL) {
-        list_del(&(page->page_link));
+        //list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
+	    SetPageProperty(p);
             list_add(&free_list, &(p->page_link));
-    }
+        }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -174,8 +137,9 @@
             list_del(&(p->page_link));
         }
     }
+    for (le = list_next(&free_list); le != &free_list && base + base->property >= le2page(le, page_link); le = list_next(le));
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
diff -r -u -P _lab6/kern/mm/default_pmm.c~ lab6/kern/mm/default_pmm.c~
--- _lab6/kern/mm/default_pmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/mm/default_pmm.c~	2020-05-28 01:27:47.756204547 +0800
@@ -0,0 +1,272 @@
+#include <pmm.h>
+#include <list.h>
+#include <string.h>
+#include <default_pmm.h>
+
+/* In the first fit algorithm, the allocator keeps a list of free blocks (known as the free list) and,
+   on receiving a request for memory, scans along the list for the first block that is large enough to
+   satisfy the request. If the chosen block is significantly larger than that requested, then it is 
+   usually split, and the remainder added to the list as another free block.
+   Please see Page 196~198, Section 8.2 of Yan Wei Ming's chinese book "Data Structure -- C programming language"
+*/
+// LAB2 EXERCISE 1: YOUR CODE
+// you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
+/*
+ * Details of FFMA
+ * (1) Prepare: In order to implement the First-Fit Mem Alloc (FFMA), we should manage the free mem block use some list.
+ *              The struct free_area_t is used for the management of free mem blocks. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list implementation.
+ *              You should know howto USE: list_init, list_add(list_add_after), list_add_before, list_del, list_next, list_prev
+ *              Another tricky method is to transform a general list struct to a special struct (such as struct page):
+ *              you can find some MACRO: le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.)
+ * (2) default_init: you can reuse the  demo default_init fun to init the free_list and set nr_free to 0.
+ *              free_list is used to record the free mem blocks. nr_free is the total number for free mem blocks.
+ * (3) default_init_memmap:  CALL GRAPH: kern_init --> pmm_init-->page_init-->init_memmap--> pmm_manager->init_memmap
+ *              This fun is used to init a free block (with parameter: addr_base, page_number).
+ *              First you should init each page (in memlayout.h) in this free block, include:
+ *                  p->flags should be set bit PG_property (means this page is valid. In pmm_init fun (in pmm.c),
+ *                  the bit PG_reserved is setted in p->flags)
+ *                  if this page  is free and is not the first page of free block, p->property should be set to 0.
+ *                  if this page  is free and is the first page of free block, p->property should be set to total num of block.
+ *                  p->ref should be 0, because now p is free and no reference.
+ *                  We can use p->page_link to link this page to free_list, (such as: list_add_before(&free_list, &(p->page_link)); )
+ *              Finally, we should sum the number of free mem block: nr_free+=n
+ * (4) default_alloc_pages: search find a first free block (block size >=n) in free list and reszie the free block, return the addr
+ *              of malloced block.
+ *              (4.1) So you should search freelist like this:
+ *                       list_entry_t le = &free_list;
+ *                       while((le=list_next(le)) != &free_list) {
+ *                       ....
+ *                 (4.1.1) In while loop, get the struct page and check the p->property (record the num of free block) >=n?
+ *                       struct Page *p = le2page(le, page_link);
+ *                       if(p->property >= n){ ...
+ *                 (4.1.2) If we find this p, then it' means we find a free block(block size >=n), and the first n pages can be malloced.
+ *                     Some flag bits of this page should be setted: PG_reserved =1, PG_property =0
+ *                     unlink the pages from free_list
+ *                     (4.1.2.1) If (p->property >n), we should re-caluclate number of the the rest of this free block,
+ *                           (such as: le2page(le,page_link))->property = p->property - n;)
+ *                 (4.1.3)  re-caluclate nr_free (number of the the rest of all free block)
+ *                 (4.1.4)  return p
+ *               (4.2) If we can not find a free block (block size >=n), then return NULL
+ * (5) default_free_pages: relink the pages into  free list, maybe merge small free blocks into big free blocks.
+ *               (5.1) according the base addr of withdrawed blocks, search free list, find the correct position
+ *                     (from low to high addr), and insert the pages. (may use list_next, le2page, list_add_before)
+ *               (5.2) reset the fields of pages, such as p->ref, p->flags (PageProperty)
+ *               (5.3) try to merge low addr or high addr blocks. Notice: should change some pages's p->property correctly.
+ */
+free_area_t free_area;
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+    list_init(&free_list);
+    nr_free = 0;
+}
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static struct Page *
+default_alloc_pages(size_t n) {
+    assert(n > 0);
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+        list_del(&(page->page_link));
+        if (page->property > n) {
+            struct Page *p = page + n;
+            p->property = page->property - n;
+            list_add(&free_list, &(p->page_link));
+    }
+        nr_free -= n;
+        ClearPageProperty(page);
+    }
+    return page;
+}
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+        p = le2page(le, page_link);
+        le = list_next(le);
+        if (base + base->property == p) {
+            base->property += p->property;
+            ClearPageProperty(p);
+            list_del(&(p->page_link));
+        }
+        else if (p + p->property == base) {
+            p->property += base->property;
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static size_t
+default_nr_free_pages(void) {
+    return nr_free;
+}
+
+static void
+basic_check(void) {
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+
+    assert(page2pa(p0) < npage * PGSIZE);
+    assert(page2pa(p1) < npage * PGSIZE);
+    assert(page2pa(p2) < npage * PGSIZE);
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    free_page(p1);
+    free_page(p2);
+    assert(nr_free == 3);
+
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    assert(!list_empty(&free_list));
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    free_list = free_list_store;
+    nr_free = nr_free_store;
+
+    free_page(p);
+    free_page(p1);
+    free_page(p2);
+}
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+
+    basic_check();
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+    assert(p0 != NULL);
+    assert(!PageProperty(p0));
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+    assert(alloc_page() == NULL);
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    free_pages(p0 + 2, 3);
+    assert(alloc_pages(4) == NULL);
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+    assert((p1 = alloc_pages(3)) != NULL);
+    assert(alloc_page() == NULL);
+    assert(p0 + 2 == p1);
+
+    p2 = p0 + 1;
+    free_page(p0);
+    free_pages(p1, 3);
+    assert(PageProperty(p0) && p0->property == 1);
+    assert(PageProperty(p1) && p1->property == 3);
+
+    assert((p0 = alloc_page()) == p2 - 1);
+    free_page(p0);
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+
+    free_pages(p0, 2);
+    free_page(p2);
+
+    assert((p0 = alloc_pages(5)) != NULL);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    nr_free = nr_free_store;
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+    assert(total == 0);
+}
+
+const struct pmm_manager default_pmm_manager = {
+    .name = "default_pmm_manager",
+    .init = default_init,
+    .init_memmap = default_init_memmap,
+    .alloc_pages = default_alloc_pages,
+    .free_pages = default_free_pages,
+    .nr_free_pages = default_nr_free_pages,
+    .check = default_check,
+};
+
diff -r -u -P _lab6/kern/mm/pmm.c lab6/kern/mm/pmm.c
--- _lab6/kern/mm/pmm.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/mm/pmm.c	2020-05-28 01:27:47.756204547 +0800
@@ -40,8 +40,7 @@
 size_t npage = 0;
 
 // virtual address of boot-time page directory
-extern pde_t __boot_pgdir;
-pde_t *boot_pgdir = &__boot_pgdir;
+pde_t *boot_pgdir = NULL;
 // physical address of boot-time page directory
 uintptr_t boot_cr3;
 
@@ -253,6 +252,17 @@
     }
 }
 
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
 //boot_map_segment - setup&enable the paging mechanism
 // parameters
 //  la:   linear address of this memory need to map (after x86 segment map)
@@ -288,9 +298,6 @@
 //         - check the correctness of pmm & paging mechanism, print PDT&PT
 void
 pmm_init(void) {
-    // We've already enabled paging
-    boot_cr3 = PADDR(boot_pgdir);
-
     //We need to alloc/free the physical memory (granularity is 4KB or other size). 
     //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
     //First we should init a physical memory manager(pmm) based on the framework.
@@ -305,6 +312,11 @@
     //use pmm->check to verify the correctness of the alloc/free function in a pmm
     check_alloc_page();
 
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
     check_pgdir();
 
     static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
@@ -314,15 +326,24 @@
     boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
 
     // map all physical memory to linear memory with base linear addr KERNBASE
-    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
     boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
 
-    // Since we are using bootloader's GDT,
-    // we should reload gdt (second time, the last time) to get user segments and the TSS
-    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
-    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
     gdt_init();
 
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
     //now the basic virtual memory map(see memalyout.h) is established.
     //check the correctness of the basic virtual memory map.
     check_boot_pgdir();
@@ -342,7 +363,7 @@
 // return vaule: the kernel virtual address of this pte
 pte_t *
 get_pte(pde_t *pgdir, uintptr_t la, bool create) {
-    /* LAB2 EXERCISE 2: YOUR CODE
+    /* LAB2 EXERCISE 2: 2012011268
      *
      * If you need to visit a physical address, please use KADDR()
      * please read pmm.h for useful macros
@@ -363,18 +384,20 @@
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
-                          // (3) check if creating is needed, then alloc page for page table
-                          // CAUTION: this page is used for page table, not for common data page
-                          // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
-                          // (6) clear page content using memset
-                          // (7) set page directory entry's permission
+
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P)) {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
     }
-    return NULL;          // (8) return page table entry
-#endif
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -385,7 +408,7 @@
         *ptep_store = ptep;
     }
     if (ptep != NULL && *ptep & PTE_P) {
-        return pte2page(*ptep);
+        return pa2page(*ptep);
     }
     return NULL;
 }
@@ -395,7 +418,7 @@
 //note: PT is changed, so the TLB need to be invalidate 
 static inline void
 page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
-    /* LAB2 EXERCISE 3: YOUR CODE
+    /* LAB2 EXERCISE 3: 2012011268
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
      *
@@ -411,15 +434,21 @@
      * DEFINEs:
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
-#if 0
-    if (0) {                      //(1) check if this page table entry is present
-        struct Page *page = NULL; //(2) find corresponding page to pte
-                                  //(3) decrease page reference
-                                  //(4) and free this page when page reference reachs 0
-                                  //(5) clear second page table entry
-                                  //(6) flush tlb
+
+    if(*ptep & PTE_P) {               
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+	 free_page(page);
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+    //(6) flush tlb
     }
-#endif
 }
 
 void
@@ -487,7 +516,7 @@
         assert(page!=NULL);
         assert(npage!=NULL);
         int ret=0;
-        /* LAB5:EXERCISE2 YOUR CODE
+        /* LAB5:EXERCISE2 2012011268
          * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
          *
          * Some Useful MACROs and DEFINEs, you can use them in below implementation.
@@ -501,6 +530,10 @@
          * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
          * (4) build the map of phy addr of  nage with the linear addr start
          */
+	char *src_kvaddr = page2kva(page);
+	char *dst_kvaddr = page2kva(npage);
+	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+	page_insert(to, npage, start, perm);
         assert(ret == 0);
         }
         start += PGSIZE;
@@ -604,7 +637,7 @@
 
     pte_t *ptep;
     assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
-    assert(pte2page(*ptep) == p1);
+    assert(pa2page(*ptep) == p1);
     assert(page_ref(p1) == 1);
 
     ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
@@ -622,7 +655,7 @@
     assert(page_ref(p1) == 2);
     assert(page_ref(p2) == 0);
     assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
-    assert(pte2page(*ptep) == p1);
+    assert(pa2page(*ptep) == p1);
     assert((*ptep & PTE_U) == 0);
 
     page_remove(boot_pgdir, 0x0);
@@ -633,8 +666,8 @@
     assert(page_ref(p1) == 0);
     assert(page_ref(p2) == 0);
 
-    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
-    free_page(pde2page(boot_pgdir[0]));
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+    free_page(pa2page(boot_pgdir[0]));
     boot_pgdir[0] = 0;
 
     cprintf("check_pgdir() succeeded!\n");
@@ -668,7 +701,7 @@
     assert(strlen((const char *)0x100) == 0);
 
     free_page(p);
-    free_page(pde2page(boot_pgdir[0]));
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
     boot_pgdir[0] = 0;
 
     cprintf("check_boot_pgdir() succeeded!\n");
diff -r -u -P _lab6/kern/mm/pmm.c~ lab6/kern/mm/pmm.c~
--- _lab6/kern/mm/pmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/mm/pmm.c~	2020-05-28 01:27:47.760204547 +0800
@@ -0,0 +1,767 @@
+#include <defs.h>
+#include <x86.h>
+#include <stdio.h>
+#include <string.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <pmm.h>
+#include <default_pmm.h>
+#include <sync.h>
+#include <error.h>
+#include <swap.h>
+#include <vmm.h>
+#include <kmalloc.h>
+
+/* *
+ * Task State Segment:
+ *
+ * The TSS may reside anywhere in memory. A special segment register called
+ * the Task Register (TR) holds a segment selector that points a valid TSS
+ * segment descriptor which resides in the GDT. Therefore, to use a TSS
+ * the following must be done in function gdt_init:
+ *   - create a TSS descriptor entry in GDT
+ *   - add enough information to the TSS in memory as needed
+ *   - load the TR register with a segment selector for that segment
+ *
+ * There are several fileds in TSS for specifying the new stack pointer when a
+ * privilege level change happens. But only the fields SS0 and ESP0 are useful
+ * in our os kernel.
+ *
+ * The field SS0 contains the stack segment selector for CPL = 0, and the ESP0
+ * contains the new ESP value for CPL = 0. When an interrupt happens in protected
+ * mode, the x86 CPU will look in the TSS for SS0 and ESP0 and load their value
+ * into SS and ESP respectively.
+ * */
+static struct taskstate ts = {0};
+
+// virtual address of physicall page array
+struct Page *pages;
+// amount of physical memory (in pages)
+size_t npage = 0;
+
+// virtual address of boot-time page directory
+pde_t *boot_pgdir = NULL;
+// physical address of boot-time page directory
+uintptr_t boot_cr3;
+
+// physical memory management
+const struct pmm_manager *pmm_manager;
+
+/* *
+ * The page directory entry corresponding to the virtual address range
+ * [VPT, VPT + PTSIZE) points to the page directory itself. Thus, the page
+ * directory is treated as a page table as well as a page directory.
+ *
+ * One result of treating the page directory as a page table is that all PTEs
+ * can be accessed though a "virtual page table" at virtual address VPT. And the
+ * PTE for number n is stored in vpt[n].
+ *
+ * A second consequence is that the contents of the current page directory will
+ * always available at virtual address PGADDR(PDX(VPT), PDX(VPT), 0), to which
+ * vpd is set bellow.
+ * */
+pte_t * const vpt = (pte_t *)VPT;
+pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
+
+/* *
+ * Global Descriptor Table:
+ *
+ * The kernel and user segments are identical (except for the DPL). To load
+ * the %ss register, the CPL must equal the DPL. Thus, we must duplicate the
+ * segments for the user and the kernel. Defined as follows:
+ *   - 0x0 :  unused (always faults -- for trapping NULL far pointers)
+ *   - 0x8 :  kernel code segment
+ *   - 0x10:  kernel data segment
+ *   - 0x18:  user code segment
+ *   - 0x20:  user data segment
+ *   - 0x28:  defined for tss, initialized in gdt_init
+ * */
+static struct segdesc gdt[] = {
+    SEG_NULL,
+    [SEG_KTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_TSS]   = SEG_NULL,
+};
+
+static struct pseudodesc gdt_pd = {
+    sizeof(gdt) - 1, (uintptr_t)gdt
+};
+
+static void check_alloc_page(void);
+static void check_pgdir(void);
+static void check_boot_pgdir(void);
+
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+}
+
+/* *
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+    ts.ts_esp0 = esp0;
+}
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+    ts.ts_ss0 = KERNEL_DS;
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+    pmm_manager = &default_pmm_manager;
+    cprintf("memory management: %s\n", pmm_manager->name);
+    pmm_manager->init();
+}
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+    pmm_manager->init_memmap(base, n);
+}
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+    struct Page *page=NULL;
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+         {
+              page = pmm_manager->alloc_pages(n);
+         }
+         local_intr_restore(intr_flag);
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+    }
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+}
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        pmm_manager->free_pages(base, n);
+    }
+    local_intr_restore(intr_flag);
+}
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        ret = pmm_manager->nr_free_pages();
+    }
+    local_intr_restore(intr_flag);
+    return ret;
+}
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+        maxpa = KMEMSIZE;
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        if (memmap->map[i].type == E820_ARM) {
+            if (begin < freemem) {
+                begin = freemem;
+            }
+            if (end > KMEMSIZE) {
+                end = KMEMSIZE;
+            }
+            if (begin < end) {
+                begin = ROUNDUP(begin, PGSIZE);
+                end = ROUNDDOWN(end, PGSIZE);
+                if (begin < end) {
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
+//boot_map_segment - setup&enable the paging mechanism
+// parameters
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+    struct Page *p = alloc_page();
+    if (p == NULL) {
+        panic("boot_alloc_page failed.\n");
+    }
+    return page2kva(p);
+}
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
+    check_pgdir();
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+
+    print_pgdir();
+    
+    kmalloc_init();
+
+}
+
+//get_pte - get pte and return the kernel virtual address of this pte for la
+//        - if the PT contians this pte didn't exist, alloc a page for PT
+// parameter:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+    /* LAB2 EXERCISE 2: 2012011268
+     *
+     * If you need to visit a physical address, please use KADDR()
+     * please read pmm.h for useful macros
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   PDX(la) = the index of page directory entry of VIRTUAL ADDRESS la.
+     *   KADDR(pa) : takes a physical address and returns the corresponding kernel virtual address.
+     *   set_page_ref(page,1) : means the page be referenced by one time
+     *   page2pa(page): get the physical address of memory which this (struct Page *) page  manages
+     *   struct Page * alloc_page() : allocation a page
+     *   memset(void *s, char c, size_t n) : sets the first n bytes of the memory area pointed by s
+     *                                       to the specified value c.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P)) {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+
+}
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep_store != NULL) {
+        *ptep_store = ptep;
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+        return pa2page(*ptep);
+    }
+    return NULL;
+}
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+    /* LAB2 EXERCISE 3: 2012011268
+     *
+     * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   struct Page *page pte2page(*ptep): get the according page from the value of a ptep
+     *   free_page : free a page
+     *   page_ref_dec(page) : decrease page->ref. NOTICE: ff page->ref == 0 , then this page should be free.
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+
+    if(*ptep & PTE_P) {               
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+	 free_page(page);
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+    //(6) flush tlb
+    }
+}
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+        if (ptep == NULL) {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+            continue ;
+        }
+        if (*ptep != 0) {
+            page_remove_pte(pgdir, start, ptep);
+        }
+        start += PGSIZE;
+    } while (start != 0 && start < end);
+}
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+
+    start = ROUNDDOWN(start, PTSIZE);
+    do {
+        int pde_idx = PDX(start);
+        if (pgdir[pde_idx] & PTE_P) {
+            free_page(pde2page(pgdir[pde_idx]));
+            pgdir[pde_idx] = 0;
+        }
+        start += PTSIZE;
+    } while (start != 0 && start < end);
+}
+/* copy_range - copy content of memory (start, end) of one process A to another process B
+ * @to:    the addr of process B's Page Directory
+ * @from:  the addr of process A's Page Directory
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+    assert(USER_ACCESS(start, end));
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+        if (ptep == NULL) {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+            continue ;
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+            if ((nptep = get_pte(to, start, 1)) == NULL) {
+                return -E_NO_MEM;
+            }
+        uint32_t perm = (*ptep & PTE_USER);
+        //get page from ptep
+        struct Page *page = pte2page(*ptep);
+        // alloc a page for process B
+        struct Page *npage=alloc_page();
+        assert(page!=NULL);
+        assert(npage!=NULL);
+        int ret=0;
+        /* LAB5:EXERCISE2 YOUR CODE
+         * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
+         *
+         * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+         * MACROs or Functions:
+         *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
+         *    page_insert: build the map of phy addr of an Page with the linear addr la
+         *    memcpy: typical memory copy function
+         *
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+        assert(ret == 0);
+        }
+        start += PGSIZE;
+    } while (start != 0 && start < end);
+    return 0;
+}
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep != NULL) {
+        page_remove_pte(pgdir, la, ptep);
+    }
+}
+
+//page_insert - build the map of phy addr of an Page with the linear addr la
+// paramemters:
+//  pgdir: the kernel virtual base address of PDT
+//  page:  the Page which need to map
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+    pte_t *ptep = get_pte(pgdir, la, 1);
+    if (ptep == NULL) {
+        return -E_NO_MEM;
+    }
+    page_ref_inc(page);
+    if (*ptep & PTE_P) {
+        struct Page *p = pte2page(*ptep);
+        if (p == page) {
+            page_ref_dec(page);
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+    tlb_invalidate(pgdir, la);
+    return 0;
+}
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+    if (rcr3() == PADDR(pgdir)) {
+        invlpg((void *)la);
+    }
+}
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+    struct Page *page = alloc_page();
+    if (page != NULL) {
+        if (page_insert(pgdir, page, la, perm) != 0) {
+            free_page(page);
+            return NULL;
+        }
+        if (swap_init_ok){
+            if(check_mm_struct!=NULL) {
+                swap_map_swappable(check_mm_struct, la, page, 0);
+                page->pra_vaddr=la;
+                assert(page_ref(page) == 1);
+                //cprintf("get No. %d  page: pra_vaddr %x, pra_link.prev %x, pra_link_next %x in pgdir_alloc_page\n", (page-pages), page->pra_vaddr,page->pra_page_link.prev, page->pra_page_link.next);
+            } 
+            else  {  //now current is existed, should fix it in the future
+                //swap_map_swappable(current->mm, la, page, 0);
+                //page->pra_vaddr=la;
+                //assert(page_ref(page) == 1);
+                //panic("pgdir_alloc_page: no pages. now current is existed, should fix it in the future\n");
+            }
+        }
+
+    }
+
+    return page;
+}
+
+static void
+check_alloc_page(void) {
+    pmm_manager->check();
+    cprintf("check_alloc_page() succeeded!\n");
+}
+
+static void
+check_pgdir(void) {
+    assert(npage <= KMEMSIZE / PGSIZE);
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+    assert(pa2page(*ptep) == p1);
+    assert(page_ref(p1) == 1);
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+
+    p2 = alloc_page();
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(*ptep & PTE_U);
+    assert(*ptep & PTE_W);
+    assert(boot_pgdir[0] & PTE_U);
+    assert(page_ref(p2) == 1);
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+    assert(page_ref(p1) == 2);
+    assert(page_ref(p2) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(pa2page(*ptep) == p1);
+    assert((*ptep & PTE_U) == 0);
+
+    page_remove(boot_pgdir, 0x0);
+    assert(page_ref(p1) == 1);
+    assert(page_ref(p2) == 0);
+
+    page_remove(boot_pgdir, PGSIZE);
+    assert(page_ref(p1) == 0);
+    assert(page_ref(p2) == 0);
+
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+    free_page(pa2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_pgdir() succeeded!\n");
+}
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+
+    assert(boot_pgdir[0] == 0);
+
+    struct Page *p;
+    p = alloc_page();
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+    assert(page_ref(p) == 1);
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+    assert(page_ref(p) == 2);
+
+    const char *str = "ucore: Hello world!!";
+    strcpy((void *)0x100, str);
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+    assert(strlen((const char *)0x100) == 0);
+
+    free_page(p);
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+}
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+    str[1] = 'r';
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+    str[3] = '\0';
+    return str;
+}
+
+//get_pgtable_items - In [left, right] range of PDT or PT, find a continuous linear addr space
+//                  - (left_store*X_SIZE~right_store*X_SIZE) for PDT or PT
+//                  - X_SIZE=PTSIZE=4M, if PDT; X_SIZE=PGSIZE=4K, if PT
+// paramemters:
+//  left:        no use ???
+//  right:       the high side of table's range
+//  start:       the low side of table's range
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+    }
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+            start ++;
+        }
+        if (right_store != NULL) {
+            *right_store = start;
+        }
+        return perm;
+    }
+    return 0;
+}
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+}
diff -r -u -P _lab6/kern/mm/swap_fifo.c lab6/kern/mm/swap_fifo.c
--- _lab6/kern/mm/swap_fifo.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/mm/swap_fifo.c	2020-05-28 01:27:47.760204547 +0800
@@ -49,8 +49,9 @@
  
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: 2012011268*/ 
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
     return 0;
 }
 /*
@@ -64,9 +65,14 @@
          assert(head != NULL);
      assert(in_tick==0);
      /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     /*LAB3 EXERCISE 2: 2012011268*/ 
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = list_next(head);
+     assert(le != head);
+     struct Page *page = le2page(le, pra_page_link);
+     list_del(le);
+     *ptr_page = page;
      return 0;
 }
 
diff -r -u -P _lab6/kern/mm/swap_fifo.c~ lab6/kern/mm/swap_fifo.c~
--- _lab6/kern/mm/swap_fifo.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/mm/swap_fifo.c~	2020-05-28 01:27:47.764204547 +0800
@@ -0,0 +1,143 @@
+#include <defs.h>
+#include <x86.h>
+#include <stdio.h>
+#include <string.h>
+#include <swap.h>
+#include <swap_fifo.h>
+#include <list.h>
+
+/* [wikipedia]The simplest Page Replacement Algorithm(PRA) is a FIFO algorithm. The first-in, first-out
+ * page replacement algorithm is a low-overhead algorithm that requires little book-keeping on
+ * the part of the operating system. The idea is obvious from the name - the operating system
+ * keeps track of all the pages in memory in a queue, with the most recent arrival at the back,
+ * and the earliest arrival in front. When a page needs to be replaced, the page at the front
+ * of the queue (the oldest page) is selected. While FIFO is cheap and intuitive, it performs
+ * poorly in practical application. Thus, it is rarely used in its unmodified form. This
+ * algorithm experiences Belady's anomaly.
+ *
+ * Details of FIFO PRA
+ * (1) Prepare: In order to implement FIFO PRA, we should manage all swappable pages, so we can
+ *              link these pages into pra_list_head according the time order. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list
+ *              implementation. You should know howto USE: list_init, list_add(list_add_after),
+ *              list_add_before, list_del, list_next, list_prev. Another tricky method is to transform
+ *              a general list struct to a special struct (such as struct page). You can find some MACRO:
+ *              le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.
+ */
+
+list_entry_t pra_list_head;
+/*
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+}
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+    list_entry_t *entry=&(page->pra_page_link);
+ 
+    assert(entry != NULL && head != NULL);
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    return 0;
+}
+/*
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+         assert(head != NULL);
+     assert(in_tick==0);
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  assign the value of *ptr_page to the addr of this page
+     return 0;
+}
+
+static int
+_fifo_check_swap(void) {
+    cprintf("write Virt Page c in fifo_check_swap\n");
+    *(unsigned char *)0x3000 = 0x0c;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page d in fifo_check_swap\n");
+    *(unsigned char *)0x4000 = 0x0d;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==4);
+    cprintf("write Virt Page e in fifo_check_swap\n");
+    *(unsigned char *)0x5000 = 0x0e;
+    assert(pgfault_num==5);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==5);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==6);
+    cprintf("write Virt Page b in fifo_check_swap\n");
+    *(unsigned char *)0x2000 = 0x0b;
+    assert(pgfault_num==7);
+    cprintf("write Virt Page c in fifo_check_swap\n");
+    *(unsigned char *)0x3000 = 0x0c;
+    assert(pgfault_num==8);
+    cprintf("write Virt Page d in fifo_check_swap\n");
+    *(unsigned char *)0x4000 = 0x0d;
+    assert(pgfault_num==9);
+    cprintf("write Virt Page e in fifo_check_swap\n");
+    *(unsigned char *)0x5000 = 0x0e;
+    assert(pgfault_num==10);
+    cprintf("write Virt Page a in fifo_check_swap\n");
+    assert(*(unsigned char *)0x1000 == 0x0a);
+    *(unsigned char *)0x1000 = 0x0a;
+    assert(pgfault_num==11);
+    return 0;
+}
+
+
+static int
+_fifo_init(void)
+{
+    return 0;
+}
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+    return 0;
+}
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+
+
+struct swap_manager swap_manager_fifo =
+{
+     .name            = "fifo swap manager",
+     .init            = &_fifo_init,
+     .init_mm         = &_fifo_init_mm,
+     .tick_event      = &_fifo_tick_event,
+     .map_swappable   = &_fifo_map_swappable,
+     .set_unswappable = &_fifo_set_unswappable,
+     .swap_out_victim = &_fifo_swap_out_victim,
+     .check_swap      = &_fifo_check_swap,
+};
diff -r -u -P _lab6/kern/mm/vmm.c lab6/kern/mm/vmm.c
--- _lab6/kern/mm/vmm.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/mm/vmm.c	2020-05-28 01:27:47.764204547 +0800
@@ -434,7 +434,7 @@
     ret = -E_NO_MEM;
 
     pte_t *ptep=NULL;
-    /*LAB3 EXERCISE 1: YOUR CODE
+    /*LAB3 EXERCISE 1: 2012011268
     * Maybe you want help comment, BELOW comments can help you finish the code
     *
     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
@@ -493,6 +493,23 @@
         }
    }
 #endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (ptep == NULL) goto failed;
+    if (*ptep == 0) {
+	    if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) goto failed;
+    } else {
+	    if (swap_init_ok) {
+		    struct Page *page = NULL;
+		    swap_in(mm, addr, &page);
+		    page_insert(mm->pgdir, page, addr, perm);
+		    swap_map_swappable(mm, addr, page, 1);
+		    page->pra_vaddr = addr; 
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            	goto failed;
+	    }
+    }
+
    ret = 0;
 failed:
     return ret;
diff -r -u -P _lab6/kern/mm/vmm.c~ lab6/kern/mm/vmm.c~
--- _lab6/kern/mm/vmm.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/mm/vmm.c~	2020-05-28 01:27:47.764204547 +0800
@@ -0,0 +1,419 @@
+#include <vmm.h>
+#include <sync.h>
+#include <string.h>
+#include <assert.h>
+#include <stdio.h>
+#include <error.h>
+#include <pmm.h>
+#include <x86.h>
+#include <swap.h>
+
+/* 
+  vmm design include two parts: mm_struct (mm) & vma_struct (vma)
+  mm is the memory manager for the set of continuous virtual memory  
+  area which have the same PDT. vma is a continuous virtual memory area.
+  There a linear link list for vma & a redblack link list for vma in mm.
+---------------
+  mm related functions:
+   golbal functions
+     struct mm_struct * mm_create(void)
+     void mm_destroy(struct mm_struct *mm)
+     int do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr)
+--------------
+  vma related functions:
+   global functions
+     struct vma_struct * vma_create (uintptr_t vm_start, uintptr_t vm_end,...)
+     void insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma)
+     struct vma_struct * find_vma(struct mm_struct *mm, uintptr_t addr)
+   local functions
+     inline void check_vma_overlap(struct vma_struct *prev, struct vma_struct *next)
+---------------
+   check correctness functions
+     void check_vmm(void);
+     void check_vma_struct(void);
+     void check_pgfault(void);
+*/
+
+static void check_vmm(void);
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+
+    if (mm != NULL) {
+        list_init(&(mm->mmap_list));
+        mm->mmap_cache = NULL;
+        mm->pgdir = NULL;
+        mm->map_count = 0;
+
+        if (swap_init_ok) swap_init_mm(mm);
+        else mm->sm_priv = NULL;
+    }
+    return mm;
+}
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+
+    if (vma != NULL) {
+        vma->vm_start = vm_start;
+        vma->vm_end = vm_end;
+        vma->vm_flags = vm_flags;
+    }
+    return vma;
+}
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+    struct vma_struct *vma = NULL;
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+                    vma = le2vma(le, list_link);
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+                    vma = NULL;
+                }
+        }
+        if (vma != NULL) {
+            mm->mmap_cache = vma;
+        }
+    }
+    return vma;
+}
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+    assert(prev->vm_start < prev->vm_end);
+    assert(prev->vm_end <= next->vm_start);
+    assert(next->vm_start < next->vm_end);
+}
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+            if (mmap_prev->vm_start > vma->vm_start) {
+                break;
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+
+    /* check overlap */
+    if (le_prev != list) {
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+    }
+    if (le_next != list) {
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+    }
+
+    vma->vm_mm = mm;
+    list_add_after(le_prev, &(vma->list_link));
+
+    mm->map_count ++;
+}
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+        list_del(le);
+        kfree(le2vma(le, list_link),sizeof(struct vma_struct));  //kfree vma        
+    }
+    kfree(mm, sizeof(struct mm_struct)); //kfree mm
+    mm=NULL;
+}
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+    check_vmm();
+}
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+    
+    check_vma_struct();
+    check_pgfault();
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_vmm() succeeded.\n");
+}
+
+static void
+check_vma_struct(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+
+    struct mm_struct *mm = mm_create();
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+        assert(le != &(mm->mmap_list));
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+        struct vma_struct *vma1 = find_vma(mm, i);
+        assert(vma1 != NULL);
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+        assert(vma2 != NULL);
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+        assert(vma3 == NULL);
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+        assert(vma4 == NULL);
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+        assert(vma5 == NULL);
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+        if (vma_below_5 != NULL ) {
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_vma_struct() succeeded!\n");
+}
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+    size_t nr_free_pages_store = nr_free_pages();
+
+    check_mm_struct = mm_create();
+    assert(check_mm_struct != NULL);
+
+    struct mm_struct *mm = check_mm_struct;
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+    assert(pgdir[0] == 0);
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+    assert(vma != NULL);
+
+    insert_vma_struct(mm, vma);
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+    free_page(pde2page(pgdir[0]));
+    pgdir[0] = 0;
+
+    mm->pgdir = NULL;
+    mm_destroy(mm);
+    check_mm_struct = NULL;
+
+    assert(nr_free_pages_store == nr_free_pages());
+
+    cprintf("check_pgfault() succeeded!\n");
+}
+//page fault number
+volatile unsigned int pgfault_num=0;
+
+/* do_pgfault - interrupt handler to process the page fault execption
+ * @mm         : the control struct for a set of vma using the same PDT
+ * @error_code : the error code recorded in trapframe->tf_err which is setted by x86 hardware
+ * @addr       : the addr which causes a memory access exception, (the contents of the CR2 register)
+ *
+ * CALL GRAPH: trap--> trap_dispatch-->pgfault_handler-->do_pgfault
+ * The processor provides ucore's do_pgfault function with two items of information to aid in diagnosing
+ * the exception and recovering from it.
+ *   (1) The contents of the CR2 register. The processor loads the CR2 register with the
+ *       32-bit linear address that generated the exception. The do_pgfault fun can
+ *       use this address to locate the corresponding page directory and page-table
+ *       entries.
+ *   (2) An error code on the kernel stack. The error code for a page fault has a format different from
+ *       that for other exceptions. The error code tells the exception handler three things:
+ *         -- The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)
+ *            or to either an access rights violation or the use of a reserved bit (1).
+ *         -- The W/R flag (bit 1) indicates whether the memory access that caused the exception
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+    int ret = -E_INVAL;
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+
+    pgfault_num++;
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+        goto failed;
+    }
+    //check the error_code
+    switch (error_code & 3) {
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+            goto failed;
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+        goto failed;
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+            goto failed;
+        }
+    }
+    /* IF (write an existed addr ) OR
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+    if (vma->vm_flags & VM_WRITE) {
+        perm |= PTE_W;
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+
+    ret = -E_NO_MEM;
+
+    pte_t *ptep=NULL;
+    /*LAB3 EXERCISE 1: 2012011268
+    * Maybe you want help comment, BELOW comments can help you finish the code
+    *
+    * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+    * MACROs or Functions:
+    *   get_pte : get an pte and return the kernel virtual address of this pte for la
+    *             if the PT contians this pte didn't exist, alloc a page for PT (notice the 3th parameter '1')
+    *   pgdir_alloc_page : call alloc_page & page_insert functions to allocate a page size memory & setup
+    *             an addr map pa<--->la with linear address la and the PDT pgdir
+    * DEFINES:
+    *   VM_WRITE  : If vma->vm_flags & VM_WRITE == 1/0, then the vma is writable/non writable
+    *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+    *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+    * VARIABLES:
+    *   mm->pgdir : the PDT of these vma
+    *
+    */
+#if 0
+    /*LAB3 EXERCISE 1: YOUR CODE*/
+    ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    if (*ptep == 0) {
+                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+
+    }
+    else {
+    /*LAB3 EXERCISE 2: YOUR CODE
+    * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,
+    * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.
+    *
+    *  Some Useful MACROs and DEFINEs, you can use them in below implementation.
+    *  MACROs or Functions:
+    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
+    *                               find the addr of disk page, read the content of disk page into this memroy page
+    *    page_insert ： build the map of phy addr of an Page with the linear addr la
+    *    swap_map_swappable ： set the page swappable
+    */
+        if(swap_init_ok) {
+            struct Page *page=NULL;
+                                    //(1）According to the mm AND addr, try to load the content of right disk page
+                                    //    into the memory which page managed.
+                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
+                                    //(3) make the page swappable.
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (*ptep == 0) {
+	    struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
+    } else {
+	    if (swap_init_ok) {
+		    struct Page *page = NULL;
+		    swap_in(mm, addr, &page);
+		    page_insert(mm->pgdir, page, addr, perm);
+		    swap_map_swappable(mm, addr, page, 1);
+		    page->pra_vaddr = addr; 
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            	goto failed;
+	    }
+    }
+
+   ret = 0;
+failed:
+    return ret;
+}
+
diff -r -u -P _lab6/kern/process/proc.c lab6/kern/process/proc.c
--- _lab6/kern/process/proc.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/process/proc.c	2020-05-28 03:11:58.445519207 +0800
@@ -87,7 +87,7 @@
 alloc_proc(void) {
     struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
     if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
+    //LAB4:EXERCISE1 2012011268
     /*
      * below fields in proc_struct need to be initialized
      *       enum proc_state state;                      // Process state
@@ -119,6 +119,25 @@
      *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
      *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
      */
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+        proc->wait_state = 0;
+        proc->cptr = proc->yptr = proc->optr = NULL;
+        proc->rq = NULL;
+        list_init(&(proc->run_link));
+        proc->time_slice = 0;
+        proc->lab6_run_pool.parent = proc->lab6_run_pool.left = proc->lab6_run_pool.right = NULL;
+        proc->lab6_stride = proc->lab6_priority = 0;
     }
     return proc;
 }
@@ -380,7 +399,7 @@
         goto fork_out;
     }
     ret = -E_NO_MEM;
-    //LAB4:EXERCISE2 YOUR CODE
+    //LAB4:EXERCISE2 2012011268
     /*
      * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
      * MACROs or Functions:
@@ -399,19 +418,35 @@
      */
 
     //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+    assert(current->wait_state == 0);
+    proc->parent = current;
     //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
     //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
     //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
     //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
     //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
     //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
 
-	//LAB5 YOUR CODE : (update LAB4 steps)
+    //LAB5 2012011268 : (update LAB4 steps)
    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
     *    -------------------
-	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
-	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
 	
 fork_out:
@@ -603,7 +638,7 @@
     //(6) setup trapframe for user environment
     struct trapframe *tf = current->tf;
     memset(tf, 0, sizeof(struct trapframe));
-    /* LAB5:EXERCISE1 YOUR CODE
+    /* LAB5:EXERCISE1 2012011268
      * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
      * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
      *          tf_cs should be USER_CS segment (see memlayout.h)
@@ -612,6 +647,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
     ret = 0;
 out:
     return ret;
diff -r -u -P _lab6/kern/process/proc.c~ lab6/kern/process/proc.c~
--- _lab6/kern/process/proc.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/process/proc.c~	2020-05-28 01:38:35.177519207 +0800
@@ -0,0 +1,908 @@
+#include <proc.h>
+#include <kmalloc.h>
+#include <string.h>
+#include <sync.h>
+#include <pmm.h>
+#include <error.h>
+#include <sched.h>
+#include <elf.h>
+#include <vmm.h>
+#include <trap.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <unistd.h>
+
+/* ------------- process/thread mechanism design&implementation -------------
+(an simplified Linux process/thread mechanism )
+introduction:
+  ucore implements a simple process/thread mechanism. process contains the independent memory sapce, at least one threads
+for execution, the kernel data(for management), processor state (for context switch), files(in lab6), etc. ucore needs to
+manage all these details efficiently. In ucore, a thread is just a special kind of process(share process's memory).
+------------------------------
+process state       :     meaning               -- reason
+    PROC_UNINIT     :   uninitialized           -- alloc_proc
+    PROC_SLEEPING   :   sleeping                -- try_free_pages, do_wait, do_sleep
+    PROC_RUNNABLE   :   runnable(maybe running) -- proc_init, wakeup_proc, 
+    PROC_ZOMBIE     :   almost dead             -- do_exit
+
+-----------------------------
+process state changing:
+                                            
+  alloc_proc                                 RUNNING
+      +                                   +--<----<--+
+      +                                   + proc_run +
+      V                                   +-->---->--+ 
+PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING --
+                                           A      +                                                           +
+                                           |      +--- do_exit --> PROC_ZOMBIE                                +
+                                           +                                                                  + 
+                                           -----------------------wakeup_proc----------------------------------
+-----------------------------
+process relations
+parent:           proc->parent  (proc is children)
+children:         proc->cptr    (proc is parent)
+older sibling:    proc->optr    (proc is younger sibling)
+younger sibling:  proc->yptr    (proc is older sibling)
+-----------------------------
+related syscall for process:
+SYS_exit        : process exit,                           -->do_exit
+SYS_fork        : create child process, dup mm            -->do_fork-->wakeup_proc
+SYS_wait        : wait process                            -->do_wait
+SYS_exec        : after fork, process execute a program   -->load a program and refresh the mm
+SYS_clone       : create child thread                     -->do_fork-->wakeup_proc
+SYS_yield       : process flag itself need resecheduling, -- proc->need_sched=1, then scheduler will rescheule this process
+SYS_sleep       : process sleep                           -->do_sleep 
+SYS_kill        : kill process                            -->do_kill-->proc->flags |= PF_EXITING
+                                                                 -->wakeup_proc-->do_wait-->do_exit   
+SYS_getpid      : get the process's pid
+
+*/
+
+// the process set's list
+list_entry_t proc_list;
+
+#define HASH_SHIFT          10
+#define HASH_LIST_SIZE      (1 << HASH_SHIFT)
+#define pid_hashfn(x)       (hash32(x, HASH_SHIFT))
+
+// has list for process set based on pid
+static list_entry_t hash_list[HASH_LIST_SIZE];
+
+// idle proc
+struct proc_struct *idleproc = NULL;
+// init proc
+struct proc_struct *initproc = NULL;
+// current proc
+struct proc_struct *current = NULL;
+
+static int nr_process = 0;
+
+void kernel_thread_entry(void);
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+    if (proc != NULL) {
+    //LAB4:EXERCISE1 2012011268
+    /*
+     * below fields in proc_struct need to be initialized
+     *       enum proc_state state;                      // Process state
+     *       int pid;                                    // Process ID
+     *       int runs;                                   // the running times of Proces
+     *       uintptr_t kstack;                           // Process kernel stack
+     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+     *       struct proc_struct *parent;                 // the parent process
+     *       struct mm_struct *mm;                       // Process's memory management field
+     *       struct context context;                     // Switch here to run process
+     *       struct trapframe *tf;                       // Trap frame for current interrupt
+     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+     *       uint32_t flags;                             // Process flag
+     *       char name[PROC_NAME_LEN + 1];               // Process name
+     */
+     //LAB5 YOUR CODE : (update LAB4 steps)
+    /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+     //LAB6 YOUR CODE : (update LAB5 steps)
+    /*
+     * below fields(add in LAB6) in proc_struct need to be initialized
+     *     struct run_queue *rq;                       // running queue contains Process
+     *     list_entry_t run_link;                      // the entry linked in run queue
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+        proc->wait_state = 0;
+        proc->cptr = proc->yptr = proc->optr = NULL;
+    }
+    return proc;
+}
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+    memset(proc->name, 0, sizeof(proc->name));
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+}
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+}
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+    list_add(&proc_list, &(proc->list_link));
+    proc->yptr = NULL;
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+        proc->optr->yptr = proc;
+    }
+    proc->parent->cptr = proc;
+    nr_process ++;
+}
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+    list_del(&(proc->list_link));
+    if (proc->optr != NULL) {
+        proc->optr->yptr = proc->yptr;
+    }
+    if (proc->yptr != NULL) {
+        proc->yptr->optr = proc->optr;
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+    }
+    nr_process --;
+}
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+        last_pid = 1;
+        goto inside;
+    }
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+            proc = le2proc(le, list_link);
+            if (proc->pid == last_pid) {
+                if (++ last_pid >= next_safe) {
+                    if (last_pid >= MAX_PID) {
+                        last_pid = 1;
+                    }
+                    next_safe = MAX_PID;
+                    goto repeat;
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+}
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+    if (proc != current) {
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+        local_intr_save(intr_flag);
+        {
+            current = proc;
+            load_esp0(next->kstack + KSTACKSIZE);
+            lcr3(next->cr3);
+            switch_to(&(prev->context), &(next->context));
+        }
+        local_intr_restore(intr_flag);
+    }
+}
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+    forkrets(current->tf);
+}
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+}
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+    list_del(&(proc->hash_link));
+}
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+            struct proc_struct *proc = le2proc(le, hash_link);
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+}
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+    tf.tf_cs = KERNEL_CS;
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+}
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+    struct Page *page = alloc_pages(KSTACKPAGE);
+    if (page != NULL) {
+        proc->kstack = (uintptr_t)page2kva(page);
+        return 0;
+    }
+    return -E_NO_MEM;
+}
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+}
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+        return -E_NO_MEM;
+    }
+    pde_t *pgdir = page2kva(page);
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+    mm->pgdir = pgdir;
+    return 0;
+}
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+    free_page(kva2page(mm->pgdir));
+}
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+    struct mm_struct *mm, *oldmm = current->mm;
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+        return 0;
+    }
+    if (clone_flags & CLONE_VM) {
+        mm = oldmm;
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+    {
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+}
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+    *(proc->tf) = *tf;
+    proc->tf->tf_regs.reg_eax = 0;
+    proc->tf->tf_esp = esp;
+    proc->tf->tf_eflags |= FL_IF;
+
+    proc->context.eip = (uintptr_t)forkret;
+    proc->context.esp = (uintptr_t)(proc->tf);
+}
+
+/* do_fork -     parent process for a new child process
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+    //LAB4:EXERCISE2 2012011268
+    /*
+     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)
+     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack
+     *   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags
+     *                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+     *   copy_thread:  setup the trapframe on the  process's kernel stack top and
+     *                 setup the kernel entry point and stack of process
+     *   hash_proc:    add proc into proc hash_list
+     *   get_pid:      alloc a unique pid for process
+     *   wakeup_proc:  set proc->state = PROC_RUNNABLE
+     * VARIABLES:
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+    assert(current->wait_state == 0);
+    proc->parent = current;
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+    //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
+    //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
+    //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
+
+    //LAB5 2012011268 : (update LAB4 steps)
+   /* Some Functions
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+    goto fork_out;
+}
+
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+    if (current == idleproc) {
+        panic("idleproc exit.\n");
+    }
+    if (current == initproc) {
+        panic("initproc exit.\n");
+    }
+    
+    struct mm_struct *mm = current->mm;
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    current->state = PROC_ZOMBIE;
+    current->exit_code = error_code;
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+            proc = current->cptr;
+            current->cptr = proc->optr;
+    
+            proc->yptr = NULL;
+            if ((proc->optr = initproc->cptr) != NULL) {
+                initproc->cptr->yptr = proc;
+            }
+            proc->parent = initproc;
+            initproc->cptr = proc;
+            if (proc->state == PROC_ZOMBIE) {
+                if (initproc->wait_state == WT_CHILD) {
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+    
+    schedule();
+    panic("do_exit will not return!! %d.\n", current->pid);
+}
+
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+    if (current->mm != NULL) {
+        panic("load_icode: current->mm must be empty.\n");
+    }
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+        ret = -E_INVAL_ELF;
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+    current->mm = mm;
+    current->cr3 = PADDR(mm->pgdir);
+    lcr3(PADDR(mm->pgdir));
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+    memset(tf, 0, sizeof(struct trapframe));
+    /* LAB5:EXERCISE1 2012011268
+     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
+     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
+     *          tf_cs should be USER_CS segment (see memlayout.h)
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+}
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+    struct mm_struct *mm = current->mm;
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+        return -E_INVAL;
+    }
+    if (len > PROC_NAME_LEN) {
+        len = PROC_NAME_LEN;
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+    memcpy(local_name, name, len);
+
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+    current->need_resched = 1;
+    return 0;
+}
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+    struct mm_struct *mm = current->mm;
+    if (code_store != NULL) {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+            return -E_INVAL;
+        }
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+    if (pid != 0) {
+        proc = find_proc(pid);
+        if (proc != NULL && proc->parent == current) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+        current->state = PROC_SLEEPING;
+        current->wait_state = WT_CHILD;
+        schedule();
+        if (current->flags & PF_EXITING) {
+            do_exit(-E_KILLED);
+        }
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+        panic("wait idleproc or initproc.\n");
+    }
+    if (code_store != NULL) {
+        *code_store = proc->exit_code;
+    }
+    local_intr_save(intr_flag);
+    {
+        unhash_proc(proc);
+        remove_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    put_kstack(proc);
+    kfree(proc);
+    return 0;
+}
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+        if (!(proc->flags & PF_EXITING)) {
+            proc->flags |= PF_EXITING;
+            if (proc->wait_state & WT_INTERRUPTED) {
+                wakeup_proc(proc);
+            }
+            return 0;
+        }
+        return -E_KILLED;
+    }
+    return -E_INVAL;
+}
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+    int ret, len = strlen(name);
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+}
+
+#define __KERNEL_EXECVE(name, binary, size) ({                          \
+            cprintf("kernel_execve: pid = %d, name = \"%s\".\n",        \
+                    current->pid, name);                                \
+            kernel_execve(name, binary, (size_t)(size));                \
+        })
+
+#define KERNEL_EXECVE(x) ({                                             \
+            extern unsigned char _binary_obj___user_##x##_out_start[],  \
+                _binary_obj___user_##x##_out_size[];                    \
+            __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,     \
+                            _binary_obj___user_##x##_out_size);         \
+        })
+
+#define __KERNEL_EXECVE2(x, xstart, xsize) ({                           \
+            extern unsigned char xstart[], xsize[];                     \
+            __KERNEL_EXECVE(#x, xstart, (size_t)xsize);                 \
+        })
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+    size_t nr_free_pages_store = nr_free_pages();
+    size_t kernel_allocated_store = kallocated();
+
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+    assert(nr_process == 2);
+    assert(list_next(&proc_list) == &(initproc->list_link));
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+
+    cprintf("init check memory pass.\n");
+    return 0;
+}
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+        panic("cannot alloc idleproc.\n");
+    }
+
+    idleproc->pid = 0;
+    idleproc->state = PROC_RUNNABLE;
+    idleproc->kstack = (uintptr_t)bootstack;
+    idleproc->need_resched = 1;
+    set_proc_name(idleproc, "idle");
+    nr_process ++;
+
+    current = idleproc;
+
+    int pid = kernel_thread(init_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create init_main failed.\n");
+    }
+
+    initproc = find_proc(pid);
+    set_proc_name(initproc, "init");
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+    assert(initproc != NULL && initproc->pid == 1);
+}
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+    while (1) {
+        if (current->need_resched) {
+            schedule();
+        }
+    }
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+}
diff -r -u -P _lab6/kern/process/proc.c.orig lab6/kern/process/proc.c.orig
--- _lab6/kern/process/proc.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/process/proc.c.orig	2020-05-26 17:16:54.406663000 +0800
@@ -0,0 +1,873 @@
+#include <proc.h>
+#include <kmalloc.h>
+#include <string.h>
+#include <sync.h>
+#include <pmm.h>
+#include <error.h>
+#include <sched.h>
+#include <elf.h>
+#include <vmm.h>
+#include <trap.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <unistd.h>
+
+/* ------------- process/thread mechanism design&implementation -------------
+(an simplified Linux process/thread mechanism )
+introduction:
+  ucore implements a simple process/thread mechanism. process contains the independent memory sapce, at least one threads
+for execution, the kernel data(for management), processor state (for context switch), files(in lab6), etc. ucore needs to
+manage all these details efficiently. In ucore, a thread is just a special kind of process(share process's memory).
+------------------------------
+process state       :     meaning               -- reason
+    PROC_UNINIT     :   uninitialized           -- alloc_proc
+    PROC_SLEEPING   :   sleeping                -- try_free_pages, do_wait, do_sleep
+    PROC_RUNNABLE   :   runnable(maybe running) -- proc_init, wakeup_proc, 
+    PROC_ZOMBIE     :   almost dead             -- do_exit
+
+-----------------------------
+process state changing:
+                                            
+  alloc_proc                                 RUNNING
+      +                                   +--<----<--+
+      +                                   + proc_run +
+      V                                   +-->---->--+ 
+PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING --
+                                           A      +                                                           +
+                                           |      +--- do_exit --> PROC_ZOMBIE                                +
+                                           +                                                                  + 
+                                           -----------------------wakeup_proc----------------------------------
+-----------------------------
+process relations
+parent:           proc->parent  (proc is children)
+children:         proc->cptr    (proc is parent)
+older sibling:    proc->optr    (proc is younger sibling)
+younger sibling:  proc->yptr    (proc is older sibling)
+-----------------------------
+related syscall for process:
+SYS_exit        : process exit,                           -->do_exit
+SYS_fork        : create child process, dup mm            -->do_fork-->wakeup_proc
+SYS_wait        : wait process                            -->do_wait
+SYS_exec        : after fork, process execute a program   -->load a program and refresh the mm
+SYS_clone       : create child thread                     -->do_fork-->wakeup_proc
+SYS_yield       : process flag itself need resecheduling, -- proc->need_sched=1, then scheduler will rescheule this process
+SYS_sleep       : process sleep                           -->do_sleep 
+SYS_kill        : kill process                            -->do_kill-->proc->flags |= PF_EXITING
+                                                                 -->wakeup_proc-->do_wait-->do_exit   
+SYS_getpid      : get the process's pid
+
+*/
+
+// the process set's list
+list_entry_t proc_list;
+
+#define HASH_SHIFT          10
+#define HASH_LIST_SIZE      (1 << HASH_SHIFT)
+#define pid_hashfn(x)       (hash32(x, HASH_SHIFT))
+
+// has list for process set based on pid
+static list_entry_t hash_list[HASH_LIST_SIZE];
+
+// idle proc
+struct proc_struct *idleproc = NULL;
+// init proc
+struct proc_struct *initproc = NULL;
+// current proc
+struct proc_struct *current = NULL;
+
+static int nr_process = 0;
+
+void kernel_thread_entry(void);
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+    if (proc != NULL) {
+    //LAB4:EXERCISE1 YOUR CODE
+    /*
+     * below fields in proc_struct need to be initialized
+     *       enum proc_state state;                      // Process state
+     *       int pid;                                    // Process ID
+     *       int runs;                                   // the running times of Proces
+     *       uintptr_t kstack;                           // Process kernel stack
+     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+     *       struct proc_struct *parent;                 // the parent process
+     *       struct mm_struct *mm;                       // Process's memory management field
+     *       struct context context;                     // Switch here to run process
+     *       struct trapframe *tf;                       // Trap frame for current interrupt
+     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+     *       uint32_t flags;                             // Process flag
+     *       char name[PROC_NAME_LEN + 1];               // Process name
+     */
+     //LAB5 YOUR CODE : (update LAB4 steps)
+    /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+     //LAB6 YOUR CODE : (update LAB5 steps)
+    /*
+     * below fields(add in LAB6) in proc_struct need to be initialized
+     *     struct run_queue *rq;                       // running queue contains Process
+     *     list_entry_t run_link;                      // the entry linked in run queue
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+    }
+    return proc;
+}
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+    memset(proc->name, 0, sizeof(proc->name));
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+}
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+}
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+    list_add(&proc_list, &(proc->list_link));
+    proc->yptr = NULL;
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+        proc->optr->yptr = proc;
+    }
+    proc->parent->cptr = proc;
+    nr_process ++;
+}
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+    list_del(&(proc->list_link));
+    if (proc->optr != NULL) {
+        proc->optr->yptr = proc->yptr;
+    }
+    if (proc->yptr != NULL) {
+        proc->yptr->optr = proc->optr;
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+    }
+    nr_process --;
+}
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+        last_pid = 1;
+        goto inside;
+    }
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+            proc = le2proc(le, list_link);
+            if (proc->pid == last_pid) {
+                if (++ last_pid >= next_safe) {
+                    if (last_pid >= MAX_PID) {
+                        last_pid = 1;
+                    }
+                    next_safe = MAX_PID;
+                    goto repeat;
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+}
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+    if (proc != current) {
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+        local_intr_save(intr_flag);
+        {
+            current = proc;
+            load_esp0(next->kstack + KSTACKSIZE);
+            lcr3(next->cr3);
+            switch_to(&(prev->context), &(next->context));
+        }
+        local_intr_restore(intr_flag);
+    }
+}
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+    forkrets(current->tf);
+}
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+}
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+    list_del(&(proc->hash_link));
+}
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+            struct proc_struct *proc = le2proc(le, hash_link);
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+}
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+    tf.tf_cs = KERNEL_CS;
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+}
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+    struct Page *page = alloc_pages(KSTACKPAGE);
+    if (page != NULL) {
+        proc->kstack = (uintptr_t)page2kva(page);
+        return 0;
+    }
+    return -E_NO_MEM;
+}
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+}
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+        return -E_NO_MEM;
+    }
+    pde_t *pgdir = page2kva(page);
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+    mm->pgdir = pgdir;
+    return 0;
+}
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+    free_page(kva2page(mm->pgdir));
+}
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+    struct mm_struct *mm, *oldmm = current->mm;
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+        return 0;
+    }
+    if (clone_flags & CLONE_VM) {
+        mm = oldmm;
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+    {
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+}
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+    *(proc->tf) = *tf;
+    proc->tf->tf_regs.reg_eax = 0;
+    proc->tf->tf_esp = esp;
+    proc->tf->tf_eflags |= FL_IF;
+
+    proc->context.eip = (uintptr_t)forkret;
+    proc->context.esp = (uintptr_t)(proc->tf);
+}
+
+/* do_fork -     parent process for a new child process
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+    //LAB4:EXERCISE2 YOUR CODE
+    /*
+     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)
+     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack
+     *   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags
+     *                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+     *   copy_thread:  setup the trapframe on the  process's kernel stack top and
+     *                 setup the kernel entry point and stack of process
+     *   hash_proc:    add proc into proc hash_list
+     *   get_pid:      alloc a unique pid for process
+     *   wakeup_proc:  set proc->state = PROC_RUNNABLE
+     * VARIABLES:
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    //    4. call copy_thread to setup tf & context in proc_struct
+    //    5. insert proc_struct into hash_list && proc_list
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    //    7. set ret vaule using child proc's pid
+
+	//LAB5 YOUR CODE : (update LAB4 steps)
+   /* Some Functions
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+    goto fork_out;
+}
+
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+    if (current == idleproc) {
+        panic("idleproc exit.\n");
+    }
+    if (current == initproc) {
+        panic("initproc exit.\n");
+    }
+    
+    struct mm_struct *mm = current->mm;
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    current->state = PROC_ZOMBIE;
+    current->exit_code = error_code;
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+            proc = current->cptr;
+            current->cptr = proc->optr;
+    
+            proc->yptr = NULL;
+            if ((proc->optr = initproc->cptr) != NULL) {
+                initproc->cptr->yptr = proc;
+            }
+            proc->parent = initproc;
+            initproc->cptr = proc;
+            if (proc->state == PROC_ZOMBIE) {
+                if (initproc->wait_state == WT_CHILD) {
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+    
+    schedule();
+    panic("do_exit will not return!! %d.\n", current->pid);
+}
+
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+    if (current->mm != NULL) {
+        panic("load_icode: current->mm must be empty.\n");
+    }
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+        ret = -E_INVAL_ELF;
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+            if (end < la) {
+                size -= la - end;
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+    current->mm = mm;
+    current->cr3 = PADDR(mm->pgdir);
+    lcr3(PADDR(mm->pgdir));
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+    memset(tf, 0, sizeof(struct trapframe));
+    /* LAB5:EXERCISE1 YOUR CODE
+     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
+     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
+     *          tf_cs should be USER_CS segment (see memlayout.h)
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+}
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+    struct mm_struct *mm = current->mm;
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+        return -E_INVAL;
+    }
+    if (len > PROC_NAME_LEN) {
+        len = PROC_NAME_LEN;
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+    memcpy(local_name, name, len);
+
+    if (mm != NULL) {
+        lcr3(boot_cr3);
+        if (mm_count_dec(mm) == 0) {
+            exit_mmap(mm);
+            put_pgdir(mm);
+            mm_destroy(mm);
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+    current->need_resched = 1;
+    return 0;
+}
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+    struct mm_struct *mm = current->mm;
+    if (code_store != NULL) {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+            return -E_INVAL;
+        }
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+    if (pid != 0) {
+        proc = find_proc(pid);
+        if (proc != NULL && proc->parent == current) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+        current->state = PROC_SLEEPING;
+        current->wait_state = WT_CHILD;
+        schedule();
+        if (current->flags & PF_EXITING) {
+            do_exit(-E_KILLED);
+        }
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+        panic("wait idleproc or initproc.\n");
+    }
+    if (code_store != NULL) {
+        *code_store = proc->exit_code;
+    }
+    local_intr_save(intr_flag);
+    {
+        unhash_proc(proc);
+        remove_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    put_kstack(proc);
+    kfree(proc);
+    return 0;
+}
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+        if (!(proc->flags & PF_EXITING)) {
+            proc->flags |= PF_EXITING;
+            if (proc->wait_state & WT_INTERRUPTED) {
+                wakeup_proc(proc);
+            }
+            return 0;
+        }
+        return -E_KILLED;
+    }
+    return -E_INVAL;
+}
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+    int ret, len = strlen(name);
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+}
+
+#define __KERNEL_EXECVE(name, binary, size) ({                          \
+            cprintf("kernel_execve: pid = %d, name = \"%s\".\n",        \
+                    current->pid, name);                                \
+            kernel_execve(name, binary, (size_t)(size));                \
+        })
+
+#define KERNEL_EXECVE(x) ({                                             \
+            extern unsigned char _binary_obj___user_##x##_out_start[],  \
+                _binary_obj___user_##x##_out_size[];                    \
+            __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,     \
+                            _binary_obj___user_##x##_out_size);         \
+        })
+
+#define __KERNEL_EXECVE2(x, xstart, xsize) ({                           \
+            extern unsigned char xstart[], xsize[];                     \
+            __KERNEL_EXECVE(#x, xstart, (size_t)xsize);                 \
+        })
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+    size_t nr_free_pages_store = nr_free_pages();
+    size_t kernel_allocated_store = kallocated();
+
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+    assert(nr_process == 2);
+    assert(list_next(&proc_list) == &(initproc->list_link));
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+
+    cprintf("init check memory pass.\n");
+    return 0;
+}
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+        panic("cannot alloc idleproc.\n");
+    }
+
+    idleproc->pid = 0;
+    idleproc->state = PROC_RUNNABLE;
+    idleproc->kstack = (uintptr_t)bootstack;
+    idleproc->need_resched = 1;
+    set_proc_name(idleproc, "idle");
+    nr_process ++;
+
+    current = idleproc;
+
+    int pid = kernel_thread(init_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create init_main failed.\n");
+    }
+
+    initproc = find_proc(pid);
+    set_proc_name(initproc, "init");
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+    assert(initproc != NULL && initproc->pid == 1);
+}
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+    while (1) {
+        if (current->need_resched) {
+            schedule();
+        }
+    }
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+}
diff -r -u -P _lab6/kern/process/proc.c.rej lab6/kern/process/proc.c.rej
--- _lab6/kern/process/proc.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/process/proc.c.rej	2020-05-28 01:27:47.772204547 +0800
@@ -0,0 +1,30 @@
+--- kern/process/proc.c	2020-05-26 17:16:54.402663000 +0800
++++ kern/process/proc.c	2020-05-27 15:18:05.708583848 +0800
+@@ -103,12 +103,26 @@
+      *       uint32_t flags;                             // Process flag
+      *       char name[PROC_NAME_LEN + 1];               // Process name
+      */
+-     //LAB5 YOUR CODE : (update LAB4 steps)
++     //LAB5 2012011268 : (update LAB4 steps)
+     /*
+      * below fields(add in LAB5) in proc_struct need to be initialized	
+      *       uint32_t wait_state;                        // waiting state
+      *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+ 	 */
++        proc->state = PROC_UNINIT;
++        proc->pid = -1;
++        proc->runs = 0;
++        proc->kstack = 0;
++        proc->need_resched = 0;
++        proc->parent = NULL;
++        proc->mm = NULL;
++        memset(&(proc->context), 0, sizeof(struct context));
++        proc->tf = NULL;
++        proc->cr3 = boot_cr3;
++        proc->flags = 0;
++        memset(proc->name, 0, PROC_NAME_LEN + 1);
++        proc->wait_state = 0;
++        proc->cptr = proc->yptr = proc->optr = NULL;
+     }
+     return proc;
+ }
diff -r -u -P _lab6/kern/schedule/default_sched.c~ lab6/kern/schedule/default_sched.c~
--- _lab6/kern/schedule/default_sched.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/schedule/default_sched.c~	2020-05-28 02:58:20.433519207 +0800
@@ -0,0 +1,150 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: 2016011446 */
+#define BIG_STRIDE 0x7fffffff /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
+}
+
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+     /* LAB6: 2016011446 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+    list_init(&(rq->run_list));
+    rq->lab6_run_pool = NULL;
+    rq->proc_num = 0;
+}
+
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    ++rq->proc_num;
+}
+
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    --rq->proc_num;
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: 2016011446 
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_pool
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+    struct proc_struct* p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+    if (p->lab6_priority == 0) p->lab6_stride += BIG_STRIDE;
+    else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+    return p;
+}
+
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2016011446 */
+    if (proc->time_slice > 0) --proc->time_slice;
+    if (proc->time_slice == 0) proc->need_resched = 1;
+}
+
+struct sched_class default_sched_class = {
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
+};
diff -r -u -P _lab6/kern/schedule/default_sched_stride_c lab6/kern/schedule/default_sched_stride_c
--- _lab6/kern/schedule/default_sched_stride_c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/schedule/default_sched_stride_c	2020-05-28 03:00:30.369519207 +0800
@@ -7,8 +7,8 @@
 #define USE_SKEW_HEAP 1
 
 /* You should define the BigStride constant here*/
-/* LAB6: YOUR CODE */
-#define BIG_STRIDE    /* you should give a value, and is ??? */
+/* LAB6: 2012011268 */
+#define BIG_STRIDE ((uint32_t) 2012011268)   /* you should give a value, and is ??? */
 
 /* The compare function for two skew_heap_node_t's and the
  * corresponding procs*/
@@ -36,11 +36,14 @@
  */
 static void
 stride_init(struct run_queue *rq) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) init the ready process list: rq->run_list
       * (2) init the run pool: rq->lab6_run_pool
       * (3) set number of process: rq->proc_num to 0       
       */
+	list_init(&rq->run_list);
+	rq->lab6_run_pool = NULL;
+	rq->proc_num = 0;
 }
 
 /*
@@ -58,7 +61,7 @@
  */
 static void
 stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268
       * (1) insert the proc into rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
       *         skew_heap_insert: insert a entry into skew_heap
@@ -67,6 +70,12 @@
       * (3) set proc->rq pointer to rq
       * (4) increase rq->proc_num
       */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+		proc->time_slice = rq->max_time_slice;
+	}
+	proc->rq = rq;
+	rq->proc_num ++;
 }
 
 /*
@@ -79,12 +88,14 @@
  */
 static void
 stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) remove the proc from rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
       *         skew_heap_remove: remove a entry from skew_heap
       *         list_del_init: remove a entry from the  list
       */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
+	rq->proc_num --;
 }
 /*
  * stride_pick_next pick the element from the ``run-queue'', with the
@@ -101,13 +112,17 @@
  */
 static struct proc_struct *
 stride_pick_next(struct run_queue *rq) {
-     /* LAB6: YOUR CODE 
+     /* LAB6: 2012011268 
       * (1) get a  proc_struct pointer p  with the minimum value of stride
              (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
              (1.2) If using list, we have to search list to find the p with minimum stride value
       * (2) update p;s stride value: p->lab6_stride
       * (3) return p
       */
+    struct proc_struct* p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+    if (p->lab6_priority == 0) p->lab6_stride += BIG_STRIDE;
+    else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+    return p;
 }
 
 /*
@@ -120,7 +135,9 @@
  */
 static void
 stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE */
+     /* LAB6: 2012011268 */
+    if (proc->time_slice > 0) --proc->time_slice;
+    if (proc->time_slice == 0) proc->need_resched = 1;
 }
 
 struct sched_class default_sched_class = {
diff -r -u -P _lab6/kern/schedule/default_sched_stride_c~ lab6/kern/schedule/default_sched_stride_c~
--- _lab6/kern/schedule/default_sched_stride_c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/schedule/default_sched_stride_c~	2020-05-26 17:16:54.406663000 +0800
@@ -0,0 +1,133 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: YOUR CODE */
+#define BIG_STRIDE    /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
+}
+
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+     /* LAB6: YOUR CODE 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+}
+
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE 
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+}
+
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE 
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: YOUR CODE 
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+}
+
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: YOUR CODE */
+}
+
+struct sched_class default_sched_class = {
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
+};
diff -r -u -P _lab6/kern/trap/trap.c lab6/kern/trap/trap.c
--- _lab6/kern/trap/trap.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/trap/trap.c	2020-05-28 03:06:54.321519207 +0800
@@ -42,7 +42,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
+     /* LAB1 2012011268 : STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -54,9 +54,21 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-     /* LAB5 YOUR CODE */ 
+     /* LAB5 2012011268 */ 
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+		if (i == T_SYSCALL) {
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
 }
 
 static const char *
@@ -224,11 +236,13 @@
         /* you should upate you lab1 code (just add ONE or TWO lines of code):
          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
          */
-        /* LAB6 YOUR CODE */
+        /* LAB6 2012011268 */
         /* you should upate you lab5 code
          * IMPORTANT FUNCTIONS:
 	     * sched_class_proc_tick
          */
+	    ticks ++;
+	    sched_class_proc_tick(current);
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
diff -r -u -P _lab6/kern/trap/trap.c~ lab6/kern/trap/trap.c~
--- _lab6/kern/trap/trap.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/trap/trap.c~	2020-05-28 01:27:47.772204547 +0800
@@ -0,0 +1,306 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 2012011268 : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 2012011268 */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+		if (i == T_SYSCALL) {
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab6/kern/trap/trap.c.orig lab6/kern/trap/trap.c.orig
--- _lab6/kern/trap/trap.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/trap/trap.c.orig	2020-05-26 17:16:54.406663000 +0800
@@ -0,0 +1,294 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab6/kern/trap/trap.c.orig~ lab6/kern/trap/trap.c.orig~
--- _lab6/kern/trap/trap.c.orig~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/trap/trap.c.orig~	2020-05-28 01:27:47.772204547 +0800
@@ -0,0 +1,289 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+  
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P _lab6/kern/trap/trap.c.rej lab6/kern/trap/trap.c.rej
--- _lab6/kern/trap/trap.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/trap/trap.c.rej	2020-05-28 01:27:47.772204547 +0800
@@ -0,0 +1,16 @@
+--- kern/trap/trap.c	2020-05-26 17:16:54.402663000 +0800
++++ kern/trap/trap.c	2020-05-27 15:17:00.096583848 +0800
+@@ -236,7 +248,12 @@
+          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+          */
+   
+-        break;
++	ticks++;
++	if(ticks % TICK_NUM == 0)
++		//assert(current != NULL);
++		//ticks = 0;
++		current->need_resched = 1;
++         break;
+     case IRQ_OFFSET + IRQ_COM1:
+         c = cons_getc();
+         cprintf("serial [%03d] %c\n", c, c);
diff -r -u -P _lab6/kern/trap/vectors.S lab6/kern/trap/vectors.S
--- _lab6/kern/trap/vectors.S	2020-05-26 17:16:54.406663000 +0800
+++ lab6/kern/trap/vectors.S	2020-05-28 01:27:47.772204547 +0800
@@ -47,7 +47,6 @@
   jmp __alltraps
 .globl vector9
 vector9:
-  pushl $0
   pushl $9
   jmp __alltraps
 .globl vector10
diff -r -u -P _lab6/Makefile lab6/Makefile
--- _lab6/Makefile	2020-05-26 17:16:54.402663000 +0800
+++ lab6/Makefile	2020-05-28 01:27:47.772204547 +0800
@@ -48,13 +48,13 @@
 HOSTCC		:= gcc
 HOSTCFLAGS	:= -g -Wall -O2
 CC		:= $(GCCPREFIX)gcc
-CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
+CFLAGS	:= -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
 CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 else
 HOSTCC		:= clang
 HOSTCFLAGS	:= -g -Wall -O2
 CC		:= clang
-CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -g -m32 -nostdinc $(DEFS)
+CFLAGS	:= -fno-builtin -fno-PIC -Wall -g -m32 -mno-sse -nostdinc $(DEFS)
 CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 endif
 
@@ -62,7 +62,7 @@
 CTYPE	:= c S
 
 LD      := $(GCCPREFIX)ld
-LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
+LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
 LDFLAGS	+= -nostdlib
 
 OBJCOPY := $(GCCPREFIX)objcopy
diff -r -u -P _lab6/Makefile~ lab6/Makefile~
--- _lab6/Makefile~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/Makefile~	2020-05-28 01:27:47.772204547 +0800
@@ -0,0 +1,343 @@
+PROJ	:= 5
+EMPTY	:=
+SPACE	:= $(EMPTY) $(EMPTY)
+SLASH	:= /
+
+V       := @
+#need llvm/cang-3.5+
+#USELLVM := 1
+# try to infer the correct GCCPREFX
+ifndef GCCPREFIX
+GCCPREFIX := $(shell if i386-ucore-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-ucore-elf-'; \
+	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
+	then echo ''; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find an i386-ucore-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-ucore-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-ucore-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-ucore-elf-', set your GCCPREFIX" 1>&2; \
+	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
+	echo "*** To turn off this error, run 'gmake GCCPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# try to infer the correct QEMU
+ifndef QEMU
+QEMU := $(shell if which qemu-system-i386 > /dev/null; \
+	then echo 'qemu-system-i386'; exit; \
+	elif which i386-elf-qemu > /dev/null; \
+	then echo 'i386-elf-qemu'; exit; \
+	elif which qemu > /dev/null; \
+	then echo 'qemu'; exit; \
+	else \
+	echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
+	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# eliminate default suffix rules
+.SUFFIXES: .c .S .h
+
+# delete target files if there is an error (or make is interrupted)
+.DELETE_ON_ERROR:
+
+# define compiler and flags
+ifndef  USELLVM
+HOSTCC		:= gcc
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= $(GCCPREFIX)gcc
+CFLAGS	:= -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+else
+HOSTCC		:= clang
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= $(GCCPREFIX)clang
+CFLAGS	:= -fno-builtin -Wall -g -m32 -mno-sse -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+endif
+
+GDB		:= $(GCCPREFIX)gdb
+CTYPE	:= c S
+
+LD      := $(GCCPREFIX)ld
+LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
+LDFLAGS	+= -nostdlib
+
+OBJCOPY := $(GCCPREFIX)objcopy
+OBJDUMP := $(GCCPREFIX)objdump
+
+COPY	:= cp
+MKDIR   := mkdir -p
+MV		:= mv
+RM		:= rm -f
+AWK		:= awk
+SED		:= sed
+SH		:= sh
+TR		:= tr
+TOUCH	:= touch -c
+
+OBJDIR	:= obj
+BINDIR	:= bin
+
+ALLOBJS	:=
+ALLDEPS	:=
+TARGETS	:=
+
+include tools/function.mk
+
+listf_cc = $(call listf,$(1),$(CTYPE))
+
+USER_PREFIX	:= __user_
+
+# for cc
+add_files_cc = $(call add_files,$(1),$(CC),$(CFLAGS) $(3),$(2),$(4))
+create_target_cc = $(call create_target,$(1),$(2),$(3),$(CC),$(CFLAGS))
+
+# for hostcc
+add_files_host = $(call add_files,$(1),$(HOSTCC),$(HOSTCFLAGS),$(2),$(3))
+create_target_host = $(call create_target,$(1),$(2),$(3),$(HOSTCC),$(HOSTCFLAGS))
+
+cgtype = $(patsubst %.$(2),%.$(3),$(1))
+objfile = $(call toobj,$(1))
+asmfile = $(call cgtype,$(call toobj,$(1)),o,asm)
+outfile = $(call cgtype,$(call toobj,$(1)),o,out)
+symfile = $(call cgtype,$(call toobj,$(1)),o,sym)
+filename = $(basename $(notdir $(1)))
+ubinfile = $(call outfile,$(addprefix $(USER_PREFIX),$(call filename,$(1))))
+
+# for match pattern
+match = $(shell echo $(2) | $(AWK) '{for(i=1;i<=NF;i++){if(match("$(1)","^"$$(i)"$$")){exit 1;}}}'; echo $$?)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+# include kernel/user
+
+INCLUDE	+= libs/
+
+CFLAGS	+= $(addprefix -I,$(INCLUDE))
+
+LIBDIR	+= libs
+
+$(call add_files_cc,$(call listf_cc,$(LIBDIR)),libs,)
+
+# -------------------------------------------------------------------
+# user programs
+
+UINCLUDE	+= user/include/ \
+			   user/libs/
+
+USRCDIR		+= user
+
+ULIBDIR		+= user/libs
+
+UCFLAGS		+= $(addprefix -I,$(UINCLUDE))
+USER_BINS	:=
+
+$(call add_files_cc,$(call listf_cc,$(ULIBDIR)),ulibs,$(UCFLAGS))
+$(call add_files_cc,$(call listf_cc,$(USRCDIR)),uprog,$(UCFLAGS))
+
+UOBJS	:= $(call read_packet,ulibs libs)
+
+define uprog_ld
+__user_bin__ := $$(call ubinfile,$(1))
+USER_BINS += $$(__user_bin__)
+$$(__user_bin__): tools/user.ld
+$$(__user_bin__): $$(UOBJS)
+$$(__user_bin__): $(1) | $$$$(dir $$$$@)
+	$(V)$(LD) $(LDFLAGS) -T tools/user.ld -o $$@ $$(UOBJS) $(1)
+	@$(OBJDUMP) -S $$@ > $$(call cgtype,$$<,o,asm)
+	@$(OBJDUMP) -t $$@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$$$/d' > $$(call cgtype,$$<,o,sym)
+endef
+
+$(foreach p,$(call read_packet,uprog),$(eval $(call uprog_ld,$(p))))
+
+# -------------------------------------------------------------------
+# kernel
+
+KINCLUDE	+= kern/debug/ \
+			   kern/driver/ \
+			   kern/trap/ \
+			   kern/mm/ \
+			   kern/libs/ \
+			   kern/sync/ \
+			   kern/fs/    \
+			   kern/process \
+			   kern/schedule \
+			   kern/syscall
+
+KSRCDIR		+= kern/init \
+			   kern/libs \
+			   kern/debug \
+			   kern/driver \
+			   kern/trap \
+			   kern/mm \
+			   kern/sync \
+			   kern/fs    \
+			   kern/process \
+			   kern/schedule \
+			   kern/syscall
+
+KCFLAGS		+= $(addprefix -I,$(KINCLUDE))
+
+$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,$(KCFLAGS))
+
+KOBJS	= $(call read_packet,kernel libs)
+
+# create kernel target
+kernel = $(call totarget,kernel)
+
+$(kernel): tools/kernel.ld
+
+$(kernel): $(KOBJS) $(USER_BINS)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) -b binary $(USER_BINS)
+	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
+	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel)
+
+$(call create_target,kernel)
+
+# -------------------------------------------------------------------
+
+# create bootblock
+bootfiles = $(call listf_cc,boot)
+$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))
+
+bootblock = $(call totarget,bootblock)
+
+$(bootblock): $(call toobj,boot/bootasm.S) $(call toobj,$(bootfiles)) | $(call totarget,sign)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -N -T tools/boot.ld $^ -o $(call toobj,bootblock)
+	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
+	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
+	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
+
+$(call create_target,bootblock)
+
+# -------------------------------------------------------------------
+
+# create 'sign' tools
+$(call add_files_host,tools/sign.c,sign,sign)
+$(call create_target_host,sign,sign)
+
+# -------------------------------------------------------------------
+
+# create ucore.img
+UCOREIMG	:= $(call totarget,ucore.img)
+
+$(UCOREIMG): $(kernel) $(bootblock)
+	$(V)dd if=/dev/zero of=$@ count=10000
+	$(V)dd if=$(bootblock) of=$@ conv=notrunc
+	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
+
+$(call create_target,ucore.img)
+
+# -------------------------------------------------------------------
+
+# create swap.img
+SWAPIMG		:= $(call totarget,swap.img)
+
+$(SWAPIMG):
+	$(V)dd if=/dev/zero of=$@ bs=1024k count=128
+
+$(call create_target,swap.img)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+
+$(call finish_all)
+
+IGNORE_ALLDEPS	= clean \
+				  dist-clean \
+				  grade \
+				  touch \
+				  print-.+ \
+				  run-.+ \
+				  build-.+ \
+				  handin
+
+ifeq ($(call match,$(MAKECMDGOALS),$(IGNORE_ALLDEPS)),0)
+-include $(ALLDEPS)
+endif
+
+# files for grade script
+
+TARGETS: $(TARGETS)
+
+.DEFAULT_GOAL := TARGETS
+
+QEMUOPTS = -hda $(UCOREIMG) -drive file=$(SWAPIMG),media=disk,cache=writeback
+
+.PHONY: qemu qemu-nox debug debug-nox
+qemu-mon: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -monitor stdio $(QEMUOPTS) -serial null
+qemu: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -parallel stdio $(QEMUOPTS) -serial null
+
+qemu-nox: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU)  -no-reboot -serial mon:stdio $(QEMUOPTS) -nographic
+
+TERMINAL := gnome-terminal
+
+debug: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU) -S -s -parallel stdio $(QEMUOPTS) -serial null &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
+
+debug-nox: $(UCOREIMG) $(SWAPIMG)
+	$(V)$(QEMU) -S -s -serial mon:stdio $(QEMUOPTS) -nographic &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
+
+RUN_PREFIX	:= _binary_$(OBJDIR)_$(USER_PREFIX)
+MAKEOPTS	:= --quiet --no-print-directory
+
+run-%: build-%
+	$(V)$(QEMU) -parallel stdio $(QEMUOPTS) -serial null
+
+run-nox-%: build-%
+	$(V)$(QEMU) -serial mon:stdio $(QEMUOPTS) -nographic
+
+build-%: touch
+	$(V)$(MAKE) $(MAKEOPTS) "DEFS+=-DTEST=$* -DTESTSTART=$(RUN_PREFIX)$*_out_start -DTESTSIZE=$(RUN_PREFIX)$*_out_size"
+
+.PHONY: grade touch
+
+GRADE_GDB_IN	:= .gdb.in
+GRADE_QEMU_OUT	:= .qemu.out
+HANDIN			:= proj$(PROJ)-handin.tar.gz
+
+TOUCH_FILES		:= kern/process/proc.c
+
+MAKEOPTS		:= --quiet --no-print-directory
+
+grade:
+	$(V)$(MAKE) $(MAKEOPTS) clean
+	$(V)$(SH) tools/grade.sh
+
+touch:
+	$(V)$(foreach f,$(TOUCH_FILES),$(TOUCH) $(f))
+
+print-%:
+	@echo $($(shell echo $(patsubst print-%,%,$@) | $(TR) [a-z] [A-Z]))
+
+.PHONY: clean dist-clean handin packall tags
+clean:
+	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT) cscope* tags
+	-$(RM) -r $(OBJDIR) $(BINDIR)
+
+dist-clean: clean
+	-$(RM) $(HANDIN)
+
+handin: packall
+	@echo Please visit http://learn.tsinghua.edu.cn and upload $(HANDIN). Thanks!
+
+packall: clean
+	@$(RM) -f $(HANDIN)
+	@tar -czf $(HANDIN) `find . -type f -o -type d | grep -v '^\.*$$' | grep -vF '$(HANDIN)'`
+
+tags:
+	@echo TAGS ALL
+	$(V)rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
+	$(V)find . -type f -name "*.[chS]" >cscope.files
+	$(V)cscope -bq 
+	$(V)ctags -L cscope.files
diff -r -u -P _lab6/obj/boot/bootasm.d lab6/obj/boot/bootasm.d
--- _lab6/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/boot/bootasm.d	2020-05-28 03:10:52.857519207 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files _lab6/obj/boot/bootasm.o and lab6/obj/boot/bootasm.o differ
diff -r -u -P _lab6/obj/boot/bootmain.d lab6/obj/boot/bootmain.d
--- _lab6/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/boot/bootmain.d	2020-05-28 03:10:52.901519207 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files _lab6/obj/boot/bootmain.o and lab6/obj/boot/bootmain.o differ
diff -r -u -P _lab6/obj/bootblock.asm lab6/obj/bootblock.asm
--- _lab6/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/bootblock.asm	2020-05-28 03:10:57.589519207 +0800
@@ -0,0 +1,433 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf 04 80 66 b8       	mov    $0xb8668004,%edi
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	ac                   	lods   %ds:(%esi),%al
+    7c5d:	7d 0f                	jge    7c6e <protcseg+0x1>
+    movl %cr0, %eax
+    7c5f:	20 c0                	and    %al,%al
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea 6d 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c6d
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 61 00 00 00       	call   7ceb <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readsect>:
+        /* do nothing */;
+}
+
+/* readsect - read a single sector at @secno into @dst */
+static void
+readsect(void *dst, uint32_t secno) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 d1                	mov    %edx,%ecx
+    7c8f:	89 e5                	mov    %esp,%ebp
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7c91:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c96:	57                   	push   %edi
+    7c97:	89 c7                	mov    %eax,%edi
+    7c99:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7c9a:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c9d:	3c 40                	cmp    $0x40,%al
+    7c9f:	75 f8                	jne    7c99 <readsect+0xd>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7ca1:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca6:	b0 01                	mov    $0x1,%al
+    7ca8:	ee                   	out    %al,(%dx)
+    7ca9:	0f b6 c1             	movzbl %cl,%eax
+    7cac:	b2 f3                	mov    $0xf3,%dl
+    7cae:	ee                   	out    %al,(%dx)
+    7caf:	0f b6 c5             	movzbl %ch,%eax
+    7cb2:	b2 f4                	mov    $0xf4,%dl
+    7cb4:	ee                   	out    %al,(%dx)
+    waitdisk();
+
+    outb(0x1F2, 1);                         // count = 1
+    outb(0x1F3, secno & 0xFF);
+    outb(0x1F4, (secno >> 8) & 0xFF);
+    outb(0x1F5, (secno >> 16) & 0xFF);
+    7cb5:	89 c8                	mov    %ecx,%eax
+    7cb7:	b2 f5                	mov    $0xf5,%dl
+    7cb9:	c1 e8 10             	shr    $0x10,%eax
+    7cbc:	0f b6 c0             	movzbl %al,%eax
+    7cbf:	ee                   	out    %al,(%dx)
+    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
+    7cc0:	c1 e9 18             	shr    $0x18,%ecx
+    7cc3:	b2 f6                	mov    $0xf6,%dl
+    7cc5:	88 c8                	mov    %cl,%al
+    7cc7:	83 e0 0f             	and    $0xf,%eax
+    7cca:	83 c8 e0             	or     $0xffffffe0,%eax
+    7ccd:	ee                   	out    %al,(%dx)
+    7cce:	b0 20                	mov    $0x20,%al
+    7cd0:	b2 f7                	mov    $0xf7,%dl
+    7cd2:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cd3:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cd4:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cd7:	3c 40                	cmp    $0x40,%al
+    7cd9:	75 f8                	jne    7cd3 <readsect+0x47>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7cdb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7ce0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7ce5:	fc                   	cld    
+    7ce6:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    // wait for disk to be ready
+    waitdisk();
+
+    // read a sector
+    insl(0x1F0, dst, SECTSIZE / 4);
+}
+    7ce8:	5f                   	pop    %edi
+    7ce9:	5d                   	pop    %ebp
+    7cea:	c3                   	ret    
+
+00007ceb <bootmain>:
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7ceb:	55                   	push   %ebp
+    7cec:	89 e5                	mov    %esp,%ebp
+    7cee:	57                   	push   %edi
+    7cef:	56                   	push   %esi
+    7cf0:	53                   	push   %ebx
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7cf1:	bb 01 00 00 00       	mov    $0x1,%ebx
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7cf6:	83 ec 1c             	sub    $0x1c,%esp
+    7cf9:	8d 43 7f             	lea    0x7f(%ebx),%eax
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+        readsect((void *)va, secno);
+    7cfc:	89 da                	mov    %ebx,%edx
+    7cfe:	c1 e0 09             	shl    $0x9,%eax
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d01:	43                   	inc    %ebx
+        readsect((void *)va, secno);
+    7d02:	e8 85 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d07:	83 fb 09             	cmp    $0x9,%ebx
+    7d0a:	75 ed                	jne    7cf9 <bootmain+0xe>
+bootmain(void) {
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d0c:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d13:	45 4c 46 
+    7d16:	75 6a                	jne    7d82 <bootmain+0x97>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d18:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d1d:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d23:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
+    7d2a:	c1 e0 05             	shl    $0x5,%eax
+    7d2d:	01 d8                	add    %ebx,%eax
+    7d2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for (; ph < eph; ph ++) {
+    7d32:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+    7d35:	73 3f                	jae    7d76 <bootmain+0x8b>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d37:	8b 73 08             	mov    0x8(%ebx),%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d3a:	8b 43 14             	mov    0x14(%ebx),%eax
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d3d:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    7d40:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+    7d46:	01 f0                	add    %esi,%eax
+    7d48:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d4b:	89 c8                	mov    %ecx,%eax
+    7d4d:	25 ff 01 00 00       	and    $0x1ff,%eax
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d52:	c1 e9 09             	shr    $0x9,%ecx
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7d55:	29 c6                	sub    %eax,%esi
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7d57:	8d 79 01             	lea    0x1(%ecx),%edi
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d5a:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+    7d5d:	73 12                	jae    7d71 <bootmain+0x86>
+        readsect((void *)va, secno);
+    7d5f:	89 fa                	mov    %edi,%edx
+    7d61:	89 f0                	mov    %esi,%eax
+    7d63:	e8 24 ff ff ff       	call   7c8c <readsect>
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d68:	81 c6 00 02 00 00    	add    $0x200,%esi
+    7d6e:	47                   	inc    %edi
+    7d6f:	eb e9                	jmp    7d5a <bootmain+0x6f>
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d71:	83 c3 20             	add    $0x20,%ebx
+    7d74:	eb bc                	jmp    7d32 <bootmain+0x47>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d76:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d7b:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d80:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d82:	b8 00 8a ff ff       	mov    $0xffff8a00,%eax
+    7d87:	89 c2                	mov    %eax,%edx
+    7d89:	66 ef                	out    %ax,(%dx)
+    7d8b:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d90:	66 ef                	out    %ax,(%dx)
+    7d92:	eb fe                	jmp    7d92 <bootmain+0xa7>
Binary files _lab6/obj/bootblock.o and lab6/obj/bootblock.o differ
Binary files _lab6/obj/bootblock.out and lab6/obj/bootblock.out differ
diff -r -u -P _lab6/obj/kern/debug/kdebug.d lab6/obj/kern/debug/kdebug.d
--- _lab6/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/kdebug.d	2020-05-28 03:10:53.349519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h kern/mm/vmm.h kern/process/proc.h \
+ kern/trap/trap.h kern/debug/kdebug.h kern/debug/kmonitor.h
Binary files _lab6/obj/kern/debug/kdebug.o and lab6/obj/kern/debug/kdebug.o differ
diff -r -u -P _lab6/obj/kern/debug/kmonitor.d lab6/obj/kern/debug/kmonitor.d
--- _lab6/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/kmonitor.d	2020-05-28 03:10:53.437519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files _lab6/obj/kern/debug/kmonitor.o and lab6/obj/kern/debug/kmonitor.o differ
diff -r -u -P _lab6/obj/kern/debug/panic.d lab6/obj/kern/debug/panic.d
--- _lab6/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/panic.d	2020-05-28 03:10:53.309519207 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files _lab6/obj/kern/debug/panic.o and lab6/obj/kern/debug/panic.o differ
diff -r -u -P _lab6/obj/kern/driver/clock.d lab6/obj/kern/driver/clock.d
--- _lab6/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/clock.d	2020-05-28 03:10:53.221519207 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files _lab6/obj/kern/driver/clock.o and lab6/obj/kern/driver/clock.o differ
diff -r -u -P _lab6/obj/kern/driver/console.d lab6/obj/kern/driver/console.d
--- _lab6/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/console.d	2020-05-28 03:10:53.365519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h
Binary files _lab6/obj/kern/driver/console.o and lab6/obj/kern/driver/console.o differ
diff -r -u -P _lab6/obj/kern/driver/ide.d lab6/obj/kern/driver/ide.d
--- _lab6/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/ide.d	2020-05-28 03:10:53.301519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files _lab6/obj/kern/driver/ide.o and lab6/obj/kern/driver/ide.o differ
diff -r -u -P _lab6/obj/kern/driver/intr.d lab6/obj/kern/driver/intr.d
--- _lab6/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/intr.d	2020-05-28 03:10:53.277519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files _lab6/obj/kern/driver/intr.o and lab6/obj/kern/driver/intr.o differ
diff -r -u -P _lab6/obj/kern/driver/picirq.d lab6/obj/kern/driver/picirq.d
--- _lab6/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/picirq.d	2020-05-28 03:10:53.177519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files _lab6/obj/kern/driver/picirq.o and lab6/obj/kern/driver/picirq.o differ
diff -r -u -P _lab6/obj/kern/fs/swapfs.d lab6/obj/kern/fs/swapfs.d
--- _lab6/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/fs/swapfs.d	2020-05-28 03:10:53.145519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/fs/swapfs.h kern/fs/fs.h kern/driver/ide.h
Binary files _lab6/obj/kern/fs/swapfs.o and lab6/obj/kern/fs/swapfs.o differ
diff -r -u -P _lab6/obj/kern/init/entry.d lab6/obj/kern/init/entry.d
--- _lab6/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/init/entry.d	2020-05-28 03:10:53.397519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files _lab6/obj/kern/init/entry.o and lab6/obj/kern/init/entry.o differ
diff -r -u -P _lab6/obj/kern/init/init.d lab6/obj/kern/init/init.d
--- _lab6/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/init/init.d	2020-05-28 03:10:53.473519207 +0800
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/driver/ide.h kern/mm/swap.h kern/process/proc.h \
+ kern/debug/kmonitor.h
Binary files _lab6/obj/kern/init/init.o and lab6/obj/kern/init/init.o differ
diff -r -u -P _lab6/obj/kern/libs/readline.d lab6/obj/kern/libs/readline.d
--- _lab6/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/libs/readline.d	2020-05-28 03:10:53.237519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files _lab6/obj/kern/libs/readline.o and lab6/obj/kern/libs/readline.o differ
diff -r -u -P _lab6/obj/kern/libs/stdio.d lab6/obj/kern/libs/stdio.d
--- _lab6/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/libs/stdio.d	2020-05-28 03:10:53.345519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files _lab6/obj/kern/libs/stdio.o and lab6/obj/kern/libs/stdio.o differ
diff -r -u -P _lab6/obj/kern/mm/default_pmm.d lab6/obj/kern/mm/default_pmm.d
--- _lab6/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/default_pmm.d	2020-05-28 03:10:53.213519207 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files _lab6/obj/kern/mm/default_pmm.o and lab6/obj/kern/mm/default_pmm.o differ
diff -r -u -P _lab6/obj/kern/mm/kmalloc.d lab6/obj/kern/mm/kmalloc.d
--- _lab6/obj/kern/mm/kmalloc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/kmalloc.d	2020-05-28 03:10:53.153519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/mm/pmm.h libs/stdio.h libs/stdarg.h
Binary files _lab6/obj/kern/mm/kmalloc.o and lab6/obj/kern/mm/kmalloc.o differ
diff -r -u -P _lab6/obj/kern/mm/pmm.d lab6/obj/kern/mm/pmm.d
--- _lab6/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/pmm.d	2020-05-28 03:10:53.129519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h libs/error.h \
+ kern/mm/swap.h kern/mm/vmm.h kern/mm/kmalloc.h
Binary files _lab6/obj/kern/mm/pmm.o and lab6/obj/kern/mm/pmm.o differ
diff -r -u -P _lab6/obj/kern/mm/swap.d lab6/obj/kern/mm/swap.d
--- _lab6/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/swap.d	2020-05-28 03:10:53.105519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h kern/trap/trap.h
diff -r -u -P _lab6/obj/kern/mm/swap_fifo.d lab6/obj/kern/mm/swap_fifo.d
--- _lab6/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/swap_fifo.d	2020-05-28 03:10:53.077519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap_fifo.h
Binary files _lab6/obj/kern/mm/swap_fifo.o and lab6/obj/kern/mm/swap_fifo.o differ
Binary files _lab6/obj/kern/mm/swap.o and lab6/obj/kern/mm/swap.o differ
diff -r -u -P _lab6/obj/kern/mm/vmm.d lab6/obj/kern/mm/vmm.d
--- _lab6/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/vmm.d	2020-05-28 03:10:53.101519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h libs/skew_heap.h libs/string.h \
+ libs/stdio.h libs/stdarg.h libs/error.h kern/mm/pmm.h kern/mm/swap.h \
+ kern/mm/kmalloc.h
Binary files _lab6/obj/kern/mm/vmm.o and lab6/obj/kern/mm/vmm.o differ
diff -r -u -P _lab6/obj/kern/process/entry.d lab6/obj/kern/process/entry.d
--- _lab6/obj/kern/process/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/entry.d	2020-05-28 03:10:53.057519207 +0800
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
Binary files _lab6/obj/kern/process/entry.o and lab6/obj/kern/process/entry.o differ
diff -r -u -P _lab6/obj/kern/process/proc.d lab6/obj/kern/process/proc.d
--- _lab6/obj/kern/process/proc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/proc.d	2020-05-28 03:11:58.541519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/skew_heap.h kern/mm/kmalloc.h \
+ libs/string.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h \
+ libs/error.h libs/elf.h kern/mm/vmm.h libs/stdio.h libs/stdarg.h \
+ libs/stdlib.h libs/unistd.h
Binary files _lab6/obj/kern/process/proc.o and lab6/obj/kern/process/proc.o differ
diff -r -u -P _lab6/obj/kern/process/switch.d lab6/obj/kern/process/switch.d
--- _lab6/obj/kern/process/switch.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/switch.d	2020-05-28 03:10:53.017519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
Binary files _lab6/obj/kern/process/switch.o and lab6/obj/kern/process/switch.o differ
diff -r -u -P _lab6/obj/kern/schedule/default_sched.d lab6/obj/kern/schedule/default_sched.d
--- _lab6/obj/kern/schedule/default_sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/schedule/default_sched.d	2020-05-28 03:10:52.993519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched.o obj/kern/schedule/default_sched.d: \
+ kern/schedule/default_sched.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
Binary files _lab6/obj/kern/schedule/default_sched.o and lab6/obj/kern/schedule/default_sched.o differ
diff -r -u -P _lab6/obj/kern/schedule/sched.d lab6/obj/kern/schedule/sched.d
--- _lab6/obj/kern/schedule/sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/schedule/sched.d	2020-05-28 03:10:53.065519207 +0800
@@ -0,0 +1,6 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h libs/skew_heap.h kern/process/proc.h \
+ kern/trap/trap.h kern/mm/memlayout.h libs/stdio.h libs/stdarg.h \
+ kern/schedule/default_sched.h
Binary files _lab6/obj/kern/schedule/sched.o and lab6/obj/kern/schedule/sched.o differ
diff -r -u -P _lab6/obj/kern/syscall/syscall.d lab6/obj/kern/syscall/syscall.d
--- _lab6/obj/kern/syscall/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/syscall/syscall.d	2020-05-28 03:10:52.949519207 +0800
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/syscall/syscall.h libs/stdio.h libs/stdarg.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/driver/clock.h
Binary files _lab6/obj/kern/syscall/syscall.o and lab6/obj/kern/syscall/syscall.o differ
diff -r -u -P _lab6/obj/kern/trap/trap.d lab6/obj/kern/trap/trap.d
--- _lab6/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/trap.d	2020-05-28 03:10:53.329519207 +0800
@@ -0,0 +1,7 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h \
+ libs/unistd.h kern/syscall/syscall.h libs/error.h kern/process/proc.h
diff -r -u -P _lab6/obj/kern/trap/trapentry.d lab6/obj/kern/trap/trapentry.d
--- _lab6/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/trapentry.d	2020-05-28 03:10:53.177519207 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files _lab6/obj/kern/trap/trapentry.o and lab6/obj/kern/trap/trapentry.o differ
Binary files _lab6/obj/kern/trap/trap.o and lab6/obj/kern/trap/trap.o differ
diff -r -u -P _lab6/obj/kern/trap/vectors.d lab6/obj/kern/trap/vectors.d
--- _lab6/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/vectors.d	2020-05-28 03:10:53.197519207 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files _lab6/obj/kern/trap/vectors.o and lab6/obj/kern/trap/vectors.o differ
diff -r -u -P _lab6/obj/kernel.asm lab6/obj/kernel.asm
--- _lab6/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kernel.asm	2020-05-28 03:11:59.061519207 +0800
@@ -0,0 +1,23911 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+c0100000:	0f 01 15 18 c0 12 00 	lgdtl  0x12c018
+    movl $KERNEL_DS, %eax
+c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c010000c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c010000e:	8e c0                	mov    %eax,%es
+    movw %ax, %ss
+c0100010:	8e d0                	mov    %eax,%ss
+
+    ljmp $KERNEL_CS, $relocated
+c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019
+
+c0100019 <relocated>:
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010001e:	bc 00 c0 12 c0       	mov    $0xc012c000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>
+
+c0100028 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100028:	eb fe                	jmp    c0100028 <spin>
+
+c010002a <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c010002a:	55                   	push   %ebp
+c010002b:	89 e5                	mov    %esp,%ebp
+c010002d:	83 ec 28             	sub    $0x28,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c0100030:	ba 78 0f 1b c0       	mov    $0xc01b0f78,%edx
+c0100035:	b8 d4 dd 1a c0       	mov    $0xc01addd4,%eax
+c010003a:	29 c2                	sub    %eax,%edx
+c010003c:	89 d0                	mov    %edx,%eax
+c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100049:	00 
+c010004a:	c7 04 24 d4 dd 1a c0 	movl   $0xc01addd4,(%esp)
+c0100051:	e8 41 c1 00 00       	call   c010c197 <memset>
+
+    cons_init();                // init the console
+c0100056:	e8 6c 16 00 00       	call   c01016c7 <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c010005b:	c7 45 f4 20 c3 10 c0 	movl   $0xc010c320,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100069:	c7 04 24 3c c3 10 c0 	movl   $0xc010c33c,(%esp)
+c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>
+
+    print_kerninfo();
+c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>
+
+    grade_backtrace();
+c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010007f:	e8 6f 57 00 00       	call   c01057f3 <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c0100084:	e8 1c 20 00 00       	call   c01020a5 <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100089:	e8 94 21 00 00       	call   c0102222 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c010008e:	e8 1d 87 00 00       	call   c01087b0 <vmm_init>
+    sched_init();               // init scheduler
+c0100093:	e8 9d b2 00 00       	call   c010b335 <sched_init>
+    proc_init();                // init process table
+c0100098:	e8 63 ad 00 00       	call   c010ae00 <proc_init>
+    
+    ide_init();                 // init ide devices
+c010009d:	e8 56 17 00 00       	call   c01017f8 <ide_init>
+    swap_init();                // init swap
+c01000a2:	e8 0f 6e 00 00       	call   c0106eb6 <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000a7:	e8 d1 0d 00 00       	call   c0100e7d <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000ac:	e8 62 1f 00 00       	call   c0102013 <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000b1:	e8 09 af 00 00       	call   c010afbf <cpu_idle>
+
+c01000b6 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000b6:	55                   	push   %ebp
+c01000b7:	89 e5                	mov    %esp,%ebp
+c01000b9:	83 ec 18             	sub    $0x18,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01000c3:	00 
+c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01000cb:	00 
+c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01000d3:	e8 d7 0c 00 00       	call   c0100daf <mon_backtrace>
+}
+c01000d8:	c9                   	leave  
+c01000d9:	c3                   	ret    
+
+c01000da <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000da:	55                   	push   %ebp
+c01000db:	89 e5                	mov    %esp,%ebp
+c01000dd:	53                   	push   %ebx
+c01000de:	83 ec 14             	sub    $0x14,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
+c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01000f9:	89 04 24             	mov    %eax,(%esp)
+c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
+}
+c0100101:	83 c4 14             	add    $0x14,%esp
+c0100104:	5b                   	pop    %ebx
+c0100105:	5d                   	pop    %ebp
+c0100106:	c3                   	ret    
+
+c0100107 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c0100107:	55                   	push   %ebp
+c0100108:	89 e5                	mov    %esp,%ebp
+c010010a:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace1(arg0, arg2);
+c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100117:	89 04 24             	mov    %eax,(%esp)
+c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
+}
+c010011f:	c9                   	leave  
+c0100120:	c3                   	ret    
+
+c0100121 <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c0100121:	55                   	push   %ebp
+c0100122:	89 e5                	mov    %esp,%ebp
+c0100124:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
+c0100133:	ff 
+c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
+}
+c0100144:	c9                   	leave  
+c0100145:	c3                   	ret    
+
+c0100146 <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c0100146:	55                   	push   %ebp
+c0100147:	89 e5                	mov    %esp,%ebp
+c0100149:	83 ec 28             	sub    $0x28,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010015c:	0f b7 c0             	movzwl %ax,%eax
+c010015f:	83 e0 03             	and    $0x3,%eax
+c0100162:	89 c2                	mov    %eax,%edx
+c0100164:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100171:	c7 04 24 41 c3 10 c0 	movl   $0xc010c341,(%esp)
+c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  cs = %x\n", round, reg1);
+c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100181:	0f b7 d0             	movzwl %ax,%edx
+c0100184:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100191:	c7 04 24 4f c3 10 c0 	movl   $0xc010c34f,(%esp)
+c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  ds = %x\n", round, reg2);
+c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c01001a1:	0f b7 d0             	movzwl %ax,%edx
+c01001a4:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001b1:	c7 04 24 5d c3 10 c0 	movl   $0xc010c35d,(%esp)
+c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  es = %x\n", round, reg3);
+c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001c1:	0f b7 d0             	movzwl %ax,%edx
+c01001c4:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001d1:	c7 04 24 6b c3 10 c0 	movl   $0xc010c36b,(%esp)
+c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001e1:	0f b7 d0             	movzwl %ax,%edx
+c01001e4:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001f1:	c7 04 24 79 c3 10 c0 	movl   $0xc010c379,(%esp)
+c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
+    round ++;
+c01001fd:	a1 e0 dd 1a c0       	mov    0xc01adde0,%eax
+c0100202:	83 c0 01             	add    $0x1,%eax
+c0100205:	a3 e0 dd 1a c0       	mov    %eax,0xc01adde0
+}
+c010020a:	c9                   	leave  
+c010020b:	c3                   	ret    
+
+c010020c <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c010020c:	55                   	push   %ebp
+c010020d:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+}
+c010020f:	5d                   	pop    %ebp
+c0100210:	c3                   	ret    
+
+c0100211 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c0100211:	55                   	push   %ebp
+c0100212:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+}
+c0100214:	5d                   	pop    %ebp
+c0100215:	c3                   	ret    
+
+c0100216 <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c0100216:	55                   	push   %ebp
+c0100217:	89 e5                	mov    %esp,%ebp
+c0100219:	83 ec 18             	sub    $0x18,%esp
+    lab1_print_cur_status();
+c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c0100221:	c7 04 24 88 c3 10 c0 	movl   $0xc010c388,(%esp)
+c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
+    lab1_switch_to_user();
+c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
+    lab1_print_cur_status();
+c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c0100237:	c7 04 24 a8 c3 10 c0 	movl   $0xc010c3a8,(%esp)
+c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
+    lab1_switch_to_kernel();
+c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
+}
+c010024d:	c9                   	leave  
+c010024e:	c3                   	ret    
+
+c010024f <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c010024f:	55                   	push   %ebp
+c0100250:	89 e5                	mov    %esp,%ebp
+c0100252:	83 ec 28             	sub    $0x28,%esp
+    if (prompt != NULL) {
+c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100259:	74 13                	je     c010026e <readline+0x1f>
+        cprintf("%s", prompt);
+c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100262:	c7 04 24 c7 c3 10 c0 	movl   $0xc010c3c7,(%esp)
+c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
+    }
+    int i = 0, c;
+c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
+c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100281:	79 07                	jns    c010028a <readline+0x3b>
+            return NULL;
+c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
+c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
+            cputchar(c);
+c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010029c:	89 04 24             	mov    %eax,(%esp)
+c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
+            buf[i ++] = c;
+c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
+c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01002b0:	88 90 00 de 1a c0    	mov    %dl,-0x3fe52200(%eax)
+c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
+        }
+        else if (c == '\b' && i > 0) {
+c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
+c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
+            cputchar(c);
+c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002c7:	89 04 24             	mov    %eax,(%esp)
+c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
+            i --;
+c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
+        }
+        else if (c == '\n' || c == '\r') {
+c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01002d9:	74 06                	je     c01002e1 <readline+0x92>
+c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
+            cputchar(c);
+c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002e4:	89 04 24             	mov    %eax,(%esp)
+c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
+            buf[i] = '\0';
+c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01002ef:	05 00 de 1a c0       	add    $0xc01ade00,%eax
+c01002f4:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01002f7:	b8 00 de 1a c0       	mov    $0xc01ade00,%eax
+c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
+        }
+    }
+c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
+}
+c0100303:	c9                   	leave  
+c0100304:	c3                   	ret    
+
+c0100305 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c0100305:	55                   	push   %ebp
+c0100306:	89 e5                	mov    %esp,%ebp
+c0100308:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010030e:	89 04 24             	mov    %eax,(%esp)
+c0100311:	e8 dd 13 00 00       	call   c01016f3 <cons_putc>
+    (*cnt) ++;
+c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100319:	8b 00                	mov    (%eax),%eax
+c010031b:	8d 50 01             	lea    0x1(%eax),%edx
+c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100321:	89 10                	mov    %edx,(%eax)
+}
+c0100323:	c9                   	leave  
+c0100324:	c3                   	ret    
+
+c0100325 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c0100325:	55                   	push   %ebp
+c0100326:	89 e5                	mov    %esp,%ebp
+c0100328:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
+c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
+c010034e:	e8 85 b5 00 00       	call   c010b8d8 <vprintfmt>
+    return cnt;
+c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100356:	c9                   	leave  
+c0100357:	c3                   	ret    
+
+c0100358 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c0100358:	55                   	push   %ebp
+c0100359:	89 e5                	mov    %esp,%ebp
+c010035b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
+c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010036e:	89 04 24             	mov    %eax,(%esp)
+c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
+c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010037c:	c9                   	leave  
+c010037d:	c3                   	ret    
+
+c010037e <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c010037e:	55                   	push   %ebp
+c010037f:	89 e5                	mov    %esp,%ebp
+c0100381:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100387:	89 04 24             	mov    %eax,(%esp)
+c010038a:	e8 64 13 00 00       	call   c01016f3 <cons_putc>
+}
+c010038f:	c9                   	leave  
+c0100390:	c3                   	ret    
+
+c0100391 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c0100391:	55                   	push   %ebp
+c0100392:	89 e5                	mov    %esp,%ebp
+c0100394:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
+        cputch(c, &cnt);
+c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01003ab:	89 04 24             	mov    %eax,(%esp)
+c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
+c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
+c01003bc:	0f b6 00             	movzbl (%eax),%eax
+c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
+    return cnt;
+c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c01003de:	c9                   	leave  
+c01003df:	c3                   	ret    
+
+c01003e0 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c01003e0:	55                   	push   %ebp
+c01003e1:	89 e5                	mov    %esp,%ebp
+c01003e3:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c01003e6:	e8 44 13 00 00       	call   c010172f <cons_getc>
+c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
+        /* do nothing */;
+    return c;
+c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01003f7:	c9                   	leave  
+c01003f8:	c3                   	ret    
+
+c01003f9 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c01003f9:	55                   	push   %ebp
+c01003fa:	89 e5                	mov    %esp,%ebp
+c01003fc:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100402:	8b 00                	mov    (%eax),%eax
+c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
+c010040a:	8b 00                	mov    (%eax),%eax
+c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100421:	01 d0                	add    %edx,%eax
+c0100423:	89 c2                	mov    %eax,%edx
+c0100425:	c1 ea 1f             	shr    $0x1f,%edx
+c0100428:	01 d0                	add    %edx,%eax
+c010042a:	d1 f8                	sar    %eax
+c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
+            m --;
+c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
+c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100446:	89 d0                	mov    %edx,%eax
+c0100448:	01 c0                	add    %eax,%eax
+c010044a:	01 d0                	add    %edx,%eax
+c010044c:	c1 e0 02             	shl    $0x2,%eax
+c010044f:	89 c2                	mov    %eax,%edx
+c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100454:	01 d0                	add    %edx,%eax
+c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010045a:	0f b6 c0             	movzbl %al,%eax
+c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
+            l = true_m + 1;
+c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010046d:	83 c0 01             	add    $0x1,%eax
+c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010047f:	89 d0                	mov    %edx,%eax
+c0100481:	01 c0                	add    %eax,%eax
+c0100483:	01 d0                	add    %edx,%eax
+c0100485:	c1 e0 02             	shl    $0x2,%eax
+c0100488:	89 c2                	mov    %eax,%edx
+c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010048d:	01 d0                	add    %edx,%eax
+c010048f:	8b 40 08             	mov    0x8(%eax),%eax
+c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
+c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
+            *region_left = m;
+c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010049d:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004a2:	83 c0 01             	add    $0x1,%eax
+c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004ad:	89 d0                	mov    %edx,%eax
+c01004af:	01 c0                	add    %eax,%eax
+c01004b1:	01 d0                	add    %edx,%eax
+c01004b3:	c1 e0 02             	shl    $0x2,%eax
+c01004b6:	89 c2                	mov    %eax,%edx
+c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01004bb:	01 d0                	add    %edx,%eax
+c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
+c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
+c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004ce:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004d3:	83 e8 01             	sub    $0x1,%eax
+c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004e1:	89 10                	mov    %edx,(%eax)
+            l = m;
+c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100502:	8b 00                	mov    (%eax),%eax
+c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
+c010050a:	89 10                	mov    %edx,(%eax)
+c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100511:	8b 00                	mov    (%eax),%eax
+c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
+c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010051f:	8b 00                	mov    (%eax),%eax
+c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
+c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100529:	89 d0                	mov    %edx,%eax
+c010052b:	01 c0                	add    %eax,%eax
+c010052d:	01 d0                	add    %edx,%eax
+c010052f:	c1 e0 02             	shl    $0x2,%eax
+c0100532:	89 c2                	mov    %eax,%edx
+c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100537:	01 d0                	add    %edx,%eax
+c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010053d:	0f b6 c0             	movzbl %al,%eax
+c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010054b:	89 10                	mov    %edx,(%eax)
+    }
+}
+c010054d:	c9                   	leave  
+c010054e:	c3                   	ret    
+
+c010054f <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c010054f:	55                   	push   %ebp
+c0100550:	89 e5                	mov    %esp,%ebp
+c0100552:	83 ec 58             	sub    $0x58,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100558:	c7 00 cc c3 10 c0    	movl   $0xc010c3cc,(%eax)
+    info->eip_line = 0;
+c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010056b:	c7 40 08 cc c3 10 c0 	movl   $0xc010c3cc,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100582:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c0100598:	c7 45 f4 40 eb 10 c0 	movl   $0xc010eb40,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c010059f:	c7 45 f0 28 38 12 c0 	movl   $0xc0123828,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c01005a6:	c7 45 ec 29 38 12 c0 	movl   $0xc0123829,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c01005ad:	c7 45 e8 87 98 12 c0 	movl   $0xc0129887,-0x18(%ebp)
+c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c01005c0:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c01005c5:	85 c0                	test   %eax,%eax
+c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
+c01005c9:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
+c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
+            return -1;
+c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01005ee:	00 
+c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01005f6:	00 
+c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01005fe:	89 04 24             	mov    %eax,(%esp)
+c0100601:	e8 a0 8a 00 00       	call   c01090a6 <user_mem_check>
+c0100606:	85 c0                	test   %eax,%eax
+c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
+            return -1;
+c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+
+        stabs = usd->stabs;
+c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100617:	8b 00                	mov    (%eax),%eax
+c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010061f:	8b 40 04             	mov    0x4(%eax),%eax
+c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100628:	8b 40 08             	mov    0x8(%eax),%eax
+c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
+c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010063d:	29 c2                	sub    %eax,%edx
+c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100649:	00 
+c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100655:	89 04 24             	mov    %eax,(%esp)
+c0100658:	e8 49 8a 00 00       	call   c01090a6 <user_mem_check>
+c010065d:	85 c0                	test   %eax,%eax
+c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
+            return -1;
+c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100671:	29 c2                	sub    %eax,%edx
+c0100673:	89 d0                	mov    %edx,%eax
+c0100675:	89 c2                	mov    %eax,%edx
+c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100681:	00 
+c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010068d:	89 04 24             	mov    %eax,(%esp)
+c0100690:	e8 11 8a 00 00       	call   c01090a6 <user_mem_check>
+c0100695:	85 c0                	test   %eax,%eax
+c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
+            return -1;
+c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
+c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01006ae:	83 e8 01             	sub    $0x1,%eax
+c01006b1:	0f b6 00             	movzbl (%eax),%eax
+c01006b4:	84 c0                	test   %al,%al
+c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
+        return -1;
+c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006cf:	29 c2                	sub    %eax,%edx
+c01006d1:	89 d0                	mov    %edx,%eax
+c01006d3:	c1 f8 02             	sar    $0x2,%eax
+c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c01006dc:	83 e8 01             	sub    $0x1,%eax
+c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
+c01006f0:	00 
+c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100702:	89 04 24             	mov    %eax,(%esp)
+c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
+    if (lfile == 0)
+c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010070d:	85 c0                	test   %eax,%eax
+c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
+        return -1;
+c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
+c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
+c0100735:	00 
+c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100747:	89 04 24             	mov    %eax,(%esp)
+c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>
+
+    if (lfun <= rfun) {
+c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0100755:	39 c2                	cmp    %eax,%edx
+c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010075c:	89 c2                	mov    %eax,%edx
+c010075e:	89 d0                	mov    %edx,%eax
+c0100760:	01 c0                	add    %eax,%eax
+c0100762:	01 d0                	add    %edx,%eax
+c0100764:	c1 e0 02             	shl    $0x2,%eax
+c0100767:	89 c2                	mov    %eax,%edx
+c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010076c:	01 d0                	add    %edx,%eax
+c010076e:	8b 10                	mov    (%eax),%edx
+c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100776:	29 c1                	sub    %eax,%ecx
+c0100778:	89 c8                	mov    %ecx,%eax
+c010077a:	39 c2                	cmp    %eax,%edx
+c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100781:	89 c2                	mov    %eax,%edx
+c0100783:	89 d0                	mov    %edx,%eax
+c0100785:	01 c0                	add    %eax,%eax
+c0100787:	01 d0                	add    %edx,%eax
+c0100789:	c1 e0 02             	shl    $0x2,%eax
+c010078c:	89 c2                	mov    %eax,%edx
+c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100791:	01 d0                	add    %edx,%eax
+c0100793:	8b 10                	mov    (%eax),%edx
+c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100798:	01 c2                	add    %eax,%edx
+c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010079d:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007a3:	89 c2                	mov    %eax,%edx
+c01007a5:	89 d0                	mov    %edx,%eax
+c01007a7:	01 c0                	add    %eax,%eax
+c01007a9:	01 d0                	add    %edx,%eax
+c01007ab:	c1 e0 02             	shl    $0x2,%eax
+c01007ae:	89 c2                	mov    %eax,%edx
+c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007b3:	01 d0                	add    %edx,%eax
+c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
+c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
+c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
+c01007db:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
+c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
+c01007f7:	00 
+c01007f8:	89 04 24             	mov    %eax,(%esp)
+c01007fb:	e8 0b b8 00 00       	call   c010c00b <strfind>
+c0100800:	89 c2                	mov    %eax,%edx
+c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100805:	8b 40 08             	mov    0x8(%eax),%eax
+c0100808:	29 c2                	sub    %eax,%edx
+c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010080d:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
+c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
+c010081e:	00 
+c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100830:	89 04 24             	mov    %eax,(%esp)
+c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
+    if (lline <= rline) {
+c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010083e:	39 c2                	cmp    %eax,%edx
+c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
+        info->eip_line = stabs[rline].n_desc;
+c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0100845:	89 c2                	mov    %eax,%edx
+c0100847:	89 d0                	mov    %edx,%eax
+c0100849:	01 c0                	add    %eax,%eax
+c010084b:	01 d0                	add    %edx,%eax
+c010084d:	c1 e0 02             	shl    $0x2,%eax
+c0100850:	89 c2                	mov    %eax,%edx
+c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100855:	01 d0                	add    %edx,%eax
+c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c010085b:	0f b7 d0             	movzwl %ax,%edx
+c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100861:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100873:	83 e8 01             	sub    $0x1,%eax
+c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010087f:	39 c2                	cmp    %eax,%edx
+c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
+           && stabs[lline].n_type != N_SOL
+c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100886:	89 c2                	mov    %eax,%edx
+c0100888:	89 d0                	mov    %edx,%eax
+c010088a:	01 c0                	add    %eax,%eax
+c010088c:	01 d0                	add    %edx,%eax
+c010088e:	c1 e0 02             	shl    $0x2,%eax
+c0100891:	89 c2                	mov    %eax,%edx
+c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100896:	01 d0                	add    %edx,%eax
+c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010089c:	3c 84                	cmp    $0x84,%al
+c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008a3:	89 c2                	mov    %eax,%edx
+c01008a5:	89 d0                	mov    %edx,%eax
+c01008a7:	01 c0                	add    %eax,%eax
+c01008a9:	01 d0                	add    %edx,%eax
+c01008ab:	c1 e0 02             	shl    $0x2,%eax
+c01008ae:	89 c2                	mov    %eax,%edx
+c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008b3:	01 d0                	add    %edx,%eax
+c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01008b9:	3c 64                	cmp    $0x64,%al
+c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
+c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008c0:	89 c2                	mov    %eax,%edx
+c01008c2:	89 d0                	mov    %edx,%eax
+c01008c4:	01 c0                	add    %eax,%eax
+c01008c6:	01 d0                	add    %edx,%eax
+c01008c8:	c1 e0 02             	shl    $0x2,%eax
+c01008cb:	89 c2                	mov    %eax,%edx
+c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008d0:	01 d0                	add    %edx,%eax
+c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
+c01008d5:	85 c0                	test   %eax,%eax
+c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008df:	39 c2                	cmp    %eax,%edx
+c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
+c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008e6:	89 c2                	mov    %eax,%edx
+c01008e8:	89 d0                	mov    %edx,%eax
+c01008ea:	01 c0                	add    %eax,%eax
+c01008ec:	01 d0                	add    %edx,%eax
+c01008ee:	c1 e0 02             	shl    $0x2,%eax
+c01008f1:	89 c2                	mov    %eax,%edx
+c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008f6:	01 d0                	add    %edx,%eax
+c01008f8:	8b 10                	mov    (%eax),%edx
+c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100900:	29 c1                	sub    %eax,%ecx
+c0100902:	89 c8                	mov    %ecx,%eax
+c0100904:	39 c2                	cmp    %eax,%edx
+c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010090b:	89 c2                	mov    %eax,%edx
+c010090d:	89 d0                	mov    %edx,%eax
+c010090f:	01 c0                	add    %eax,%eax
+c0100911:	01 d0                	add    %edx,%eax
+c0100913:	c1 e0 02             	shl    $0x2,%eax
+c0100916:	89 c2                	mov    %eax,%edx
+c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010091b:	01 d0                	add    %edx,%eax
+c010091d:	8b 10                	mov    (%eax),%edx
+c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100922:	01 c2                	add    %eax,%edx
+c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100927:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010092f:	39 c2                	cmp    %eax,%edx
+c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
+        for (lline = lfun + 1;
+c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100936:	83 c0 01             	add    $0x1,%eax
+c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100941:	8b 40 14             	mov    0x14(%eax),%eax
+c0100944:	8d 50 01             	lea    0x1(%eax),%edx
+c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010094a:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100950:	83 c0 01             	add    $0x1,%eax
+c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c010095c:	39 c2                	cmp    %eax,%edx
+c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100963:	89 c2                	mov    %eax,%edx
+c0100965:	89 d0                	mov    %edx,%eax
+c0100967:	01 c0                	add    %eax,%eax
+c0100969:	01 d0                	add    %edx,%eax
+c010096b:	c1 e0 02             	shl    $0x2,%eax
+c010096e:	89 c2                	mov    %eax,%edx
+c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100973:	01 d0                	add    %edx,%eax
+c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100979:	3c a0                	cmp    $0xa0,%al
+c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100982:	c9                   	leave  
+c0100983:	c3                   	ret    
+
+c0100984 <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c0100984:	55                   	push   %ebp
+c0100985:	89 e5                	mov    %esp,%ebp
+c0100987:	83 ec 18             	sub    $0x18,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c010098a:	c7 04 24 d6 c3 10 c0 	movl   $0xc010c3d6,(%esp)
+c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
+c010099d:	c0 
+c010099e:	c7 04 24 ef c3 10 c0 	movl   $0xc010c3ef,(%esp)
+c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c01009aa:	c7 44 24 04 20 c3 10 	movl   $0xc010c320,0x4(%esp)
+c01009b1:	c0 
+c01009b2:	c7 04 24 07 c4 10 c0 	movl   $0xc010c407,(%esp)
+c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c01009be:	c7 44 24 04 d4 dd 1a 	movl   $0xc01addd4,0x4(%esp)
+c01009c5:	c0 
+c01009c6:	c7 04 24 1f c4 10 c0 	movl   $0xc010c41f,(%esp)
+c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("  end    0x%08x (phys)\n", end);
+c01009d2:	c7 44 24 04 78 0f 1b 	movl   $0xc01b0f78,0x4(%esp)
+c01009d9:	c0 
+c01009da:	c7 04 24 37 c4 10 c0 	movl   $0xc010c437,(%esp)
+c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c01009e6:	b8 78 0f 1b c0       	mov    $0xc01b0f78,%eax
+c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c01009f6:	29 c2                	sub    %eax,%edx
+c01009f8:	89 d0                	mov    %edx,%eax
+c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100a00:	85 c0                	test   %eax,%eax
+c0100a02:	0f 48 c2             	cmovs  %edx,%eax
+c0100a05:	c1 f8 0a             	sar    $0xa,%eax
+c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a0c:	c7 04 24 50 c4 10 c0 	movl   $0xc010c450,(%esp)
+c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
+}
+c0100a18:	c9                   	leave  
+c0100a19:	c3                   	ret    
+
+c0100a1a <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100a1a:	55                   	push   %ebp
+c0100a1b:	89 e5                	mov    %esp,%ebp
+c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a2d:	89 04 24             	mov    %eax,(%esp)
+c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
+c0100a35:	85 c0                	test   %eax,%eax
+c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100a40:	c7 04 24 7a c4 10 c0 	movl   $0xc010c47a,(%esp)
+c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
+c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a5d:	01 d0                	add    %edx,%eax
+c0100a5f:	0f b6 00             	movzbl (%eax),%eax
+c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100a6b:	01 ca                	add    %ecx,%edx
+c0100a6d:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a84:	01 d0                	add    %edx,%eax
+c0100a86:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100a8f:	89 d1                	mov    %edx,%ecx
+c0100a91:	29 c1                	sub    %eax,%ecx
+c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100aaf:	c7 04 24 96 c4 10 c0 	movl   $0xc010c496,(%esp)
+c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100abb:	c9                   	leave  
+c0100abc:	c3                   	ret    
+
+c0100abd <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100abd:	55                   	push   %ebp
+c0100abe:	89 e5                	mov    %esp,%ebp
+c0100ac0:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100acc:	c9                   	leave  
+c0100acd:	c3                   	ret    
+
+c0100ace <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100ace:	55                   	push   %ebp
+c0100acf:	89 e5                	mov    %esp,%ebp
+c0100ad1:	53                   	push   %ebx
+c0100ad2:	83 ec 34             	sub    $0x34,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100ad5:	89 e8                	mov    %ebp,%eax
+c0100ad7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return ebp;
+c0100ada:	8b 45 e8             	mov    -0x18(%ebp),%eax
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+c0100add:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	eip = read_eip();
+c0100ae0:	e8 d8 ff ff ff       	call   c0100abd <read_eip>
+c0100ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+c0100ae8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100aef:	eb 77                	jmp    c0100b68 <print_stackframe+0x9a>
+		cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, *((uintptr_t*)ebp+2), *((uintptr_t*)ebp+3), *((uintptr_t*)ebp+4), *((uintptr_t*)ebp+5));
+c0100af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100af4:	83 c0 14             	add    $0x14,%eax
+c0100af7:	8b 18                	mov    (%eax),%ebx
+c0100af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100afc:	83 c0 10             	add    $0x10,%eax
+c0100aff:	8b 08                	mov    (%eax),%ecx
+c0100b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b04:	83 c0 0c             	add    $0xc,%eax
+c0100b07:	8b 10                	mov    (%eax),%edx
+c0100b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b0c:	83 c0 08             	add    $0x8,%eax
+c0100b0f:	8b 00                	mov    (%eax),%eax
+c0100b11:	89 5c 24 18          	mov    %ebx,0x18(%esp)
+c0100b15:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0100b19:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0100b1d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0100b21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100b24:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b2b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b2f:	c7 04 24 a8 c4 10 c0 	movl   $0xc010c4a8,(%esp)
+c0100b36:	e8 1d f8 ff ff       	call   c0100358 <cprintf>
+		print_debuginfo(eip - 1);
+c0100b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100b3e:	83 e8 01             	sub    $0x1,%eax
+c0100b41:	89 04 24             	mov    %eax,(%esp)
+c0100b44:	e8 d1 fe ff ff       	call   c0100a1a <print_debuginfo>
+		eip = *((uintptr_t*)ebp+1);
+c0100b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b4c:	83 c0 04             	add    $0x4,%eax
+c0100b4f:	8b 00                	mov    (%eax),%eax
+c0100b51:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		ebp = *((uintptr_t*)ebp);
+c0100b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b57:	8b 00                	mov    (%eax),%eax
+c0100b59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		if(ebp == 0)
+c0100b5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100b60:	75 02                	jne    c0100b64 <print_stackframe+0x96>
+			break;
+c0100b62:	eb 0a                	jmp    c0100b6e <print_stackframe+0xa0>
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp, eip, i;
+	ebp = read_ebp();
+	eip = read_eip();
+	for(i = 0; i < STACKFRAME_DEPTH; ++i){
+c0100b64:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0100b68:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100b6c:	76 83                	jbe    c0100af1 <print_stackframe+0x23>
+		eip = *((uintptr_t*)ebp+1);
+		ebp = *((uintptr_t*)ebp);
+		if(ebp == 0)
+			break;
+	}
+}
+c0100b6e:	83 c4 34             	add    $0x34,%esp
+c0100b71:	5b                   	pop    %ebx
+c0100b72:	5d                   	pop    %ebp
+c0100b73:	c3                   	ret    
+
+c0100b74 <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100b74:	55                   	push   %ebp
+c0100b75:	89 e5                	mov    %esp,%ebp
+c0100b77:	83 ec 28             	sub    $0x28,%esp
+    int argc = 0;
+c0100b7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b81:	eb 0c                	jmp    c0100b8f <parse+0x1b>
+            *buf ++ = '\0';
+c0100b83:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b86:	8d 50 01             	lea    0x1(%eax),%edx
+c0100b89:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100b8c:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b8f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b92:	0f b6 00             	movzbl (%eax),%eax
+c0100b95:	84 c0                	test   %al,%al
+c0100b97:	74 1d                	je     c0100bb6 <parse+0x42>
+c0100b99:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b9c:	0f b6 00             	movzbl (%eax),%eax
+c0100b9f:	0f be c0             	movsbl %al,%eax
+c0100ba2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ba6:	c7 04 24 60 c5 10 c0 	movl   $0xc010c560,(%esp)
+c0100bad:	e8 26 b4 00 00       	call   c010bfd8 <strchr>
+c0100bb2:	85 c0                	test   %eax,%eax
+c0100bb4:	75 cd                	jne    c0100b83 <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100bb6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bb9:	0f b6 00             	movzbl (%eax),%eax
+c0100bbc:	84 c0                	test   %al,%al
+c0100bbe:	75 02                	jne    c0100bc2 <parse+0x4e>
+            break;
+c0100bc0:	eb 67                	jmp    c0100c29 <parse+0xb5>
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100bc2:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100bc6:	75 14                	jne    c0100bdc <parse+0x68>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100bc8:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+c0100bcf:	00 
+c0100bd0:	c7 04 24 65 c5 10 c0 	movl   $0xc010c565,(%esp)
+c0100bd7:	e8 7c f7 ff ff       	call   c0100358 <cprintf>
+        }
+        argv[argc ++] = buf;
+c0100bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bdf:	8d 50 01             	lea    0x1(%eax),%edx
+c0100be2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100bec:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100bef:	01 c2                	add    %eax,%edx
+c0100bf1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bf4:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100bf6:	eb 04                	jmp    c0100bfc <parse+0x88>
+            buf ++;
+c0100bf8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100bfc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100bff:	0f b6 00             	movzbl (%eax),%eax
+c0100c02:	84 c0                	test   %al,%al
+c0100c04:	74 1d                	je     c0100c23 <parse+0xaf>
+c0100c06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c09:	0f b6 00             	movzbl (%eax),%eax
+c0100c0c:	0f be c0             	movsbl %al,%eax
+c0100c0f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c13:	c7 04 24 60 c5 10 c0 	movl   $0xc010c560,(%esp)
+c0100c1a:	e8 b9 b3 00 00       	call   c010bfd8 <strchr>
+c0100c1f:	85 c0                	test   %eax,%eax
+c0100c21:	74 d5                	je     c0100bf8 <parse+0x84>
+            buf ++;
+        }
+    }
+c0100c23:	90                   	nop
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c24:	e9 66 ff ff ff       	jmp    c0100b8f <parse+0x1b>
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100c2c:	c9                   	leave  
+c0100c2d:	c3                   	ret    
+
+c0100c2e <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100c2e:	55                   	push   %ebp
+c0100c2f:	89 e5                	mov    %esp,%ebp
+c0100c31:	83 ec 68             	sub    $0x68,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100c34:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100c37:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c3e:	89 04 24             	mov    %eax,(%esp)
+c0100c41:	e8 2e ff ff ff       	call   c0100b74 <parse>
+c0100c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100c49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100c4d:	75 0a                	jne    c0100c59 <runcmd+0x2b>
+        return 0;
+c0100c4f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100c54:	e9 85 00 00 00       	jmp    c0100cde <runcmd+0xb0>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100c59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100c60:	eb 5c                	jmp    c0100cbe <runcmd+0x90>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100c62:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100c65:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c68:	89 d0                	mov    %edx,%eax
+c0100c6a:	01 c0                	add    %eax,%eax
+c0100c6c:	01 d0                	add    %edx,%eax
+c0100c6e:	c1 e0 02             	shl    $0x2,%eax
+c0100c71:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100c76:	8b 00                	mov    (%eax),%eax
+c0100c78:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0100c7c:	89 04 24             	mov    %eax,(%esp)
+c0100c7f:	e8 b5 b2 00 00       	call   c010bf39 <strcmp>
+c0100c84:	85 c0                	test   %eax,%eax
+c0100c86:	75 32                	jne    c0100cba <runcmd+0x8c>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100c88:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c8b:	89 d0                	mov    %edx,%eax
+c0100c8d:	01 c0                	add    %eax,%eax
+c0100c8f:	01 d0                	add    %edx,%eax
+c0100c91:	c1 e0 02             	shl    $0x2,%eax
+c0100c94:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100c99:	8b 40 08             	mov    0x8(%eax),%eax
+c0100c9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100c9f:	8d 4a ff             	lea    -0x1(%edx),%ecx
+c0100ca2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0100ca5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100ca9:	8d 55 b0             	lea    -0x50(%ebp),%edx
+c0100cac:	83 c2 04             	add    $0x4,%edx
+c0100caf:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0100cb3:	89 0c 24             	mov    %ecx,(%esp)
+c0100cb6:	ff d0                	call   *%eax
+c0100cb8:	eb 24                	jmp    c0100cde <runcmd+0xb0>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100cc1:	83 f8 02             	cmp    $0x2,%eax
+c0100cc4:	76 9c                	jbe    c0100c62 <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100cc6:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100cc9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ccd:	c7 04 24 83 c5 10 c0 	movl   $0xc010c583,(%esp)
+c0100cd4:	e8 7f f6 ff ff       	call   c0100358 <cprintf>
+    return 0;
+c0100cd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100cde:	c9                   	leave  
+c0100cdf:	c3                   	ret    
+
+c0100ce0 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100ce0:	55                   	push   %ebp
+c0100ce1:	89 e5                	mov    %esp,%ebp
+c0100ce3:	83 ec 28             	sub    $0x28,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100ce6:	c7 04 24 9c c5 10 c0 	movl   $0xc010c59c,(%esp)
+c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
+    cprintf("Type 'help' for a list of commands.\n");
+c0100cf2:	c7 04 24 c4 c5 10 c0 	movl   $0xc010c5c4,(%esp)
+c0100cf9:	e8 5a f6 ff ff       	call   c0100358 <cprintf>
+
+    if (tf != NULL) {
+c0100cfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100d02:	74 0b                	je     c0100d0f <kmonitor+0x2f>
+        print_trapframe(tf);
+c0100d04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d07:	89 04 24             	mov    %eax,(%esp)
+c0100d0a:	e8 a2 17 00 00       	call   c01024b1 <print_trapframe>
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100d0f:	c7 04 24 e9 c5 10 c0 	movl   $0xc010c5e9,(%esp)
+c0100d16:	e8 34 f5 ff ff       	call   c010024f <readline>
+c0100d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100d1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100d22:	74 18                	je     c0100d3c <kmonitor+0x5c>
+            if (runcmd(buf, tf) < 0) {
+c0100d24:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d27:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d2e:	89 04 24             	mov    %eax,(%esp)
+c0100d31:	e8 f8 fe ff ff       	call   c0100c2e <runcmd>
+c0100d36:	85 c0                	test   %eax,%eax
+c0100d38:	79 02                	jns    c0100d3c <kmonitor+0x5c>
+                break;
+c0100d3a:	eb 02                	jmp    c0100d3e <kmonitor+0x5e>
+            }
+        }
+    }
+c0100d3c:	eb d1                	jmp    c0100d0f <kmonitor+0x2f>
+}
+c0100d3e:	c9                   	leave  
+c0100d3f:	c3                   	ret    
+
+c0100d40 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100d40:	55                   	push   %ebp
+c0100d41:	89 e5                	mov    %esp,%ebp
+c0100d43:	83 ec 28             	sub    $0x28,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100d4d:	eb 3f                	jmp    c0100d8e <mon_help+0x4e>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100d4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d52:	89 d0                	mov    %edx,%eax
+c0100d54:	01 c0                	add    %eax,%eax
+c0100d56:	01 d0                	add    %edx,%eax
+c0100d58:	c1 e0 02             	shl    $0x2,%eax
+c0100d5b:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100d60:	8b 48 04             	mov    0x4(%eax),%ecx
+c0100d63:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d66:	89 d0                	mov    %edx,%eax
+c0100d68:	01 c0                	add    %eax,%eax
+c0100d6a:	01 d0                	add    %edx,%eax
+c0100d6c:	c1 e0 02             	shl    $0x2,%eax
+c0100d6f:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100d74:	8b 00                	mov    (%eax),%eax
+c0100d76:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0100d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d7e:	c7 04 24 ed c5 10 c0 	movl   $0xc010c5ed,(%esp)
+c0100d85:	e8 ce f5 ff ff       	call   c0100358 <cprintf>
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d91:	83 f8 02             	cmp    $0x2,%eax
+c0100d94:	76 b9                	jbe    c0100d4f <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100d96:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d9b:	c9                   	leave  
+c0100d9c:	c3                   	ret    
+
+c0100d9d <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100d9d:	55                   	push   %ebp
+c0100d9e:	89 e5                	mov    %esp,%ebp
+c0100da0:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100da3:	e8 dc fb ff ff       	call   c0100984 <print_kerninfo>
+    return 0;
+c0100da8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dad:	c9                   	leave  
+c0100dae:	c3                   	ret    
+
+c0100daf <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100daf:	55                   	push   %ebp
+c0100db0:	89 e5                	mov    %esp,%ebp
+c0100db2:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100db5:	e8 14 fd ff ff       	call   c0100ace <print_stackframe>
+    return 0;
+c0100dba:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dbf:	c9                   	leave  
+c0100dc0:	c3                   	ret    
+
+c0100dc1 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c0100dc1:	55                   	push   %ebp
+c0100dc2:	89 e5                	mov    %esp,%ebp
+c0100dc4:	83 ec 28             	sub    $0x28,%esp
+    if (is_panic) {
+c0100dc7:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+c0100dcc:	85 c0                	test   %eax,%eax
+c0100dce:	74 02                	je     c0100dd2 <__panic+0x11>
+        goto panic_dead;
+c0100dd0:	eb 48                	jmp    c0100e1a <__panic+0x59>
+    }
+    is_panic = 1;
+c0100dd2:	c7 05 00 e2 1a c0 01 	movl   $0x1,0xc01ae200
+c0100dd9:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c0100ddc:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100ddf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100de2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100de5:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100de9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100dec:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100df0:	c7 04 24 f6 c5 10 c0 	movl   $0xc010c5f6,(%esp)
+c0100df7:	e8 5c f5 ff ff       	call   c0100358 <cprintf>
+    vcprintf(fmt, ap);
+c0100dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100dff:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e03:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e06:	89 04 24             	mov    %eax,(%esp)
+c0100e09:	e8 17 f5 ff ff       	call   c0100325 <vcprintf>
+    cprintf("\n");
+c0100e0e:	c7 04 24 12 c6 10 c0 	movl   $0xc010c612,(%esp)
+c0100e15:	e8 3e f5 ff ff       	call   c0100358 <cprintf>
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c0100e1a:	e8 fa 11 00 00       	call   c0102019 <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100e1f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100e26:	e8 b5 fe ff ff       	call   c0100ce0 <kmonitor>
+    }
+c0100e2b:	eb f2                	jmp    c0100e1f <__panic+0x5e>
+
+c0100e2d <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100e2d:	55                   	push   %ebp
+c0100e2e:	89 e5                	mov    %esp,%ebp
+c0100e30:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100e33:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c0100e39:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100e3c:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100e40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e43:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e47:	c7 04 24 14 c6 10 c0 	movl   $0xc010c614,(%esp)
+c0100e4e:	e8 05 f5 ff ff       	call   c0100358 <cprintf>
+    vcprintf(fmt, ap);
+c0100e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e56:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e5a:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100e5d:	89 04 24             	mov    %eax,(%esp)
+c0100e60:	e8 c0 f4 ff ff       	call   c0100325 <vcprintf>
+    cprintf("\n");
+c0100e65:	c7 04 24 12 c6 10 c0 	movl   $0xc010c612,(%esp)
+c0100e6c:	e8 e7 f4 ff ff       	call   c0100358 <cprintf>
+    va_end(ap);
+}
+c0100e71:	c9                   	leave  
+c0100e72:	c3                   	ret    
+
+c0100e73 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c0100e73:	55                   	push   %ebp
+c0100e74:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c0100e76:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+}
+c0100e7b:	5d                   	pop    %ebp
+c0100e7c:	c3                   	ret    
+
+c0100e7d <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c0100e7d:	55                   	push   %ebp
+c0100e7e:	89 e5                	mov    %esp,%ebp
+c0100e80:	83 ec 28             	sub    $0x28,%esp
+c0100e83:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c0100e89:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100e8d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0100e91:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0100e95:	ee                   	out    %al,(%dx)
+c0100e96:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c0100e9c:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
+c0100ea0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100ea4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0100ea8:	ee                   	out    %al,(%dx)
+c0100ea9:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
+c0100eaf:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
+c0100eb3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0100eb7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0100ebb:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c0100ebc:	c7 05 78 0e 1b c0 00 	movl   $0x0,0xc01b0e78
+c0100ec3:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c0100ec6:	c7 04 24 32 c6 10 c0 	movl   $0xc010c632,(%esp)
+c0100ecd:	e8 86 f4 ff ff       	call   c0100358 <cprintf>
+    pic_enable(IRQ_TIMER);
+c0100ed2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0100ed9:	e8 99 11 00 00       	call   c0102077 <pic_enable>
+}
+c0100ede:	c9                   	leave  
+c0100edf:	c3                   	ret    
+
+c0100ee0 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0100ee0:	55                   	push   %ebp
+c0100ee1:	89 e5                	mov    %esp,%ebp
+c0100ee3:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0100ee6:	9c                   	pushf  
+c0100ee7:	58                   	pop    %eax
+c0100ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0100eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0100eee:	25 00 02 00 00       	and    $0x200,%eax
+c0100ef3:	85 c0                	test   %eax,%eax
+c0100ef5:	74 0c                	je     c0100f03 <__intr_save+0x23>
+        intr_disable();
+c0100ef7:	e8 1d 11 00 00       	call   c0102019 <intr_disable>
+        return 1;
+c0100efc:	b8 01 00 00 00       	mov    $0x1,%eax
+c0100f01:	eb 05                	jmp    c0100f08 <__intr_save+0x28>
+    }
+    return 0;
+c0100f03:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100f08:	c9                   	leave  
+c0100f09:	c3                   	ret    
+
+c0100f0a <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0100f0a:	55                   	push   %ebp
+c0100f0b:	89 e5                	mov    %esp,%ebp
+c0100f0d:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0100f10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100f14:	74 05                	je     c0100f1b <__intr_restore+0x11>
+        intr_enable();
+c0100f16:	e8 f8 10 00 00       	call   c0102013 <intr_enable>
+    }
+}
+c0100f1b:	c9                   	leave  
+c0100f1c:	c3                   	ret    
+
+c0100f1d <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0100f1d:	55                   	push   %ebp
+c0100f1e:	89 e5                	mov    %esp,%ebp
+c0100f20:	83 ec 10             	sub    $0x10,%esp
+c0100f23:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100f29:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0100f2d:	89 c2                	mov    %eax,%edx
+c0100f2f:	ec                   	in     (%dx),%al
+c0100f30:	88 45 fd             	mov    %al,-0x3(%ebp)
+c0100f33:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0100f39:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100f3d:	89 c2                	mov    %eax,%edx
+c0100f3f:	ec                   	in     (%dx),%al
+c0100f40:	88 45 f9             	mov    %al,-0x7(%ebp)
+c0100f43:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
+c0100f49:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f4d:	89 c2                	mov    %eax,%edx
+c0100f4f:	ec                   	in     (%dx),%al
+c0100f50:	88 45 f5             	mov    %al,-0xb(%ebp)
+c0100f53:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
+c0100f59:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0100f5d:	89 c2                	mov    %eax,%edx
+c0100f5f:	ec                   	in     (%dx),%al
+c0100f60:	88 45 f1             	mov    %al,-0xf(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c0100f63:	c9                   	leave  
+c0100f64:	c3                   	ret    
+
+c0100f65 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c0100f65:	55                   	push   %ebp
+c0100f66:	89 e5                	mov    %esp,%ebp
+c0100f68:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0100f6b:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c0100f72:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f75:	0f b7 00             	movzwl (%eax),%eax
+c0100f78:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c0100f7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f7f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c0100f84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100f87:	0f b7 00             	movzwl (%eax),%eax
+c0100f8a:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c0100f8e:	74 12                	je     c0100fa2 <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c0100f90:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c0100f97:	66 c7 05 26 e2 1a c0 	movw   $0x3b4,0xc01ae226
+c0100f9e:	b4 03 
+c0100fa0:	eb 13                	jmp    c0100fb5 <cga_init+0x50>
+    } else {
+        *cp = was;
+c0100fa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100fa5:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0100fa9:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c0100fac:	66 c7 05 26 e2 1a c0 	movw   $0x3d4,0xc01ae226
+c0100fb3:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c0100fb5:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c0100fbc:	0f b7 c0             	movzwl %ax,%eax
+c0100fbf:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0100fc3:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100fc7:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0100fcb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0100fcf:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c0100fd0:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c0100fd7:	83 c0 01             	add    $0x1,%eax
+c0100fda:	0f b7 c0             	movzwl %ax,%eax
+c0100fdd:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100fe1:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0100fe5:	89 c2                	mov    %eax,%edx
+c0100fe7:	ec                   	in     (%dx),%al
+c0100fe8:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c0100feb:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0100fef:	0f b6 c0             	movzbl %al,%eax
+c0100ff2:	c1 e0 08             	shl    $0x8,%eax
+c0100ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0100ff8:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c0100fff:	0f b7 c0             	movzwl %ax,%eax
+c0101002:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101006:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010100a:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c010100e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101012:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101013:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c010101a:	83 c0 01             	add    $0x1,%eax
+c010101d:	0f b7 c0             	movzwl %ax,%eax
+c0101020:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101024:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c0101028:	89 c2                	mov    %eax,%edx
+c010102a:	ec                   	in     (%dx),%al
+c010102b:	88 45 e5             	mov    %al,-0x1b(%ebp)
+    return data;
+c010102e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101032:	0f b6 c0             	movzbl %al,%eax
+c0101035:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101038:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010103b:	a3 20 e2 1a c0       	mov    %eax,0xc01ae220
+    crt_pos = pos;
+c0101040:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101043:	66 a3 24 e2 1a c0    	mov    %ax,0xc01ae224
+}
+c0101049:	c9                   	leave  
+c010104a:	c3                   	ret    
+
+c010104b <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c010104b:	55                   	push   %ebp
+c010104c:	89 e5                	mov    %esp,%ebp
+c010104e:	83 ec 48             	sub    $0x48,%esp
+c0101051:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101057:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010105b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010105f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101063:	ee                   	out    %al,(%dx)
+c0101064:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
+c010106a:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
+c010106e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101072:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101076:	ee                   	out    %al,(%dx)
+c0101077:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
+c010107d:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
+c0101081:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101085:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101089:	ee                   	out    %al,(%dx)
+c010108a:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c0101090:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
+c0101094:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101098:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010109c:	ee                   	out    %al,(%dx)
+c010109d:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
+c01010a3:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
+c01010a7:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01010ab:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01010af:	ee                   	out    %al,(%dx)
+c01010b0:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
+c01010b6:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+c01010ba:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c01010be:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01010c2:	ee                   	out    %al,(%dx)
+c01010c3:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
+c01010c9:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
+c01010cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01010d1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01010d5:	ee                   	out    %al,(%dx)
+c01010d6:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01010dc:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
+c01010e0:	89 c2                	mov    %eax,%edx
+c01010e2:	ec                   	in     (%dx),%al
+c01010e3:	88 45 d9             	mov    %al,-0x27(%ebp)
+    return data;
+c01010e6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c01010ea:	3c ff                	cmp    $0xff,%al
+c01010ec:	0f 95 c0             	setne  %al
+c01010ef:	0f b6 c0             	movzbl %al,%eax
+c01010f2:	a3 28 e2 1a c0       	mov    %eax,0xc01ae228
+c01010f7:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01010fd:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
+c0101101:	89 c2                	mov    %eax,%edx
+c0101103:	ec                   	in     (%dx),%al
+c0101104:	88 45 d5             	mov    %al,-0x2b(%ebp)
+c0101107:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
+c010110d:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
+c0101111:	89 c2                	mov    %eax,%edx
+c0101113:	ec                   	in     (%dx),%al
+c0101114:	88 45 d1             	mov    %al,-0x2f(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101117:	a1 28 e2 1a c0       	mov    0xc01ae228,%eax
+c010111c:	85 c0                	test   %eax,%eax
+c010111e:	74 0c                	je     c010112c <serial_init+0xe1>
+        pic_enable(IRQ_COM1);
+c0101120:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0101127:	e8 4b 0f 00 00       	call   c0102077 <pic_enable>
+    }
+}
+c010112c:	c9                   	leave  
+c010112d:	c3                   	ret    
+
+c010112e <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010112e:	55                   	push   %ebp
+c010112f:	89 e5                	mov    %esp,%ebp
+c0101131:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010113b:	eb 09                	jmp    c0101146 <lpt_putc_sub+0x18>
+        delay();
+c010113d:	e8 db fd ff ff       	call   c0100f1d <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101142:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101146:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
+c010114c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101150:	89 c2                	mov    %eax,%edx
+c0101152:	ec                   	in     (%dx),%al
+c0101153:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101156:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c010115a:	84 c0                	test   %al,%al
+c010115c:	78 09                	js     c0101167 <lpt_putc_sub+0x39>
+c010115e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101165:	7e d6                	jle    c010113d <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101167:	8b 45 08             	mov    0x8(%ebp),%eax
+c010116a:	0f b6 c0             	movzbl %al,%eax
+c010116d:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
+c0101173:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101176:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010117a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010117e:	ee                   	out    %al,(%dx)
+c010117f:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
+c0101185:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c0101189:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010118d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101191:	ee                   	out    %al,(%dx)
+c0101192:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
+c0101198:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
+c010119c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c01011a0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01011a4:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01011a5:	c9                   	leave  
+c01011a6:	c3                   	ret    
+
+c01011a7 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01011a7:	55                   	push   %ebp
+c01011a8:	89 e5                	mov    %esp,%ebp
+c01011aa:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c01011ad:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01011b1:	74 0d                	je     c01011c0 <lpt_putc+0x19>
+        lpt_putc_sub(c);
+c01011b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011b6:	89 04 24             	mov    %eax,(%esp)
+c01011b9:	e8 70 ff ff ff       	call   c010112e <lpt_putc_sub>
+c01011be:	eb 24                	jmp    c01011e4 <lpt_putc+0x3d>
+    }
+    else {
+        lpt_putc_sub('\b');
+c01011c0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c01011c7:	e8 62 ff ff ff       	call   c010112e <lpt_putc_sub>
+        lpt_putc_sub(' ');
+c01011cc:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c01011d3:	e8 56 ff ff ff       	call   c010112e <lpt_putc_sub>
+        lpt_putc_sub('\b');
+c01011d8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c01011df:	e8 4a ff ff ff       	call   c010112e <lpt_putc_sub>
+    }
+}
+c01011e4:	c9                   	leave  
+c01011e5:	c3                   	ret    
+
+c01011e6 <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c01011e6:	55                   	push   %ebp
+c01011e7:	89 e5                	mov    %esp,%ebp
+c01011e9:	53                   	push   %ebx
+c01011ea:	83 ec 34             	sub    $0x34,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c01011ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011f0:	b0 00                	mov    $0x0,%al
+c01011f2:	85 c0                	test   %eax,%eax
+c01011f4:	75 07                	jne    c01011fd <cga_putc+0x17>
+        c |= 0x0700;
+c01011f6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c01011fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101200:	0f b6 c0             	movzbl %al,%eax
+c0101203:	83 f8 0a             	cmp    $0xa,%eax
+c0101206:	74 4c                	je     c0101254 <cga_putc+0x6e>
+c0101208:	83 f8 0d             	cmp    $0xd,%eax
+c010120b:	74 57                	je     c0101264 <cga_putc+0x7e>
+c010120d:	83 f8 08             	cmp    $0x8,%eax
+c0101210:	0f 85 88 00 00 00    	jne    c010129e <cga_putc+0xb8>
+    case '\b':
+        if (crt_pos > 0) {
+c0101216:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c010121d:	66 85 c0             	test   %ax,%ax
+c0101220:	74 30                	je     c0101252 <cga_putc+0x6c>
+            crt_pos --;
+c0101222:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c0101229:	83 e8 01             	sub    $0x1,%eax
+c010122c:	66 a3 24 e2 1a c0    	mov    %ax,0xc01ae224
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101232:	a1 20 e2 1a c0       	mov    0xc01ae220,%eax
+c0101237:	0f b7 15 24 e2 1a c0 	movzwl 0xc01ae224,%edx
+c010123e:	0f b7 d2             	movzwl %dx,%edx
+c0101241:	01 d2                	add    %edx,%edx
+c0101243:	01 c2                	add    %eax,%edx
+c0101245:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101248:	b0 00                	mov    $0x0,%al
+c010124a:	83 c8 20             	or     $0x20,%eax
+c010124d:	66 89 02             	mov    %ax,(%edx)
+        }
+        break;
+c0101250:	eb 72                	jmp    c01012c4 <cga_putc+0xde>
+c0101252:	eb 70                	jmp    c01012c4 <cga_putc+0xde>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101254:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c010125b:	83 c0 50             	add    $0x50,%eax
+c010125e:	66 a3 24 e2 1a c0    	mov    %ax,0xc01ae224
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101264:	0f b7 1d 24 e2 1a c0 	movzwl 0xc01ae224,%ebx
+c010126b:	0f b7 0d 24 e2 1a c0 	movzwl 0xc01ae224,%ecx
+c0101272:	0f b7 c1             	movzwl %cx,%eax
+c0101275:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c010127b:	c1 e8 10             	shr    $0x10,%eax
+c010127e:	89 c2                	mov    %eax,%edx
+c0101280:	66 c1 ea 06          	shr    $0x6,%dx
+c0101284:	89 d0                	mov    %edx,%eax
+c0101286:	c1 e0 02             	shl    $0x2,%eax
+c0101289:	01 d0                	add    %edx,%eax
+c010128b:	c1 e0 04             	shl    $0x4,%eax
+c010128e:	29 c1                	sub    %eax,%ecx
+c0101290:	89 ca                	mov    %ecx,%edx
+c0101292:	89 d8                	mov    %ebx,%eax
+c0101294:	29 d0                	sub    %edx,%eax
+c0101296:	66 a3 24 e2 1a c0    	mov    %ax,0xc01ae224
+        break;
+c010129c:	eb 26                	jmp    c01012c4 <cga_putc+0xde>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c010129e:	8b 0d 20 e2 1a c0    	mov    0xc01ae220,%ecx
+c01012a4:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c01012ab:	8d 50 01             	lea    0x1(%eax),%edx
+c01012ae:	66 89 15 24 e2 1a c0 	mov    %dx,0xc01ae224
+c01012b5:	0f b7 c0             	movzwl %ax,%eax
+c01012b8:	01 c0                	add    %eax,%eax
+c01012ba:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c01012bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01012c0:	66 89 02             	mov    %ax,(%edx)
+        break;
+c01012c3:	90                   	nop
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c01012c4:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c01012cb:	66 3d cf 07          	cmp    $0x7cf,%ax
+c01012cf:	76 5b                	jbe    c010132c <cga_putc+0x146>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c01012d1:	a1 20 e2 1a c0       	mov    0xc01ae220,%eax
+c01012d6:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c01012dc:	a1 20 e2 1a c0       	mov    0xc01ae220,%eax
+c01012e1:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
+c01012e8:	00 
+c01012e9:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01012ed:	89 04 24             	mov    %eax,(%esp)
+c01012f0:	e8 e1 ae 00 00       	call   c010c1d6 <memmove>
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c01012f5:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c01012fc:	eb 15                	jmp    c0101313 <cga_putc+0x12d>
+            crt_buf[i] = 0x0700 | ' ';
+c01012fe:	a1 20 e2 1a c0       	mov    0xc01ae220,%eax
+c0101303:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101306:	01 d2                	add    %edx,%edx
+c0101308:	01 d0                	add    %edx,%eax
+c010130a:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c010130f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101313:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c010131a:	7e e2                	jle    c01012fe <cga_putc+0x118>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c010131c:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c0101323:	83 e8 50             	sub    $0x50,%eax
+c0101326:	66 a3 24 e2 1a c0    	mov    %ax,0xc01ae224
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c010132c:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c0101333:	0f b7 c0             	movzwl %ax,%eax
+c0101336:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c010133a:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
+c010133e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101342:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101346:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101347:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c010134e:	66 c1 e8 08          	shr    $0x8,%ax
+c0101352:	0f b6 c0             	movzbl %al,%eax
+c0101355:	0f b7 15 26 e2 1a c0 	movzwl 0xc01ae226,%edx
+c010135c:	83 c2 01             	add    $0x1,%edx
+c010135f:	0f b7 d2             	movzwl %dx,%edx
+c0101362:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
+c0101366:	88 45 ed             	mov    %al,-0x13(%ebp)
+c0101369:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010136d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101371:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101372:	0f b7 05 26 e2 1a c0 	movzwl 0xc01ae226,%eax
+c0101379:	0f b7 c0             	movzwl %ax,%eax
+c010137c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101380:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
+c0101384:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101388:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010138c:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c010138d:	0f b7 05 24 e2 1a c0 	movzwl 0xc01ae224,%eax
+c0101394:	0f b6 c0             	movzbl %al,%eax
+c0101397:	0f b7 15 26 e2 1a c0 	movzwl 0xc01ae226,%edx
+c010139e:	83 c2 01             	add    $0x1,%edx
+c01013a1:	0f b7 d2             	movzwl %dx,%edx
+c01013a4:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c01013a8:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c01013ab:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01013af:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01013b3:	ee                   	out    %al,(%dx)
+}
+c01013b4:	83 c4 34             	add    $0x34,%esp
+c01013b7:	5b                   	pop    %ebx
+c01013b8:	5d                   	pop    %ebp
+c01013b9:	c3                   	ret    
+
+c01013ba <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c01013ba:	55                   	push   %ebp
+c01013bb:	89 e5                	mov    %esp,%ebp
+c01013bd:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01013c7:	eb 09                	jmp    c01013d2 <serial_putc_sub+0x18>
+        delay();
+c01013c9:	e8 4f fb ff ff       	call   c0100f1d <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c01013ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01013d2:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01013d8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01013dc:	89 c2                	mov    %eax,%edx
+c01013de:	ec                   	in     (%dx),%al
+c01013df:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01013e2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01013e6:	0f b6 c0             	movzbl %al,%eax
+c01013e9:	83 e0 20             	and    $0x20,%eax
+c01013ec:	85 c0                	test   %eax,%eax
+c01013ee:	75 09                	jne    c01013f9 <serial_putc_sub+0x3f>
+c01013f0:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c01013f7:	7e d0                	jle    c01013c9 <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c01013f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01013fc:	0f b6 c0             	movzbl %al,%eax
+c01013ff:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+c0101405:	88 45 f5             	mov    %al,-0xb(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101408:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010140c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101410:	ee                   	out    %al,(%dx)
+}
+c0101411:	c9                   	leave  
+c0101412:	c3                   	ret    
+
+c0101413 <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101413:	55                   	push   %ebp
+c0101414:	89 e5                	mov    %esp,%ebp
+c0101416:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c0101419:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c010141d:	74 0d                	je     c010142c <serial_putc+0x19>
+        serial_putc_sub(c);
+c010141f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101422:	89 04 24             	mov    %eax,(%esp)
+c0101425:	e8 90 ff ff ff       	call   c01013ba <serial_putc_sub>
+c010142a:	eb 24                	jmp    c0101450 <serial_putc+0x3d>
+    }
+    else {
+        serial_putc_sub('\b');
+c010142c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101433:	e8 82 ff ff ff       	call   c01013ba <serial_putc_sub>
+        serial_putc_sub(' ');
+c0101438:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010143f:	e8 76 ff ff ff       	call   c01013ba <serial_putc_sub>
+        serial_putc_sub('\b');
+c0101444:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c010144b:	e8 6a ff ff ff       	call   c01013ba <serial_putc_sub>
+    }
+}
+c0101450:	c9                   	leave  
+c0101451:	c3                   	ret    
+
+c0101452 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101452:	55                   	push   %ebp
+c0101453:	89 e5                	mov    %esp,%ebp
+c0101455:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101458:	eb 33                	jmp    c010148d <cons_intr+0x3b>
+        if (c != 0) {
+c010145a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010145e:	74 2d                	je     c010148d <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101460:	a1 44 e4 1a c0       	mov    0xc01ae444,%eax
+c0101465:	8d 50 01             	lea    0x1(%eax),%edx
+c0101468:	89 15 44 e4 1a c0    	mov    %edx,0xc01ae444
+c010146e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101471:	88 90 40 e2 1a c0    	mov    %dl,-0x3fe51dc0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101477:	a1 44 e4 1a c0       	mov    0xc01ae444,%eax
+c010147c:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101481:	75 0a                	jne    c010148d <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101483:	c7 05 44 e4 1a c0 00 	movl   $0x0,0xc01ae444
+c010148a:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c010148d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101490:	ff d0                	call   *%eax
+c0101492:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101495:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101499:	75 bf                	jne    c010145a <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c010149b:	c9                   	leave  
+c010149c:	c3                   	ret    
+
+c010149d <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c010149d:	55                   	push   %ebp
+c010149e:	89 e5                	mov    %esp,%ebp
+c01014a0:	83 ec 10             	sub    $0x10,%esp
+c01014a3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014a9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01014ad:	89 c2                	mov    %eax,%edx
+c01014af:	ec                   	in     (%dx),%al
+c01014b0:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01014b3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c01014b7:	0f b6 c0             	movzbl %al,%eax
+c01014ba:	83 e0 01             	and    $0x1,%eax
+c01014bd:	85 c0                	test   %eax,%eax
+c01014bf:	75 07                	jne    c01014c8 <serial_proc_data+0x2b>
+        return -1;
+c01014c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01014c6:	eb 2a                	jmp    c01014f2 <serial_proc_data+0x55>
+c01014c8:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01014ce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01014d2:	89 c2                	mov    %eax,%edx
+c01014d4:	ec                   	in     (%dx),%al
+c01014d5:	88 45 f5             	mov    %al,-0xb(%ebp)
+    return data;
+c01014d8:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c01014dc:	0f b6 c0             	movzbl %al,%eax
+c01014df:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c01014e2:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c01014e6:	75 07                	jne    c01014ef <serial_proc_data+0x52>
+        c = '\b';
+c01014e8:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c01014ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01014f2:	c9                   	leave  
+c01014f3:	c3                   	ret    
+
+c01014f4 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c01014f4:	55                   	push   %ebp
+c01014f5:	89 e5                	mov    %esp,%ebp
+c01014f7:	83 ec 18             	sub    $0x18,%esp
+    if (serial_exists) {
+c01014fa:	a1 28 e2 1a c0       	mov    0xc01ae228,%eax
+c01014ff:	85 c0                	test   %eax,%eax
+c0101501:	74 0c                	je     c010150f <serial_intr+0x1b>
+        cons_intr(serial_proc_data);
+c0101503:	c7 04 24 9d 14 10 c0 	movl   $0xc010149d,(%esp)
+c010150a:	e8 43 ff ff ff       	call   c0101452 <cons_intr>
+    }
+}
+c010150f:	c9                   	leave  
+c0101510:	c3                   	ret    
+
+c0101511 <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101511:	55                   	push   %ebp
+c0101512:	89 e5                	mov    %esp,%ebp
+c0101514:	83 ec 38             	sub    $0x38,%esp
+c0101517:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010151d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101521:	89 c2                	mov    %eax,%edx
+c0101523:	ec                   	in     (%dx),%al
+c0101524:	88 45 ef             	mov    %al,-0x11(%ebp)
+    return data;
+c0101527:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c010152b:	0f b6 c0             	movzbl %al,%eax
+c010152e:	83 e0 01             	and    $0x1,%eax
+c0101531:	85 c0                	test   %eax,%eax
+c0101533:	75 0a                	jne    c010153f <kbd_proc_data+0x2e>
+        return -1;
+c0101535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010153a:	e9 59 01 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+c010153f:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101545:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101549:	89 c2                	mov    %eax,%edx
+c010154b:	ec                   	in     (%dx),%al
+c010154c:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c010154f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101553:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101556:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c010155a:	75 17                	jne    c0101573 <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c010155c:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c0101561:	83 c8 40             	or     $0x40,%eax
+c0101564:	a3 48 e4 1a c0       	mov    %eax,0xc01ae448
+        return 0;
+c0101569:	b8 00 00 00 00       	mov    $0x0,%eax
+c010156e:	e9 25 01 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+    } else if (data & 0x80) {
+c0101573:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101577:	84 c0                	test   %al,%al
+c0101579:	79 47                	jns    c01015c2 <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c010157b:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c0101580:	83 e0 40             	and    $0x40,%eax
+c0101583:	85 c0                	test   %eax,%eax
+c0101585:	75 09                	jne    c0101590 <kbd_proc_data+0x7f>
+c0101587:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010158b:	83 e0 7f             	and    $0x7f,%eax
+c010158e:	eb 04                	jmp    c0101594 <kbd_proc_data+0x83>
+c0101590:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101594:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101597:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010159b:	0f b6 80 60 c0 12 c0 	movzbl -0x3fed3fa0(%eax),%eax
+c01015a2:	83 c8 40             	or     $0x40,%eax
+c01015a5:	0f b6 c0             	movzbl %al,%eax
+c01015a8:	f7 d0                	not    %eax
+c01015aa:	89 c2                	mov    %eax,%edx
+c01015ac:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c01015b1:	21 d0                	and    %edx,%eax
+c01015b3:	a3 48 e4 1a c0       	mov    %eax,0xc01ae448
+        return 0;
+c01015b8:	b8 00 00 00 00       	mov    $0x0,%eax
+c01015bd:	e9 d6 00 00 00       	jmp    c0101698 <kbd_proc_data+0x187>
+    } else if (shift & E0ESC) {
+c01015c2:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c01015c7:	83 e0 40             	and    $0x40,%eax
+c01015ca:	85 c0                	test   %eax,%eax
+c01015cc:	74 11                	je     c01015df <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c01015ce:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c01015d2:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c01015d7:	83 e0 bf             	and    $0xffffffbf,%eax
+c01015da:	a3 48 e4 1a c0       	mov    %eax,0xc01ae448
+    }
+
+    shift |= shiftcode[data];
+c01015df:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015e3:	0f b6 80 60 c0 12 c0 	movzbl -0x3fed3fa0(%eax),%eax
+c01015ea:	0f b6 d0             	movzbl %al,%edx
+c01015ed:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c01015f2:	09 d0                	or     %edx,%eax
+c01015f4:	a3 48 e4 1a c0       	mov    %eax,0xc01ae448
+    shift ^= togglecode[data];
+c01015f9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c01015fd:	0f b6 80 60 c1 12 c0 	movzbl -0x3fed3ea0(%eax),%eax
+c0101604:	0f b6 d0             	movzbl %al,%edx
+c0101607:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c010160c:	31 d0                	xor    %edx,%eax
+c010160e:	a3 48 e4 1a c0       	mov    %eax,0xc01ae448
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101613:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c0101618:	83 e0 03             	and    $0x3,%eax
+c010161b:	8b 14 85 60 c5 12 c0 	mov    -0x3fed3aa0(,%eax,4),%edx
+c0101622:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101626:	01 d0                	add    %edx,%eax
+c0101628:	0f b6 00             	movzbl (%eax),%eax
+c010162b:	0f b6 c0             	movzbl %al,%eax
+c010162e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101631:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c0101636:	83 e0 08             	and    $0x8,%eax
+c0101639:	85 c0                	test   %eax,%eax
+c010163b:	74 22                	je     c010165f <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c010163d:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101641:	7e 0c                	jle    c010164f <kbd_proc_data+0x13e>
+c0101643:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101647:	7f 06                	jg     c010164f <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c0101649:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c010164d:	eb 10                	jmp    c010165f <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c010164f:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101653:	7e 0a                	jle    c010165f <kbd_proc_data+0x14e>
+c0101655:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101659:	7f 04                	jg     c010165f <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c010165b:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c010165f:	a1 48 e4 1a c0       	mov    0xc01ae448,%eax
+c0101664:	f7 d0                	not    %eax
+c0101666:	83 e0 06             	and    $0x6,%eax
+c0101669:	85 c0                	test   %eax,%eax
+c010166b:	75 28                	jne    c0101695 <kbd_proc_data+0x184>
+c010166d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101674:	75 1f                	jne    c0101695 <kbd_proc_data+0x184>
+        cprintf("Rebooting!\n");
+c0101676:	c7 04 24 4d c6 10 c0 	movl   $0xc010c64d,(%esp)
+c010167d:	e8 d6 ec ff ff       	call   c0100358 <cprintf>
+c0101682:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
+c0101688:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010168c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+c0101690:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101694:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101695:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101698:	c9                   	leave  
+c0101699:	c3                   	ret    
+
+c010169a <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c010169a:	55                   	push   %ebp
+c010169b:	89 e5                	mov    %esp,%ebp
+c010169d:	83 ec 18             	sub    $0x18,%esp
+    cons_intr(kbd_proc_data);
+c01016a0:	c7 04 24 11 15 10 c0 	movl   $0xc0101511,(%esp)
+c01016a7:	e8 a6 fd ff ff       	call   c0101452 <cons_intr>
+}
+c01016ac:	c9                   	leave  
+c01016ad:	c3                   	ret    
+
+c01016ae <kbd_init>:
+
+static void
+kbd_init(void) {
+c01016ae:	55                   	push   %ebp
+c01016af:	89 e5                	mov    %esp,%ebp
+c01016b1:	83 ec 18             	sub    $0x18,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c01016b4:	e8 e1 ff ff ff       	call   c010169a <kbd_intr>
+    pic_enable(IRQ_KBD);
+c01016b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01016c0:	e8 b2 09 00 00       	call   c0102077 <pic_enable>
+}
+c01016c5:	c9                   	leave  
+c01016c6:	c3                   	ret    
+
+c01016c7 <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c01016c7:	55                   	push   %ebp
+c01016c8:	89 e5                	mov    %esp,%ebp
+c01016ca:	83 ec 18             	sub    $0x18,%esp
+    cga_init();
+c01016cd:	e8 93 f8 ff ff       	call   c0100f65 <cga_init>
+    serial_init();
+c01016d2:	e8 74 f9 ff ff       	call   c010104b <serial_init>
+    kbd_init();
+c01016d7:	e8 d2 ff ff ff       	call   c01016ae <kbd_init>
+    if (!serial_exists) {
+c01016dc:	a1 28 e2 1a c0       	mov    0xc01ae228,%eax
+c01016e1:	85 c0                	test   %eax,%eax
+c01016e3:	75 0c                	jne    c01016f1 <cons_init+0x2a>
+        cprintf("serial port does not exist!!\n");
+c01016e5:	c7 04 24 59 c6 10 c0 	movl   $0xc010c659,(%esp)
+c01016ec:	e8 67 ec ff ff       	call   c0100358 <cprintf>
+    }
+}
+c01016f1:	c9                   	leave  
+c01016f2:	c3                   	ret    
+
+c01016f3 <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c01016f3:	55                   	push   %ebp
+c01016f4:	89 e5                	mov    %esp,%ebp
+c01016f6:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01016f9:	e8 e2 f7 ff ff       	call   c0100ee0 <__intr_save>
+c01016fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101701:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101704:	89 04 24             	mov    %eax,(%esp)
+c0101707:	e8 9b fa ff ff       	call   c01011a7 <lpt_putc>
+        cga_putc(c);
+c010170c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010170f:	89 04 24             	mov    %eax,(%esp)
+c0101712:	e8 cf fa ff ff       	call   c01011e6 <cga_putc>
+        serial_putc(c);
+c0101717:	8b 45 08             	mov    0x8(%ebp),%eax
+c010171a:	89 04 24             	mov    %eax,(%esp)
+c010171d:	e8 f1 fc ff ff       	call   c0101413 <serial_putc>
+    }
+    local_intr_restore(intr_flag);
+c0101722:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101725:	89 04 24             	mov    %eax,(%esp)
+c0101728:	e8 dd f7 ff ff       	call   c0100f0a <__intr_restore>
+}
+c010172d:	c9                   	leave  
+c010172e:	c3                   	ret    
+
+c010172f <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c010172f:	55                   	push   %ebp
+c0101730:	89 e5                	mov    %esp,%ebp
+c0101732:	83 ec 28             	sub    $0x28,%esp
+    int c = 0;
+c0101735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010173c:	e8 9f f7 ff ff       	call   c0100ee0 <__intr_save>
+c0101741:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101744:	e8 ab fd ff ff       	call   c01014f4 <serial_intr>
+        kbd_intr();
+c0101749:	e8 4c ff ff ff       	call   c010169a <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c010174e:	8b 15 40 e4 1a c0    	mov    0xc01ae440,%edx
+c0101754:	a1 44 e4 1a c0       	mov    0xc01ae444,%eax
+c0101759:	39 c2                	cmp    %eax,%edx
+c010175b:	74 31                	je     c010178e <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c010175d:	a1 40 e4 1a c0       	mov    0xc01ae440,%eax
+c0101762:	8d 50 01             	lea    0x1(%eax),%edx
+c0101765:	89 15 40 e4 1a c0    	mov    %edx,0xc01ae440
+c010176b:	0f b6 80 40 e2 1a c0 	movzbl -0x3fe51dc0(%eax),%eax
+c0101772:	0f b6 c0             	movzbl %al,%eax
+c0101775:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101778:	a1 40 e4 1a c0       	mov    0xc01ae440,%eax
+c010177d:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101782:	75 0a                	jne    c010178e <cons_getc+0x5f>
+                cons.rpos = 0;
+c0101784:	c7 05 40 e4 1a c0 00 	movl   $0x0,0xc01ae440
+c010178b:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010178e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0101791:	89 04 24             	mov    %eax,(%esp)
+c0101794:	e8 71 f7 ff ff       	call   c0100f0a <__intr_restore>
+    return c;
+c0101799:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010179c:	c9                   	leave  
+c010179d:	c3                   	ret    
+
+c010179e <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c010179e:	55                   	push   %ebp
+c010179f:	89 e5                	mov    %esp,%ebp
+c01017a1:	83 ec 14             	sub    $0x14,%esp
+c01017a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01017a7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c01017ab:	90                   	nop
+c01017ac:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c01017b0:	83 c0 07             	add    $0x7,%eax
+c01017b3:	0f b7 c0             	movzwl %ax,%eax
+c01017b6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01017ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01017be:	89 c2                	mov    %eax,%edx
+c01017c0:	ec                   	in     (%dx),%al
+c01017c1:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01017c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01017c8:	0f b6 c0             	movzbl %al,%eax
+c01017cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01017ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017d1:	25 80 00 00 00       	and    $0x80,%eax
+c01017d6:	85 c0                	test   %eax,%eax
+c01017d8:	75 d2                	jne    c01017ac <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c01017da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01017de:	74 11                	je     c01017f1 <ide_wait_ready+0x53>
+c01017e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017e3:	83 e0 21             	and    $0x21,%eax
+c01017e6:	85 c0                	test   %eax,%eax
+c01017e8:	74 07                	je     c01017f1 <ide_wait_ready+0x53>
+        return -1;
+c01017ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01017ef:	eb 05                	jmp    c01017f6 <ide_wait_ready+0x58>
+    }
+    return 0;
+c01017f1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01017f6:	c9                   	leave  
+c01017f7:	c3                   	ret    
+
+c01017f8 <ide_init>:
+
+void
+ide_init(void) {
+c01017f8:	55                   	push   %ebp
+c01017f9:	89 e5                	mov    %esp,%ebp
+c01017fb:	57                   	push   %edi
+c01017fc:	53                   	push   %ebx
+c01017fd:	81 ec 50 02 00 00    	sub    $0x250,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101803:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0101809:	e9 d6 02 00 00       	jmp    c0101ae4 <ide_init+0x2ec>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c010180e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101812:	c1 e0 03             	shl    $0x3,%eax
+c0101815:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010181c:	29 c2                	sub    %eax,%edx
+c010181e:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101824:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010182b:	66 d1 e8             	shr    %ax
+c010182e:	0f b7 c0             	movzwl %ax,%eax
+c0101831:	0f b7 04 85 78 c6 10 	movzwl -0x3fef3988(,%eax,4),%eax
+c0101838:	c0 
+c0101839:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c010183d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101841:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101848:	00 
+c0101849:	89 04 24             	mov    %eax,(%esp)
+c010184c:	e8 4d ff ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0101851:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101855:	83 e0 01             	and    $0x1,%eax
+c0101858:	c1 e0 04             	shl    $0x4,%eax
+c010185b:	83 c8 e0             	or     $0xffffffe0,%eax
+c010185e:	0f b6 c0             	movzbl %al,%eax
+c0101861:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101865:	83 c2 06             	add    $0x6,%edx
+c0101868:	0f b7 d2             	movzwl %dx,%edx
+c010186b:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
+c010186f:	88 45 d1             	mov    %al,-0x2f(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101872:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c0101876:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c010187a:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c010187b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010187f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101886:	00 
+c0101887:	89 04 24             	mov    %eax,(%esp)
+c010188a:	e8 0f ff ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c010188f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101893:	83 c0 07             	add    $0x7,%eax
+c0101896:	0f b7 c0             	movzwl %ax,%eax
+c0101899:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
+c010189d:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
+c01018a1:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01018a5:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01018a9:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c01018aa:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01018b5:	00 
+c01018b6:	89 04 24             	mov    %eax,(%esp)
+c01018b9:	e8 e0 fe ff ff       	call   c010179e <ide_wait_ready>
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c01018be:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018c2:	83 c0 07             	add    $0x7,%eax
+c01018c5:	0f b7 c0             	movzwl %ax,%eax
+c01018c8:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01018cc:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c01018d0:	89 c2                	mov    %eax,%edx
+c01018d2:	ec                   	in     (%dx),%al
+c01018d3:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c01018d6:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01018da:	84 c0                	test   %al,%al
+c01018dc:	0f 84 f7 01 00 00    	je     c0101ad9 <ide_init+0x2e1>
+c01018e2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c01018e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01018ed:	00 
+c01018ee:	89 04 24             	mov    %eax,(%esp)
+c01018f1:	e8 a8 fe ff ff       	call   c010179e <ide_wait_ready>
+c01018f6:	85 c0                	test   %eax,%eax
+c01018f8:	0f 85 db 01 00 00    	jne    c0101ad9 <ide_init+0x2e1>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c01018fe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101902:	c1 e0 03             	shl    $0x3,%eax
+c0101905:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010190c:	29 c2                	sub    %eax,%edx
+c010190e:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101914:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0101917:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010191b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010191e:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101924:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0101927:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c010192e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0101931:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0101934:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0101937:	89 cb                	mov    %ecx,%ebx
+c0101939:	89 df                	mov    %ebx,%edi
+c010193b:	89 c1                	mov    %eax,%ecx
+c010193d:	fc                   	cld    
+c010193e:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101940:	89 c8                	mov    %ecx,%eax
+c0101942:	89 fb                	mov    %edi,%ebx
+c0101944:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0101947:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c010194a:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101950:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0101953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101956:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c010195c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c010195f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0101962:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101967:	85 c0                	test   %eax,%eax
+c0101969:	74 0e                	je     c0101979 <ide_init+0x181>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010196b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010196e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0101974:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0101977:	eb 09                	jmp    c0101982 <ide_init+0x18a>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0101979:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010197c:	8b 40 78             	mov    0x78(%eax),%eax
+c010197f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0101982:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101986:	c1 e0 03             	shl    $0x3,%eax
+c0101989:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101990:	29 c2                	sub    %eax,%edx
+c0101992:	81 c2 60 e4 1a c0    	add    $0xc01ae460,%edx
+c0101998:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010199b:	89 42 04             	mov    %eax,0x4(%edx)
+        ide_devices[ideno].size = sectors;
+c010199e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019a2:	c1 e0 03             	shl    $0x3,%eax
+c01019a5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01019ac:	29 c2                	sub    %eax,%edx
+c01019ae:	81 c2 60 e4 1a c0    	add    $0xc01ae460,%edx
+c01019b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01019b7:	89 42 08             	mov    %eax,0x8(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c01019ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01019bd:	83 c0 62             	add    $0x62,%eax
+c01019c0:	0f b7 00             	movzwl (%eax),%eax
+c01019c3:	0f b7 c0             	movzwl %ax,%eax
+c01019c6:	25 00 02 00 00       	and    $0x200,%eax
+c01019cb:	85 c0                	test   %eax,%eax
+c01019cd:	75 24                	jne    c01019f3 <ide_init+0x1fb>
+c01019cf:	c7 44 24 0c 80 c6 10 	movl   $0xc010c680,0xc(%esp)
+c01019d6:	c0 
+c01019d7:	c7 44 24 08 c3 c6 10 	movl   $0xc010c6c3,0x8(%esp)
+c01019de:	c0 
+c01019df:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c01019e6:	00 
+c01019e7:	c7 04 24 d8 c6 10 c0 	movl   $0xc010c6d8,(%esp)
+c01019ee:	e8 ce f3 ff ff       	call   c0100dc1 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c01019f3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01019f7:	c1 e0 03             	shl    $0x3,%eax
+c01019fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101a01:	29 c2                	sub    %eax,%edx
+c0101a03:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101a09:	83 c0 0c             	add    $0xc,%eax
+c0101a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0101a0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101a12:	83 c0 36             	add    $0x36,%eax
+c0101a15:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        unsigned int i, length = 40;
+c0101a18:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
+        for (i = 0; i < length; i += 2) {
+c0101a1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0101a26:	eb 34                	jmp    c0101a5c <ide_init+0x264>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c0101a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a2e:	01 c2                	add    %eax,%edx
+c0101a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a33:	8d 48 01             	lea    0x1(%eax),%ecx
+c0101a36:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101a39:	01 c8                	add    %ecx,%eax
+c0101a3b:	0f b6 00             	movzbl (%eax),%eax
+c0101a3e:	88 02                	mov    %al,(%edx)
+c0101a40:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a43:	8d 50 01             	lea    0x1(%eax),%edx
+c0101a46:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0101a49:	01 c2                	add    %eax,%edx
+c0101a4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a4e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+c0101a51:	01 c8                	add    %ecx,%eax
+c0101a53:	0f b6 00             	movzbl (%eax),%eax
+c0101a56:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c0101a58:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c0101a5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a5f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0101a62:	72 c4                	jb     c0101a28 <ide_init+0x230>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a67:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a6a:	01 d0                	add    %edx,%eax
+c0101a6c:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c0101a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a72:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101a75:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0101a78:	85 c0                	test   %eax,%eax
+c0101a7a:	74 0f                	je     c0101a8b <ide_init+0x293>
+c0101a7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101a7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101a82:	01 d0                	add    %edx,%eax
+c0101a84:	0f b6 00             	movzbl (%eax),%eax
+c0101a87:	3c 20                	cmp    $0x20,%al
+c0101a89:	74 d9                	je     c0101a64 <ide_init+0x26c>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c0101a8b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101a8f:	c1 e0 03             	shl    $0x3,%eax
+c0101a92:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101a99:	29 c2                	sub    %eax,%edx
+c0101a9b:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101aa1:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101aa8:	c1 e0 03             	shl    $0x3,%eax
+c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101ab2:	29 c2                	sub    %eax,%edx
+c0101ab4:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101aba:	8b 50 08             	mov    0x8(%eax),%edx
+c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101ac1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0101ac5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0101ac9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0101acd:	c7 04 24 ea c6 10 c0 	movl   $0xc010c6ea,(%esp)
+c0101ad4:	e8 7f e8 ff ff       	call   c0100358 <cprintf>
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101ad9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101add:	83 c0 01             	add    $0x1,%eax
+c0101ae0:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c0101ae4:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c0101ae9:	0f 86 1f fd ff ff    	jbe    c010180e <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c0101aef:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
+c0101af6:	e8 7c 05 00 00       	call   c0102077 <pic_enable>
+    pic_enable(IRQ_IDE2);
+c0101afb:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
+c0101b02:	e8 70 05 00 00       	call   c0102077 <pic_enable>
+}
+c0101b07:	81 c4 50 02 00 00    	add    $0x250,%esp
+c0101b0d:	5b                   	pop    %ebx
+c0101b0e:	5f                   	pop    %edi
+c0101b0f:	5d                   	pop    %ebp
+c0101b10:	c3                   	ret    
+
+c0101b11 <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c0101b11:	55                   	push   %ebp
+c0101b12:	89 e5                	mov    %esp,%ebp
+c0101b14:	83 ec 04             	sub    $0x4,%esp
+c0101b17:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b1a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c0101b1e:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c0101b23:	77 24                	ja     c0101b49 <ide_device_valid+0x38>
+c0101b25:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b29:	c1 e0 03             	shl    $0x3,%eax
+c0101b2c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101b33:	29 c2                	sub    %eax,%edx
+c0101b35:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101b3b:	0f b6 00             	movzbl (%eax),%eax
+c0101b3e:	84 c0                	test   %al,%al
+c0101b40:	74 07                	je     c0101b49 <ide_device_valid+0x38>
+c0101b42:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101b47:	eb 05                	jmp    c0101b4e <ide_device_valid+0x3d>
+c0101b49:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101b4e:	c9                   	leave  
+c0101b4f:	c3                   	ret    
+
+c0101b50 <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c0101b50:	55                   	push   %ebp
+c0101b51:	89 e5                	mov    %esp,%ebp
+c0101b53:	83 ec 08             	sub    $0x8,%esp
+c0101b56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b59:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c0101b5d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b61:	89 04 24             	mov    %eax,(%esp)
+c0101b64:	e8 a8 ff ff ff       	call   c0101b11 <ide_device_valid>
+c0101b69:	85 c0                	test   %eax,%eax
+c0101b6b:	74 1b                	je     c0101b88 <ide_device_size+0x38>
+        return ide_devices[ideno].size;
+c0101b6d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101b71:	c1 e0 03             	shl    $0x3,%eax
+c0101b74:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101b7b:	29 c2                	sub    %eax,%edx
+c0101b7d:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101b83:	8b 40 08             	mov    0x8(%eax),%eax
+c0101b86:	eb 05                	jmp    c0101b8d <ide_device_size+0x3d>
+    }
+    return 0;
+c0101b88:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101b8d:	c9                   	leave  
+c0101b8e:	c3                   	ret    
+
+c0101b8f <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c0101b8f:	55                   	push   %ebp
+c0101b90:	89 e5                	mov    %esp,%ebp
+c0101b92:	57                   	push   %edi
+c0101b93:	53                   	push   %ebx
+c0101b94:	83 ec 50             	sub    $0x50,%esp
+c0101b97:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b9a:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101b9e:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101ba5:	77 24                	ja     c0101bcb <ide_read_secs+0x3c>
+c0101ba7:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101bac:	77 1d                	ja     c0101bcb <ide_read_secs+0x3c>
+c0101bae:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101bb2:	c1 e0 03             	shl    $0x3,%eax
+c0101bb5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101bbc:	29 c2                	sub    %eax,%edx
+c0101bbe:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101bc4:	0f b6 00             	movzbl (%eax),%eax
+c0101bc7:	84 c0                	test   %al,%al
+c0101bc9:	75 24                	jne    c0101bef <ide_read_secs+0x60>
+c0101bcb:	c7 44 24 0c 08 c7 10 	movl   $0xc010c708,0xc(%esp)
+c0101bd2:	c0 
+c0101bd3:	c7 44 24 08 c3 c6 10 	movl   $0xc010c6c3,0x8(%esp)
+c0101bda:	c0 
+c0101bdb:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c0101be2:	00 
+c0101be3:	c7 04 24 d8 c6 10 c0 	movl   $0xc010c6d8,(%esp)
+c0101bea:	e8 d2 f1 ff ff       	call   c0100dc1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101bef:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101bf6:	77 0f                	ja     c0101c07 <ide_read_secs+0x78>
+c0101bf8:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101bfb:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101bfe:	01 d0                	add    %edx,%eax
+c0101c00:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101c05:	76 24                	jbe    c0101c2b <ide_read_secs+0x9c>
+c0101c07:	c7 44 24 0c 30 c7 10 	movl   $0xc010c730,0xc(%esp)
+c0101c0e:	c0 
+c0101c0f:	c7 44 24 08 c3 c6 10 	movl   $0xc010c6c3,0x8(%esp)
+c0101c16:	c0 
+c0101c17:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c0101c1e:	00 
+c0101c1f:	c7 04 24 d8 c6 10 c0 	movl   $0xc010c6d8,(%esp)
+c0101c26:	e8 96 f1 ff ff       	call   c0100dc1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101c2b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c2f:	66 d1 e8             	shr    %ax
+c0101c32:	0f b7 c0             	movzwl %ax,%eax
+c0101c35:	0f b7 04 85 78 c6 10 	movzwl -0x3fef3988(,%eax,4),%eax
+c0101c3c:	c0 
+c0101c3d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101c41:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101c45:	66 d1 e8             	shr    %ax
+c0101c48:	0f b7 c0             	movzwl %ax,%eax
+c0101c4b:	0f b7 04 85 7a c6 10 	movzwl -0x3fef3986(,%eax,4),%eax
+c0101c52:	c0 
+c0101c53:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101c57:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101c5b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101c62:	00 
+c0101c63:	89 04 24             	mov    %eax,(%esp)
+c0101c66:	e8 33 fb ff ff       	call   c010179e <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101c6b:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101c6f:	83 c0 02             	add    $0x2,%eax
+c0101c72:	0f b7 c0             	movzwl %ax,%eax
+c0101c75:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101c79:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101c7d:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101c81:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101c85:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101c86:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101c89:	0f b6 c0             	movzbl %al,%eax
+c0101c8c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101c90:	83 c2 02             	add    $0x2,%edx
+c0101c93:	0f b7 d2             	movzwl %dx,%edx
+c0101c96:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101c9a:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101c9d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101ca1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101ca5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101ca9:	0f b6 c0             	movzbl %al,%eax
+c0101cac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cb0:	83 c2 03             	add    $0x3,%edx
+c0101cb3:	0f b7 d2             	movzwl %dx,%edx
+c0101cb6:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101cba:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101cbd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101cc1:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101cc5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cc9:	c1 e8 08             	shr    $0x8,%eax
+c0101ccc:	0f b6 c0             	movzbl %al,%eax
+c0101ccf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cd3:	83 c2 04             	add    $0x4,%edx
+c0101cd6:	0f b7 d2             	movzwl %dx,%edx
+c0101cd9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101cdd:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101ce0:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101ce4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101ce8:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101cec:	c1 e8 10             	shr    $0x10,%eax
+c0101cef:	0f b6 c0             	movzbl %al,%eax
+c0101cf2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101cf6:	83 c2 05             	add    $0x5,%edx
+c0101cf9:	0f b7 d2             	movzwl %dx,%edx
+c0101cfc:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101d00:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101d03:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101d07:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101d0b:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101d0c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101d10:	83 e0 01             	and    $0x1,%eax
+c0101d13:	c1 e0 04             	shl    $0x4,%eax
+c0101d16:	89 c2                	mov    %eax,%edx
+c0101d18:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101d1b:	c1 e8 18             	shr    $0x18,%eax
+c0101d1e:	83 e0 0f             	and    $0xf,%eax
+c0101d21:	09 d0                	or     %edx,%eax
+c0101d23:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101d26:	0f b6 c0             	movzbl %al,%eax
+c0101d29:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101d2d:	83 c2 06             	add    $0x6,%edx
+c0101d30:	0f b7 d2             	movzwl %dx,%edx
+c0101d33:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101d37:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101d3a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101d3e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101d42:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c0101d43:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d47:	83 c0 07             	add    $0x7,%eax
+c0101d4a:	0f b7 c0             	movzwl %ax,%eax
+c0101d4d:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101d51:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
+c0101d55:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101d59:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101d5d:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101d5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101d65:	eb 5a                	jmp    c0101dc1 <ide_read_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101d67:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d6b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101d72:	00 
+c0101d73:	89 04 24             	mov    %eax,(%esp)
+c0101d76:	e8 23 fa ff ff       	call   c010179e <ide_wait_ready>
+c0101d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101d7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101d82:	74 02                	je     c0101d86 <ide_read_secs+0x1f7>
+            goto out;
+c0101d84:	eb 41                	jmp    c0101dc7 <ide_read_secs+0x238>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c0101d86:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101d8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101d8d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101d90:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101d93:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0101d9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0101d9d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101da0:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101da3:	89 cb                	mov    %ecx,%ebx
+c0101da5:	89 df                	mov    %ebx,%edi
+c0101da7:	89 c1                	mov    %eax,%ecx
+c0101da9:	fc                   	cld    
+c0101daa:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101dac:	89 c8                	mov    %ecx,%eax
+c0101dae:	89 fb                	mov    %edi,%ebx
+c0101db0:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101db3:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101db6:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101dba:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101dc1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101dc5:	75 a0                	jne    c0101d67 <ide_read_secs+0x1d8>
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101dca:	83 c4 50             	add    $0x50,%esp
+c0101dcd:	5b                   	pop    %ebx
+c0101dce:	5f                   	pop    %edi
+c0101dcf:	5d                   	pop    %ebp
+c0101dd0:	c3                   	ret    
+
+c0101dd1 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c0101dd1:	55                   	push   %ebp
+c0101dd2:	89 e5                	mov    %esp,%ebp
+c0101dd4:	56                   	push   %esi
+c0101dd5:	53                   	push   %ebx
+c0101dd6:	83 ec 50             	sub    $0x50,%esp
+c0101dd9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101ddc:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101de0:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101de7:	77 24                	ja     c0101e0d <ide_write_secs+0x3c>
+c0101de9:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101dee:	77 1d                	ja     c0101e0d <ide_write_secs+0x3c>
+c0101df0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101df4:	c1 e0 03             	shl    $0x3,%eax
+c0101df7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101dfe:	29 c2                	sub    %eax,%edx
+c0101e00:	8d 82 60 e4 1a c0    	lea    -0x3fe51ba0(%edx),%eax
+c0101e06:	0f b6 00             	movzbl (%eax),%eax
+c0101e09:	84 c0                	test   %al,%al
+c0101e0b:	75 24                	jne    c0101e31 <ide_write_secs+0x60>
+c0101e0d:	c7 44 24 0c 08 c7 10 	movl   $0xc010c708,0xc(%esp)
+c0101e14:	c0 
+c0101e15:	c7 44 24 08 c3 c6 10 	movl   $0xc010c6c3,0x8(%esp)
+c0101e1c:	c0 
+c0101e1d:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0101e24:	00 
+c0101e25:	c7 04 24 d8 c6 10 c0 	movl   $0xc010c6d8,(%esp)
+c0101e2c:	e8 90 ef ff ff       	call   c0100dc1 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101e31:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101e38:	77 0f                	ja     c0101e49 <ide_write_secs+0x78>
+c0101e3a:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101e3d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101e40:	01 d0                	add    %edx,%eax
+c0101e42:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101e47:	76 24                	jbe    c0101e6d <ide_write_secs+0x9c>
+c0101e49:	c7 44 24 0c 30 c7 10 	movl   $0xc010c730,0xc(%esp)
+c0101e50:	c0 
+c0101e51:	c7 44 24 08 c3 c6 10 	movl   $0xc010c6c3,0x8(%esp)
+c0101e58:	c0 
+c0101e59:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0101e60:	00 
+c0101e61:	c7 04 24 d8 c6 10 c0 	movl   $0xc010c6d8,(%esp)
+c0101e68:	e8 54 ef ff ff       	call   c0100dc1 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101e6d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101e71:	66 d1 e8             	shr    %ax
+c0101e74:	0f b7 c0             	movzwl %ax,%eax
+c0101e77:	0f b7 04 85 78 c6 10 	movzwl -0x3fef3988(,%eax,4),%eax
+c0101e7e:	c0 
+c0101e7f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101e83:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101e87:	66 d1 e8             	shr    %ax
+c0101e8a:	0f b7 c0             	movzwl %ax,%eax
+c0101e8d:	0f b7 04 85 7a c6 10 	movzwl -0x3fef3986(,%eax,4),%eax
+c0101e94:	c0 
+c0101e95:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101e99:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101e9d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101ea4:	00 
+c0101ea5:	89 04 24             	mov    %eax,(%esp)
+c0101ea8:	e8 f1 f8 ff ff       	call   c010179e <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101ead:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101eb1:	83 c0 02             	add    $0x2,%eax
+c0101eb4:	0f b7 c0             	movzwl %ax,%eax
+c0101eb7:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101ebb:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101ebf:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101ec3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ec7:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101ec8:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101ecb:	0f b6 c0             	movzbl %al,%eax
+c0101ece:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ed2:	83 c2 02             	add    $0x2,%edx
+c0101ed5:	0f b7 d2             	movzwl %dx,%edx
+c0101ed8:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101edc:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101edf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101ee3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101ee7:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101eeb:	0f b6 c0             	movzbl %al,%eax
+c0101eee:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ef2:	83 c2 03             	add    $0x3,%edx
+c0101ef5:	0f b7 d2             	movzwl %dx,%edx
+c0101ef8:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101efc:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101eff:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101f03:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101f07:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101f08:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f0b:	c1 e8 08             	shr    $0x8,%eax
+c0101f0e:	0f b6 c0             	movzbl %al,%eax
+c0101f11:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f15:	83 c2 04             	add    $0x4,%edx
+c0101f18:	0f b7 d2             	movzwl %dx,%edx
+c0101f1b:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101f1f:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101f22:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101f26:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101f2a:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101f2b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f2e:	c1 e8 10             	shr    $0x10,%eax
+c0101f31:	0f b6 c0             	movzbl %al,%eax
+c0101f34:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f38:	83 c2 05             	add    $0x5,%edx
+c0101f3b:	0f b7 d2             	movzwl %dx,%edx
+c0101f3e:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c0101f42:	88 45 dd             	mov    %al,-0x23(%ebp)
+c0101f45:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101f49:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0101f4d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101f4e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101f52:	83 e0 01             	and    $0x1,%eax
+c0101f55:	c1 e0 04             	shl    $0x4,%eax
+c0101f58:	89 c2                	mov    %eax,%edx
+c0101f5a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101f5d:	c1 e8 18             	shr    $0x18,%eax
+c0101f60:	83 e0 0f             	and    $0xf,%eax
+c0101f63:	09 d0                	or     %edx,%eax
+c0101f65:	83 c8 e0             	or     $0xffffffe0,%eax
+c0101f68:	0f b6 c0             	movzbl %al,%eax
+c0101f6b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101f6f:	83 c2 06             	add    $0x6,%edx
+c0101f72:	0f b7 d2             	movzwl %dx,%edx
+c0101f75:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101f79:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101f7c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101f80:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0101f84:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c0101f85:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101f89:	83 c0 07             	add    $0x7,%eax
+c0101f8c:	0f b7 c0             	movzwl %ax,%eax
+c0101f8f:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101f93:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
+c0101f97:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101f9b:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0101f9f:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101fa0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101fa7:	eb 5a                	jmp    c0102003 <ide_write_secs+0x232>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101fa9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fad:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101fb4:	00 
+c0101fb5:	89 04 24             	mov    %eax,(%esp)
+c0101fb8:	e8 e1 f7 ff ff       	call   c010179e <ide_wait_ready>
+c0101fbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101fc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101fc4:	74 02                	je     c0101fc8 <ide_write_secs+0x1f7>
+            goto out;
+c0101fc6:	eb 41                	jmp    c0102009 <ide_write_secs+0x238>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101fc8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101fcc:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101fcf:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101fd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101fd5:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c0101fdc:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0101fdf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101fe2:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101fe5:	89 cb                	mov    %ecx,%ebx
+c0101fe7:	89 de                	mov    %ebx,%esi
+c0101fe9:	89 c1                	mov    %eax,%ecx
+c0101feb:	fc                   	cld    
+c0101fec:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c0101fee:	89 c8                	mov    %ecx,%eax
+c0101ff0:	89 f3                	mov    %esi,%ebx
+c0101ff2:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101ff5:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101ff8:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101ffc:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0102003:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0102007:	75 a0                	jne    c0101fa9 <ide_write_secs+0x1d8>
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0102009:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010200c:	83 c4 50             	add    $0x50,%esp
+c010200f:	5b                   	pop    %ebx
+c0102010:	5e                   	pop    %esi
+c0102011:	5d                   	pop    %ebp
+c0102012:	c3                   	ret    
+
+c0102013 <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c0102013:	55                   	push   %ebp
+c0102014:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c0102016:	fb                   	sti    
+    sti();
+}
+c0102017:	5d                   	pop    %ebp
+c0102018:	c3                   	ret    
+
+c0102019 <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c0102019:	55                   	push   %ebp
+c010201a:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c010201c:	fa                   	cli    
+    cli();
+}
+c010201d:	5d                   	pop    %ebp
+c010201e:	c3                   	ret    
+
+c010201f <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c010201f:	55                   	push   %ebp
+c0102020:	89 e5                	mov    %esp,%ebp
+c0102022:	83 ec 14             	sub    $0x14,%esp
+c0102025:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102028:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c010202c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102030:	66 a3 70 c5 12 c0    	mov    %ax,0xc012c570
+    if (did_init) {
+c0102036:	a1 40 e5 1a c0       	mov    0xc01ae540,%eax
+c010203b:	85 c0                	test   %eax,%eax
+c010203d:	74 36                	je     c0102075 <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c010203f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102043:	0f b6 c0             	movzbl %al,%eax
+c0102046:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c010204c:	88 45 fd             	mov    %al,-0x3(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010204f:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c0102053:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0102057:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c010205c:	66 c1 e8 08          	shr    $0x8,%ax
+c0102060:	0f b6 c0             	movzbl %al,%eax
+c0102063:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c0102069:	88 45 f9             	mov    %al,-0x7(%ebp)
+c010206c:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0102070:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0102074:	ee                   	out    %al,(%dx)
+    }
+}
+c0102075:	c9                   	leave  
+c0102076:	c3                   	ret    
+
+c0102077 <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c0102077:	55                   	push   %ebp
+c0102078:	89 e5                	mov    %esp,%ebp
+c010207a:	83 ec 04             	sub    $0x4,%esp
+    pic_setmask(irq_mask & ~(1 << irq));
+c010207d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102080:	ba 01 00 00 00       	mov    $0x1,%edx
+c0102085:	89 c1                	mov    %eax,%ecx
+c0102087:	d3 e2                	shl    %cl,%edx
+c0102089:	89 d0                	mov    %edx,%eax
+c010208b:	f7 d0                	not    %eax
+c010208d:	89 c2                	mov    %eax,%edx
+c010208f:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c0102096:	21 d0                	and    %edx,%eax
+c0102098:	0f b7 c0             	movzwl %ax,%eax
+c010209b:	89 04 24             	mov    %eax,(%esp)
+c010209e:	e8 7c ff ff ff       	call   c010201f <pic_setmask>
+}
+c01020a3:	c9                   	leave  
+c01020a4:	c3                   	ret    
+
+c01020a5 <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c01020a5:	55                   	push   %ebp
+c01020a6:	89 e5                	mov    %esp,%ebp
+c01020a8:	83 ec 44             	sub    $0x44,%esp
+    did_init = 1;
+c01020ab:	c7 05 40 e5 1a c0 01 	movl   $0x1,0xc01ae540
+c01020b2:	00 00 00 
+c01020b5:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c01020bb:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
+c01020bf:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c01020c3:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c01020c7:	ee                   	out    %al,(%dx)
+c01020c8:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
+c01020ce:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
+c01020d2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01020d6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01020da:	ee                   	out    %al,(%dx)
+c01020db:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
+c01020e1:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
+c01020e5:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c01020e9:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01020ed:	ee                   	out    %al,(%dx)
+c01020ee:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
+c01020f4:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
+c01020f8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01020fc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0102100:	ee                   	out    %al,(%dx)
+c0102101:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
+c0102107:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
+c010210b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010210f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102113:	ee                   	out    %al,(%dx)
+c0102114:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
+c010211a:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+c010211e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0102122:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0102126:	ee                   	out    %al,(%dx)
+c0102127:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c010212d:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
+c0102131:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0102135:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102139:	ee                   	out    %al,(%dx)
+c010213a:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
+c0102140:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
+c0102144:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0102148:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c010214c:	ee                   	out    %al,(%dx)
+c010214d:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
+c0102153:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
+c0102157:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010215b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010215f:	ee                   	out    %al,(%dx)
+c0102160:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
+c0102166:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
+c010216a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c010216e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c0102172:	ee                   	out    %al,(%dx)
+c0102173:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
+c0102179:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
+c010217d:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0102181:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c0102185:	ee                   	out    %al,(%dx)
+c0102186:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
+c010218c:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
+c0102190:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c0102194:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c0102198:	ee                   	out    %al,(%dx)
+c0102199:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
+c010219f:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
+c01021a3:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01021a7:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01021ab:	ee                   	out    %al,(%dx)
+c01021ac:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
+c01021b2:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
+c01021b6:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01021ba:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
+c01021be:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c01021bf:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c01021c6:	66 83 f8 ff          	cmp    $0xffff,%ax
+c01021ca:	74 12                	je     c01021de <pic_init+0x139>
+        pic_setmask(irq_mask);
+c01021cc:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c01021d3:	0f b7 c0             	movzwl %ax,%eax
+c01021d6:	89 04 24             	mov    %eax,(%esp)
+c01021d9:	e8 41 fe ff ff       	call   c010201f <pic_setmask>
+    }
+}
+c01021de:	c9                   	leave  
+c01021df:	c3                   	ret    
+
+c01021e0 <print_ticks>:
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c01021e0:	55                   	push   %ebp
+c01021e1:	89 e5                	mov    %esp,%ebp
+c01021e3:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c01021e6:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c01021ed:	00 
+c01021ee:	c7 04 24 80 c7 10 c0 	movl   $0xc010c780,(%esp)
+c01021f5:	e8 5e e1 ff ff       	call   c0100358 <cprintf>
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c01021fa:	c7 04 24 8a c7 10 c0 	movl   $0xc010c78a,(%esp)
+c0102201:	e8 52 e1 ff ff       	call   c0100358 <cprintf>
+    panic("EOT: kernel seems ok.");
+c0102206:	c7 44 24 08 98 c7 10 	movl   $0xc010c798,0x8(%esp)
+c010220d:	c0 
+c010220e:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+c0102215:	00 
+c0102216:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c010221d:	e8 9f eb ff ff       	call   c0100dc1 <__panic>
+
+c0102222 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c0102222:	55                   	push   %ebp
+c0102223:	89 e5                	mov    %esp,%ebp
+c0102225:	83 ec 10             	sub    $0x10,%esp
+      */
+     /* LAB5 2012011268 */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+c0102228:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
+	int i;
+	for (i = 0; i < 256; ++ i) {
+c010222f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0102236:	e9 97 01 00 00       	jmp    c01023d2 <idt_init+0x1b0>
+		if (i == T_SYSCALL) {
+c010223b:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
+c0102242:	0f 85 c4 00 00 00    	jne    c010230c <idt_init+0xea>
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+c0102248:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224b:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c0102252:	89 c2                	mov    %eax,%edx
+c0102254:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102257:	66 89 14 c5 60 e5 1a 	mov    %dx,-0x3fe51aa0(,%eax,8)
+c010225e:	c0 
+c010225f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102262:	89 c2                	mov    %eax,%edx
+c0102264:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102267:	66 89 14 c5 62 e5 1a 	mov    %dx,-0x3fe51a9e(,%eax,8)
+c010226e:	c0 
+c010226f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102272:	0f b6 14 c5 64 e5 1a 	movzbl -0x3fe51a9c(,%eax,8),%edx
+c0102279:	c0 
+c010227a:	83 e2 e0             	and    $0xffffffe0,%edx
+c010227d:	88 14 c5 64 e5 1a c0 	mov    %dl,-0x3fe51a9c(,%eax,8)
+c0102284:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102287:	0f b6 14 c5 64 e5 1a 	movzbl -0x3fe51a9c(,%eax,8),%edx
+c010228e:	c0 
+c010228f:	83 e2 1f             	and    $0x1f,%edx
+c0102292:	88 14 c5 64 e5 1a c0 	mov    %dl,-0x3fe51a9c(,%eax,8)
+c0102299:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229c:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c01022a3:	c0 
+c01022a4:	83 ca 0f             	or     $0xf,%edx
+c01022a7:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c01022ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022b1:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c01022b8:	c0 
+c01022b9:	83 e2 ef             	and    $0xffffffef,%edx
+c01022bc:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c01022c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022c6:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c01022cd:	c0 
+c01022ce:	83 ca 60             	or     $0x60,%edx
+c01022d1:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c01022d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022db:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c01022e2:	c0 
+c01022e3:	83 ca 80             	or     $0xffffff80,%edx
+c01022e6:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c01022ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022f0:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c01022f7:	c1 e8 10             	shr    $0x10,%eax
+c01022fa:	89 c2                	mov    %eax,%edx
+c01022fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ff:	66 89 14 c5 66 e5 1a 	mov    %dx,-0x3fe51a9a(,%eax,8)
+c0102306:	c0 
+c0102307:	e9 c2 00 00 00       	jmp    c01023ce <idt_init+0x1ac>
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+c010230c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010230f:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c0102316:	89 c2                	mov    %eax,%edx
+c0102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010231b:	66 89 14 c5 60 e5 1a 	mov    %dx,-0x3fe51aa0(,%eax,8)
+c0102322:	c0 
+c0102323:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102326:	89 c2                	mov    %eax,%edx
+c0102328:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010232b:	66 89 14 c5 62 e5 1a 	mov    %dx,-0x3fe51a9e(,%eax,8)
+c0102332:	c0 
+c0102333:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102336:	0f b6 14 c5 64 e5 1a 	movzbl -0x3fe51a9c(,%eax,8),%edx
+c010233d:	c0 
+c010233e:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102341:	88 14 c5 64 e5 1a c0 	mov    %dl,-0x3fe51a9c(,%eax,8)
+c0102348:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010234b:	0f b6 14 c5 64 e5 1a 	movzbl -0x3fe51a9c(,%eax,8),%edx
+c0102352:	c0 
+c0102353:	83 e2 1f             	and    $0x1f,%edx
+c0102356:	88 14 c5 64 e5 1a c0 	mov    %dl,-0x3fe51a9c(,%eax,8)
+c010235d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102360:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c0102367:	c0 
+c0102368:	83 e2 f0             	and    $0xfffffff0,%edx
+c010236b:	83 ca 0e             	or     $0xe,%edx
+c010236e:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c0102375:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102378:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c010237f:	c0 
+c0102380:	83 e2 ef             	and    $0xffffffef,%edx
+c0102383:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c010238a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010238d:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c0102394:	c0 
+c0102395:	83 e2 9f             	and    $0xffffff9f,%edx
+c0102398:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c010239f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023a2:	0f b6 14 c5 65 e5 1a 	movzbl -0x3fe51a9b(,%eax,8),%edx
+c01023a9:	c0 
+c01023aa:	83 ca 80             	or     $0xffffff80,%edx
+c01023ad:	88 14 c5 65 e5 1a c0 	mov    %dl,-0x3fe51a9b(,%eax,8)
+c01023b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023b7:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c01023be:	c1 e8 10             	shr    $0x10,%eax
+c01023c1:	89 c2                	mov    %eax,%edx
+c01023c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01023c6:	66 89 14 c5 66 e5 1a 	mov    %dx,-0x3fe51a9a(,%eax,8)
+c01023cd:	c0 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT;
+	int i;
+	for (i = 0; i < 256; ++ i) {
+c01023ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01023d2:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
+c01023d9:	0f 8e 5c fe ff ff    	jle    c010223b <idt_init+0x19>
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+c01023df:	a1 e4 c7 12 c0       	mov    0xc012c7e4,%eax
+c01023e4:	66 a3 28 e9 1a c0    	mov    %ax,0xc01ae928
+c01023ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01023ed:	66 a3 2a e9 1a c0    	mov    %ax,0xc01ae92a
+c01023f3:	0f b6 05 2c e9 1a c0 	movzbl 0xc01ae92c,%eax
+c01023fa:	83 e0 e0             	and    $0xffffffe0,%eax
+c01023fd:	a2 2c e9 1a c0       	mov    %al,0xc01ae92c
+c0102402:	0f b6 05 2c e9 1a c0 	movzbl 0xc01ae92c,%eax
+c0102409:	83 e0 1f             	and    $0x1f,%eax
+c010240c:	a2 2c e9 1a c0       	mov    %al,0xc01ae92c
+c0102411:	0f b6 05 2d e9 1a c0 	movzbl 0xc01ae92d,%eax
+c0102418:	83 c8 0f             	or     $0xf,%eax
+c010241b:	a2 2d e9 1a c0       	mov    %al,0xc01ae92d
+c0102420:	0f b6 05 2d e9 1a c0 	movzbl 0xc01ae92d,%eax
+c0102427:	83 e0 ef             	and    $0xffffffef,%eax
+c010242a:	a2 2d e9 1a c0       	mov    %al,0xc01ae92d
+c010242f:	0f b6 05 2d e9 1a c0 	movzbl 0xc01ae92d,%eax
+c0102436:	83 c8 60             	or     $0x60,%eax
+c0102439:	a2 2d e9 1a c0       	mov    %al,0xc01ae92d
+c010243e:	0f b6 05 2d e9 1a c0 	movzbl 0xc01ae92d,%eax
+c0102445:	83 c8 80             	or     $0xffffff80,%eax
+c0102448:	a2 2d e9 1a c0       	mov    %al,0xc01ae92d
+c010244d:	a1 e4 c7 12 c0       	mov    0xc012c7e4,%eax
+c0102452:	c1 e8 10             	shr    $0x10,%eax
+c0102455:	66 a3 2e e9 1a c0    	mov    %ax,0xc01ae92e
+c010245b:	c7 45 f4 80 c5 12 c0 	movl   $0xc012c580,-0xc(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c0102462:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102465:	0f 01 18             	lidtl  (%eax)
+	lidt(&idt_pd);
+}
+c0102468:	c9                   	leave  
+c0102469:	c3                   	ret    
+
+c010246a <trapname>:
+
+static const char *
+trapname(int trapno) {
+c010246a:	55                   	push   %ebp
+c010246b:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c010246d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102470:	83 f8 13             	cmp    $0x13,%eax
+c0102473:	77 0c                	ja     c0102481 <trapname+0x17>
+        return excnames[trapno];
+c0102475:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102478:	8b 04 85 20 cc 10 c0 	mov    -0x3fef33e0(,%eax,4),%eax
+c010247f:	eb 18                	jmp    c0102499 <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c0102481:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c0102485:	7e 0d                	jle    c0102494 <trapname+0x2a>
+c0102487:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c010248b:	7f 07                	jg     c0102494 <trapname+0x2a>
+        return "Hardware Interrupt";
+c010248d:	b8 bf c7 10 c0       	mov    $0xc010c7bf,%eax
+c0102492:	eb 05                	jmp    c0102499 <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c0102494:	b8 d2 c7 10 c0       	mov    $0xc010c7d2,%eax
+}
+c0102499:	5d                   	pop    %ebp
+c010249a:	c3                   	ret    
+
+c010249b <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c010249b:	55                   	push   %ebp
+c010249c:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c010249e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024a1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01024a5:	66 83 f8 08          	cmp    $0x8,%ax
+c01024a9:	0f 94 c0             	sete   %al
+c01024ac:	0f b6 c0             	movzbl %al,%eax
+}
+c01024af:	5d                   	pop    %ebp
+c01024b0:	c3                   	ret    
+
+c01024b1 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c01024b1:	55                   	push   %ebp
+c01024b2:	89 e5                	mov    %esp,%ebp
+c01024b4:	83 ec 28             	sub    $0x28,%esp
+    cprintf("trapframe at %p\n", tf);
+c01024b7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024be:	c7 04 24 13 c8 10 c0 	movl   $0xc010c813,(%esp)
+c01024c5:	e8 8e de ff ff       	call   c0100358 <cprintf>
+    print_regs(&tf->tf_regs);
+c01024ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024cd:	89 04 24             	mov    %eax,(%esp)
+c01024d0:	e8 a1 01 00 00       	call   c0102676 <print_regs>
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c01024d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024d8:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c01024dc:	0f b7 c0             	movzwl %ax,%eax
+c01024df:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024e3:	c7 04 24 24 c8 10 c0 	movl   $0xc010c824,(%esp)
+c01024ea:	e8 69 de ff ff       	call   c0100358 <cprintf>
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c01024ef:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024f2:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c01024f6:	0f b7 c0             	movzwl %ax,%eax
+c01024f9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024fd:	c7 04 24 37 c8 10 c0 	movl   $0xc010c837,(%esp)
+c0102504:	e8 4f de ff ff       	call   c0100358 <cprintf>
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c0102509:	8b 45 08             	mov    0x8(%ebp),%eax
+c010250c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c0102510:	0f b7 c0             	movzwl %ax,%eax
+c0102513:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102517:	c7 04 24 4a c8 10 c0 	movl   $0xc010c84a,(%esp)
+c010251e:	e8 35 de ff ff       	call   c0100358 <cprintf>
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c0102523:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102526:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c010252a:	0f b7 c0             	movzwl %ax,%eax
+c010252d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102531:	c7 04 24 5d c8 10 c0 	movl   $0xc010c85d,(%esp)
+c0102538:	e8 1b de ff ff       	call   c0100358 <cprintf>
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c010253d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102540:	8b 40 30             	mov    0x30(%eax),%eax
+c0102543:	89 04 24             	mov    %eax,(%esp)
+c0102546:	e8 1f ff ff ff       	call   c010246a <trapname>
+c010254b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010254e:	8b 52 30             	mov    0x30(%edx),%edx
+c0102551:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0102555:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0102559:	c7 04 24 70 c8 10 c0 	movl   $0xc010c870,(%esp)
+c0102560:	e8 f3 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c0102565:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102568:	8b 40 34             	mov    0x34(%eax),%eax
+c010256b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010256f:	c7 04 24 82 c8 10 c0 	movl   $0xc010c882,(%esp)
+c0102576:	e8 dd dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c010257b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010257e:	8b 40 38             	mov    0x38(%eax),%eax
+c0102581:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102585:	c7 04 24 91 c8 10 c0 	movl   $0xc010c891,(%esp)
+c010258c:	e8 c7 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c0102591:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102594:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c0102598:	0f b7 c0             	movzwl %ax,%eax
+c010259b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010259f:	c7 04 24 a0 c8 10 c0 	movl   $0xc010c8a0,(%esp)
+c01025a6:	e8 ad dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c01025ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025ae:	8b 40 40             	mov    0x40(%eax),%eax
+c01025b1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025b5:	c7 04 24 b3 c8 10 c0 	movl   $0xc010c8b3,(%esp)
+c01025bc:	e8 97 dd ff ff       	call   c0100358 <cprintf>
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c01025c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01025c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c01025cf:	eb 3e                	jmp    c010260f <print_trapframe+0x15e>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c01025d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025d4:	8b 50 40             	mov    0x40(%eax),%edx
+c01025d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01025da:	21 d0                	and    %edx,%eax
+c01025dc:	85 c0                	test   %eax,%eax
+c01025de:	74 28                	je     c0102608 <print_trapframe+0x157>
+c01025e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01025e3:	8b 04 85 a0 c5 12 c0 	mov    -0x3fed3a60(,%eax,4),%eax
+c01025ea:	85 c0                	test   %eax,%eax
+c01025ec:	74 1a                	je     c0102608 <print_trapframe+0x157>
+            cprintf("%s,", IA32flags[i]);
+c01025ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01025f1:	8b 04 85 a0 c5 12 c0 	mov    -0x3fed3a60(,%eax,4),%eax
+c01025f8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025fc:	c7 04 24 c2 c8 10 c0 	movl   $0xc010c8c2,(%esp)
+c0102603:	e8 50 dd ff ff       	call   c0100358 <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c0102608:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010260c:	d1 65 f0             	shll   -0x10(%ebp)
+c010260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102612:	83 f8 17             	cmp    $0x17,%eax
+c0102615:	76 ba                	jbe    c01025d1 <print_trapframe+0x120>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c0102617:	8b 45 08             	mov    0x8(%ebp),%eax
+c010261a:	8b 40 40             	mov    0x40(%eax),%eax
+c010261d:	25 00 30 00 00       	and    $0x3000,%eax
+c0102622:	c1 e8 0c             	shr    $0xc,%eax
+c0102625:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102629:	c7 04 24 c6 c8 10 c0 	movl   $0xc010c8c6,(%esp)
+c0102630:	e8 23 dd ff ff       	call   c0100358 <cprintf>
+
+    if (!trap_in_kernel(tf)) {
+c0102635:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102638:	89 04 24             	mov    %eax,(%esp)
+c010263b:	e8 5b fe ff ff       	call   c010249b <trap_in_kernel>
+c0102640:	85 c0                	test   %eax,%eax
+c0102642:	75 30                	jne    c0102674 <print_trapframe+0x1c3>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c0102644:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102647:	8b 40 44             	mov    0x44(%eax),%eax
+c010264a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010264e:	c7 04 24 cf c8 10 c0 	movl   $0xc010c8cf,(%esp)
+c0102655:	e8 fe dc ff ff       	call   c0100358 <cprintf>
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c010265a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010265d:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c0102661:	0f b7 c0             	movzwl %ax,%eax
+c0102664:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102668:	c7 04 24 de c8 10 c0 	movl   $0xc010c8de,(%esp)
+c010266f:	e8 e4 dc ff ff       	call   c0100358 <cprintf>
+    }
+}
+c0102674:	c9                   	leave  
+c0102675:	c3                   	ret    
+
+c0102676 <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c0102676:	55                   	push   %ebp
+c0102677:	89 e5                	mov    %esp,%ebp
+c0102679:	83 ec 18             	sub    $0x18,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c010267c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010267f:	8b 00                	mov    (%eax),%eax
+c0102681:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102685:	c7 04 24 f1 c8 10 c0 	movl   $0xc010c8f1,(%esp)
+c010268c:	e8 c7 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c0102691:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102694:	8b 40 04             	mov    0x4(%eax),%eax
+c0102697:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010269b:	c7 04 24 00 c9 10 c0 	movl   $0xc010c900,(%esp)
+c01026a2:	e8 b1 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c01026a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026aa:	8b 40 08             	mov    0x8(%eax),%eax
+c01026ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026b1:	c7 04 24 0f c9 10 c0 	movl   $0xc010c90f,(%esp)
+c01026b8:	e8 9b dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c01026bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c0:	8b 40 0c             	mov    0xc(%eax),%eax
+c01026c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026c7:	c7 04 24 1e c9 10 c0 	movl   $0xc010c91e,(%esp)
+c01026ce:	e8 85 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c01026d3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026d6:	8b 40 10             	mov    0x10(%eax),%eax
+c01026d9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026dd:	c7 04 24 2d c9 10 c0 	movl   $0xc010c92d,(%esp)
+c01026e4:	e8 6f dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c01026e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026ec:	8b 40 14             	mov    0x14(%eax),%eax
+c01026ef:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026f3:	c7 04 24 3c c9 10 c0 	movl   $0xc010c93c,(%esp)
+c01026fa:	e8 59 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c01026ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102702:	8b 40 18             	mov    0x18(%eax),%eax
+c0102705:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102709:	c7 04 24 4b c9 10 c0 	movl   $0xc010c94b,(%esp)
+c0102710:	e8 43 dc ff ff       	call   c0100358 <cprintf>
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c0102715:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102718:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010271b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010271f:	c7 04 24 5a c9 10 c0 	movl   $0xc010c95a,(%esp)
+c0102726:	e8 2d dc ff ff       	call   c0100358 <cprintf>
+}
+c010272b:	c9                   	leave  
+c010272c:	c3                   	ret    
+
+c010272d <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c010272d:	55                   	push   %ebp
+c010272e:	89 e5                	mov    %esp,%ebp
+c0102730:	53                   	push   %ebx
+c0102731:	83 ec 34             	sub    $0x34,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c0102734:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102737:	8b 40 34             	mov    0x34(%eax),%eax
+c010273a:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c010273d:	85 c0                	test   %eax,%eax
+c010273f:	74 07                	je     c0102748 <print_pgfault+0x1b>
+c0102741:	b9 69 c9 10 c0       	mov    $0xc010c969,%ecx
+c0102746:	eb 05                	jmp    c010274d <print_pgfault+0x20>
+c0102748:	b9 7a c9 10 c0       	mov    $0xc010c97a,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c010274d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102750:	8b 40 34             	mov    0x34(%eax),%eax
+c0102753:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102756:	85 c0                	test   %eax,%eax
+c0102758:	74 07                	je     c0102761 <print_pgfault+0x34>
+c010275a:	ba 57 00 00 00       	mov    $0x57,%edx
+c010275f:	eb 05                	jmp    c0102766 <print_pgfault+0x39>
+c0102761:	ba 52 00 00 00       	mov    $0x52,%edx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c0102766:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102769:	8b 40 34             	mov    0x34(%eax),%eax
+c010276c:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c010276f:	85 c0                	test   %eax,%eax
+c0102771:	74 07                	je     c010277a <print_pgfault+0x4d>
+c0102773:	b8 55 00 00 00       	mov    $0x55,%eax
+c0102778:	eb 05                	jmp    c010277f <print_pgfault+0x52>
+c010277a:	b8 4b 00 00 00       	mov    $0x4b,%eax
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c010277f:	0f 20 d3             	mov    %cr2,%ebx
+c0102782:	89 5d f4             	mov    %ebx,-0xc(%ebp)
+    return cr2;
+c0102785:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+c0102788:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c010278c:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0102790:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0102794:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0102798:	c7 04 24 88 c9 10 c0 	movl   $0xc010c988,(%esp)
+c010279f:	e8 b4 db ff ff       	call   c0100358 <cprintf>
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c01027a4:	83 c4 34             	add    $0x34,%esp
+c01027a7:	5b                   	pop    %ebx
+c01027a8:	5d                   	pop    %ebp
+c01027a9:	c3                   	ret    
+
+c01027aa <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c01027aa:	55                   	push   %ebp
+c01027ab:	89 e5                	mov    %esp,%ebp
+c01027ad:	83 ec 28             	sub    $0x28,%esp
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+c01027b0:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c01027b5:	85 c0                	test   %eax,%eax
+c01027b7:	74 0b                	je     c01027c4 <pgfault_handler+0x1a>
+            print_pgfault(tf);
+c01027b9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027bc:	89 04 24             	mov    %eax,(%esp)
+c01027bf:	e8 69 ff ff ff       	call   c010272d <print_pgfault>
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+c01027c4:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c01027c9:	85 c0                	test   %eax,%eax
+c01027cb:	74 3d                	je     c010280a <pgfault_handler+0x60>
+        assert(current == idleproc);
+c01027cd:	8b 15 28 ee 1a c0    	mov    0xc01aee28,%edx
+c01027d3:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c01027d8:	39 c2                	cmp    %eax,%edx
+c01027da:	74 24                	je     c0102800 <pgfault_handler+0x56>
+c01027dc:	c7 44 24 0c ab c9 10 	movl   $0xc010c9ab,0xc(%esp)
+c01027e3:	c0 
+c01027e4:	c7 44 24 08 bf c9 10 	movl   $0xc010c9bf,0x8(%esp)
+c01027eb:	c0 
+c01027ec:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
+c01027f3:	00 
+c01027f4:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c01027fb:	e8 c1 e5 ff ff       	call   c0100dc1 <__panic>
+        mm = check_mm_struct;
+c0102800:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c0102805:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0102808:	eb 46                	jmp    c0102850 <pgfault_handler+0xa6>
+    }
+    else {
+        if (current == NULL) {
+c010280a:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010280f:	85 c0                	test   %eax,%eax
+c0102811:	75 32                	jne    c0102845 <pgfault_handler+0x9b>
+            print_trapframe(tf);
+c0102813:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102816:	89 04 24             	mov    %eax,(%esp)
+c0102819:	e8 93 fc ff ff       	call   c01024b1 <print_trapframe>
+            print_pgfault(tf);
+c010281e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102821:	89 04 24             	mov    %eax,(%esp)
+c0102824:	e8 04 ff ff ff       	call   c010272d <print_pgfault>
+            panic("unhandled page fault.\n");
+c0102829:	c7 44 24 08 d4 c9 10 	movl   $0xc010c9d4,0x8(%esp)
+c0102830:	c0 
+c0102831:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0102838:	00 
+c0102839:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102840:	e8 7c e5 ff ff       	call   c0100dc1 <__panic>
+        }
+        mm = current->mm;
+c0102845:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010284a:	8b 40 18             	mov    0x18(%eax),%eax
+c010284d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c0102850:	0f 20 d0             	mov    %cr2,%eax
+c0102853:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c0102856:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c0102859:	89 c2                	mov    %eax,%edx
+c010285b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010285e:	8b 40 34             	mov    0x34(%eax),%eax
+c0102861:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0102865:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102869:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010286c:	89 04 24             	mov    %eax,(%esp)
+c010286f:	e8 4d 66 00 00       	call   c0108ec1 <do_pgfault>
+}
+c0102874:	c9                   	leave  
+c0102875:	c3                   	ret    
+
+c0102876 <trap_dispatch>:
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c0102876:	55                   	push   %ebp
+c0102877:	89 e5                	mov    %esp,%ebp
+c0102879:	83 ec 28             	sub    $0x28,%esp
+    char c;
+
+    int ret=0;
+c010287c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    switch (tf->tf_trapno) {
+c0102883:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102886:	8b 40 30             	mov    0x30(%eax),%eax
+c0102889:	83 f8 2f             	cmp    $0x2f,%eax
+c010288c:	77 38                	ja     c01028c6 <trap_dispatch+0x50>
+c010288e:	83 f8 2e             	cmp    $0x2e,%eax
+c0102891:	0f 83 e2 01 00 00    	jae    c0102a79 <trap_dispatch+0x203>
+c0102897:	83 f8 20             	cmp    $0x20,%eax
+c010289a:	0f 84 07 01 00 00    	je     c01029a7 <trap_dispatch+0x131>
+c01028a0:	83 f8 20             	cmp    $0x20,%eax
+c01028a3:	77 0a                	ja     c01028af <trap_dispatch+0x39>
+c01028a5:	83 f8 0e             	cmp    $0xe,%eax
+c01028a8:	74 3e                	je     c01028e8 <trap_dispatch+0x72>
+c01028aa:	e9 82 01 00 00       	jmp    c0102a31 <trap_dispatch+0x1bb>
+c01028af:	83 f8 21             	cmp    $0x21,%eax
+c01028b2:	0f 84 37 01 00 00    	je     c01029ef <trap_dispatch+0x179>
+c01028b8:	83 f8 24             	cmp    $0x24,%eax
+c01028bb:	0f 84 05 01 00 00    	je     c01029c6 <trap_dispatch+0x150>
+c01028c1:	e9 6b 01 00 00       	jmp    c0102a31 <trap_dispatch+0x1bb>
+c01028c6:	83 f8 78             	cmp    $0x78,%eax
+c01028c9:	0f 82 62 01 00 00    	jb     c0102a31 <trap_dispatch+0x1bb>
+c01028cf:	83 f8 79             	cmp    $0x79,%eax
+c01028d2:	0f 86 3d 01 00 00    	jbe    c0102a15 <trap_dispatch+0x19f>
+c01028d8:	3d 80 00 00 00       	cmp    $0x80,%eax
+c01028dd:	0f 84 ba 00 00 00    	je     c010299d <trap_dispatch+0x127>
+c01028e3:	e9 49 01 00 00       	jmp    c0102a31 <trap_dispatch+0x1bb>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c01028e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01028eb:	89 04 24             	mov    %eax,(%esp)
+c01028ee:	e8 b7 fe ff ff       	call   c01027aa <pgfault_handler>
+c01028f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01028f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01028fa:	0f 84 98 00 00 00    	je     c0102998 <trap_dispatch+0x122>
+            print_trapframe(tf);
+c0102900:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102903:	89 04 24             	mov    %eax,(%esp)
+c0102906:	e8 a6 fb ff ff       	call   c01024b1 <print_trapframe>
+            if (current == NULL) {
+c010290b:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102910:	85 c0                	test   %eax,%eax
+c0102912:	75 23                	jne    c0102937 <trap_dispatch+0xc1>
+                panic("handle pgfault failed. ret=%d\n", ret);
+c0102914:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102917:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010291b:	c7 44 24 08 ec c9 10 	movl   $0xc010c9ec,0x8(%esp)
+c0102922:	c0 
+c0102923:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c010292a:	00 
+c010292b:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102932:	e8 8a e4 ff ff       	call   c0100dc1 <__panic>
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+c0102937:	8b 45 08             	mov    0x8(%ebp),%eax
+c010293a:	89 04 24             	mov    %eax,(%esp)
+c010293d:	e8 59 fb ff ff       	call   c010249b <trap_in_kernel>
+c0102942:	85 c0                	test   %eax,%eax
+c0102944:	74 23                	je     c0102969 <trap_dispatch+0xf3>
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c0102946:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102949:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010294d:	c7 44 24 08 0c ca 10 	movl   $0xc010ca0c,0x8(%esp)
+c0102954:	c0 
+c0102955:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
+c010295c:	00 
+c010295d:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102964:	e8 58 e4 ff ff       	call   c0100dc1 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c0102969:	c7 04 24 3a ca 10 c0 	movl   $0xc010ca3a,(%esp)
+c0102970:	e8 e3 d9 ff ff       	call   c0100358 <cprintf>
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+c0102975:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102978:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010297c:	c7 44 24 08 50 ca 10 	movl   $0xc010ca50,0x8(%esp)
+c0102983:	c0 
+c0102984:	c7 44 24 04 d8 00 00 	movl   $0xd8,0x4(%esp)
+c010298b:	00 
+c010298c:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102993:	e8 29 e4 ff ff       	call   c0100dc1 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+c0102998:	e9 dd 00 00 00       	jmp    c0102a7a <trap_dispatch+0x204>
+    case T_SYSCALL:
+        syscall();
+c010299d:	e8 80 8c 00 00       	call   c010b622 <syscall>
+        break;
+c01029a2:	e9 d3 00 00 00       	jmp    c0102a7a <trap_dispatch+0x204>
+        /* LAB6 2012011268 */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */
+	    ticks ++;
+c01029a7:	a1 78 0e 1b c0       	mov    0xc01b0e78,%eax
+c01029ac:	83 c0 01             	add    $0x1,%eax
+c01029af:	a3 78 0e 1b c0       	mov    %eax,0xc01b0e78
+	    sched_class_proc_tick(current);
+c01029b4:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c01029b9:	89 04 24             	mov    %eax,(%esp)
+c01029bc:	e8 3c 89 00 00       	call   c010b2fd <sched_class_proc_tick>
+        break;
+c01029c1:	e9 b4 00 00 00       	jmp    c0102a7a <trap_dispatch+0x204>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c01029c6:	e8 64 ed ff ff       	call   c010172f <cons_getc>
+c01029cb:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c01029ce:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01029d2:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01029d6:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01029da:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01029de:	c7 04 24 79 ca 10 c0 	movl   $0xc010ca79,(%esp)
+c01029e5:	e8 6e d9 ff ff       	call   c0100358 <cprintf>
+        break;
+c01029ea:	e9 8b 00 00 00       	jmp    c0102a7a <trap_dispatch+0x204>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c01029ef:	e8 3b ed ff ff       	call   c010172f <cons_getc>
+c01029f4:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c01029f7:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01029fb:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01029ff:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0102a03:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102a07:	c7 04 24 8b ca 10 c0 	movl   $0xc010ca8b,(%esp)
+c0102a0e:	e8 45 d9 ff ff       	call   c0100358 <cprintf>
+        break;
+c0102a13:	eb 65                	jmp    c0102a7a <trap_dispatch+0x204>
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+c0102a15:	c7 44 24 08 9a ca 10 	movl   $0xc010ca9a,0x8(%esp)
+c0102a1c:	c0 
+c0102a1d:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
+c0102a24:	00 
+c0102a25:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102a2c:	e8 90 e3 ff ff       	call   c0100dc1 <__panic>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c0102a31:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a34:	89 04 24             	mov    %eax,(%esp)
+c0102a37:	e8 75 fa ff ff       	call   c01024b1 <print_trapframe>
+        if (current != NULL) {
+c0102a3c:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102a41:	85 c0                	test   %eax,%eax
+c0102a43:	74 18                	je     c0102a5d <trap_dispatch+0x1e7>
+            cprintf("unhandled trap.\n");
+c0102a45:	c7 04 24 aa ca 10 c0 	movl   $0xc010caaa,(%esp)
+c0102a4c:	e8 07 d9 ff ff       	call   c0100358 <cprintf>
+            do_exit(-E_KILLED);
+c0102a51:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102a58:	e8 10 76 00 00       	call   c010a06d <do_exit>
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c0102a5d:	c7 44 24 08 bb ca 10 	movl   $0xc010cabb,0x8(%esp)
+c0102a64:	c0 
+c0102a65:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
+c0102a6c:	00 
+c0102a6d:	c7 04 24 ae c7 10 c0 	movl   $0xc010c7ae,(%esp)
+c0102a74:	e8 48 e3 ff ff       	call   c0100dc1 <__panic>
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c0102a79:	90                   	nop
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+c0102a7a:	c9                   	leave  
+c0102a7b:	c3                   	ret    
+
+c0102a7c <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c0102a7c:	55                   	push   %ebp
+c0102a7d:	89 e5                	mov    %esp,%ebp
+c0102a7f:	83 ec 28             	sub    $0x28,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+c0102a82:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102a87:	85 c0                	test   %eax,%eax
+c0102a89:	75 0d                	jne    c0102a98 <trap+0x1c>
+        trap_dispatch(tf);
+c0102a8b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a8e:	89 04 24             	mov    %eax,(%esp)
+c0102a91:	e8 e0 fd ff ff       	call   c0102876 <trap_dispatch>
+c0102a96:	eb 6c                	jmp    c0102b04 <trap+0x88>
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+c0102a98:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102a9d:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102aa3:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102aa8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102aab:	89 50 3c             	mov    %edx,0x3c(%eax)
+    
+        bool in_kernel = trap_in_kernel(tf);
+c0102aae:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ab1:	89 04 24             	mov    %eax,(%esp)
+c0102ab4:	e8 e2 f9 ff ff       	call   c010249b <trap_in_kernel>
+c0102ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    
+        trap_dispatch(tf);
+c0102abc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102abf:	89 04 24             	mov    %eax,(%esp)
+c0102ac2:	e8 af fd ff ff       	call   c0102876 <trap_dispatch>
+    
+        current->tf = otf;
+c0102ac7:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102acc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102acf:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel) {
+c0102ad2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102ad6:	75 2c                	jne    c0102b04 <trap+0x88>
+            if (current->flags & PF_EXITING) {
+c0102ad8:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102add:	8b 40 44             	mov    0x44(%eax),%eax
+c0102ae0:	83 e0 01             	and    $0x1,%eax
+c0102ae3:	85 c0                	test   %eax,%eax
+c0102ae5:	74 0c                	je     c0102af3 <trap+0x77>
+                do_exit(-E_KILLED);
+c0102ae7:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102aee:	e8 7a 75 00 00       	call   c010a06d <do_exit>
+            }
+            if (current->need_resched) {
+c0102af3:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0102af8:	8b 40 10             	mov    0x10(%eax),%eax
+c0102afb:	85 c0                	test   %eax,%eax
+c0102afd:	74 05                	je     c0102b04 <trap+0x88>
+                schedule();
+c0102aff:	e8 37 89 00 00       	call   c010b43b <schedule>
+            }
+        }
+    }
+}
+c0102b04:	c9                   	leave  
+c0102b05:	c3                   	ret    
+
+c0102b06 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0102b06:	1e                   	push   %ds
+    pushl %es
+c0102b07:	06                   	push   %es
+    pushl %fs
+c0102b08:	0f a0                	push   %fs
+    pushl %gs
+c0102b0a:	0f a8                	push   %gs
+    pushal
+c0102b0c:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c0102b0d:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c0102b12:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0102b14:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0102b16:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c0102b17:	e8 60 ff ff ff       	call   c0102a7c <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c0102b1c:	5c                   	pop    %esp
+
+c0102b1d <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c0102b1d:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c0102b1e:	0f a9                	pop    %gs
+    popl %fs
+c0102b20:	0f a1                	pop    %fs
+    popl %es
+c0102b22:	07                   	pop    %es
+    popl %ds
+c0102b23:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0102b24:	83 c4 08             	add    $0x8,%esp
+    iret
+c0102b27:	cf                   	iret   
+
+c0102b28 <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c0102b28:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c0102b2c:	e9 ec ff ff ff       	jmp    c0102b1d <__trapret>
+
+c0102b31 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102b31:	6a 00                	push   $0x0
+  pushl $0
+c0102b33:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102b35:	e9 cc ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b3a <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102b3a:	6a 00                	push   $0x0
+  pushl $1
+c0102b3c:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102b3e:	e9 c3 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b43 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102b43:	6a 00                	push   $0x0
+  pushl $2
+c0102b45:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102b47:	e9 ba ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b4c <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102b4c:	6a 00                	push   $0x0
+  pushl $3
+c0102b4e:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102b50:	e9 b1 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b55 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102b55:	6a 00                	push   $0x0
+  pushl $4
+c0102b57:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102b59:	e9 a8 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b5e <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102b5e:	6a 00                	push   $0x0
+  pushl $5
+c0102b60:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102b62:	e9 9f ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b67 <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102b67:	6a 00                	push   $0x0
+  pushl $6
+c0102b69:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102b6b:	e9 96 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b70 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102b70:	6a 00                	push   $0x0
+  pushl $7
+c0102b72:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102b74:	e9 8d ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b79 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102b79:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102b7b:	e9 86 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b80 <vector9>:
+.globl vector9
+vector9:
+  pushl $9
+c0102b80:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102b82:	e9 7f ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b87 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102b87:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102b89:	e9 78 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b8e <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102b8e:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102b90:	e9 71 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b95 <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102b95:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102b97:	e9 6a ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102b9c <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102b9c:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102b9e:	e9 63 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ba3 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102ba3:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102ba5:	e9 5c ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102baa <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102baa:	6a 00                	push   $0x0
+  pushl $15
+c0102bac:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102bae:	e9 53 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bb3 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102bb3:	6a 00                	push   $0x0
+  pushl $16
+c0102bb5:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102bb7:	e9 4a ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bbc <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102bbc:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102bbe:	e9 43 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bc3 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102bc3:	6a 00                	push   $0x0
+  pushl $18
+c0102bc5:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102bc7:	e9 3a ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bcc <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102bcc:	6a 00                	push   $0x0
+  pushl $19
+c0102bce:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102bd0:	e9 31 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bd5 <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102bd5:	6a 00                	push   $0x0
+  pushl $20
+c0102bd7:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102bd9:	e9 28 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bde <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102bde:	6a 00                	push   $0x0
+  pushl $21
+c0102be0:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102be2:	e9 1f ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102be7 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102be7:	6a 00                	push   $0x0
+  pushl $22
+c0102be9:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102beb:	e9 16 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bf0 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102bf0:	6a 00                	push   $0x0
+  pushl $23
+c0102bf2:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102bf4:	e9 0d ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102bf9 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102bf9:	6a 00                	push   $0x0
+  pushl $24
+c0102bfb:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102bfd:	e9 04 ff ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c02 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102c02:	6a 00                	push   $0x0
+  pushl $25
+c0102c04:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102c06:	e9 fb fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c0b <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102c0b:	6a 00                	push   $0x0
+  pushl $26
+c0102c0d:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102c0f:	e9 f2 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c14 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102c14:	6a 00                	push   $0x0
+  pushl $27
+c0102c16:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102c18:	e9 e9 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c1d <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102c1d:	6a 00                	push   $0x0
+  pushl $28
+c0102c1f:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102c21:	e9 e0 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c26 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102c26:	6a 00                	push   $0x0
+  pushl $29
+c0102c28:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102c2a:	e9 d7 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c2f <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102c2f:	6a 00                	push   $0x0
+  pushl $30
+c0102c31:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102c33:	e9 ce fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c38 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102c38:	6a 00                	push   $0x0
+  pushl $31
+c0102c3a:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102c3c:	e9 c5 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c41 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102c41:	6a 00                	push   $0x0
+  pushl $32
+c0102c43:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102c45:	e9 bc fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c4a <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102c4a:	6a 00                	push   $0x0
+  pushl $33
+c0102c4c:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102c4e:	e9 b3 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c53 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102c53:	6a 00                	push   $0x0
+  pushl $34
+c0102c55:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102c57:	e9 aa fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c5c <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102c5c:	6a 00                	push   $0x0
+  pushl $35
+c0102c5e:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102c60:	e9 a1 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c65 <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102c65:	6a 00                	push   $0x0
+  pushl $36
+c0102c67:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102c69:	e9 98 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c6e <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102c6e:	6a 00                	push   $0x0
+  pushl $37
+c0102c70:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102c72:	e9 8f fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c77 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102c77:	6a 00                	push   $0x0
+  pushl $38
+c0102c79:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102c7b:	e9 86 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c80 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102c80:	6a 00                	push   $0x0
+  pushl $39
+c0102c82:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102c84:	e9 7d fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c89 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102c89:	6a 00                	push   $0x0
+  pushl $40
+c0102c8b:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102c8d:	e9 74 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c92 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102c92:	6a 00                	push   $0x0
+  pushl $41
+c0102c94:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102c96:	e9 6b fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102c9b <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102c9b:	6a 00                	push   $0x0
+  pushl $42
+c0102c9d:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102c9f:	e9 62 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ca4 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102ca4:	6a 00                	push   $0x0
+  pushl $43
+c0102ca6:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102ca8:	e9 59 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cad <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102cad:	6a 00                	push   $0x0
+  pushl $44
+c0102caf:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102cb1:	e9 50 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cb6 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102cb6:	6a 00                	push   $0x0
+  pushl $45
+c0102cb8:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102cba:	e9 47 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cbf <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102cbf:	6a 00                	push   $0x0
+  pushl $46
+c0102cc1:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102cc3:	e9 3e fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cc8 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102cc8:	6a 00                	push   $0x0
+  pushl $47
+c0102cca:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102ccc:	e9 35 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cd1 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102cd1:	6a 00                	push   $0x0
+  pushl $48
+c0102cd3:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102cd5:	e9 2c fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cda <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102cda:	6a 00                	push   $0x0
+  pushl $49
+c0102cdc:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102cde:	e9 23 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ce3 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102ce3:	6a 00                	push   $0x0
+  pushl $50
+c0102ce5:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102ce7:	e9 1a fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cec <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102cec:	6a 00                	push   $0x0
+  pushl $51
+c0102cee:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102cf0:	e9 11 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cf5 <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102cf5:	6a 00                	push   $0x0
+  pushl $52
+c0102cf7:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102cf9:	e9 08 fe ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102cfe <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102cfe:	6a 00                	push   $0x0
+  pushl $53
+c0102d00:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102d02:	e9 ff fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d07 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102d07:	6a 00                	push   $0x0
+  pushl $54
+c0102d09:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102d0b:	e9 f6 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d10 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102d10:	6a 00                	push   $0x0
+  pushl $55
+c0102d12:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102d14:	e9 ed fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d19 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102d19:	6a 00                	push   $0x0
+  pushl $56
+c0102d1b:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102d1d:	e9 e4 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d22 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102d22:	6a 00                	push   $0x0
+  pushl $57
+c0102d24:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102d26:	e9 db fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d2b <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102d2b:	6a 00                	push   $0x0
+  pushl $58
+c0102d2d:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102d2f:	e9 d2 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d34 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102d34:	6a 00                	push   $0x0
+  pushl $59
+c0102d36:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102d38:	e9 c9 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d3d <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102d3d:	6a 00                	push   $0x0
+  pushl $60
+c0102d3f:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102d41:	e9 c0 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d46 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102d46:	6a 00                	push   $0x0
+  pushl $61
+c0102d48:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102d4a:	e9 b7 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d4f <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102d4f:	6a 00                	push   $0x0
+  pushl $62
+c0102d51:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102d53:	e9 ae fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d58 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102d58:	6a 00                	push   $0x0
+  pushl $63
+c0102d5a:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102d5c:	e9 a5 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d61 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102d61:	6a 00                	push   $0x0
+  pushl $64
+c0102d63:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102d65:	e9 9c fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d6a <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102d6a:	6a 00                	push   $0x0
+  pushl $65
+c0102d6c:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102d6e:	e9 93 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d73 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102d73:	6a 00                	push   $0x0
+  pushl $66
+c0102d75:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102d77:	e9 8a fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d7c <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102d7c:	6a 00                	push   $0x0
+  pushl $67
+c0102d7e:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102d80:	e9 81 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d85 <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102d85:	6a 00                	push   $0x0
+  pushl $68
+c0102d87:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102d89:	e9 78 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d8e <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102d8e:	6a 00                	push   $0x0
+  pushl $69
+c0102d90:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102d92:	e9 6f fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102d97 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102d97:	6a 00                	push   $0x0
+  pushl $70
+c0102d99:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102d9b:	e9 66 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102da0 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102da0:	6a 00                	push   $0x0
+  pushl $71
+c0102da2:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102da4:	e9 5d fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102da9 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102da9:	6a 00                	push   $0x0
+  pushl $72
+c0102dab:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102dad:	e9 54 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102db2 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102db2:	6a 00                	push   $0x0
+  pushl $73
+c0102db4:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102db6:	e9 4b fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102dbb <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102dbb:	6a 00                	push   $0x0
+  pushl $74
+c0102dbd:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102dbf:	e9 42 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102dc4 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102dc4:	6a 00                	push   $0x0
+  pushl $75
+c0102dc6:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102dc8:	e9 39 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102dcd <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102dcd:	6a 00                	push   $0x0
+  pushl $76
+c0102dcf:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102dd1:	e9 30 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102dd6 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102dd6:	6a 00                	push   $0x0
+  pushl $77
+c0102dd8:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102dda:	e9 27 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ddf <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102ddf:	6a 00                	push   $0x0
+  pushl $78
+c0102de1:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102de3:	e9 1e fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102de8 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102de8:	6a 00                	push   $0x0
+  pushl $79
+c0102dea:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102dec:	e9 15 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102df1 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102df1:	6a 00                	push   $0x0
+  pushl $80
+c0102df3:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102df5:	e9 0c fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102dfa <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102dfa:	6a 00                	push   $0x0
+  pushl $81
+c0102dfc:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102dfe:	e9 03 fd ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e03 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102e03:	6a 00                	push   $0x0
+  pushl $82
+c0102e05:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102e07:	e9 fa fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e0c <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102e0c:	6a 00                	push   $0x0
+  pushl $83
+c0102e0e:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102e10:	e9 f1 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e15 <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102e15:	6a 00                	push   $0x0
+  pushl $84
+c0102e17:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102e19:	e9 e8 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e1e <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102e1e:	6a 00                	push   $0x0
+  pushl $85
+c0102e20:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102e22:	e9 df fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e27 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102e27:	6a 00                	push   $0x0
+  pushl $86
+c0102e29:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102e2b:	e9 d6 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e30 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102e30:	6a 00                	push   $0x0
+  pushl $87
+c0102e32:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102e34:	e9 cd fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e39 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102e39:	6a 00                	push   $0x0
+  pushl $88
+c0102e3b:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102e3d:	e9 c4 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e42 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102e42:	6a 00                	push   $0x0
+  pushl $89
+c0102e44:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102e46:	e9 bb fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e4b <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102e4b:	6a 00                	push   $0x0
+  pushl $90
+c0102e4d:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102e4f:	e9 b2 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e54 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102e54:	6a 00                	push   $0x0
+  pushl $91
+c0102e56:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102e58:	e9 a9 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e5d <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102e5d:	6a 00                	push   $0x0
+  pushl $92
+c0102e5f:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102e61:	e9 a0 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e66 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102e66:	6a 00                	push   $0x0
+  pushl $93
+c0102e68:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102e6a:	e9 97 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e6f <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102e6f:	6a 00                	push   $0x0
+  pushl $94
+c0102e71:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102e73:	e9 8e fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e78 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102e78:	6a 00                	push   $0x0
+  pushl $95
+c0102e7a:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102e7c:	e9 85 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e81 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102e81:	6a 00                	push   $0x0
+  pushl $96
+c0102e83:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102e85:	e9 7c fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e8a <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102e8a:	6a 00                	push   $0x0
+  pushl $97
+c0102e8c:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102e8e:	e9 73 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e93 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102e93:	6a 00                	push   $0x0
+  pushl $98
+c0102e95:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102e97:	e9 6a fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102e9c <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102e9c:	6a 00                	push   $0x0
+  pushl $99
+c0102e9e:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102ea0:	e9 61 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ea5 <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102ea5:	6a 00                	push   $0x0
+  pushl $100
+c0102ea7:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102ea9:	e9 58 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102eae <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102eae:	6a 00                	push   $0x0
+  pushl $101
+c0102eb0:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102eb2:	e9 4f fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102eb7 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102eb7:	6a 00                	push   $0x0
+  pushl $102
+c0102eb9:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102ebb:	e9 46 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ec0 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102ec0:	6a 00                	push   $0x0
+  pushl $103
+c0102ec2:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102ec4:	e9 3d fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ec9 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102ec9:	6a 00                	push   $0x0
+  pushl $104
+c0102ecb:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102ecd:	e9 34 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ed2 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102ed2:	6a 00                	push   $0x0
+  pushl $105
+c0102ed4:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102ed6:	e9 2b fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102edb <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102edb:	6a 00                	push   $0x0
+  pushl $106
+c0102edd:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102edf:	e9 22 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ee4 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102ee4:	6a 00                	push   $0x0
+  pushl $107
+c0102ee6:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102ee8:	e9 19 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102eed <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102eed:	6a 00                	push   $0x0
+  pushl $108
+c0102eef:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102ef1:	e9 10 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ef6 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102ef6:	6a 00                	push   $0x0
+  pushl $109
+c0102ef8:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102efa:	e9 07 fc ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102eff <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102eff:	6a 00                	push   $0x0
+  pushl $110
+c0102f01:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102f03:	e9 fe fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f08 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102f08:	6a 00                	push   $0x0
+  pushl $111
+c0102f0a:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102f0c:	e9 f5 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f11 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102f11:	6a 00                	push   $0x0
+  pushl $112
+c0102f13:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102f15:	e9 ec fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f1a <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102f1a:	6a 00                	push   $0x0
+  pushl $113
+c0102f1c:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102f1e:	e9 e3 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f23 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102f23:	6a 00                	push   $0x0
+  pushl $114
+c0102f25:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102f27:	e9 da fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f2c <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102f2c:	6a 00                	push   $0x0
+  pushl $115
+c0102f2e:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102f30:	e9 d1 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f35 <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102f35:	6a 00                	push   $0x0
+  pushl $116
+c0102f37:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102f39:	e9 c8 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f3e <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102f3e:	6a 00                	push   $0x0
+  pushl $117
+c0102f40:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102f42:	e9 bf fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f47 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102f47:	6a 00                	push   $0x0
+  pushl $118
+c0102f49:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102f4b:	e9 b6 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f50 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102f50:	6a 00                	push   $0x0
+  pushl $119
+c0102f52:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102f54:	e9 ad fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f59 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102f59:	6a 00                	push   $0x0
+  pushl $120
+c0102f5b:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102f5d:	e9 a4 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f62 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102f62:	6a 00                	push   $0x0
+  pushl $121
+c0102f64:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102f66:	e9 9b fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f6b <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102f6b:	6a 00                	push   $0x0
+  pushl $122
+c0102f6d:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102f6f:	e9 92 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f74 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102f74:	6a 00                	push   $0x0
+  pushl $123
+c0102f76:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102f78:	e9 89 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f7d <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102f7d:	6a 00                	push   $0x0
+  pushl $124
+c0102f7f:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102f81:	e9 80 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f86 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102f86:	6a 00                	push   $0x0
+  pushl $125
+c0102f88:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102f8a:	e9 77 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f8f <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102f8f:	6a 00                	push   $0x0
+  pushl $126
+c0102f91:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102f93:	e9 6e fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102f98 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102f98:	6a 00                	push   $0x0
+  pushl $127
+c0102f9a:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102f9c:	e9 65 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fa1 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102fa1:	6a 00                	push   $0x0
+  pushl $128
+c0102fa3:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102fa8:	e9 59 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fad <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102fad:	6a 00                	push   $0x0
+  pushl $129
+c0102faf:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102fb4:	e9 4d fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fb9 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102fb9:	6a 00                	push   $0x0
+  pushl $130
+c0102fbb:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102fc0:	e9 41 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fc5 <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102fc5:	6a 00                	push   $0x0
+  pushl $131
+c0102fc7:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102fcc:	e9 35 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fd1 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102fd1:	6a 00                	push   $0x0
+  pushl $132
+c0102fd3:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102fd8:	e9 29 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fdd <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102fdd:	6a 00                	push   $0x0
+  pushl $133
+c0102fdf:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102fe4:	e9 1d fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102fe9 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102fe9:	6a 00                	push   $0x0
+  pushl $134
+c0102feb:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102ff0:	e9 11 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0102ff5 <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102ff5:	6a 00                	push   $0x0
+  pushl $135
+c0102ff7:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102ffc:	e9 05 fb ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103001 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0103001:	6a 00                	push   $0x0
+  pushl $136
+c0103003:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0103008:	e9 f9 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c010300d <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c010300d:	6a 00                	push   $0x0
+  pushl $137
+c010300f:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0103014:	e9 ed fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103019 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0103019:	6a 00                	push   $0x0
+  pushl $138
+c010301b:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0103020:	e9 e1 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103025 <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c0103025:	6a 00                	push   $0x0
+  pushl $139
+c0103027:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c010302c:	e9 d5 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103031 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0103031:	6a 00                	push   $0x0
+  pushl $140
+c0103033:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0103038:	e9 c9 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c010303d <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c010303d:	6a 00                	push   $0x0
+  pushl $141
+c010303f:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0103044:	e9 bd fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103049 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0103049:	6a 00                	push   $0x0
+  pushl $142
+c010304b:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0103050:	e9 b1 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103055 <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c0103055:	6a 00                	push   $0x0
+  pushl $143
+c0103057:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c010305c:	e9 a5 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103061 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0103061:	6a 00                	push   $0x0
+  pushl $144
+c0103063:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0103068:	e9 99 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c010306d <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c010306d:	6a 00                	push   $0x0
+  pushl $145
+c010306f:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0103074:	e9 8d fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103079 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c0103079:	6a 00                	push   $0x0
+  pushl $146
+c010307b:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0103080:	e9 81 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103085 <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c0103085:	6a 00                	push   $0x0
+  pushl $147
+c0103087:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c010308c:	e9 75 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103091 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0103091:	6a 00                	push   $0x0
+  pushl $148
+c0103093:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c0103098:	e9 69 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c010309d <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c010309d:	6a 00                	push   $0x0
+  pushl $149
+c010309f:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c01030a4:	e9 5d fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030a9 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c01030a9:	6a 00                	push   $0x0
+  pushl $150
+c01030ab:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c01030b0:	e9 51 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030b5 <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c01030b5:	6a 00                	push   $0x0
+  pushl $151
+c01030b7:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c01030bc:	e9 45 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030c1 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c01030c1:	6a 00                	push   $0x0
+  pushl $152
+c01030c3:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c01030c8:	e9 39 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030cd <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c01030cd:	6a 00                	push   $0x0
+  pushl $153
+c01030cf:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c01030d4:	e9 2d fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030d9 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c01030d9:	6a 00                	push   $0x0
+  pushl $154
+c01030db:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c01030e0:	e9 21 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030e5 <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c01030e5:	6a 00                	push   $0x0
+  pushl $155
+c01030e7:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c01030ec:	e9 15 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030f1 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c01030f1:	6a 00                	push   $0x0
+  pushl $156
+c01030f3:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c01030f8:	e9 09 fa ff ff       	jmp    c0102b06 <__alltraps>
+
+c01030fd <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c01030fd:	6a 00                	push   $0x0
+  pushl $157
+c01030ff:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c0103104:	e9 fd f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103109 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c0103109:	6a 00                	push   $0x0
+  pushl $158
+c010310b:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c0103110:	e9 f1 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103115 <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c0103115:	6a 00                	push   $0x0
+  pushl $159
+c0103117:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c010311c:	e9 e5 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103121 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c0103121:	6a 00                	push   $0x0
+  pushl $160
+c0103123:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c0103128:	e9 d9 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010312d <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c010312d:	6a 00                	push   $0x0
+  pushl $161
+c010312f:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c0103134:	e9 cd f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103139 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c0103139:	6a 00                	push   $0x0
+  pushl $162
+c010313b:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c0103140:	e9 c1 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103145 <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c0103145:	6a 00                	push   $0x0
+  pushl $163
+c0103147:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c010314c:	e9 b5 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103151 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c0103151:	6a 00                	push   $0x0
+  pushl $164
+c0103153:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c0103158:	e9 a9 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010315d <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c010315d:	6a 00                	push   $0x0
+  pushl $165
+c010315f:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c0103164:	e9 9d f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103169 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c0103169:	6a 00                	push   $0x0
+  pushl $166
+c010316b:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c0103170:	e9 91 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103175 <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c0103175:	6a 00                	push   $0x0
+  pushl $167
+c0103177:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c010317c:	e9 85 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103181 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0103181:	6a 00                	push   $0x0
+  pushl $168
+c0103183:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c0103188:	e9 79 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010318d <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c010318d:	6a 00                	push   $0x0
+  pushl $169
+c010318f:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c0103194:	e9 6d f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103199 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c0103199:	6a 00                	push   $0x0
+  pushl $170
+c010319b:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c01031a0:	e9 61 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031a5 <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c01031a5:	6a 00                	push   $0x0
+  pushl $171
+c01031a7:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c01031ac:	e9 55 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031b1 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c01031b1:	6a 00                	push   $0x0
+  pushl $172
+c01031b3:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c01031b8:	e9 49 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031bd <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c01031bd:	6a 00                	push   $0x0
+  pushl $173
+c01031bf:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c01031c4:	e9 3d f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031c9 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c01031c9:	6a 00                	push   $0x0
+  pushl $174
+c01031cb:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c01031d0:	e9 31 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031d5 <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c01031d5:	6a 00                	push   $0x0
+  pushl $175
+c01031d7:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c01031dc:	e9 25 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031e1 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c01031e1:	6a 00                	push   $0x0
+  pushl $176
+c01031e3:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c01031e8:	e9 19 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031ed <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c01031ed:	6a 00                	push   $0x0
+  pushl $177
+c01031ef:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c01031f4:	e9 0d f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01031f9 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c01031f9:	6a 00                	push   $0x0
+  pushl $178
+c01031fb:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c0103200:	e9 01 f9 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103205 <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c0103205:	6a 00                	push   $0x0
+  pushl $179
+c0103207:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c010320c:	e9 f5 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103211 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c0103211:	6a 00                	push   $0x0
+  pushl $180
+c0103213:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c0103218:	e9 e9 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010321d <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c010321d:	6a 00                	push   $0x0
+  pushl $181
+c010321f:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c0103224:	e9 dd f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103229 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c0103229:	6a 00                	push   $0x0
+  pushl $182
+c010322b:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c0103230:	e9 d1 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103235 <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c0103235:	6a 00                	push   $0x0
+  pushl $183
+c0103237:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c010323c:	e9 c5 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103241 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c0103241:	6a 00                	push   $0x0
+  pushl $184
+c0103243:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c0103248:	e9 b9 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010324d <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c010324d:	6a 00                	push   $0x0
+  pushl $185
+c010324f:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c0103254:	e9 ad f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103259 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c0103259:	6a 00                	push   $0x0
+  pushl $186
+c010325b:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c0103260:	e9 a1 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103265 <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c0103265:	6a 00                	push   $0x0
+  pushl $187
+c0103267:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c010326c:	e9 95 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103271 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c0103271:	6a 00                	push   $0x0
+  pushl $188
+c0103273:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c0103278:	e9 89 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010327d <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c010327d:	6a 00                	push   $0x0
+  pushl $189
+c010327f:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c0103284:	e9 7d f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103289 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c0103289:	6a 00                	push   $0x0
+  pushl $190
+c010328b:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0103290:	e9 71 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103295 <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c0103295:	6a 00                	push   $0x0
+  pushl $191
+c0103297:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c010329c:	e9 65 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032a1 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c01032a1:	6a 00                	push   $0x0
+  pushl $192
+c01032a3:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c01032a8:	e9 59 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032ad <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c01032ad:	6a 00                	push   $0x0
+  pushl $193
+c01032af:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c01032b4:	e9 4d f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032b9 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c01032b9:	6a 00                	push   $0x0
+  pushl $194
+c01032bb:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c01032c0:	e9 41 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032c5 <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c01032c5:	6a 00                	push   $0x0
+  pushl $195
+c01032c7:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c01032cc:	e9 35 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032d1 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c01032d1:	6a 00                	push   $0x0
+  pushl $196
+c01032d3:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c01032d8:	e9 29 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032dd <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c01032dd:	6a 00                	push   $0x0
+  pushl $197
+c01032df:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c01032e4:	e9 1d f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032e9 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c01032e9:	6a 00                	push   $0x0
+  pushl $198
+c01032eb:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c01032f0:	e9 11 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01032f5 <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c01032f5:	6a 00                	push   $0x0
+  pushl $199
+c01032f7:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c01032fc:	e9 05 f8 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103301 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c0103301:	6a 00                	push   $0x0
+  pushl $200
+c0103303:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c0103308:	e9 f9 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010330d <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c010330d:	6a 00                	push   $0x0
+  pushl $201
+c010330f:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c0103314:	e9 ed f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103319 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c0103319:	6a 00                	push   $0x0
+  pushl $202
+c010331b:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c0103320:	e9 e1 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103325 <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c0103325:	6a 00                	push   $0x0
+  pushl $203
+c0103327:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c010332c:	e9 d5 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103331 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c0103331:	6a 00                	push   $0x0
+  pushl $204
+c0103333:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c0103338:	e9 c9 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010333d <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c010333d:	6a 00                	push   $0x0
+  pushl $205
+c010333f:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c0103344:	e9 bd f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103349 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c0103349:	6a 00                	push   $0x0
+  pushl $206
+c010334b:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c0103350:	e9 b1 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103355 <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c0103355:	6a 00                	push   $0x0
+  pushl $207
+c0103357:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c010335c:	e9 a5 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103361 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c0103361:	6a 00                	push   $0x0
+  pushl $208
+c0103363:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c0103368:	e9 99 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010336d <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c010336d:	6a 00                	push   $0x0
+  pushl $209
+c010336f:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c0103374:	e9 8d f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103379 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c0103379:	6a 00                	push   $0x0
+  pushl $210
+c010337b:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c0103380:	e9 81 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103385 <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c0103385:	6a 00                	push   $0x0
+  pushl $211
+c0103387:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c010338c:	e9 75 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103391 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c0103391:	6a 00                	push   $0x0
+  pushl $212
+c0103393:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c0103398:	e9 69 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010339d <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c010339d:	6a 00                	push   $0x0
+  pushl $213
+c010339f:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c01033a4:	e9 5d f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033a9 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c01033a9:	6a 00                	push   $0x0
+  pushl $214
+c01033ab:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c01033b0:	e9 51 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033b5 <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c01033b5:	6a 00                	push   $0x0
+  pushl $215
+c01033b7:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c01033bc:	e9 45 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033c1 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c01033c1:	6a 00                	push   $0x0
+  pushl $216
+c01033c3:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c01033c8:	e9 39 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033cd <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c01033cd:	6a 00                	push   $0x0
+  pushl $217
+c01033cf:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c01033d4:	e9 2d f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033d9 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c01033d9:	6a 00                	push   $0x0
+  pushl $218
+c01033db:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c01033e0:	e9 21 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033e5 <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c01033e5:	6a 00                	push   $0x0
+  pushl $219
+c01033e7:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c01033ec:	e9 15 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033f1 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c01033f1:	6a 00                	push   $0x0
+  pushl $220
+c01033f3:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c01033f8:	e9 09 f7 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01033fd <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c01033fd:	6a 00                	push   $0x0
+  pushl $221
+c01033ff:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c0103404:	e9 fd f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103409 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c0103409:	6a 00                	push   $0x0
+  pushl $222
+c010340b:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c0103410:	e9 f1 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103415 <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c0103415:	6a 00                	push   $0x0
+  pushl $223
+c0103417:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c010341c:	e9 e5 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103421 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c0103421:	6a 00                	push   $0x0
+  pushl $224
+c0103423:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c0103428:	e9 d9 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010342d <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c010342d:	6a 00                	push   $0x0
+  pushl $225
+c010342f:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c0103434:	e9 cd f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103439 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c0103439:	6a 00                	push   $0x0
+  pushl $226
+c010343b:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c0103440:	e9 c1 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103445 <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c0103445:	6a 00                	push   $0x0
+  pushl $227
+c0103447:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c010344c:	e9 b5 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103451 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c0103451:	6a 00                	push   $0x0
+  pushl $228
+c0103453:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c0103458:	e9 a9 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010345d <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c010345d:	6a 00                	push   $0x0
+  pushl $229
+c010345f:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c0103464:	e9 9d f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103469 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c0103469:	6a 00                	push   $0x0
+  pushl $230
+c010346b:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c0103470:	e9 91 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103475 <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c0103475:	6a 00                	push   $0x0
+  pushl $231
+c0103477:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c010347c:	e9 85 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103481 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c0103481:	6a 00                	push   $0x0
+  pushl $232
+c0103483:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c0103488:	e9 79 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010348d <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c010348d:	6a 00                	push   $0x0
+  pushl $233
+c010348f:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c0103494:	e9 6d f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103499 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c0103499:	6a 00                	push   $0x0
+  pushl $234
+c010349b:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c01034a0:	e9 61 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034a5 <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c01034a5:	6a 00                	push   $0x0
+  pushl $235
+c01034a7:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c01034ac:	e9 55 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034b1 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c01034b1:	6a 00                	push   $0x0
+  pushl $236
+c01034b3:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c01034b8:	e9 49 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034bd <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c01034bd:	6a 00                	push   $0x0
+  pushl $237
+c01034bf:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c01034c4:	e9 3d f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034c9 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c01034c9:	6a 00                	push   $0x0
+  pushl $238
+c01034cb:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c01034d0:	e9 31 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034d5 <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c01034d5:	6a 00                	push   $0x0
+  pushl $239
+c01034d7:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c01034dc:	e9 25 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034e1 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c01034e1:	6a 00                	push   $0x0
+  pushl $240
+c01034e3:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c01034e8:	e9 19 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034ed <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c01034ed:	6a 00                	push   $0x0
+  pushl $241
+c01034ef:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c01034f4:	e9 0d f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01034f9 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c01034f9:	6a 00                	push   $0x0
+  pushl $242
+c01034fb:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c0103500:	e9 01 f6 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103505 <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c0103505:	6a 00                	push   $0x0
+  pushl $243
+c0103507:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c010350c:	e9 f5 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103511 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c0103511:	6a 00                	push   $0x0
+  pushl $244
+c0103513:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c0103518:	e9 e9 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010351d <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c010351d:	6a 00                	push   $0x0
+  pushl $245
+c010351f:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c0103524:	e9 dd f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103529 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c0103529:	6a 00                	push   $0x0
+  pushl $246
+c010352b:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c0103530:	e9 d1 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103535 <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c0103535:	6a 00                	push   $0x0
+  pushl $247
+c0103537:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c010353c:	e9 c5 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103541 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c0103541:	6a 00                	push   $0x0
+  pushl $248
+c0103543:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c0103548:	e9 b9 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010354d <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c010354d:	6a 00                	push   $0x0
+  pushl $249
+c010354f:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c0103554:	e9 ad f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103559 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c0103559:	6a 00                	push   $0x0
+  pushl $250
+c010355b:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c0103560:	e9 a1 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103565 <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c0103565:	6a 00                	push   $0x0
+  pushl $251
+c0103567:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c010356c:	e9 95 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103571 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c0103571:	6a 00                	push   $0x0
+  pushl $252
+c0103573:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c0103578:	e9 89 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c010357d <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c010357d:	6a 00                	push   $0x0
+  pushl $253
+c010357f:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c0103584:	e9 7d f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103589 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c0103589:	6a 00                	push   $0x0
+  pushl $254
+c010358b:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c0103590:	e9 71 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c0103595 <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c0103595:	6a 00                	push   $0x0
+  pushl $255
+c0103597:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c010359c:	e9 65 f5 ff ff       	jmp    c0102b06 <__alltraps>
+
+c01035a1 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01035a1:	55                   	push   %ebp
+c01035a2:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01035a4:	8b 55 08             	mov    0x8(%ebp),%edx
+c01035a7:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c01035ac:	29 c2                	sub    %eax,%edx
+c01035ae:	89 d0                	mov    %edx,%eax
+c01035b0:	c1 f8 05             	sar    $0x5,%eax
+}
+c01035b3:	5d                   	pop    %ebp
+c01035b4:	c3                   	ret    
+
+c01035b5 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01035b5:	55                   	push   %ebp
+c01035b6:	89 e5                	mov    %esp,%ebp
+c01035b8:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01035bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035be:	89 04 24             	mov    %eax,(%esp)
+c01035c1:	e8 db ff ff ff       	call   c01035a1 <page2ppn>
+c01035c6:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01035c9:	c9                   	leave  
+c01035ca:	c3                   	ret    
+
+c01035cb <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c01035cb:	55                   	push   %ebp
+c01035cc:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01035ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035d1:	8b 00                	mov    (%eax),%eax
+}
+c01035d3:	5d                   	pop    %ebp
+c01035d4:	c3                   	ret    
+
+c01035d5 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c01035d5:	55                   	push   %ebp
+c01035d6:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c01035d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01035db:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01035de:	89 10                	mov    %edx,(%eax)
+}
+c01035e0:	5d                   	pop    %ebp
+c01035e1:	c3                   	ret    
+
+c01035e2 <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c01035e2:	55                   	push   %ebp
+c01035e3:	89 e5                	mov    %esp,%ebp
+c01035e5:	83 ec 10             	sub    $0x10,%esp
+c01035e8:	c7 45 fc 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01035ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01035f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01035f5:	89 50 04             	mov    %edx,0x4(%eax)
+c01035f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01035fb:	8b 50 04             	mov    0x4(%eax),%edx
+c01035fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103601:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c0103603:	c7 05 84 0e 1b c0 00 	movl   $0x0,0xc01b0e84
+c010360a:	00 00 00 
+}
+c010360d:	c9                   	leave  
+c010360e:	c3                   	ret    
+
+c010360f <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c010360f:	55                   	push   %ebp
+c0103610:	89 e5                	mov    %esp,%ebp
+c0103612:	83 ec 58             	sub    $0x58,%esp
+    assert(n > 0);
+c0103615:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0103619:	75 24                	jne    c010363f <default_init_memmap+0x30>
+c010361b:	c7 44 24 0c 70 cc 10 	movl   $0xc010cc70,0xc(%esp)
+c0103622:	c0 
+c0103623:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010362a:	c0 
+c010362b:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
+c0103632:	00 
+c0103633:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010363a:	e8 82 d7 ff ff       	call   c0100dc1 <__panic>
+    struct Page *p = base;
+c010363f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103642:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0103645:	eb 7d                	jmp    c01036c4 <default_init_memmap+0xb5>
+        assert(PageReserved(p));
+c0103647:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010364a:	83 c0 04             	add    $0x4,%eax
+c010364d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+c0103654:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0103657:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010365a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010365d:	0f a3 10             	bt     %edx,(%eax)
+c0103660:	19 c0                	sbb    %eax,%eax
+c0103662:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return oldbit != 0;
+c0103665:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0103669:	0f 95 c0             	setne  %al
+c010366c:	0f b6 c0             	movzbl %al,%eax
+c010366f:	85 c0                	test   %eax,%eax
+c0103671:	75 24                	jne    c0103697 <default_init_memmap+0x88>
+c0103673:	c7 44 24 0c a1 cc 10 	movl   $0xc010cca1,0xc(%esp)
+c010367a:	c0 
+c010367b:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103682:	c0 
+c0103683:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
+c010368a:	00 
+c010368b:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103692:	e8 2a d7 ff ff       	call   c0100dc1 <__panic>
+        p->flags = p->property = 0;
+c0103697:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010369a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c01036a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036a4:	8b 50 08             	mov    0x8(%eax),%edx
+c01036a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036aa:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c01036ad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01036b4:	00 
+c01036b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036b8:	89 04 24             	mov    %eax,(%esp)
+c01036bb:	e8 15 ff ff ff       	call   c01035d5 <set_page_ref>
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01036c0:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01036c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01036c7:	c1 e0 05             	shl    $0x5,%eax
+c01036ca:	89 c2                	mov    %eax,%edx
+c01036cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036cf:	01 d0                	add    %edx,%eax
+c01036d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01036d4:	0f 85 6d ff ff ff    	jne    c0103647 <default_init_memmap+0x38>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01036da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036dd:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01036e0:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01036e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036e6:	83 c0 04             	add    $0x4,%eax
+c01036e9:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c01036f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01036f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01036f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01036f9:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c01036fc:	8b 15 84 0e 1b c0    	mov    0xc01b0e84,%edx
+c0103702:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103705:	01 d0                	add    %edx,%eax
+c0103707:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+    list_add(&free_list, &(base->page_link));
+c010370c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010370f:	83 c0 0c             	add    $0xc,%eax
+c0103712:	c7 45 dc 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x24(%ebp)
+c0103719:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010371c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010371f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0103722:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103725:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0103728:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010372b:	8b 40 04             	mov    0x4(%eax),%eax
+c010372e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103731:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0103734:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103737:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010373a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010373d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103740:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0103743:	89 10                	mov    %edx,(%eax)
+c0103745:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103748:	8b 10                	mov    (%eax),%edx
+c010374a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010374d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103750:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103753:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0103756:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103759:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010375c:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c010375f:	89 10                	mov    %edx,(%eax)
+}
+c0103761:	c9                   	leave  
+c0103762:	c3                   	ret    
+
+c0103763 <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c0103763:	55                   	push   %ebp
+c0103764:	89 e5                	mov    %esp,%ebp
+c0103766:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c0103769:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010376d:	75 24                	jne    c0103793 <default_alloc_pages+0x30>
+c010376f:	c7 44 24 0c 70 cc 10 	movl   $0xc010cc70,0xc(%esp)
+c0103776:	c0 
+c0103777:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010377e:	c0 
+c010377f:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
+c0103786:	00 
+c0103787:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010378e:	e8 2e d6 ff ff       	call   c0100dc1 <__panic>
+    if (n > nr_free) {
+c0103793:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c0103798:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010379b:	73 0a                	jae    c01037a7 <default_alloc_pages+0x44>
+        return NULL;
+c010379d:	b8 00 00 00 00       	mov    $0x0,%eax
+c01037a2:	e9 40 01 00 00       	jmp    c01038e7 <default_alloc_pages+0x184>
+    }
+    struct Page *page = NULL;
+c01037a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c01037ae:	c7 45 f0 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01037b5:	eb 1c                	jmp    c01037d3 <default_alloc_pages+0x70>
+        struct Page *p = le2page(le, page_link);
+c01037b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01037ba:	83 e8 0c             	sub    $0xc,%eax
+c01037bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (p->property >= n) {
+c01037c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01037c3:	8b 40 08             	mov    0x8(%eax),%eax
+c01037c6:	3b 45 08             	cmp    0x8(%ebp),%eax
+c01037c9:	72 08                	jb     c01037d3 <default_alloc_pages+0x70>
+            page = p;
+c01037cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01037ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c01037d1:	eb 18                	jmp    c01037eb <default_alloc_pages+0x88>
+c01037d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01037d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01037d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01037dc:	8b 40 04             	mov    0x4(%eax),%eax
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c01037df:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01037e2:	81 7d f0 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x10(%ebp)
+c01037e9:	75 cc                	jne    c01037b7 <default_alloc_pages+0x54>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c01037eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01037ef:	0f 84 ef 00 00 00    	je     c01038e4 <default_alloc_pages+0x181>
+        //list_del(&(page->page_link));
+        if (page->property > n) {
+c01037f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01037f8:	8b 40 08             	mov    0x8(%eax),%eax
+c01037fb:	3b 45 08             	cmp    0x8(%ebp),%eax
+c01037fe:	0f 86 8f 00 00 00    	jbe    c0103893 <default_alloc_pages+0x130>
+            struct Page *p = page + n;
+c0103804:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103807:	c1 e0 05             	shl    $0x5,%eax
+c010380a:	89 c2                	mov    %eax,%edx
+c010380c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010380f:	01 d0                	add    %edx,%eax
+c0103811:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            p->property = page->property - n;
+c0103814:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103817:	8b 40 08             	mov    0x8(%eax),%eax
+c010381a:	2b 45 08             	sub    0x8(%ebp),%eax
+c010381d:	89 c2                	mov    %eax,%edx
+c010381f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103822:	89 50 08             	mov    %edx,0x8(%eax)
+	    SetPageProperty(p);
+c0103825:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103828:	83 c0 04             	add    $0x4,%eax
+c010382b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0103832:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0103835:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103838:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010383b:	0f ab 10             	bts    %edx,(%eax)
+            list_add(&free_list, &(p->page_link));
+c010383e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103841:	83 c0 0c             	add    $0xc,%eax
+c0103844:	c7 45 d8 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x28(%ebp)
+c010384b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c010384e:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103851:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103854:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0103857:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010385a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010385d:	8b 40 04             	mov    0x4(%eax),%eax
+c0103860:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0103863:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c0103866:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103869:	89 55 c4             	mov    %edx,-0x3c(%ebp)
+c010386c:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010386f:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103872:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0103875:	89 10                	mov    %edx,(%eax)
+c0103877:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010387a:	8b 10                	mov    (%eax),%edx
+c010387c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010387f:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103882:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103885:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0103888:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010388b:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010388e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0103891:	89 10                	mov    %edx,(%eax)
+        }
+        list_del(&(page->page_link));
+c0103893:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103896:	83 c0 0c             	add    $0xc,%eax
+c0103899:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010389c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010389f:	8b 40 04             	mov    0x4(%eax),%eax
+c01038a2:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01038a5:	8b 12                	mov    (%edx),%edx
+c01038a7:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c01038aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01038ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01038b0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01038b3:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01038b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01038b9:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c01038bc:	89 10                	mov    %edx,(%eax)
+        nr_free -= n;
+c01038be:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c01038c3:	2b 45 08             	sub    0x8(%ebp),%eax
+c01038c6:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+        ClearPageProperty(page);
+c01038cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01038ce:	83 c0 04             	add    $0x4,%eax
+c01038d1:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c01038d8:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01038db:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01038de:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01038e1:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c01038e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01038e7:	c9                   	leave  
+c01038e8:	c3                   	ret    
+
+c01038e9 <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c01038e9:	55                   	push   %ebp
+c01038ea:	89 e5                	mov    %esp,%ebp
+c01038ec:	81 ec 98 00 00 00    	sub    $0x98,%esp
+    assert(n > 0);
+c01038f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01038f6:	75 24                	jne    c010391c <default_free_pages+0x33>
+c01038f8:	c7 44 24 0c 70 cc 10 	movl   $0xc010cc70,0xc(%esp)
+c01038ff:	c0 
+c0103900:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103907:	c0 
+c0103908:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c010390f:	00 
+c0103910:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103917:	e8 a5 d4 ff ff       	call   c0100dc1 <__panic>
+    struct Page *p = base;
+c010391c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010391f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0103922:	e9 9d 00 00 00       	jmp    c01039c4 <default_free_pages+0xdb>
+        assert(!PageReserved(p) && !PageProperty(p));
+c0103927:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010392a:	83 c0 04             	add    $0x4,%eax
+c010392d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0103934:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0103937:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010393a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010393d:	0f a3 10             	bt     %edx,(%eax)
+c0103940:	19 c0                	sbb    %eax,%eax
+c0103942:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return oldbit != 0;
+c0103945:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103949:	0f 95 c0             	setne  %al
+c010394c:	0f b6 c0             	movzbl %al,%eax
+c010394f:	85 c0                	test   %eax,%eax
+c0103951:	75 2c                	jne    c010397f <default_free_pages+0x96>
+c0103953:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103956:	83 c0 04             	add    $0x4,%eax
+c0103959:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0103960:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0103963:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103966:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103969:	0f a3 10             	bt     %edx,(%eax)
+c010396c:	19 c0                	sbb    %eax,%eax
+c010396e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    return oldbit != 0;
+c0103971:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0103975:	0f 95 c0             	setne  %al
+c0103978:	0f b6 c0             	movzbl %al,%eax
+c010397b:	85 c0                	test   %eax,%eax
+c010397d:	74 24                	je     c01039a3 <default_free_pages+0xba>
+c010397f:	c7 44 24 0c b4 cc 10 	movl   $0xc010ccb4,0xc(%esp)
+c0103986:	c0 
+c0103987:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010398e:	c0 
+c010398f:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
+c0103996:	00 
+c0103997:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010399e:	e8 1e d4 ff ff       	call   c0100dc1 <__panic>
+        p->flags = 0;
+c01039a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c01039ad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01039b4:	00 
+c01039b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039b8:	89 04 24             	mov    %eax,(%esp)
+c01039bb:	e8 15 fc ff ff       	call   c01035d5 <set_page_ref>
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01039c0:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01039c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01039c7:	c1 e0 05             	shl    $0x5,%eax
+c01039ca:	89 c2                	mov    %eax,%edx
+c01039cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039cf:	01 d0                	add    %edx,%eax
+c01039d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01039d4:	0f 85 4d ff ff ff    	jne    c0103927 <default_free_pages+0x3e>
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01039da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039dd:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01039e0:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01039e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01039e6:	83 c0 04             	add    $0x4,%eax
+c01039e9:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c01039f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01039f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01039f6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01039f9:	0f ab 10             	bts    %edx,(%eax)
+c01039fc:	c7 45 cc 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x34(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103a03:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103a06:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c0103a09:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0103a0c:	e9 fa 00 00 00       	jmp    c0103b0b <default_free_pages+0x222>
+        p = le2page(le, page_link);
+c0103a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103a14:	83 e8 0c             	sub    $0xc,%eax
+c0103a17:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103a1d:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103a20:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103a23:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0103a26:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (base + base->property == p) {
+c0103a29:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a2c:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a2f:	c1 e0 05             	shl    $0x5,%eax
+c0103a32:	89 c2                	mov    %eax,%edx
+c0103a34:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a37:	01 d0                	add    %edx,%eax
+c0103a39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103a3c:	75 5a                	jne    c0103a98 <default_free_pages+0x1af>
+            base->property += p->property;
+c0103a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a41:	8b 50 08             	mov    0x8(%eax),%edx
+c0103a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a47:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a4a:	01 c2                	add    %eax,%edx
+c0103a4c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103a4f:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c0103a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a55:	83 c0 04             	add    $0x4,%eax
+c0103a58:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0103a5f:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103a62:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103a65:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0103a68:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c0103a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a6e:	83 c0 0c             	add    $0xc,%eax
+c0103a71:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103a74:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0103a77:	8b 40 04             	mov    0x4(%eax),%eax
+c0103a7a:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0103a7d:	8b 12                	mov    (%edx),%edx
+c0103a7f:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c0103a82:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103a85:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103a88:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0103a8b:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0103a8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0103a91:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0103a94:	89 10                	mov    %edx,(%eax)
+c0103a96:	eb 73                	jmp    c0103b0b <default_free_pages+0x222>
+        }
+        else if (p + p->property == base) {
+c0103a98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a9b:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a9e:	c1 e0 05             	shl    $0x5,%eax
+c0103aa1:	89 c2                	mov    %eax,%edx
+c0103aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103aa6:	01 d0                	add    %edx,%eax
+c0103aa8:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0103aab:	75 5e                	jne    c0103b0b <default_free_pages+0x222>
+            p->property += base->property;
+c0103aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ab0:	8b 50 08             	mov    0x8(%eax),%edx
+c0103ab3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103ab6:	8b 40 08             	mov    0x8(%eax),%eax
+c0103ab9:	01 c2                	add    %eax,%edx
+c0103abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103abe:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c0103ac1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103ac4:	83 c0 04             	add    $0x4,%eax
+c0103ac7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0103ace:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c0103ad1:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103ad4:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0103ad7:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c0103ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103add:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c0103ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ae3:	83 c0 0c             	add    $0xc,%eax
+c0103ae6:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0103ae9:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103aec:	8b 40 04             	mov    0x4(%eax),%eax
+c0103aef:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0103af2:	8b 12                	mov    (%edx),%edx
+c0103af4:	89 55 a4             	mov    %edx,-0x5c(%ebp)
+c0103af7:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0103afa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0103afd:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0103b00:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0103b03:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103b06:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0103b09:	89 10                	mov    %edx,(%eax)
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+c0103b0b:	81 7d f0 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x10(%ebp)
+c0103b12:	0f 85 f9 fe ff ff    	jne    c0103a11 <default_free_pages+0x128>
+c0103b18:	c7 45 9c 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x64(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0103b1f:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0103b22:	8b 40 04             	mov    0x4(%eax),%eax
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    for (le = list_next(&free_list); le != &free_list && base + base->property >= le2page(le, page_link); le = list_next(le));
+c0103b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103b28:	eb 0f                	jmp    c0103b39 <default_free_pages+0x250>
+c0103b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b2d:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103b30:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103b33:	8b 40 04             	mov    0x4(%eax),%eax
+c0103b36:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103b39:	81 7d f0 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x10(%ebp)
+c0103b40:	74 1a                	je     c0103b5c <default_free_pages+0x273>
+c0103b42:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b45:	8b 40 08             	mov    0x8(%eax),%eax
+c0103b48:	c1 e0 05             	shl    $0x5,%eax
+c0103b4b:	89 c2                	mov    %eax,%edx
+c0103b4d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b50:	01 c2                	add    %eax,%edx
+c0103b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b55:	83 e8 0c             	sub    $0xc,%eax
+c0103b58:	39 c2                	cmp    %eax,%edx
+c0103b5a:	73 ce                	jae    c0103b2a <default_free_pages+0x241>
+    nr_free += n;
+c0103b5c:	8b 15 84 0e 1b c0    	mov    0xc01b0e84,%edx
+c0103b62:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103b65:	01 d0                	add    %edx,%eax
+c0103b67:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+    list_add_before(le, &(base->page_link));
+c0103b6c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103b6f:	8d 50 0c             	lea    0xc(%eax),%edx
+c0103b72:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103b75:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0103b78:	89 55 90             	mov    %edx,-0x70(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0103b7b:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b7e:	8b 00                	mov    (%eax),%eax
+c0103b80:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0103b83:	89 55 8c             	mov    %edx,-0x74(%ebp)
+c0103b86:	89 45 88             	mov    %eax,-0x78(%ebp)
+c0103b89:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103b8c:	89 45 84             	mov    %eax,-0x7c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103b8f:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b92:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c0103b95:	89 10                	mov    %edx,(%eax)
+c0103b97:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c0103b9a:	8b 10                	mov    (%eax),%edx
+c0103b9c:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0103b9f:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0103ba2:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103ba5:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0103ba8:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103bab:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103bae:	8b 55 88             	mov    -0x78(%ebp),%edx
+c0103bb1:	89 10                	mov    %edx,(%eax)
+}
+c0103bb3:	c9                   	leave  
+c0103bb4:	c3                   	ret    
+
+c0103bb5 <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c0103bb5:	55                   	push   %ebp
+c0103bb6:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0103bb8:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+}
+c0103bbd:	5d                   	pop    %ebp
+c0103bbe:	c3                   	ret    
+
+c0103bbf <basic_check>:
+
+static void
+basic_check(void) {
+c0103bbf:	55                   	push   %ebp
+c0103bc0:	89 e5                	mov    %esp,%ebp
+c0103bc2:	83 ec 48             	sub    $0x48,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c0103bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0103bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103bd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c0103bd8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103bdf:	e8 dc 15 00 00       	call   c01051c0 <alloc_pages>
+c0103be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103be7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103beb:	75 24                	jne    c0103c11 <basic_check+0x52>
+c0103bed:	c7 44 24 0c d9 cc 10 	movl   $0xc010ccd9,0xc(%esp)
+c0103bf4:	c0 
+c0103bf5:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103bfc:	c0 
+c0103bfd:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c0103c04:	00 
+c0103c05:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103c0c:	e8 b0 d1 ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103c11:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103c18:	e8 a3 15 00 00       	call   c01051c0 <alloc_pages>
+c0103c1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103c20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103c24:	75 24                	jne    c0103c4a <basic_check+0x8b>
+c0103c26:	c7 44 24 0c f5 cc 10 	movl   $0xc010ccf5,0xc(%esp)
+c0103c2d:	c0 
+c0103c2e:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103c35:	c0 
+c0103c36:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
+c0103c3d:	00 
+c0103c3e:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103c45:	e8 77 d1 ff ff       	call   c0100dc1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103c4a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103c51:	e8 6a 15 00 00       	call   c01051c0 <alloc_pages>
+c0103c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103c59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103c5d:	75 24                	jne    c0103c83 <basic_check+0xc4>
+c0103c5f:	c7 44 24 0c 11 cd 10 	movl   $0xc010cd11,0xc(%esp)
+c0103c66:	c0 
+c0103c67:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103c6e:	c0 
+c0103c6f:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c0103c76:	00 
+c0103c77:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103c7e:	e8 3e d1 ff ff       	call   c0100dc1 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c0103c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0103c89:	74 10                	je     c0103c9b <basic_check+0xdc>
+c0103c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103c8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c91:	74 08                	je     c0103c9b <basic_check+0xdc>
+c0103c93:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103c96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103c99:	75 24                	jne    c0103cbf <basic_check+0x100>
+c0103c9b:	c7 44 24 0c 30 cd 10 	movl   $0xc010cd30,0xc(%esp)
+c0103ca2:	c0 
+c0103ca3:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103caa:	c0 
+c0103cab:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c0103cb2:	00 
+c0103cb3:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103cba:	e8 02 d1 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0103cbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103cc2:	89 04 24             	mov    %eax,(%esp)
+c0103cc5:	e8 01 f9 ff ff       	call   c01035cb <page_ref>
+c0103cca:	85 c0                	test   %eax,%eax
+c0103ccc:	75 1e                	jne    c0103cec <basic_check+0x12d>
+c0103cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103cd1:	89 04 24             	mov    %eax,(%esp)
+c0103cd4:	e8 f2 f8 ff ff       	call   c01035cb <page_ref>
+c0103cd9:	85 c0                	test   %eax,%eax
+c0103cdb:	75 0f                	jne    c0103cec <basic_check+0x12d>
+c0103cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ce0:	89 04 24             	mov    %eax,(%esp)
+c0103ce3:	e8 e3 f8 ff ff       	call   c01035cb <page_ref>
+c0103ce8:	85 c0                	test   %eax,%eax
+c0103cea:	74 24                	je     c0103d10 <basic_check+0x151>
+c0103cec:	c7 44 24 0c 54 cd 10 	movl   $0xc010cd54,0xc(%esp)
+c0103cf3:	c0 
+c0103cf4:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103cfb:	c0 
+c0103cfc:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c0103d03:	00 
+c0103d04:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103d0b:	e8 b1 d0 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c0103d10:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d13:	89 04 24             	mov    %eax,(%esp)
+c0103d16:	e8 9a f8 ff ff       	call   c01035b5 <page2pa>
+c0103d1b:	8b 15 80 ed 1a c0    	mov    0xc01aed80,%edx
+c0103d21:	c1 e2 0c             	shl    $0xc,%edx
+c0103d24:	39 d0                	cmp    %edx,%eax
+c0103d26:	72 24                	jb     c0103d4c <basic_check+0x18d>
+c0103d28:	c7 44 24 0c 90 cd 10 	movl   $0xc010cd90,0xc(%esp)
+c0103d2f:	c0 
+c0103d30:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103d37:	c0 
+c0103d38:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
+c0103d3f:	00 
+c0103d40:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103d47:	e8 75 d0 ff ff       	call   c0100dc1 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0103d4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d4f:	89 04 24             	mov    %eax,(%esp)
+c0103d52:	e8 5e f8 ff ff       	call   c01035b5 <page2pa>
+c0103d57:	8b 15 80 ed 1a c0    	mov    0xc01aed80,%edx
+c0103d5d:	c1 e2 0c             	shl    $0xc,%edx
+c0103d60:	39 d0                	cmp    %edx,%eax
+c0103d62:	72 24                	jb     c0103d88 <basic_check+0x1c9>
+c0103d64:	c7 44 24 0c ad cd 10 	movl   $0xc010cdad,0xc(%esp)
+c0103d6b:	c0 
+c0103d6c:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103d73:	c0 
+c0103d74:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
+c0103d7b:	00 
+c0103d7c:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103d83:	e8 39 d0 ff ff       	call   c0100dc1 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0103d88:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103d8b:	89 04 24             	mov    %eax,(%esp)
+c0103d8e:	e8 22 f8 ff ff       	call   c01035b5 <page2pa>
+c0103d93:	8b 15 80 ed 1a c0    	mov    0xc01aed80,%edx
+c0103d99:	c1 e2 0c             	shl    $0xc,%edx
+c0103d9c:	39 d0                	cmp    %edx,%eax
+c0103d9e:	72 24                	jb     c0103dc4 <basic_check+0x205>
+c0103da0:	c7 44 24 0c ca cd 10 	movl   $0xc010cdca,0xc(%esp)
+c0103da7:	c0 
+c0103da8:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103daf:	c0 
+c0103db0:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
+c0103db7:	00 
+c0103db8:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103dbf:	e8 fd cf ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0103dc4:	a1 7c 0e 1b c0       	mov    0xc01b0e7c,%eax
+c0103dc9:	8b 15 80 0e 1b c0    	mov    0xc01b0e80,%edx
+c0103dcf:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103dd2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103dd5:	c7 45 e0 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0103ddc:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103ddf:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103de2:	89 50 04             	mov    %edx,0x4(%eax)
+c0103de5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103de8:	8b 50 04             	mov    0x4(%eax),%edx
+c0103deb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103dee:	89 10                	mov    %edx,(%eax)
+c0103df0:	c7 45 dc 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x24(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0103df7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103dfa:	8b 40 04             	mov    0x4(%eax),%eax
+c0103dfd:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0103e00:	0f 94 c0             	sete   %al
+c0103e03:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0103e06:	85 c0                	test   %eax,%eax
+c0103e08:	75 24                	jne    c0103e2e <basic_check+0x26f>
+c0103e0a:	c7 44 24 0c e7 cd 10 	movl   $0xc010cde7,0xc(%esp)
+c0103e11:	c0 
+c0103e12:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103e19:	c0 
+c0103e1a:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c0103e21:	00 
+c0103e22:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103e29:	e8 93 cf ff ff       	call   c0100dc1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0103e2e:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c0103e33:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    nr_free = 0;
+c0103e36:	c7 05 84 0e 1b c0 00 	movl   $0x0,0xc01b0e84
+c0103e3d:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c0103e40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103e47:	e8 74 13 00 00       	call   c01051c0 <alloc_pages>
+c0103e4c:	85 c0                	test   %eax,%eax
+c0103e4e:	74 24                	je     c0103e74 <basic_check+0x2b5>
+c0103e50:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c0103e57:	c0 
+c0103e58:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103e5f:	c0 
+c0103e60:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
+c0103e67:	00 
+c0103e68:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103e6f:	e8 4d cf ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p0);
+c0103e74:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e7b:	00 
+c0103e7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e7f:	89 04 24             	mov    %eax,(%esp)
+c0103e82:	e8 a4 13 00 00       	call   c010522b <free_pages>
+    free_page(p1);
+c0103e87:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103e8e:	00 
+c0103e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103e92:	89 04 24             	mov    %eax,(%esp)
+c0103e95:	e8 91 13 00 00       	call   c010522b <free_pages>
+    free_page(p2);
+c0103e9a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103ea1:	00 
+c0103ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ea5:	89 04 24             	mov    %eax,(%esp)
+c0103ea8:	e8 7e 13 00 00       	call   c010522b <free_pages>
+    assert(nr_free == 3);
+c0103ead:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c0103eb2:	83 f8 03             	cmp    $0x3,%eax
+c0103eb5:	74 24                	je     c0103edb <basic_check+0x31c>
+c0103eb7:	c7 44 24 0c 13 ce 10 	movl   $0xc010ce13,0xc(%esp)
+c0103ebe:	c0 
+c0103ebf:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103ec6:	c0 
+c0103ec7:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
+c0103ece:	00 
+c0103ecf:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103ed6:	e8 e6 ce ff ff       	call   c0100dc1 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c0103edb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103ee2:	e8 d9 12 00 00       	call   c01051c0 <alloc_pages>
+c0103ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103eea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103eee:	75 24                	jne    c0103f14 <basic_check+0x355>
+c0103ef0:	c7 44 24 0c d9 cc 10 	movl   $0xc010ccd9,0xc(%esp)
+c0103ef7:	c0 
+c0103ef8:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103eff:	c0 
+c0103f00:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
+c0103f07:	00 
+c0103f08:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103f0f:	e8 ad ce ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0103f14:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f1b:	e8 a0 12 00 00       	call   c01051c0 <alloc_pages>
+c0103f20:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103f23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103f27:	75 24                	jne    c0103f4d <basic_check+0x38e>
+c0103f29:	c7 44 24 0c f5 cc 10 	movl   $0xc010ccf5,0xc(%esp)
+c0103f30:	c0 
+c0103f31:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103f38:	c0 
+c0103f39:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
+c0103f40:	00 
+c0103f41:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103f48:	e8 74 ce ff ff       	call   c0100dc1 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0103f4d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f54:	e8 67 12 00 00       	call   c01051c0 <alloc_pages>
+c0103f59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103f5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103f60:	75 24                	jne    c0103f86 <basic_check+0x3c7>
+c0103f62:	c7 44 24 0c 11 cd 10 	movl   $0xc010cd11,0xc(%esp)
+c0103f69:	c0 
+c0103f6a:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103f71:	c0 
+c0103f72:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
+c0103f79:	00 
+c0103f7a:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103f81:	e8 3b ce ff ff       	call   c0100dc1 <__panic>
+
+    assert(alloc_page() == NULL);
+c0103f86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f8d:	e8 2e 12 00 00       	call   c01051c0 <alloc_pages>
+c0103f92:	85 c0                	test   %eax,%eax
+c0103f94:	74 24                	je     c0103fba <basic_check+0x3fb>
+c0103f96:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c0103f9d:	c0 
+c0103f9e:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103fa5:	c0 
+c0103fa6:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
+c0103fad:	00 
+c0103fae:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0103fb5:	e8 07 ce ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p0);
+c0103fba:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0103fc1:	00 
+c0103fc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103fc5:	89 04 24             	mov    %eax,(%esp)
+c0103fc8:	e8 5e 12 00 00       	call   c010522b <free_pages>
+c0103fcd:	c7 45 d8 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x28(%ebp)
+c0103fd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103fd7:	8b 40 04             	mov    0x4(%eax),%eax
+c0103fda:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0103fdd:	0f 94 c0             	sete   %al
+c0103fe0:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0103fe3:	85 c0                	test   %eax,%eax
+c0103fe5:	74 24                	je     c010400b <basic_check+0x44c>
+c0103fe7:	c7 44 24 0c 20 ce 10 	movl   $0xc010ce20,0xc(%esp)
+c0103fee:	c0 
+c0103fef:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0103ff6:	c0 
+c0103ff7:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
+c0103ffe:	00 
+c0103fff:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104006:	e8 b6 cd ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c010400b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104012:	e8 a9 11 00 00       	call   c01051c0 <alloc_pages>
+c0104017:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010401a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010401d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0104020:	74 24                	je     c0104046 <basic_check+0x487>
+c0104022:	c7 44 24 0c 38 ce 10 	movl   $0xc010ce38,0xc(%esp)
+c0104029:	c0 
+c010402a:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104031:	c0 
+c0104032:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0104039:	00 
+c010403a:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104041:	e8 7b cd ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c0104046:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010404d:	e8 6e 11 00 00       	call   c01051c0 <alloc_pages>
+c0104052:	85 c0                	test   %eax,%eax
+c0104054:	74 24                	je     c010407a <basic_check+0x4bb>
+c0104056:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c010405d:	c0 
+c010405e:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104065:	c0 
+c0104066:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c010406d:	00 
+c010406e:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104075:	e8 47 cd ff ff       	call   c0100dc1 <__panic>
+
+    assert(nr_free == 0);
+c010407a:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c010407f:	85 c0                	test   %eax,%eax
+c0104081:	74 24                	je     c01040a7 <basic_check+0x4e8>
+c0104083:	c7 44 24 0c 51 ce 10 	movl   $0xc010ce51,0xc(%esp)
+c010408a:	c0 
+c010408b:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104092:	c0 
+c0104093:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
+c010409a:	00 
+c010409b:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01040a2:	e8 1a cd ff ff       	call   c0100dc1 <__panic>
+    free_list = free_list_store;
+c01040a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01040aa:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01040ad:	a3 7c 0e 1b c0       	mov    %eax,0xc01b0e7c
+c01040b2:	89 15 80 0e 1b c0    	mov    %edx,0xc01b0e80
+    nr_free = nr_free_store;
+c01040b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01040bb:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+
+    free_page(p);
+c01040c0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040c7:	00 
+c01040c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01040cb:	89 04 24             	mov    %eax,(%esp)
+c01040ce:	e8 58 11 00 00       	call   c010522b <free_pages>
+    free_page(p1);
+c01040d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040da:	00 
+c01040db:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01040de:	89 04 24             	mov    %eax,(%esp)
+c01040e1:	e8 45 11 00 00       	call   c010522b <free_pages>
+    free_page(p2);
+c01040e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01040ed:	00 
+c01040ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040f1:	89 04 24             	mov    %eax,(%esp)
+c01040f4:	e8 32 11 00 00       	call   c010522b <free_pages>
+}
+c01040f9:	c9                   	leave  
+c01040fa:	c3                   	ret    
+
+c01040fb <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c01040fb:	55                   	push   %ebp
+c01040fc:	89 e5                	mov    %esp,%ebp
+c01040fe:	53                   	push   %ebx
+c01040ff:	81 ec 94 00 00 00    	sub    $0x94,%esp
+    int count = 0, total = 0;
+c0104105:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010410c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c0104113:	c7 45 ec 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c010411a:	eb 6b                	jmp    c0104187 <default_check+0x8c>
+        struct Page *p = le2page(le, page_link);
+c010411c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010411f:	83 e8 0c             	sub    $0xc,%eax
+c0104122:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        assert(PageProperty(p));
+c0104125:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104128:	83 c0 04             	add    $0x4,%eax
+c010412b:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
+c0104132:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104135:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0104138:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010413b:	0f a3 10             	bt     %edx,(%eax)
+c010413e:	19 c0                	sbb    %eax,%eax
+c0104140:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    return oldbit != 0;
+c0104143:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0104147:	0f 95 c0             	setne  %al
+c010414a:	0f b6 c0             	movzbl %al,%eax
+c010414d:	85 c0                	test   %eax,%eax
+c010414f:	75 24                	jne    c0104175 <default_check+0x7a>
+c0104151:	c7 44 24 0c 5e ce 10 	movl   $0xc010ce5e,0xc(%esp)
+c0104158:	c0 
+c0104159:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104160:	c0 
+c0104161:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c0104168:	00 
+c0104169:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104170:	e8 4c cc ff ff       	call   c0100dc1 <__panic>
+        count ++, total += p->property;
+c0104175:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0104179:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010417c:	8b 50 08             	mov    0x8(%eax),%edx
+c010417f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104182:	01 d0                	add    %edx,%eax
+c0104184:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104187:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010418a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010418d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0104190:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0104193:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104196:	81 7d ec 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x14(%ebp)
+c010419d:	0f 85 79 ff ff ff    	jne    c010411c <default_check+0x21>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c01041a3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c01041a6:	e8 b2 10 00 00       	call   c010525d <nr_free_pages>
+c01041ab:	39 c3                	cmp    %eax,%ebx
+c01041ad:	74 24                	je     c01041d3 <default_check+0xd8>
+c01041af:	c7 44 24 0c 6e ce 10 	movl   $0xc010ce6e,0xc(%esp)
+c01041b6:	c0 
+c01041b7:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01041be:	c0 
+c01041bf:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
+c01041c6:	00 
+c01041c7:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01041ce:	e8 ee cb ff ff       	call   c0100dc1 <__panic>
+
+    basic_check();
+c01041d3:	e8 e7 f9 ff ff       	call   c0103bbf <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c01041d8:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c01041df:	e8 dc 0f 00 00       	call   c01051c0 <alloc_pages>
+c01041e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(p0 != NULL);
+c01041e7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01041eb:	75 24                	jne    c0104211 <default_check+0x116>
+c01041ed:	c7 44 24 0c 87 ce 10 	movl   $0xc010ce87,0xc(%esp)
+c01041f4:	c0 
+c01041f5:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01041fc:	c0 
+c01041fd:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
+c0104204:	00 
+c0104205:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010420c:	e8 b0 cb ff ff       	call   c0100dc1 <__panic>
+    assert(!PageProperty(p0));
+c0104211:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104214:	83 c0 04             	add    $0x4,%eax
+c0104217:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+c010421e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104221:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0104224:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0104227:	0f a3 10             	bt     %edx,(%eax)
+c010422a:	19 c0                	sbb    %eax,%eax
+c010422c:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    return oldbit != 0;
+c010422f:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0104233:	0f 95 c0             	setne  %al
+c0104236:	0f b6 c0             	movzbl %al,%eax
+c0104239:	85 c0                	test   %eax,%eax
+c010423b:	74 24                	je     c0104261 <default_check+0x166>
+c010423d:	c7 44 24 0c 92 ce 10 	movl   $0xc010ce92,0xc(%esp)
+c0104244:	c0 
+c0104245:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010424c:	c0 
+c010424d:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
+c0104254:	00 
+c0104255:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010425c:	e8 60 cb ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0104261:	a1 7c 0e 1b c0       	mov    0xc01b0e7c,%eax
+c0104266:	8b 15 80 0e 1b c0    	mov    0xc01b0e80,%edx
+c010426c:	89 45 80             	mov    %eax,-0x80(%ebp)
+c010426f:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c0104272:	c7 45 b4 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x4c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0104279:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010427c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c010427f:	89 50 04             	mov    %edx,0x4(%eax)
+c0104282:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104285:	8b 50 04             	mov    0x4(%eax),%edx
+c0104288:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010428b:	89 10                	mov    %edx,(%eax)
+c010428d:	c7 45 b0 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x50(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0104294:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0104297:	8b 40 04             	mov    0x4(%eax),%eax
+c010429a:	39 45 b0             	cmp    %eax,-0x50(%ebp)
+c010429d:	0f 94 c0             	sete   %al
+c01042a0:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c01042a3:	85 c0                	test   %eax,%eax
+c01042a5:	75 24                	jne    c01042cb <default_check+0x1d0>
+c01042a7:	c7 44 24 0c e7 cd 10 	movl   $0xc010cde7,0xc(%esp)
+c01042ae:	c0 
+c01042af:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01042b6:	c0 
+c01042b7:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
+c01042be:	00 
+c01042bf:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01042c6:	e8 f6 ca ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c01042cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01042d2:	e8 e9 0e 00 00       	call   c01051c0 <alloc_pages>
+c01042d7:	85 c0                	test   %eax,%eax
+c01042d9:	74 24                	je     c01042ff <default_check+0x204>
+c01042db:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c01042e2:	c0 
+c01042e3:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01042ea:	c0 
+c01042eb:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
+c01042f2:	00 
+c01042f3:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01042fa:	e8 c2 ca ff ff       	call   c0100dc1 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01042ff:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c0104304:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c0104307:	c7 05 84 0e 1b c0 00 	movl   $0x0,0xc01b0e84
+c010430e:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c0104311:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104314:	83 c0 40             	add    $0x40,%eax
+c0104317:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c010431e:	00 
+c010431f:	89 04 24             	mov    %eax,(%esp)
+c0104322:	e8 04 0f 00 00       	call   c010522b <free_pages>
+    assert(alloc_pages(4) == NULL);
+c0104327:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c010432e:	e8 8d 0e 00 00       	call   c01051c0 <alloc_pages>
+c0104333:	85 c0                	test   %eax,%eax
+c0104335:	74 24                	je     c010435b <default_check+0x260>
+c0104337:	c7 44 24 0c a4 ce 10 	movl   $0xc010cea4,0xc(%esp)
+c010433e:	c0 
+c010433f:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104346:	c0 
+c0104347:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
+c010434e:	00 
+c010434f:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104356:	e8 66 ca ff ff       	call   c0100dc1 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c010435b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010435e:	83 c0 40             	add    $0x40,%eax
+c0104361:	83 c0 04             	add    $0x4,%eax
+c0104364:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
+c010436b:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010436e:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0104371:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0104374:	0f a3 10             	bt     %edx,(%eax)
+c0104377:	19 c0                	sbb    %eax,%eax
+c0104379:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    return oldbit != 0;
+c010437c:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0104380:	0f 95 c0             	setne  %al
+c0104383:	0f b6 c0             	movzbl %al,%eax
+c0104386:	85 c0                	test   %eax,%eax
+c0104388:	74 0e                	je     c0104398 <default_check+0x29d>
+c010438a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010438d:	83 c0 40             	add    $0x40,%eax
+c0104390:	8b 40 08             	mov    0x8(%eax),%eax
+c0104393:	83 f8 03             	cmp    $0x3,%eax
+c0104396:	74 24                	je     c01043bc <default_check+0x2c1>
+c0104398:	c7 44 24 0c bc ce 10 	movl   $0xc010cebc,0xc(%esp)
+c010439f:	c0 
+c01043a0:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01043a7:	c0 
+c01043a8:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
+c01043af:	00 
+c01043b0:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01043b7:	e8 05 ca ff ff       	call   c0100dc1 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c01043bc:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+c01043c3:	e8 f8 0d 00 00       	call   c01051c0 <alloc_pages>
+c01043c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01043cb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01043cf:	75 24                	jne    c01043f5 <default_check+0x2fa>
+c01043d1:	c7 44 24 0c e8 ce 10 	movl   $0xc010cee8,0xc(%esp)
+c01043d8:	c0 
+c01043d9:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01043e0:	c0 
+c01043e1:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
+c01043e8:	00 
+c01043e9:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01043f0:	e8 cc c9 ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c01043f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01043fc:	e8 bf 0d 00 00       	call   c01051c0 <alloc_pages>
+c0104401:	85 c0                	test   %eax,%eax
+c0104403:	74 24                	je     c0104429 <default_check+0x32e>
+c0104405:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c010440c:	c0 
+c010440d:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104414:	c0 
+c0104415:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
+c010441c:	00 
+c010441d:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104424:	e8 98 c9 ff ff       	call   c0100dc1 <__panic>
+    assert(p0 + 2 == p1);
+c0104429:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010442c:	83 c0 40             	add    $0x40,%eax
+c010442f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0104432:	74 24                	je     c0104458 <default_check+0x35d>
+c0104434:	c7 44 24 0c 06 cf 10 	movl   $0xc010cf06,0xc(%esp)
+c010443b:	c0 
+c010443c:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104443:	c0 
+c0104444:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c010444b:	00 
+c010444c:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104453:	e8 69 c9 ff ff       	call   c0100dc1 <__panic>
+
+    p2 = p0 + 1;
+c0104458:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010445b:	83 c0 20             	add    $0x20,%eax
+c010445e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    free_page(p0);
+c0104461:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104468:	00 
+c0104469:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010446c:	89 04 24             	mov    %eax,(%esp)
+c010446f:	e8 b7 0d 00 00       	call   c010522b <free_pages>
+    free_pages(p1, 3);
+c0104474:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c010447b:	00 
+c010447c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010447f:	89 04 24             	mov    %eax,(%esp)
+c0104482:	e8 a4 0d 00 00       	call   c010522b <free_pages>
+    assert(PageProperty(p0) && p0->property == 1);
+c0104487:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010448a:	83 c0 04             	add    $0x4,%eax
+c010448d:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
+c0104494:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104497:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c010449a:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c010449d:	0f a3 10             	bt     %edx,(%eax)
+c01044a0:	19 c0                	sbb    %eax,%eax
+c01044a2:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c01044a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c01044a9:	0f 95 c0             	setne  %al
+c01044ac:	0f b6 c0             	movzbl %al,%eax
+c01044af:	85 c0                	test   %eax,%eax
+c01044b1:	74 0b                	je     c01044be <default_check+0x3c3>
+c01044b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01044b6:	8b 40 08             	mov    0x8(%eax),%eax
+c01044b9:	83 f8 01             	cmp    $0x1,%eax
+c01044bc:	74 24                	je     c01044e2 <default_check+0x3e7>
+c01044be:	c7 44 24 0c 14 cf 10 	movl   $0xc010cf14,0xc(%esp)
+c01044c5:	c0 
+c01044c6:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01044cd:	c0 
+c01044ce:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
+c01044d5:	00 
+c01044d6:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01044dd:	e8 df c8 ff ff       	call   c0100dc1 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c01044e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01044e5:	83 c0 04             	add    $0x4,%eax
+c01044e8:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
+c01044ef:	89 45 90             	mov    %eax,-0x70(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01044f2:	8b 45 90             	mov    -0x70(%ebp),%eax
+c01044f5:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c01044f8:	0f a3 10             	bt     %edx,(%eax)
+c01044fb:	19 c0                	sbb    %eax,%eax
+c01044fd:	89 45 8c             	mov    %eax,-0x74(%ebp)
+    return oldbit != 0;
+c0104500:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
+c0104504:	0f 95 c0             	setne  %al
+c0104507:	0f b6 c0             	movzbl %al,%eax
+c010450a:	85 c0                	test   %eax,%eax
+c010450c:	74 0b                	je     c0104519 <default_check+0x41e>
+c010450e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104511:	8b 40 08             	mov    0x8(%eax),%eax
+c0104514:	83 f8 03             	cmp    $0x3,%eax
+c0104517:	74 24                	je     c010453d <default_check+0x442>
+c0104519:	c7 44 24 0c 3c cf 10 	movl   $0xc010cf3c,0xc(%esp)
+c0104520:	c0 
+c0104521:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104528:	c0 
+c0104529:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
+c0104530:	00 
+c0104531:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104538:	e8 84 c8 ff ff       	call   c0100dc1 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c010453d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104544:	e8 77 0c 00 00       	call   c01051c0 <alloc_pages>
+c0104549:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010454c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010454f:	83 e8 20             	sub    $0x20,%eax
+c0104552:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c0104555:	74 24                	je     c010457b <default_check+0x480>
+c0104557:	c7 44 24 0c 62 cf 10 	movl   $0xc010cf62,0xc(%esp)
+c010455e:	c0 
+c010455f:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104566:	c0 
+c0104567:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
+c010456e:	00 
+c010456f:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104576:	e8 46 c8 ff ff       	call   c0100dc1 <__panic>
+    free_page(p0);
+c010457b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104582:	00 
+c0104583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104586:	89 04 24             	mov    %eax,(%esp)
+c0104589:	e8 9d 0c 00 00       	call   c010522b <free_pages>
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c010458e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c0104595:	e8 26 0c 00 00       	call   c01051c0 <alloc_pages>
+c010459a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010459d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01045a0:	83 c0 20             	add    $0x20,%eax
+c01045a3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c01045a6:	74 24                	je     c01045cc <default_check+0x4d1>
+c01045a8:	c7 44 24 0c 80 cf 10 	movl   $0xc010cf80,0xc(%esp)
+c01045af:	c0 
+c01045b0:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c01045b7:	c0 
+c01045b8:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
+c01045bf:	00 
+c01045c0:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c01045c7:	e8 f5 c7 ff ff       	call   c0100dc1 <__panic>
+
+    free_pages(p0, 2);
+c01045cc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c01045d3:	00 
+c01045d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01045d7:	89 04 24             	mov    %eax,(%esp)
+c01045da:	e8 4c 0c 00 00       	call   c010522b <free_pages>
+    free_page(p2);
+c01045df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01045e6:	00 
+c01045e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01045ea:	89 04 24             	mov    %eax,(%esp)
+c01045ed:	e8 39 0c 00 00       	call   c010522b <free_pages>
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c01045f2:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c01045f9:	e8 c2 0b 00 00       	call   c01051c0 <alloc_pages>
+c01045fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104601:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0104605:	75 24                	jne    c010462b <default_check+0x530>
+c0104607:	c7 44 24 0c a0 cf 10 	movl   $0xc010cfa0,0xc(%esp)
+c010460e:	c0 
+c010460f:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104616:	c0 
+c0104617:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
+c010461e:	00 
+c010461f:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104626:	e8 96 c7 ff ff       	call   c0100dc1 <__panic>
+    assert(alloc_page() == NULL);
+c010462b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104632:	e8 89 0b 00 00       	call   c01051c0 <alloc_pages>
+c0104637:	85 c0                	test   %eax,%eax
+c0104639:	74 24                	je     c010465f <default_check+0x564>
+c010463b:	c7 44 24 0c fe cd 10 	movl   $0xc010cdfe,0xc(%esp)
+c0104642:	c0 
+c0104643:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010464a:	c0 
+c010464b:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
+c0104652:	00 
+c0104653:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010465a:	e8 62 c7 ff ff       	call   c0100dc1 <__panic>
+
+    assert(nr_free == 0);
+c010465f:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c0104664:	85 c0                	test   %eax,%eax
+c0104666:	74 24                	je     c010468c <default_check+0x591>
+c0104668:	c7 44 24 0c 51 ce 10 	movl   $0xc010ce51,0xc(%esp)
+c010466f:	c0 
+c0104670:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104677:	c0 
+c0104678:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c010467f:	00 
+c0104680:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104687:	e8 35 c7 ff ff       	call   c0100dc1 <__panic>
+    nr_free = nr_free_store;
+c010468c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010468f:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+
+    free_list = free_list_store;
+c0104694:	8b 45 80             	mov    -0x80(%ebp),%eax
+c0104697:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c010469a:	a3 7c 0e 1b c0       	mov    %eax,0xc01b0e7c
+c010469f:	89 15 80 0e 1b c0    	mov    %edx,0xc01b0e80
+    free_pages(p0, 5);
+c01046a5:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+c01046ac:	00 
+c01046ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01046b0:	89 04 24             	mov    %eax,(%esp)
+c01046b3:	e8 73 0b 00 00       	call   c010522b <free_pages>
+
+    le = &free_list;
+c01046b8:	c7 45 ec 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01046bf:	eb 1d                	jmp    c01046de <default_check+0x5e3>
+        struct Page *p = le2page(le, page_link);
+c01046c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01046c4:	83 e8 0c             	sub    $0xc,%eax
+c01046c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        count --, total -= p->property;
+c01046ca:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01046ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01046d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01046d4:	8b 40 08             	mov    0x8(%eax),%eax
+c01046d7:	29 c2                	sub    %eax,%edx
+c01046d9:	89 d0                	mov    %edx,%eax
+c01046db:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01046de:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01046e1:	89 45 88             	mov    %eax,-0x78(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01046e4:	8b 45 88             	mov    -0x78(%ebp),%eax
+c01046e7:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c01046ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01046ed:	81 7d ec 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x14(%ebp)
+c01046f4:	75 cb                	jne    c01046c1 <default_check+0x5c6>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+c01046f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01046fa:	74 24                	je     c0104720 <default_check+0x625>
+c01046fc:	c7 44 24 0c be cf 10 	movl   $0xc010cfbe,0xc(%esp)
+c0104703:	c0 
+c0104704:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c010470b:	c0 
+c010470c:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
+c0104713:	00 
+c0104714:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c010471b:	e8 a1 c6 ff ff       	call   c0100dc1 <__panic>
+    assert(total == 0);
+c0104720:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104724:	74 24                	je     c010474a <default_check+0x64f>
+c0104726:	c7 44 24 0c c9 cf 10 	movl   $0xc010cfc9,0xc(%esp)
+c010472d:	c0 
+c010472e:	c7 44 24 08 76 cc 10 	movl   $0xc010cc76,0x8(%esp)
+c0104735:	c0 
+c0104736:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
+c010473d:	00 
+c010473e:	c7 04 24 8b cc 10 c0 	movl   $0xc010cc8b,(%esp)
+c0104745:	e8 77 c6 ff ff       	call   c0100dc1 <__panic>
+}
+c010474a:	81 c4 94 00 00 00    	add    $0x94,%esp
+c0104750:	5b                   	pop    %ebx
+c0104751:	5d                   	pop    %ebp
+c0104752:	c3                   	ret    
+
+c0104753 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0104753:	55                   	push   %ebp
+c0104754:	89 e5                	mov    %esp,%ebp
+c0104756:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0104759:	9c                   	pushf  
+c010475a:	58                   	pop    %eax
+c010475b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010475e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0104761:	25 00 02 00 00       	and    $0x200,%eax
+c0104766:	85 c0                	test   %eax,%eax
+c0104768:	74 0c                	je     c0104776 <__intr_save+0x23>
+        intr_disable();
+c010476a:	e8 aa d8 ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c010476f:	b8 01 00 00 00       	mov    $0x1,%eax
+c0104774:	eb 05                	jmp    c010477b <__intr_save+0x28>
+    }
+    return 0;
+c0104776:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010477b:	c9                   	leave  
+c010477c:	c3                   	ret    
+
+c010477d <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010477d:	55                   	push   %ebp
+c010477e:	89 e5                	mov    %esp,%ebp
+c0104780:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0104783:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104787:	74 05                	je     c010478e <__intr_restore+0x11>
+        intr_enable();
+c0104789:	e8 85 d8 ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c010478e:	c9                   	leave  
+c010478f:	c3                   	ret    
+
+c0104790 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104790:	55                   	push   %ebp
+c0104791:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104793:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104796:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c010479b:	29 c2                	sub    %eax,%edx
+c010479d:	89 d0                	mov    %edx,%eax
+c010479f:	c1 f8 05             	sar    $0x5,%eax
+}
+c01047a2:	5d                   	pop    %ebp
+c01047a3:	c3                   	ret    
+
+c01047a4 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01047a4:	55                   	push   %ebp
+c01047a5:	89 e5                	mov    %esp,%ebp
+c01047a7:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01047aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047ad:	89 04 24             	mov    %eax,(%esp)
+c01047b0:	e8 db ff ff ff       	call   c0104790 <page2ppn>
+c01047b5:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01047b8:	c9                   	leave  
+c01047b9:	c3                   	ret    
+
+c01047ba <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01047ba:	55                   	push   %ebp
+c01047bb:	89 e5                	mov    %esp,%ebp
+c01047bd:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047c3:	c1 e8 0c             	shr    $0xc,%eax
+c01047c6:	89 c2                	mov    %eax,%edx
+c01047c8:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c01047cd:	39 c2                	cmp    %eax,%edx
+c01047cf:	72 1c                	jb     c01047ed <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c01047d1:	c7 44 24 08 04 d0 10 	movl   $0xc010d004,0x8(%esp)
+c01047d8:	c0 
+c01047d9:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c01047e0:	00 
+c01047e1:	c7 04 24 23 d0 10 c0 	movl   $0xc010d023,(%esp)
+c01047e8:	e8 d4 c5 ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c01047ed:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c01047f2:	8b 55 08             	mov    0x8(%ebp),%edx
+c01047f5:	c1 ea 0c             	shr    $0xc,%edx
+c01047f8:	c1 e2 05             	shl    $0x5,%edx
+c01047fb:	01 d0                	add    %edx,%eax
+}
+c01047fd:	c9                   	leave  
+c01047fe:	c3                   	ret    
+
+c01047ff <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01047ff:	55                   	push   %ebp
+c0104800:	89 e5                	mov    %esp,%ebp
+c0104802:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0104805:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104808:	89 04 24             	mov    %eax,(%esp)
+c010480b:	e8 94 ff ff ff       	call   c01047a4 <page2pa>
+c0104810:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104813:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104816:	c1 e8 0c             	shr    $0xc,%eax
+c0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010481c:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0104821:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104824:	72 23                	jb     c0104849 <page2kva+0x4a>
+c0104826:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104829:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010482d:	c7 44 24 08 34 d0 10 	movl   $0xc010d034,0x8(%esp)
+c0104834:	c0 
+c0104835:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c010483c:	00 
+c010483d:	c7 04 24 23 d0 10 c0 	movl   $0xc010d023,(%esp)
+c0104844:	e8 78 c5 ff ff       	call   c0100dc1 <__panic>
+c0104849:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010484c:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0104851:	c9                   	leave  
+c0104852:	c3                   	ret    
+
+c0104853 <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c0104853:	55                   	push   %ebp
+c0104854:	89 e5                	mov    %esp,%ebp
+c0104856:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c0104859:	8b 45 08             	mov    0x8(%ebp),%eax
+c010485c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010485f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0104866:	77 23                	ja     c010488b <kva2page+0x38>
+c0104868:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010486b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010486f:	c7 44 24 08 58 d0 10 	movl   $0xc010d058,0x8(%esp)
+c0104876:	c0 
+c0104877:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c010487e:	00 
+c010487f:	c7 04 24 23 d0 10 c0 	movl   $0xc010d023,(%esp)
+c0104886:	e8 36 c5 ff ff       	call   c0100dc1 <__panic>
+c010488b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010488e:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104893:	89 04 24             	mov    %eax,(%esp)
+c0104896:	e8 1f ff ff ff       	call   c01047ba <pa2page>
+}
+c010489b:	c9                   	leave  
+c010489c:	c3                   	ret    
+
+c010489d <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c010489d:	55                   	push   %ebp
+c010489e:	89 e5                	mov    %esp,%ebp
+c01048a0:	83 ec 28             	sub    $0x28,%esp
+  struct Page * page = alloc_pages(1 << order);
+c01048a3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01048a6:	ba 01 00 00 00       	mov    $0x1,%edx
+c01048ab:	89 c1                	mov    %eax,%ecx
+c01048ad:	d3 e2                	shl    %cl,%edx
+c01048af:	89 d0                	mov    %edx,%eax
+c01048b1:	89 04 24             	mov    %eax,(%esp)
+c01048b4:	e8 07 09 00 00       	call   c01051c0 <alloc_pages>
+c01048b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c01048bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01048c0:	75 07                	jne    c01048c9 <__slob_get_free_pages+0x2c>
+    return NULL;
+c01048c2:	b8 00 00 00 00       	mov    $0x0,%eax
+c01048c7:	eb 0b                	jmp    c01048d4 <__slob_get_free_pages+0x37>
+  return page2kva(page);
+c01048c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01048cc:	89 04 24             	mov    %eax,(%esp)
+c01048cf:	e8 2b ff ff ff       	call   c01047ff <page2kva>
+}
+c01048d4:	c9                   	leave  
+c01048d5:	c3                   	ret    
+
+c01048d6 <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c01048d6:	55                   	push   %ebp
+c01048d7:	89 e5                	mov    %esp,%ebp
+c01048d9:	53                   	push   %ebx
+c01048da:	83 ec 14             	sub    $0x14,%esp
+  free_pages(kva2page(kva), 1 << order);
+c01048dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01048e0:	ba 01 00 00 00       	mov    $0x1,%edx
+c01048e5:	89 c1                	mov    %eax,%ecx
+c01048e7:	d3 e2                	shl    %cl,%edx
+c01048e9:	89 d0                	mov    %edx,%eax
+c01048eb:	89 c3                	mov    %eax,%ebx
+c01048ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01048f0:	89 04 24             	mov    %eax,(%esp)
+c01048f3:	e8 5b ff ff ff       	call   c0104853 <kva2page>
+c01048f8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c01048fc:	89 04 24             	mov    %eax,(%esp)
+c01048ff:	e8 27 09 00 00       	call   c010522b <free_pages>
+}
+c0104904:	83 c4 14             	add    $0x14,%esp
+c0104907:	5b                   	pop    %ebx
+c0104908:	5d                   	pop    %ebp
+c0104909:	c3                   	ret    
+
+c010490a <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c010490a:	55                   	push   %ebp
+c010490b:	89 e5                	mov    %esp,%ebp
+c010490d:	83 ec 38             	sub    $0x38,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c0104910:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104913:	83 c0 08             	add    $0x8,%eax
+c0104916:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c010491b:	76 24                	jbe    c0104941 <slob_alloc+0x37>
+c010491d:	c7 44 24 0c 7c d0 10 	movl   $0xc010d07c,0xc(%esp)
+c0104924:	c0 
+c0104925:	c7 44 24 08 9b d0 10 	movl   $0xc010d09b,0x8(%esp)
+c010492c:	c0 
+c010492d:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c0104934:	00 
+c0104935:	c7 04 24 b0 d0 10 c0 	movl   $0xc010d0b0,(%esp)
+c010493c:	e8 80 c4 ff ff       	call   c0100dc1 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c0104941:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c0104948:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010494f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104952:	83 c0 07             	add    $0x7,%eax
+c0104955:	c1 e8 03             	shr    $0x3,%eax
+c0104958:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c010495b:	e8 f3 fd ff ff       	call   c0104753 <__intr_save>
+c0104960:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c0104963:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
+c0104968:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c010496b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010496e:	8b 40 04             	mov    0x4(%eax),%eax
+c0104971:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c0104974:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0104978:	74 25                	je     c010499f <slob_alloc+0x95>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c010497a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010497d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104980:	01 d0                	add    %edx,%eax
+c0104982:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0104985:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104988:	f7 d8                	neg    %eax
+c010498a:	21 d0                	and    %edx,%eax
+c010498c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c010498f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0104992:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104995:	29 c2                	sub    %eax,%edx
+c0104997:	89 d0                	mov    %edx,%eax
+c0104999:	c1 f8 03             	sar    $0x3,%eax
+c010499c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c010499f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049a2:	8b 00                	mov    (%eax),%eax
+c01049a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01049a7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c01049aa:	01 ca                	add    %ecx,%edx
+c01049ac:	39 d0                	cmp    %edx,%eax
+c01049ae:	0f 8c aa 00 00 00    	jl     c0104a5e <slob_alloc+0x154>
+			if (delta) { /* need to fragment head to align? */
+c01049b4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01049b8:	74 38                	je     c01049f2 <slob_alloc+0xe8>
+				aligned->units = cur->units - delta;
+c01049ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049bd:	8b 00                	mov    (%eax),%eax
+c01049bf:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c01049c2:	89 c2                	mov    %eax,%edx
+c01049c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049c7:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c01049c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049cc:	8b 50 04             	mov    0x4(%eax),%edx
+c01049cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049d2:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c01049d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01049db:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c01049de:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01049e4:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c01049e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c01049ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01049ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c01049f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049f5:	8b 00                	mov    (%eax),%eax
+c01049f7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01049fa:	75 0e                	jne    c0104a0a <slob_alloc+0x100>
+				prev->next = cur->next; /* unlink */
+c01049fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01049ff:	8b 50 04             	mov    0x4(%eax),%edx
+c0104a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a05:	89 50 04             	mov    %edx,0x4(%eax)
+c0104a08:	eb 3c                	jmp    c0104a46 <slob_alloc+0x13c>
+			else { /* fragment */
+				prev->next = cur + units;
+c0104a0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104a0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a17:	01 c2                	add    %eax,%edx
+c0104a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a1c:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c0104a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a22:	8b 40 04             	mov    0x4(%eax),%eax
+c0104a25:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104a28:	8b 12                	mov    (%edx),%edx
+c0104a2a:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c0104a2d:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c0104a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a32:	8b 40 04             	mov    0x4(%eax),%eax
+c0104a35:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104a38:	8b 52 04             	mov    0x4(%edx),%edx
+c0104a3b:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c0104a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a41:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0104a44:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c0104a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104a49:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0104a4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104a51:	89 04 24             	mov    %eax,(%esp)
+c0104a54:	e8 24 fd ff ff       	call   c010477d <__intr_restore>
+			return cur;
+c0104a59:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a5c:	eb 7f                	jmp    c0104add <slob_alloc+0x1d3>
+		}
+		if (cur == slobfree) {
+c0104a5e:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
+c0104a63:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104a66:	75 61                	jne    c0104ac9 <slob_alloc+0x1bf>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0104a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104a6b:	89 04 24             	mov    %eax,(%esp)
+c0104a6e:	e8 0a fd ff ff       	call   c010477d <__intr_restore>
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0104a73:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104a7a:	75 07                	jne    c0104a83 <slob_alloc+0x179>
+				return 0;
+c0104a7c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104a81:	eb 5a                	jmp    c0104add <slob_alloc+0x1d3>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c0104a83:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104a8a:	00 
+c0104a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104a8e:	89 04 24             	mov    %eax,(%esp)
+c0104a91:	e8 07 fe ff ff       	call   c010489d <__slob_get_free_pages>
+c0104a96:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c0104a99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a9d:	75 07                	jne    c0104aa6 <slob_alloc+0x19c>
+				return 0;
+c0104a9f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104aa4:	eb 37                	jmp    c0104add <slob_alloc+0x1d3>
+
+			slob_free(cur, PAGE_SIZE);
+c0104aa6:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104aad:	00 
+c0104aae:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ab1:	89 04 24             	mov    %eax,(%esp)
+c0104ab4:	e8 26 00 00 00       	call   c0104adf <slob_free>
+			spin_lock_irqsave(&slob_lock, flags);
+c0104ab9:	e8 95 fc ff ff       	call   c0104753 <__intr_save>
+c0104abe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c0104ac1:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
+c0104ac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+	prev = slobfree;
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0104ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ad2:	8b 40 04             	mov    0x4(%eax),%eax
+c0104ad5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+			slob_free(cur, PAGE_SIZE);
+			spin_lock_irqsave(&slob_lock, flags);
+			cur = slobfree;
+		}
+	}
+c0104ad8:	e9 97 fe ff ff       	jmp    c0104974 <slob_alloc+0x6a>
+}
+c0104add:	c9                   	leave  
+c0104ade:	c3                   	ret    
+
+c0104adf <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c0104adf:	55                   	push   %ebp
+c0104ae0:	89 e5                	mov    %esp,%ebp
+c0104ae2:	83 ec 28             	sub    $0x28,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c0104ae5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104aeb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104aef:	75 05                	jne    c0104af6 <slob_free+0x17>
+		return;
+c0104af1:	e9 ff 00 00 00       	jmp    c0104bf5 <slob_free+0x116>
+
+	if (size)
+c0104af6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0104afa:	74 10                	je     c0104b0c <slob_free+0x2d>
+		b->units = SLOB_UNITS(size);
+c0104afc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104aff:	83 c0 07             	add    $0x7,%eax
+c0104b02:	c1 e8 03             	shr    $0x3,%eax
+c0104b05:	89 c2                	mov    %eax,%edx
+c0104b07:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b0a:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c0104b0c:	e8 42 fc ff ff       	call   c0104753 <__intr_save>
+c0104b11:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104b14:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
+c0104b19:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104b1c:	eb 27                	jmp    c0104b45 <slob_free+0x66>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c0104b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b21:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b27:	77 13                	ja     c0104b3c <slob_free+0x5d>
+c0104b29:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b2f:	77 27                	ja     c0104b58 <slob_free+0x79>
+c0104b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b34:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104b3a:	77 1c                	ja     c0104b58 <slob_free+0x79>
+	if (size)
+		b->units = SLOB_UNITS(size);
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0104b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b3f:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b42:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104b45:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104b4b:	76 d1                	jbe    c0104b1e <slob_free+0x3f>
+c0104b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b50:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104b56:	76 c6                	jbe    c0104b1e <slob_free+0x3f>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+			break;
+
+	if (b + b->units == cur->next) {
+c0104b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b5b:	8b 00                	mov    (%eax),%eax
+c0104b5d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b67:	01 c2                	add    %eax,%edx
+c0104b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b6c:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b6f:	39 c2                	cmp    %eax,%edx
+c0104b71:	75 25                	jne    c0104b98 <slob_free+0xb9>
+		b->units += cur->next->units;
+c0104b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b76:	8b 10                	mov    (%eax),%edx
+c0104b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b7b:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b7e:	8b 00                	mov    (%eax),%eax
+c0104b80:	01 c2                	add    %eax,%edx
+c0104b82:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b85:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0104b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b8a:	8b 40 04             	mov    0x4(%eax),%eax
+c0104b8d:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104b93:	89 50 04             	mov    %edx,0x4(%eax)
+c0104b96:	eb 0c                	jmp    c0104ba4 <slob_free+0xc5>
+	} else
+		b->next = cur->next;
+c0104b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104b9b:	8b 50 04             	mov    0x4(%eax),%edx
+c0104b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ba1:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0104ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ba7:	8b 00                	mov    (%eax),%eax
+c0104ba9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0104bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bb3:	01 d0                	add    %edx,%eax
+c0104bb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0104bb8:	75 1f                	jne    c0104bd9 <slob_free+0xfa>
+		cur->units += b->units;
+c0104bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bbd:	8b 10                	mov    (%eax),%edx
+c0104bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104bc2:	8b 00                	mov    (%eax),%eax
+c0104bc4:	01 c2                	add    %eax,%edx
+c0104bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bc9:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c0104bcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104bce:	8b 50 04             	mov    0x4(%eax),%edx
+c0104bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bd4:	89 50 04             	mov    %edx,0x4(%eax)
+c0104bd7:	eb 09                	jmp    c0104be2 <slob_free+0x103>
+	} else
+		cur->next = b;
+c0104bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104bdc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104bdf:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0104be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104be5:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0104bea:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104bed:	89 04 24             	mov    %eax,(%esp)
+c0104bf0:	e8 88 fb ff ff       	call   c010477d <__intr_restore>
+}
+c0104bf5:	c9                   	leave  
+c0104bf6:	c3                   	ret    
+
+c0104bf7 <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0104bf7:	55                   	push   %ebp
+c0104bf8:	89 e5                	mov    %esp,%ebp
+c0104bfa:	83 ec 18             	sub    $0x18,%esp
+  cprintf("use SLOB allocator\n");
+c0104bfd:	c7 04 24 c2 d0 10 c0 	movl   $0xc010d0c2,(%esp)
+c0104c04:	e8 4f b7 ff ff       	call   c0100358 <cprintf>
+}
+c0104c09:	c9                   	leave  
+c0104c0a:	c3                   	ret    
+
+c0104c0b <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c0104c0b:	55                   	push   %ebp
+c0104c0c:	89 e5                	mov    %esp,%ebp
+c0104c0e:	83 ec 18             	sub    $0x18,%esp
+    slob_init();
+c0104c11:	e8 e1 ff ff ff       	call   c0104bf7 <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c0104c16:	c7 04 24 d6 d0 10 c0 	movl   $0xc010d0d6,(%esp)
+c0104c1d:	e8 36 b7 ff ff       	call   c0100358 <cprintf>
+}
+c0104c22:	c9                   	leave  
+c0104c23:	c3                   	ret    
+
+c0104c24 <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c0104c24:	55                   	push   %ebp
+c0104c25:	89 e5                	mov    %esp,%ebp
+  return 0;
+c0104c27:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104c2c:	5d                   	pop    %ebp
+c0104c2d:	c3                   	ret    
+
+c0104c2e <kallocated>:
+
+size_t
+kallocated(void) {
+c0104c2e:	55                   	push   %ebp
+c0104c2f:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c0104c31:	e8 ee ff ff ff       	call   c0104c24 <slob_allocated>
+}
+c0104c36:	5d                   	pop    %ebp
+c0104c37:	c3                   	ret    
+
+c0104c38 <find_order>:
+
+static int find_order(int size)
+{
+c0104c38:	55                   	push   %ebp
+c0104c39:	89 e5                	mov    %esp,%ebp
+c0104c3b:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c0104c3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c0104c45:	eb 07                	jmp    c0104c4e <find_order+0x16>
+		order++;
+c0104c47:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+}
+
+static int find_order(int size)
+{
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)
+c0104c4b:	d1 7d 08             	sarl   0x8(%ebp)
+c0104c4e:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0104c55:	7f f0                	jg     c0104c47 <find_order+0xf>
+		order++;
+	return order;
+c0104c57:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0104c5a:	c9                   	leave  
+c0104c5b:	c3                   	ret    
+
+c0104c5c <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c0104c5c:	55                   	push   %ebp
+c0104c5d:	89 e5                	mov    %esp,%ebp
+c0104c5f:	83 ec 28             	sub    $0x28,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0104c62:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c0104c69:	77 38                	ja     c0104ca3 <__kmalloc+0x47>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c0104c6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104c6e:	8d 50 08             	lea    0x8(%eax),%edx
+c0104c71:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104c78:	00 
+c0104c79:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104c7c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104c80:	89 14 24             	mov    %edx,(%esp)
+c0104c83:	e8 82 fc ff ff       	call   c010490a <slob_alloc>
+c0104c88:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c0104c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104c8f:	74 08                	je     c0104c99 <__kmalloc+0x3d>
+c0104c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104c94:	83 c0 08             	add    $0x8,%eax
+c0104c97:	eb 05                	jmp    c0104c9e <__kmalloc+0x42>
+c0104c99:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104c9e:	e9 a6 00 00 00       	jmp    c0104d49 <__kmalloc+0xed>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0104ca3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104caa:	00 
+c0104cab:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104cae:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104cb2:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+c0104cb9:	e8 4c fc ff ff       	call   c010490a <slob_alloc>
+c0104cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	if (!bb)
+c0104cc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104cc5:	75 07                	jne    c0104cce <__kmalloc+0x72>
+		return 0;
+c0104cc7:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104ccc:	eb 7b                	jmp    c0104d49 <__kmalloc+0xed>
+
+	bb->order = find_order(size);
+c0104cce:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104cd1:	89 04 24             	mov    %eax,(%esp)
+c0104cd4:	e8 5f ff ff ff       	call   c0104c38 <find_order>
+c0104cd9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104cdc:	89 02                	mov    %eax,(%edx)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0104cde:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ce1:	8b 00                	mov    (%eax),%eax
+c0104ce3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104cea:	89 04 24             	mov    %eax,(%esp)
+c0104ced:	e8 ab fb ff ff       	call   c010489d <__slob_get_free_pages>
+c0104cf2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104cf5:	89 42 04             	mov    %eax,0x4(%edx)
+
+	if (bb->pages) {
+c0104cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104cfb:	8b 40 04             	mov    0x4(%eax),%eax
+c0104cfe:	85 c0                	test   %eax,%eax
+c0104d00:	74 2f                	je     c0104d31 <__kmalloc+0xd5>
+		spin_lock_irqsave(&block_lock, flags);
+c0104d02:	e8 4c fa ff ff       	call   c0104753 <__intr_save>
+c0104d07:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		bb->next = bigblocks;
+c0104d0a:	8b 15 64 ed 1a c0    	mov    0xc01aed64,%edx
+c0104d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d13:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c0104d16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d19:	a3 64 ed 1a c0       	mov    %eax,0xc01aed64
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104d1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d21:	89 04 24             	mov    %eax,(%esp)
+c0104d24:	e8 54 fa ff ff       	call   c010477d <__intr_restore>
+		return bb->pages;
+c0104d29:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d2c:	8b 40 04             	mov    0x4(%eax),%eax
+c0104d2f:	eb 18                	jmp    c0104d49 <__kmalloc+0xed>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c0104d31:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104d38:	00 
+c0104d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104d3c:	89 04 24             	mov    %eax,(%esp)
+c0104d3f:	e8 9b fd ff ff       	call   c0104adf <slob_free>
+	return 0;
+c0104d44:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104d49:	c9                   	leave  
+c0104d4a:	c3                   	ret    
+
+c0104d4b <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c0104d4b:	55                   	push   %ebp
+c0104d4c:	89 e5                	mov    %esp,%ebp
+c0104d4e:	83 ec 18             	sub    $0x18,%esp
+  return __kmalloc(size, 0);
+c0104d51:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104d58:	00 
+c0104d59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d5c:	89 04 24             	mov    %eax,(%esp)
+c0104d5f:	e8 f8 fe ff ff       	call   c0104c5c <__kmalloc>
+}
+c0104d64:	c9                   	leave  
+c0104d65:	c3                   	ret    
+
+c0104d66 <kfree>:
+
+
+void kfree(void *block)
+{
+c0104d66:	55                   	push   %ebp
+c0104d67:	89 e5                	mov    %esp,%ebp
+c0104d69:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0104d6c:	c7 45 f0 64 ed 1a c0 	movl   $0xc01aed64,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0104d73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104d77:	75 05                	jne    c0104d7e <kfree+0x18>
+		return;
+c0104d79:	e9 a2 00 00 00       	jmp    c0104e20 <kfree+0xba>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104d7e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104d81:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104d86:	85 c0                	test   %eax,%eax
+c0104d88:	75 7f                	jne    c0104e09 <kfree+0xa3>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0104d8a:	e8 c4 f9 ff ff       	call   c0104753 <__intr_save>
+c0104d8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104d92:	a1 64 ed 1a c0       	mov    0xc01aed64,%eax
+c0104d97:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104d9a:	eb 5c                	jmp    c0104df8 <kfree+0x92>
+			if (bb->pages == block) {
+c0104d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d9f:	8b 40 04             	mov    0x4(%eax),%eax
+c0104da2:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104da5:	75 3f                	jne    c0104de6 <kfree+0x80>
+				*last = bb->next;
+c0104da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104daa:	8b 50 08             	mov    0x8(%eax),%edx
+c0104dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104db0:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c0104db2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104db5:	89 04 24             	mov    %eax,(%esp)
+c0104db8:	e8 c0 f9 ff ff       	call   c010477d <__intr_restore>
+				__slob_free_pages((unsigned long)block, bb->order);
+c0104dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104dc0:	8b 10                	mov    (%eax),%edx
+c0104dc2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104dc5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0104dc9:	89 04 24             	mov    %eax,(%esp)
+c0104dcc:	e8 05 fb ff ff       	call   c01048d6 <__slob_free_pages>
+				slob_free(bb, sizeof(bigblock_t));
+c0104dd1:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0104dd8:	00 
+c0104dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ddc:	89 04 24             	mov    %eax,(%esp)
+c0104ddf:	e8 fb fc ff ff       	call   c0104adf <slob_free>
+				return;
+c0104de4:	eb 3a                	jmp    c0104e20 <kfree+0xba>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0104de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104de9:	83 c0 08             	add    $0x8,%eax
+c0104dec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104def:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104df2:	8b 40 08             	mov    0x8(%eax),%eax
+c0104df5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104df8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104dfc:	75 9e                	jne    c0104d9c <kfree+0x36>
+				__slob_free_pages((unsigned long)block, bb->order);
+				slob_free(bb, sizeof(bigblock_t));
+				return;
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104dfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104e01:	89 04 24             	mov    %eax,(%esp)
+c0104e04:	e8 74 f9 ff ff       	call   c010477d <__intr_restore>
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c0104e09:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e0c:	83 e8 08             	sub    $0x8,%eax
+c0104e0f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104e16:	00 
+c0104e17:	89 04 24             	mov    %eax,(%esp)
+c0104e1a:	e8 c0 fc ff ff       	call   c0104adf <slob_free>
+	return;
+c0104e1f:	90                   	nop
+}
+c0104e20:	c9                   	leave  
+c0104e21:	c3                   	ret    
+
+c0104e22 <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c0104e22:	55                   	push   %ebp
+c0104e23:	89 e5                	mov    %esp,%ebp
+c0104e25:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c0104e28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0104e2c:	75 07                	jne    c0104e35 <ksize+0x13>
+		return 0;
+c0104e2e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104e33:	eb 6b                	jmp    c0104ea0 <ksize+0x7e>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0104e35:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e38:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104e3d:	85 c0                	test   %eax,%eax
+c0104e3f:	75 54                	jne    c0104e95 <ksize+0x73>
+		spin_lock_irqsave(&block_lock, flags);
+c0104e41:	e8 0d f9 ff ff       	call   c0104753 <__intr_save>
+c0104e46:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104e49:	a1 64 ed 1a c0       	mov    0xc01aed64,%eax
+c0104e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104e51:	eb 31                	jmp    c0104e84 <ksize+0x62>
+			if (bb->pages == block) {
+c0104e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e56:	8b 40 04             	mov    0x4(%eax),%eax
+c0104e59:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0104e5c:	75 1d                	jne    c0104e7b <ksize+0x59>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c0104e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e61:	89 04 24             	mov    %eax,(%esp)
+c0104e64:	e8 14 f9 ff ff       	call   c010477d <__intr_restore>
+				return PAGE_SIZE << bb->order;
+c0104e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e6c:	8b 00                	mov    (%eax),%eax
+c0104e6e:	ba 00 10 00 00       	mov    $0x1000,%edx
+c0104e73:	89 c1                	mov    %eax,%ecx
+c0104e75:	d3 e2                	shl    %cl,%edx
+c0104e77:	89 d0                	mov    %edx,%eax
+c0104e79:	eb 25                	jmp    c0104ea0 <ksize+0x7e>
+	if (!block)
+		return 0;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; bb = bb->next)
+c0104e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e7e:	8b 40 08             	mov    0x8(%eax),%eax
+c0104e81:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104e84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104e88:	75 c9                	jne    c0104e53 <ksize+0x31>
+			if (bb->pages == block) {
+				spin_unlock_irqrestore(&slob_lock, flags);
+				return PAGE_SIZE << bb->order;
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0104e8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e8d:	89 04 24             	mov    %eax,(%esp)
+c0104e90:	e8 e8 f8 ff ff       	call   c010477d <__intr_restore>
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0104e95:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104e98:	83 e8 08             	sub    $0x8,%eax
+c0104e9b:	8b 00                	mov    (%eax),%eax
+c0104e9d:	c1 e0 03             	shl    $0x3,%eax
+}
+c0104ea0:	c9                   	leave  
+c0104ea1:	c3                   	ret    
+
+c0104ea2 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104ea2:	55                   	push   %ebp
+c0104ea3:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104ea5:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104ea8:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0104ead:	29 c2                	sub    %eax,%edx
+c0104eaf:	89 d0                	mov    %edx,%eax
+c0104eb1:	c1 f8 05             	sar    $0x5,%eax
+}
+c0104eb4:	5d                   	pop    %ebp
+c0104eb5:	c3                   	ret    
+
+c0104eb6 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0104eb6:	55                   	push   %ebp
+c0104eb7:	89 e5                	mov    %esp,%ebp
+c0104eb9:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0104ebc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ebf:	89 04 24             	mov    %eax,(%esp)
+c0104ec2:	e8 db ff ff ff       	call   c0104ea2 <page2ppn>
+c0104ec7:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0104eca:	c9                   	leave  
+c0104ecb:	c3                   	ret    
+
+c0104ecc <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0104ecc:	55                   	push   %ebp
+c0104ecd:	89 e5                	mov    %esp,%ebp
+c0104ecf:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0104ed2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ed5:	c1 e8 0c             	shr    $0xc,%eax
+c0104ed8:	89 c2                	mov    %eax,%edx
+c0104eda:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0104edf:	39 c2                	cmp    %eax,%edx
+c0104ee1:	72 1c                	jb     c0104eff <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0104ee3:	c7 44 24 08 f4 d0 10 	movl   $0xc010d0f4,0x8(%esp)
+c0104eea:	c0 
+c0104eeb:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0104ef2:	00 
+c0104ef3:	c7 04 24 13 d1 10 c0 	movl   $0xc010d113,(%esp)
+c0104efa:	e8 c2 be ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0104eff:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0104f04:	8b 55 08             	mov    0x8(%ebp),%edx
+c0104f07:	c1 ea 0c             	shr    $0xc,%edx
+c0104f0a:	c1 e2 05             	shl    $0x5,%edx
+c0104f0d:	01 d0                	add    %edx,%eax
+}
+c0104f0f:	c9                   	leave  
+c0104f10:	c3                   	ret    
+
+c0104f11 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0104f11:	55                   	push   %ebp
+c0104f12:	89 e5                	mov    %esp,%ebp
+c0104f14:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0104f17:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f1a:	89 04 24             	mov    %eax,(%esp)
+c0104f1d:	e8 94 ff ff ff       	call   c0104eb6 <page2pa>
+c0104f22:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f28:	c1 e8 0c             	shr    $0xc,%eax
+c0104f2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104f2e:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0104f33:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104f36:	72 23                	jb     c0104f5b <page2kva+0x4a>
+c0104f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104f3f:	c7 44 24 08 24 d1 10 	movl   $0xc010d124,0x8(%esp)
+c0104f46:	c0 
+c0104f47:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0104f4e:	00 
+c0104f4f:	c7 04 24 13 d1 10 c0 	movl   $0xc010d113,(%esp)
+c0104f56:	e8 66 be ff ff       	call   c0100dc1 <__panic>
+c0104f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104f5e:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0104f63:	c9                   	leave  
+c0104f64:	c3                   	ret    
+
+c0104f65 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0104f65:	55                   	push   %ebp
+c0104f66:	89 e5                	mov    %esp,%ebp
+c0104f68:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0104f6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f6e:	83 e0 01             	and    $0x1,%eax
+c0104f71:	85 c0                	test   %eax,%eax
+c0104f73:	75 1c                	jne    c0104f91 <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0104f75:	c7 44 24 08 48 d1 10 	movl   $0xc010d148,0x8(%esp)
+c0104f7c:	c0 
+c0104f7d:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0104f84:	00 
+c0104f85:	c7 04 24 13 d1 10 c0 	movl   $0xc010d113,(%esp)
+c0104f8c:	e8 30 be ff ff       	call   c0100dc1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0104f91:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104f99:	89 04 24             	mov    %eax,(%esp)
+c0104f9c:	e8 2b ff ff ff       	call   c0104ecc <pa2page>
+}
+c0104fa1:	c9                   	leave  
+c0104fa2:	c3                   	ret    
+
+c0104fa3 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0104fa3:	55                   	push   %ebp
+c0104fa4:	89 e5                	mov    %esp,%ebp
+c0104fa6:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0104fa9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104fb1:	89 04 24             	mov    %eax,(%esp)
+c0104fb4:	e8 13 ff ff ff       	call   c0104ecc <pa2page>
+}
+c0104fb9:	c9                   	leave  
+c0104fba:	c3                   	ret    
+
+c0104fbb <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c0104fbb:	55                   	push   %ebp
+c0104fbc:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fc1:	8b 00                	mov    (%eax),%eax
+}
+c0104fc3:	5d                   	pop    %ebp
+c0104fc4:	c3                   	ret    
+
+c0104fc5 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0104fc5:	55                   	push   %ebp
+c0104fc6:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0104fc8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fcb:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0104fce:	89 10                	mov    %edx,(%eax)
+}
+c0104fd0:	5d                   	pop    %ebp
+c0104fd1:	c3                   	ret    
+
+c0104fd2 <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c0104fd2:	55                   	push   %ebp
+c0104fd3:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c0104fd5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fd8:	8b 00                	mov    (%eax),%eax
+c0104fda:	8d 50 01             	lea    0x1(%eax),%edx
+c0104fdd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fe0:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104fe2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fe5:	8b 00                	mov    (%eax),%eax
+}
+c0104fe7:	5d                   	pop    %ebp
+c0104fe8:	c3                   	ret    
+
+c0104fe9 <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c0104fe9:	55                   	push   %ebp
+c0104fea:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0104fec:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fef:	8b 00                	mov    (%eax),%eax
+c0104ff1:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0104ff4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ff7:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0104ff9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104ffc:	8b 00                	mov    (%eax),%eax
+}
+c0104ffe:	5d                   	pop    %ebp
+c0104fff:	c3                   	ret    
+
+c0105000 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0105000:	55                   	push   %ebp
+c0105001:	89 e5                	mov    %esp,%ebp
+c0105003:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0105006:	9c                   	pushf  
+c0105007:	58                   	pop    %eax
+c0105008:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010500b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010500e:	25 00 02 00 00       	and    $0x200,%eax
+c0105013:	85 c0                	test   %eax,%eax
+c0105015:	74 0c                	je     c0105023 <__intr_save+0x23>
+        intr_disable();
+c0105017:	e8 fd cf ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c010501c:	b8 01 00 00 00       	mov    $0x1,%eax
+c0105021:	eb 05                	jmp    c0105028 <__intr_save+0x28>
+    }
+    return 0;
+c0105023:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105028:	c9                   	leave  
+c0105029:	c3                   	ret    
+
+c010502a <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010502a:	55                   	push   %ebp
+c010502b:	89 e5                	mov    %esp,%ebp
+c010502d:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0105030:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105034:	74 05                	je     c010503b <__intr_restore+0x11>
+        intr_enable();
+c0105036:	e8 d8 cf ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c010503b:	c9                   	leave  
+c010503c:	c3                   	ret    
+
+c010503d <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c010503d:	55                   	push   %ebp
+c010503e:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c0105040:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105043:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c0105046:	b8 23 00 00 00       	mov    $0x23,%eax
+c010504b:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c010504d:	b8 23 00 00 00       	mov    $0x23,%eax
+c0105052:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c0105054:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105059:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c010505b:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105060:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c0105062:	b8 10 00 00 00       	mov    $0x10,%eax
+c0105067:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c0105069:	ea 70 50 10 c0 08 00 	ljmp   $0x8,$0xc0105070
+}
+c0105070:	5d                   	pop    %ebp
+c0105071:	c3                   	ret    
+
+c0105072 <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c0105072:	55                   	push   %ebp
+c0105073:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c0105075:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105078:	a3 a4 ed 1a c0       	mov    %eax,0xc01aeda4
+}
+c010507d:	5d                   	pop    %ebp
+c010507e:	c3                   	ret    
+
+c010507f <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c010507f:	55                   	push   %ebp
+c0105080:	89 e5                	mov    %esp,%ebp
+c0105082:	83 ec 14             	sub    $0x14,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c0105085:	b8 00 c0 12 c0       	mov    $0xc012c000,%eax
+c010508a:	89 04 24             	mov    %eax,(%esp)
+c010508d:	e8 e0 ff ff ff       	call   c0105072 <load_esp0>
+    ts.ts_ss0 = KERNEL_DS;
+c0105092:	66 c7 05 a8 ed 1a c0 	movw   $0x10,0xc01aeda8
+c0105099:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c010509b:	66 c7 05 48 ca 12 c0 	movw   $0x68,0xc012ca48
+c01050a2:	68 00 
+c01050a4:	b8 a0 ed 1a c0       	mov    $0xc01aeda0,%eax
+c01050a9:	66 a3 4a ca 12 c0    	mov    %ax,0xc012ca4a
+c01050af:	b8 a0 ed 1a c0       	mov    $0xc01aeda0,%eax
+c01050b4:	c1 e8 10             	shr    $0x10,%eax
+c01050b7:	a2 4c ca 12 c0       	mov    %al,0xc012ca4c
+c01050bc:	0f b6 05 4d ca 12 c0 	movzbl 0xc012ca4d,%eax
+c01050c3:	83 e0 f0             	and    $0xfffffff0,%eax
+c01050c6:	83 c8 09             	or     $0x9,%eax
+c01050c9:	a2 4d ca 12 c0       	mov    %al,0xc012ca4d
+c01050ce:	0f b6 05 4d ca 12 c0 	movzbl 0xc012ca4d,%eax
+c01050d5:	83 e0 ef             	and    $0xffffffef,%eax
+c01050d8:	a2 4d ca 12 c0       	mov    %al,0xc012ca4d
+c01050dd:	0f b6 05 4d ca 12 c0 	movzbl 0xc012ca4d,%eax
+c01050e4:	83 e0 9f             	and    $0xffffff9f,%eax
+c01050e7:	a2 4d ca 12 c0       	mov    %al,0xc012ca4d
+c01050ec:	0f b6 05 4d ca 12 c0 	movzbl 0xc012ca4d,%eax
+c01050f3:	83 c8 80             	or     $0xffffff80,%eax
+c01050f6:	a2 4d ca 12 c0       	mov    %al,0xc012ca4d
+c01050fb:	0f b6 05 4e ca 12 c0 	movzbl 0xc012ca4e,%eax
+c0105102:	83 e0 f0             	and    $0xfffffff0,%eax
+c0105105:	a2 4e ca 12 c0       	mov    %al,0xc012ca4e
+c010510a:	0f b6 05 4e ca 12 c0 	movzbl 0xc012ca4e,%eax
+c0105111:	83 e0 ef             	and    $0xffffffef,%eax
+c0105114:	a2 4e ca 12 c0       	mov    %al,0xc012ca4e
+c0105119:	0f b6 05 4e ca 12 c0 	movzbl 0xc012ca4e,%eax
+c0105120:	83 e0 df             	and    $0xffffffdf,%eax
+c0105123:	a2 4e ca 12 c0       	mov    %al,0xc012ca4e
+c0105128:	0f b6 05 4e ca 12 c0 	movzbl 0xc012ca4e,%eax
+c010512f:	83 c8 40             	or     $0x40,%eax
+c0105132:	a2 4e ca 12 c0       	mov    %al,0xc012ca4e
+c0105137:	0f b6 05 4e ca 12 c0 	movzbl 0xc012ca4e,%eax
+c010513e:	83 e0 7f             	and    $0x7f,%eax
+c0105141:	a2 4e ca 12 c0       	mov    %al,0xc012ca4e
+c0105146:	b8 a0 ed 1a c0       	mov    $0xc01aeda0,%eax
+c010514b:	c1 e8 18             	shr    $0x18,%eax
+c010514e:	a2 4f ca 12 c0       	mov    %al,0xc012ca4f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c0105153:	c7 04 24 50 ca 12 c0 	movl   $0xc012ca50,(%esp)
+c010515a:	e8 de fe ff ff       	call   c010503d <lgdt>
+c010515f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c0105165:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0105169:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c010516c:	c9                   	leave  
+c010516d:	c3                   	ret    
+
+c010516e <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c010516e:	55                   	push   %ebp
+c010516f:	89 e5                	mov    %esp,%ebp
+c0105171:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager = &default_pmm_manager;
+c0105174:	c7 05 88 0e 1b c0 e8 	movl   $0xc010cfe8,0xc01b0e88
+c010517b:	cf 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c010517e:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c0105183:	8b 00                	mov    (%eax),%eax
+c0105185:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105189:	c7 04 24 74 d1 10 c0 	movl   $0xc010d174,(%esp)
+c0105190:	e8 c3 b1 ff ff       	call   c0100358 <cprintf>
+    pmm_manager->init();
+c0105195:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c010519a:	8b 40 04             	mov    0x4(%eax),%eax
+c010519d:	ff d0                	call   *%eax
+}
+c010519f:	c9                   	leave  
+c01051a0:	c3                   	ret    
+
+c01051a1 <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c01051a1:	55                   	push   %ebp
+c01051a2:	89 e5                	mov    %esp,%ebp
+c01051a4:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->init_memmap(base, n);
+c01051a7:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c01051ac:	8b 40 08             	mov    0x8(%eax),%eax
+c01051af:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01051b2:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01051b6:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051b9:	89 14 24             	mov    %edx,(%esp)
+c01051bc:	ff d0                	call   *%eax
+}
+c01051be:	c9                   	leave  
+c01051bf:	c3                   	ret    
+
+c01051c0 <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c01051c0:	55                   	push   %ebp
+c01051c1:	89 e5                	mov    %esp,%ebp
+c01051c3:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page=NULL;
+c01051c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c01051cd:	e8 2e fe ff ff       	call   c0105000 <__intr_save>
+c01051d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c01051d5:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c01051da:	8b 40 0c             	mov    0xc(%eax),%eax
+c01051dd:	8b 55 08             	mov    0x8(%ebp),%edx
+c01051e0:	89 14 24             	mov    %edx,(%esp)
+c01051e3:	ff d0                	call   *%eax
+c01051e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c01051e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01051eb:	89 04 24             	mov    %eax,(%esp)
+c01051ee:	e8 37 fe ff ff       	call   c010502a <__intr_restore>
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c01051f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01051f7:	75 2d                	jne    c0105226 <alloc_pages+0x66>
+c01051f9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01051fd:	77 27                	ja     c0105226 <alloc_pages+0x66>
+c01051ff:	a1 0c ee 1a c0       	mov    0xc01aee0c,%eax
+c0105204:	85 c0                	test   %eax,%eax
+c0105206:	74 1e                	je     c0105226 <alloc_pages+0x66>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c0105208:	8b 55 08             	mov    0x8(%ebp),%edx
+c010520b:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c0105210:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105217:	00 
+c0105218:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010521c:	89 04 24             	mov    %eax,(%esp)
+c010521f:	e8 9e 1d 00 00       	call   c0106fc2 <swap_out>
+    }
+c0105224:	eb a7                	jmp    c01051cd <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c0105226:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105229:	c9                   	leave  
+c010522a:	c3                   	ret    
+
+c010522b <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c010522b:	55                   	push   %ebp
+c010522c:	89 e5                	mov    %esp,%ebp
+c010522e:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0105231:	e8 ca fd ff ff       	call   c0105000 <__intr_save>
+c0105236:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c0105239:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c010523e:	8b 40 10             	mov    0x10(%eax),%eax
+c0105241:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105244:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0105248:	8b 55 08             	mov    0x8(%ebp),%edx
+c010524b:	89 14 24             	mov    %edx,(%esp)
+c010524e:	ff d0                	call   *%eax
+    }
+    local_intr_restore(intr_flag);
+c0105250:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105253:	89 04 24             	mov    %eax,(%esp)
+c0105256:	e8 cf fd ff ff       	call   c010502a <__intr_restore>
+}
+c010525b:	c9                   	leave  
+c010525c:	c3                   	ret    
+
+c010525d <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c010525d:	55                   	push   %ebp
+c010525e:	89 e5                	mov    %esp,%ebp
+c0105260:	83 ec 28             	sub    $0x28,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0105263:	e8 98 fd ff ff       	call   c0105000 <__intr_save>
+c0105268:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c010526b:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c0105270:	8b 40 14             	mov    0x14(%eax),%eax
+c0105273:	ff d0                	call   *%eax
+c0105275:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010527b:	89 04 24             	mov    %eax,(%esp)
+c010527e:	e8 a7 fd ff ff       	call   c010502a <__intr_restore>
+    return ret;
+c0105283:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0105286:	c9                   	leave  
+c0105287:	c3                   	ret    
+
+c0105288 <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c0105288:	55                   	push   %ebp
+c0105289:	89 e5                	mov    %esp,%ebp
+c010528b:	57                   	push   %edi
+c010528c:	56                   	push   %esi
+c010528d:	53                   	push   %ebx
+c010528e:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0105294:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c010529b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c01052a2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c01052a9:	c7 04 24 8b d1 10 c0 	movl   $0xc010d18b,(%esp)
+c01052b0:	e8 a3 b0 ff ff       	call   c0100358 <cprintf>
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01052b5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01052bc:	e9 15 01 00 00       	jmp    c01053d6 <page_init+0x14e>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c01052c1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052c7:	89 d0                	mov    %edx,%eax
+c01052c9:	c1 e0 02             	shl    $0x2,%eax
+c01052cc:	01 d0                	add    %edx,%eax
+c01052ce:	c1 e0 02             	shl    $0x2,%eax
+c01052d1:	01 c8                	add    %ecx,%eax
+c01052d3:	8b 50 08             	mov    0x8(%eax),%edx
+c01052d6:	8b 40 04             	mov    0x4(%eax),%eax
+c01052d9:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c01052dc:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c01052df:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01052e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01052e5:	89 d0                	mov    %edx,%eax
+c01052e7:	c1 e0 02             	shl    $0x2,%eax
+c01052ea:	01 d0                	add    %edx,%eax
+c01052ec:	c1 e0 02             	shl    $0x2,%eax
+c01052ef:	01 c8                	add    %ecx,%eax
+c01052f1:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01052f4:	8b 58 10             	mov    0x10(%eax),%ebx
+c01052f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01052fa:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01052fd:	01 c8                	add    %ecx,%eax
+c01052ff:	11 da                	adc    %ebx,%edx
+c0105301:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c0105304:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c0105307:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010530a:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010530d:	89 d0                	mov    %edx,%eax
+c010530f:	c1 e0 02             	shl    $0x2,%eax
+c0105312:	01 d0                	add    %edx,%eax
+c0105314:	c1 e0 02             	shl    $0x2,%eax
+c0105317:	01 c8                	add    %ecx,%eax
+c0105319:	83 c0 14             	add    $0x14,%eax
+c010531c:	8b 00                	mov    (%eax),%eax
+c010531e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
+c0105324:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0105327:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c010532a:	83 c0 ff             	add    $0xffffffff,%eax
+c010532d:	83 d2 ff             	adc    $0xffffffff,%edx
+c0105330:	89 c6                	mov    %eax,%esi
+c0105332:	89 d7                	mov    %edx,%edi
+c0105334:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105337:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010533a:	89 d0                	mov    %edx,%eax
+c010533c:	c1 e0 02             	shl    $0x2,%eax
+c010533f:	01 d0                	add    %edx,%eax
+c0105341:	c1 e0 02             	shl    $0x2,%eax
+c0105344:	01 c8                	add    %ecx,%eax
+c0105346:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105349:	8b 58 10             	mov    0x10(%eax),%ebx
+c010534c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
+c0105352:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+c0105356:	89 74 24 14          	mov    %esi,0x14(%esp)
+c010535a:	89 7c 24 18          	mov    %edi,0x18(%esp)
+c010535e:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105361:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0105364:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105368:	89 54 24 10          	mov    %edx,0x10(%esp)
+c010536c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0105370:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+c0105374:	c7 04 24 98 d1 10 c0 	movl   $0xc010d198,(%esp)
+c010537b:	e8 d8 af ff ff       	call   c0100358 <cprintf>
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0105380:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105383:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105386:	89 d0                	mov    %edx,%eax
+c0105388:	c1 e0 02             	shl    $0x2,%eax
+c010538b:	01 d0                	add    %edx,%eax
+c010538d:	c1 e0 02             	shl    $0x2,%eax
+c0105390:	01 c8                	add    %ecx,%eax
+c0105392:	83 c0 14             	add    $0x14,%eax
+c0105395:	8b 00                	mov    (%eax),%eax
+c0105397:	83 f8 01             	cmp    $0x1,%eax
+c010539a:	75 36                	jne    c01053d2 <page_init+0x14a>
+            if (maxpa < end && begin < KMEMSIZE) {
+c010539c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010539f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01053a2:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c01053a5:	77 2b                	ja     c01053d2 <page_init+0x14a>
+c01053a7:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c01053aa:	72 05                	jb     c01053b1 <page_init+0x129>
+c01053ac:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c01053af:	73 21                	jae    c01053d2 <page_init+0x14a>
+c01053b1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c01053b5:	77 1b                	ja     c01053d2 <page_init+0x14a>
+c01053b7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c01053bb:	72 09                	jb     c01053c6 <page_init+0x13e>
+c01053bd:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c01053c4:	77 0c                	ja     c01053d2 <page_init+0x14a>
+                maxpa = end;
+c01053c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01053c9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01053cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01053cf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01053d2:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c01053d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01053d9:	8b 00                	mov    (%eax),%eax
+c01053db:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c01053de:	0f 8f dd fe ff ff    	jg     c01052c1 <page_init+0x39>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c01053e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01053e8:	72 1d                	jb     c0105407 <page_init+0x17f>
+c01053ea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01053ee:	77 09                	ja     c01053f9 <page_init+0x171>
+c01053f0:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c01053f7:	76 0e                	jbe    c0105407 <page_init+0x17f>
+        maxpa = KMEMSIZE;
+c01053f9:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c0105400:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c0105407:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010540a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010540d:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0105411:	c1 ea 0c             	shr    $0xc,%edx
+c0105414:	a3 80 ed 1a c0       	mov    %eax,0xc01aed80
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c0105419:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c0105420:	b8 78 0f 1b c0       	mov    $0xc01b0f78,%eax
+c0105425:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0105428:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010542b:	01 d0                	add    %edx,%eax
+c010542d:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c0105430:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0105433:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105438:	f7 75 ac             	divl   -0x54(%ebp)
+c010543b:	89 d0                	mov    %edx,%eax
+c010543d:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0105440:	29 c2                	sub    %eax,%edx
+c0105442:	89 d0                	mov    %edx,%eax
+c0105444:	a3 90 0e 1b c0       	mov    %eax,0xc01b0e90
+
+    for (i = 0; i < npage; i ++) {
+c0105449:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0105450:	eb 27                	jmp    c0105479 <page_init+0x1f1>
+        SetPageReserved(pages + i);
+c0105452:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0105457:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010545a:	c1 e2 05             	shl    $0x5,%edx
+c010545d:	01 d0                	add    %edx,%eax
+c010545f:	83 c0 04             	add    $0x4,%eax
+c0105462:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c0105469:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c010546c:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c010546f:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0105472:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c0105475:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0105479:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010547c:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0105481:	39 c2                	cmp    %eax,%edx
+c0105483:	72 cd                	jb     c0105452 <page_init+0x1ca>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0105485:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c010548a:	c1 e0 05             	shl    $0x5,%eax
+c010548d:	89 c2                	mov    %eax,%edx
+c010548f:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0105494:	01 d0                	add    %edx,%eax
+c0105496:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c0105499:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c01054a0:	77 23                	ja     c01054c5 <page_init+0x23d>
+c01054a2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c01054a5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01054a9:	c7 44 24 08 c8 d1 10 	movl   $0xc010d1c8,0x8(%esp)
+c01054b0:	c0 
+c01054b1:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c01054b8:	00 
+c01054b9:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01054c0:	e8 fc b8 ff ff       	call   c0100dc1 <__panic>
+c01054c5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c01054c8:	05 00 00 00 40       	add    $0x40000000,%eax
+c01054cd:	89 45 a0             	mov    %eax,-0x60(%ebp)
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01054d0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01054d7:	e9 74 01 00 00       	jmp    c0105650 <page_init+0x3c8>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c01054dc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054df:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01054e2:	89 d0                	mov    %edx,%eax
+c01054e4:	c1 e0 02             	shl    $0x2,%eax
+c01054e7:	01 d0                	add    %edx,%eax
+c01054e9:	c1 e0 02             	shl    $0x2,%eax
+c01054ec:	01 c8                	add    %ecx,%eax
+c01054ee:	8b 50 08             	mov    0x8(%eax),%edx
+c01054f1:	8b 40 04             	mov    0x4(%eax),%eax
+c01054f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01054f7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01054fa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01054fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105500:	89 d0                	mov    %edx,%eax
+c0105502:	c1 e0 02             	shl    $0x2,%eax
+c0105505:	01 d0                	add    %edx,%eax
+c0105507:	c1 e0 02             	shl    $0x2,%eax
+c010550a:	01 c8                	add    %ecx,%eax
+c010550c:	8b 48 0c             	mov    0xc(%eax),%ecx
+c010550f:	8b 58 10             	mov    0x10(%eax),%ebx
+c0105512:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105515:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105518:	01 c8                	add    %ecx,%eax
+c010551a:	11 da                	adc    %ebx,%edx
+c010551c:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c010551f:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c0105522:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0105525:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105528:	89 d0                	mov    %edx,%eax
+c010552a:	c1 e0 02             	shl    $0x2,%eax
+c010552d:	01 d0                	add    %edx,%eax
+c010552f:	c1 e0 02             	shl    $0x2,%eax
+c0105532:	01 c8                	add    %ecx,%eax
+c0105534:	83 c0 14             	add    $0x14,%eax
+c0105537:	8b 00                	mov    (%eax),%eax
+c0105539:	83 f8 01             	cmp    $0x1,%eax
+c010553c:	0f 85 0a 01 00 00    	jne    c010564c <page_init+0x3c4>
+            if (begin < freemem) {
+c0105542:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0105545:	ba 00 00 00 00       	mov    $0x0,%edx
+c010554a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010554d:	72 17                	jb     c0105566 <page_init+0x2de>
+c010554f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0105552:	77 05                	ja     c0105559 <page_init+0x2d1>
+c0105554:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c0105557:	76 0d                	jbe    c0105566 <page_init+0x2de>
+                begin = freemem;
+c0105559:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c010555c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010555f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c0105566:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c010556a:	72 1d                	jb     c0105589 <page_init+0x301>
+c010556c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105570:	77 09                	ja     c010557b <page_init+0x2f3>
+c0105572:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0105579:	76 0e                	jbe    c0105589 <page_init+0x301>
+                end = KMEMSIZE;
+c010557b:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c0105582:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c0105589:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010558c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010558f:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105592:	0f 87 b4 00 00 00    	ja     c010564c <page_init+0x3c4>
+c0105598:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c010559b:	72 09                	jb     c01055a6 <page_init+0x31e>
+c010559d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c01055a0:	0f 83 a6 00 00 00    	jae    c010564c <page_init+0x3c4>
+                begin = ROUNDUP(begin, PGSIZE);
+c01055a6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c01055ad:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01055b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c01055b3:	01 d0                	add    %edx,%eax
+c01055b5:	83 e8 01             	sub    $0x1,%eax
+c01055b8:	89 45 98             	mov    %eax,-0x68(%ebp)
+c01055bb:	8b 45 98             	mov    -0x68(%ebp),%eax
+c01055be:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055c3:	f7 75 9c             	divl   -0x64(%ebp)
+c01055c6:	89 d0                	mov    %edx,%eax
+c01055c8:	8b 55 98             	mov    -0x68(%ebp),%edx
+c01055cb:	29 c2                	sub    %eax,%edx
+c01055cd:	89 d0                	mov    %edx,%eax
+c01055cf:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01055d7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c01055da:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01055dd:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c01055e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c01055e3:	ba 00 00 00 00       	mov    $0x0,%edx
+c01055e8:	89 c7                	mov    %eax,%edi
+c01055ea:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+c01055f0:	89 7d 80             	mov    %edi,-0x80(%ebp)
+c01055f3:	89 d0                	mov    %edx,%eax
+c01055f5:	83 e0 00             	and    $0x0,%eax
+c01055f8:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c01055fb:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01055fe:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0105601:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0105604:	89 55 cc             	mov    %edx,-0x34(%ebp)
+                if (begin < end) {
+c0105607:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010560a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010560d:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105610:	77 3a                	ja     c010564c <page_init+0x3c4>
+c0105612:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0105615:	72 05                	jb     c010561c <page_init+0x394>
+c0105617:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010561a:	73 30                	jae    c010564c <page_init+0x3c4>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c010561c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c010561f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+c0105622:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105625:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0105628:	29 c8                	sub    %ecx,%eax
+c010562a:	19 da                	sbb    %ebx,%edx
+c010562c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0105630:	c1 ea 0c             	shr    $0xc,%edx
+c0105633:	89 c3                	mov    %eax,%ebx
+c0105635:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105638:	89 04 24             	mov    %eax,(%esp)
+c010563b:	e8 8c f8 ff ff       	call   c0104ecc <pa2page>
+c0105640:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0105644:	89 04 24             	mov    %eax,(%esp)
+c0105647:	e8 55 fb ff ff       	call   c01051a1 <init_memmap>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c010564c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0105650:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0105653:	8b 00                	mov    (%eax),%eax
+c0105655:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0105658:	0f 8f 7e fe ff ff    	jg     c01054dc <page_init+0x254>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c010565e:	81 c4 9c 00 00 00    	add    $0x9c,%esp
+c0105664:	5b                   	pop    %ebx
+c0105665:	5e                   	pop    %esi
+c0105666:	5f                   	pop    %edi
+c0105667:	5d                   	pop    %ebp
+c0105668:	c3                   	ret    
+
+c0105669 <enable_paging>:
+
+static void
+enable_paging(void) {
+c0105669:	55                   	push   %ebp
+c010566a:	89 e5                	mov    %esp,%ebp
+c010566c:	83 ec 10             	sub    $0x10,%esp
+    lcr3(boot_cr3);
+c010566f:	a1 8c 0e 1b c0       	mov    0xc01b0e8c,%eax
+c0105674:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0105677:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010567a:	0f 22 d8             	mov    %eax,%cr3
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+c010567d:	0f 20 c0             	mov    %cr0,%eax
+c0105680:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr0;
+c0105683:	8b 45 f4             	mov    -0xc(%ebp),%eax
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+c0105686:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+c0105689:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
+    cr0 &= ~(CR0_TS | CR0_EM);
+c0105690:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
+c0105694:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105697:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+c010569a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010569d:	0f 22 c0             	mov    %eax,%cr0
+    lcr0(cr0);
+}
+c01056a0:	c9                   	leave  
+c01056a1:	c3                   	ret    
+
+c01056a2 <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c01056a2:	55                   	push   %ebp
+c01056a3:	89 e5                	mov    %esp,%ebp
+c01056a5:	83 ec 38             	sub    $0x38,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c01056a8:	8b 45 14             	mov    0x14(%ebp),%eax
+c01056ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01056ae:	31 d0                	xor    %edx,%eax
+c01056b0:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01056b5:	85 c0                	test   %eax,%eax
+c01056b7:	74 24                	je     c01056dd <boot_map_segment+0x3b>
+c01056b9:	c7 44 24 0c fa d1 10 	movl   $0xc010d1fa,0xc(%esp)
+c01056c0:	c0 
+c01056c1:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01056c8:	c0 
+c01056c9:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
+c01056d0:	00 
+c01056d1:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01056d8:	e8 e4 b6 ff ff       	call   c0100dc1 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c01056dd:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c01056e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01056e7:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01056ec:	89 c2                	mov    %eax,%edx
+c01056ee:	8b 45 10             	mov    0x10(%ebp),%eax
+c01056f1:	01 c2                	add    %eax,%edx
+c01056f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01056f6:	01 d0                	add    %edx,%eax
+c01056f8:	83 e8 01             	sub    $0x1,%eax
+c01056fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105701:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105706:	f7 75 f0             	divl   -0x10(%ebp)
+c0105709:	89 d0                	mov    %edx,%eax
+c010570b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010570e:	29 c2                	sub    %eax,%edx
+c0105710:	89 d0                	mov    %edx,%eax
+c0105712:	c1 e8 0c             	shr    $0xc,%eax
+c0105715:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0105718:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010571b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010571e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105721:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105726:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0105729:	8b 45 14             	mov    0x14(%ebp),%eax
+c010572c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010572f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105732:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105737:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c010573a:	eb 6b                	jmp    c01057a7 <boot_map_segment+0x105>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c010573c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105743:	00 
+c0105744:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105747:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010574b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010574e:	89 04 24             	mov    %eax,(%esp)
+c0105751:	e8 d1 01 00 00       	call   c0105927 <get_pte>
+c0105756:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c0105759:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c010575d:	75 24                	jne    c0105783 <boot_map_segment+0xe1>
+c010575f:	c7 44 24 0c 26 d2 10 	movl   $0xc010d226,0xc(%esp)
+c0105766:	c0 
+c0105767:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010576e:	c0 
+c010576f:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
+c0105776:	00 
+c0105777:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010577e:	e8 3e b6 ff ff       	call   c0100dc1 <__panic>
+        *ptep = pa | PTE_P | perm;
+c0105783:	8b 45 18             	mov    0x18(%ebp),%eax
+c0105786:	8b 55 14             	mov    0x14(%ebp),%edx
+c0105789:	09 d0                	or     %edx,%eax
+c010578b:	83 c8 01             	or     $0x1,%eax
+c010578e:	89 c2                	mov    %eax,%edx
+c0105790:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105793:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0105795:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105799:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c01057a0:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c01057a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01057ab:	75 8f                	jne    c010573c <boot_map_segment+0x9a>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c01057ad:	c9                   	leave  
+c01057ae:	c3                   	ret    
+
+c01057af <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c01057af:	55                   	push   %ebp
+c01057b0:	89 e5                	mov    %esp,%ebp
+c01057b2:	83 ec 28             	sub    $0x28,%esp
+    struct Page *p = alloc_page();
+c01057b5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01057bc:	e8 ff f9 ff ff       	call   c01051c0 <alloc_pages>
+c01057c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c01057c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01057c8:	75 1c                	jne    c01057e6 <boot_alloc_page+0x37>
+        panic("boot_alloc_page failed.\n");
+c01057ca:	c7 44 24 08 33 d2 10 	movl   $0xc010d233,0x8(%esp)
+c01057d1:	c0 
+c01057d2:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
+c01057d9:	00 
+c01057da:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01057e1:	e8 db b5 ff ff       	call   c0100dc1 <__panic>
+    }
+    return page2kva(p);
+c01057e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01057e9:	89 04 24             	mov    %eax,(%esp)
+c01057ec:	e8 20 f7 ff ff       	call   c0104f11 <page2kva>
+}
+c01057f1:	c9                   	leave  
+c01057f2:	c3                   	ret    
+
+c01057f3 <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c01057f3:	55                   	push   %ebp
+c01057f4:	89 e5                	mov    %esp,%ebp
+c01057f6:	83 ec 38             	sub    $0x38,%esp
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c01057f9:	e8 70 f9 ff ff       	call   c010516e <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c01057fe:	e8 85 fa ff ff       	call   c0105288 <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c0105803:	e8 5a 09 00 00       	call   c0106162 <check_alloc_page>
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+c0105808:	e8 a2 ff ff ff       	call   c01057af <boot_alloc_page>
+c010580d:	a3 84 ed 1a c0       	mov    %eax,0xc01aed84
+    memset(boot_pgdir, 0, PGSIZE);
+c0105812:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0105817:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c010581e:	00 
+c010581f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0105826:	00 
+c0105827:	89 04 24             	mov    %eax,(%esp)
+c010582a:	e8 68 69 00 00       	call   c010c197 <memset>
+    boot_cr3 = PADDR(boot_pgdir);
+c010582f:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0105834:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105837:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010583e:	77 23                	ja     c0105863 <pmm_init+0x70>
+c0105840:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105843:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105847:	c7 44 24 08 c8 d1 10 	movl   $0xc010d1c8,0x8(%esp)
+c010584e:	c0 
+c010584f:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
+c0105856:	00 
+c0105857:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010585e:	e8 5e b5 ff ff       	call   c0100dc1 <__panic>
+c0105863:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105866:	05 00 00 00 40       	add    $0x40000000,%eax
+c010586b:	a3 8c 0e 1b c0       	mov    %eax,0xc01b0e8c
+
+    check_pgdir();
+c0105870:	e8 0b 09 00 00       	call   c0106180 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c0105875:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010587a:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0105880:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0105885:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105888:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c010588f:	77 23                	ja     c01058b4 <pmm_init+0xc1>
+c0105891:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105894:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105898:	c7 44 24 08 c8 d1 10 	movl   $0xc010d1c8,0x8(%esp)
+c010589f:	c0 
+c01058a0:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
+c01058a7:	00 
+c01058a8:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01058af:	e8 0d b5 ff ff       	call   c0100dc1 <__panic>
+c01058b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058b7:	05 00 00 00 40       	add    $0x40000000,%eax
+c01058bc:	83 c8 03             	or     $0x3,%eax
+c01058bf:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c01058c1:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01058c6:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
+c01058cd:	00 
+c01058ce:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01058d5:	00 
+c01058d6:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
+c01058dd:	38 
+c01058de:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+c01058e5:	c0 
+c01058e6:	89 04 24             	mov    %eax,(%esp)
+c01058e9:	e8 b4 fd ff ff       	call   c01056a2 <boot_map_segment>
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+c01058ee:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01058f3:	8b 15 84 ed 1a c0    	mov    0xc01aed84,%edx
+c01058f9:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
+c01058ff:	89 10                	mov    %edx,(%eax)
+
+    enable_paging();
+c0105901:	e8 63 fd ff ff       	call   c0105669 <enable_paging>
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c0105906:	e8 74 f7 ff ff       	call   c010507f <gdt_init>
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+c010590b:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0105910:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c0105916:	e8 00 0f 00 00       	call   c010681b <check_boot_pgdir>
+
+    print_pgdir();
+c010591b:	e8 8d 13 00 00       	call   c0106cad <print_pgdir>
+    
+    kmalloc_init();
+c0105920:	e8 e6 f2 ff ff       	call   c0104c0b <kmalloc_init>
+
+}
+c0105925:	c9                   	leave  
+c0105926:	c3                   	ret    
+
+c0105927 <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c0105927:	55                   	push   %ebp
+c0105928:	89 e5                	mov    %esp,%ebp
+c010592a:	83 ec 38             	sub    $0x38,%esp
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = &pgdir[PDX(la)];
+c010592d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105930:	c1 e8 16             	shr    $0x16,%eax
+c0105933:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010593a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010593d:	01 d0                	add    %edx,%eax
+c010593f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!(*pdep & PTE_P)) {
+c0105942:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105945:	8b 00                	mov    (%eax),%eax
+c0105947:	83 e0 01             	and    $0x1,%eax
+c010594a:	85 c0                	test   %eax,%eax
+c010594c:	0f 85 af 00 00 00    	jne    c0105a01 <get_pte+0xda>
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+c0105952:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105956:	74 15                	je     c010596d <get_pte+0x46>
+c0105958:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010595f:	e8 5c f8 ff ff       	call   c01051c0 <alloc_pages>
+c0105964:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105967:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010596b:	75 0a                	jne    c0105977 <get_pte+0x50>
+            return NULL;
+c010596d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105972:	e9 e6 00 00 00       	jmp    c0105a5d <get_pte+0x136>
+        }
+        set_page_ref(page, 1);
+c0105977:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010597e:	00 
+c010597f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105982:	89 04 24             	mov    %eax,(%esp)
+c0105985:	e8 3b f6 ff ff       	call   c0104fc5 <set_page_ref>
+        uintptr_t pa = page2pa(page);
+c010598a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010598d:	89 04 24             	mov    %eax,(%esp)
+c0105990:	e8 21 f5 ff ff       	call   c0104eb6 <page2pa>
+c0105995:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        memset(KADDR(pa), 0, PGSIZE);
+c0105998:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010599b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010599e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059a1:	c1 e8 0c             	shr    $0xc,%eax
+c01059a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01059a7:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c01059ac:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c01059af:	72 23                	jb     c01059d4 <get_pte+0xad>
+c01059b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01059b8:	c7 44 24 08 24 d1 10 	movl   $0xc010d124,0x8(%esp)
+c01059bf:	c0 
+c01059c0:	c7 44 24 04 8c 01 00 	movl   $0x18c,0x4(%esp)
+c01059c7:	00 
+c01059c8:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01059cf:	e8 ed b3 ff ff       	call   c0100dc1 <__panic>
+c01059d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059d7:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01059dc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c01059e3:	00 
+c01059e4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01059eb:	00 
+c01059ec:	89 04 24             	mov    %eax,(%esp)
+c01059ef:	e8 a3 67 00 00       	call   c010c197 <memset>
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+c01059f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01059f7:	83 c8 07             	or     $0x7,%eax
+c01059fa:	89 c2                	mov    %eax,%edx
+c01059fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059ff:	89 10                	mov    %edx,(%eax)
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+c0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105a04:	8b 00                	mov    (%eax),%eax
+c0105a06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105a0b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105a0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a11:	c1 e8 0c             	shr    $0xc,%eax
+c0105a14:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105a17:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0105a1c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0105a1f:	72 23                	jb     c0105a44 <get_pte+0x11d>
+c0105a21:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a24:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105a28:	c7 44 24 08 24 d1 10 	movl   $0xc010d124,0x8(%esp)
+c0105a2f:	c0 
+c0105a30:	c7 44 24 04 8f 01 00 	movl   $0x18f,0x4(%esp)
+c0105a37:	00 
+c0105a38:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105a3f:	e8 7d b3 ff ff       	call   c0100dc1 <__panic>
+c0105a44:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a47:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0105a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105a4f:	c1 ea 0c             	shr    $0xc,%edx
+c0105a52:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+c0105a58:	c1 e2 02             	shl    $0x2,%edx
+c0105a5b:	01 d0                	add    %edx,%eax
+
+}
+c0105a5d:	c9                   	leave  
+c0105a5e:	c3                   	ret    
+
+c0105a5f <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c0105a5f:	55                   	push   %ebp
+c0105a60:	89 e5                	mov    %esp,%ebp
+c0105a62:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105a65:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105a6c:	00 
+c0105a6d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a70:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105a74:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105a77:	89 04 24             	mov    %eax,(%esp)
+c0105a7a:	e8 a8 fe ff ff       	call   c0105927 <get_pte>
+c0105a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c0105a82:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105a86:	74 08                	je     c0105a90 <get_page+0x31>
+        *ptep_store = ptep;
+c0105a88:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105a8e:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c0105a90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105a94:	74 1b                	je     c0105ab1 <get_page+0x52>
+c0105a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105a99:	8b 00                	mov    (%eax),%eax
+c0105a9b:	83 e0 01             	and    $0x1,%eax
+c0105a9e:	85 c0                	test   %eax,%eax
+c0105aa0:	74 0f                	je     c0105ab1 <get_page+0x52>
+        return pa2page(*ptep);
+c0105aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105aa5:	8b 00                	mov    (%eax),%eax
+c0105aa7:	89 04 24             	mov    %eax,(%esp)
+c0105aaa:	e8 1d f4 ff ff       	call   c0104ecc <pa2page>
+c0105aaf:	eb 05                	jmp    c0105ab6 <get_page+0x57>
+    }
+    return NULL;
+c0105ab1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105ab6:	c9                   	leave  
+c0105ab7:	c3                   	ret    
+
+c0105ab8 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c0105ab8:	55                   	push   %ebp
+c0105ab9:	89 e5                	mov    %esp,%ebp
+c0105abb:	83 ec 28             	sub    $0x28,%esp
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+
+    if(*ptep & PTE_P) {               
+c0105abe:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ac1:	8b 00                	mov    (%eax),%eax
+c0105ac3:	83 e0 01             	and    $0x1,%eax
+c0105ac6:	85 c0                	test   %eax,%eax
+c0105ac8:	74 4d                	je     c0105b17 <page_remove_pte+0x5f>
+    //(1) check if this page table entry is present
+	struct Page *page = pte2page(*ptep);
+c0105aca:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105acd:	8b 00                	mov    (%eax),%eax
+c0105acf:	89 04 24             	mov    %eax,(%esp)
+c0105ad2:	e8 8e f4 ff ff       	call   c0104f65 <pte2page>
+c0105ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    //(2) find corresponding page to pte
+    //(3) decrease page reference
+	if(page_ref_dec(page) == 0) {
+c0105ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105add:	89 04 24             	mov    %eax,(%esp)
+c0105ae0:	e8 04 f5 ff ff       	call   c0104fe9 <page_ref_dec>
+c0105ae5:	85 c0                	test   %eax,%eax
+c0105ae7:	75 13                	jne    c0105afc <page_remove_pte+0x44>
+	 free_page(page);
+c0105ae9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105af0:	00 
+c0105af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105af4:	89 04 24             	mov    %eax,(%esp)
+c0105af7:	e8 2f f7 ff ff       	call   c010522b <free_pages>
+	}
+    //(4) and free this page when page reference reachs 0
+	*ptep = 0;
+c0105afc:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105aff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+    //(5) clear second page table entry
+	tlb_invalidate(pgdir, la);
+c0105b05:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b08:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105b0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105b0f:	89 04 24             	mov    %eax,(%esp)
+c0105b12:	e8 1a 05 00 00       	call   c0106031 <tlb_invalidate>
+    //(6) flush tlb
+    }
+}
+c0105b17:	c9                   	leave  
+c0105b18:	c3                   	ret    
+
+c0105b19 <unmap_range>:
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105b19:	55                   	push   %ebp
+c0105b1a:	89 e5                	mov    %esp,%ebp
+c0105b1c:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b22:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b27:	85 c0                	test   %eax,%eax
+c0105b29:	75 0c                	jne    c0105b37 <unmap_range+0x1e>
+c0105b2b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105b2e:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105b33:	85 c0                	test   %eax,%eax
+c0105b35:	74 24                	je     c0105b5b <unmap_range+0x42>
+c0105b37:	c7 44 24 0c 4c d2 10 	movl   $0xc010d24c,0xc(%esp)
+c0105b3e:	c0 
+c0105b3f:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105b46:	c0 
+c0105b47:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
+c0105b4e:	00 
+c0105b4f:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105b56:	e8 66 b2 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105b5b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105b62:	76 11                	jbe    c0105b75 <unmap_range+0x5c>
+c0105b64:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b67:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105b6a:	73 09                	jae    c0105b75 <unmap_range+0x5c>
+c0105b6c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105b73:	76 24                	jbe    c0105b99 <unmap_range+0x80>
+c0105b75:	c7 44 24 0c 75 d2 10 	movl   $0xc010d275,0xc(%esp)
+c0105b7c:	c0 
+c0105b7d:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105b84:	c0 
+c0105b85:	c7 44 24 04 c9 01 00 	movl   $0x1c9,0x4(%esp)
+c0105b8c:	00 
+c0105b8d:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105b94:	e8 28 b2 ff ff       	call   c0100dc1 <__panic>
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c0105b99:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105ba0:	00 
+c0105ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ba4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ba8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bab:	89 04 24             	mov    %eax,(%esp)
+c0105bae:	e8 74 fd ff ff       	call   c0105927 <get_pte>
+c0105bb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105bb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105bba:	75 18                	jne    c0105bd4 <unmap_range+0xbb>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bbf:	05 00 00 40 00       	add    $0x400000,%eax
+c0105bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105bc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105bca:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105bcf:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue ;
+c0105bd2:	eb 29                	jmp    c0105bfd <unmap_range+0xe4>
+        }
+        if (*ptep != 0) {
+c0105bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bd7:	8b 00                	mov    (%eax),%eax
+c0105bd9:	85 c0                	test   %eax,%eax
+c0105bdb:	74 19                	je     c0105bf6 <unmap_range+0xdd>
+            page_remove_pte(pgdir, start, ptep);
+c0105bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105be0:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105be4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105be7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105beb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bee:	89 04 24             	mov    %eax,(%esp)
+c0105bf1:	e8 c2 fe ff ff       	call   c0105ab8 <page_remove_pte>
+        }
+        start += PGSIZE;
+c0105bf6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105bfd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105c01:	74 08                	je     c0105c0b <unmap_range+0xf2>
+c0105c03:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c06:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105c09:	72 8e                	jb     c0105b99 <unmap_range+0x80>
+}
+c0105c0b:	c9                   	leave  
+c0105c0c:	c3                   	ret    
+
+c0105c0d <exit_range>:
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0105c0d:	55                   	push   %ebp
+c0105c0e:	89 e5                	mov    %esp,%ebp
+c0105c10:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105c13:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c16:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c1b:	85 c0                	test   %eax,%eax
+c0105c1d:	75 0c                	jne    c0105c2b <exit_range+0x1e>
+c0105c1f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105c22:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105c27:	85 c0                	test   %eax,%eax
+c0105c29:	74 24                	je     c0105c4f <exit_range+0x42>
+c0105c2b:	c7 44 24 0c 4c d2 10 	movl   $0xc010d24c,0xc(%esp)
+c0105c32:	c0 
+c0105c33:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105c3a:	c0 
+c0105c3b:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
+c0105c42:	00 
+c0105c43:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105c4a:	e8 72 b1 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105c4f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0105c56:	76 11                	jbe    c0105c69 <exit_range+0x5c>
+c0105c58:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c5b:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105c5e:	73 09                	jae    c0105c69 <exit_range+0x5c>
+c0105c60:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0105c67:	76 24                	jbe    c0105c8d <exit_range+0x80>
+c0105c69:	c7 44 24 0c 75 d2 10 	movl   $0xc010d275,0xc(%esp)
+c0105c70:	c0 
+c0105c71:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105c78:	c0 
+c0105c79:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
+c0105c80:	00 
+c0105c81:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105c88:	e8 34 b1 ff ff       	call   c0100dc1 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c0105c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c96:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105c9b:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do {
+        int pde_idx = PDX(start);
+c0105c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105ca1:	c1 e8 16             	shr    $0x16,%eax
+c0105ca4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P) {
+c0105ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105caa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105cb4:	01 d0                	add    %edx,%eax
+c0105cb6:	8b 00                	mov    (%eax),%eax
+c0105cb8:	83 e0 01             	and    $0x1,%eax
+c0105cbb:	85 c0                	test   %eax,%eax
+c0105cbd:	74 3e                	je     c0105cfd <exit_range+0xf0>
+            free_page(pde2page(pgdir[pde_idx]));
+c0105cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105cc2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105cc9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ccc:	01 d0                	add    %edx,%eax
+c0105cce:	8b 00                	mov    (%eax),%eax
+c0105cd0:	89 04 24             	mov    %eax,(%esp)
+c0105cd3:	e8 cb f2 ff ff       	call   c0104fa3 <pde2page>
+c0105cd8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0105cdf:	00 
+c0105ce0:	89 04 24             	mov    %eax,(%esp)
+c0105ce3:	e8 43 f5 ff ff       	call   c010522b <free_pages>
+            pgdir[pde_idx] = 0;
+c0105ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ceb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105cf2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105cf5:	01 d0                	add    %edx,%eax
+c0105cf7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c0105cfd:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0105d04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105d08:	74 08                	je     c0105d12 <exit_range+0x105>
+c0105d0a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d0d:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0105d10:	72 8c                	jb     c0105c9e <exit_range+0x91>
+}
+c0105d12:	c9                   	leave  
+c0105d13:	c3                   	ret    
+
+c0105d14 <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+c0105d14:	55                   	push   %ebp
+c0105d15:	89 e5                	mov    %esp,%ebp
+c0105d17:	83 ec 48             	sub    $0x48,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0105d1a:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d1d:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105d22:	85 c0                	test   %eax,%eax
+c0105d24:	75 0c                	jne    c0105d32 <copy_range+0x1e>
+c0105d26:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105d29:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0105d2e:	85 c0                	test   %eax,%eax
+c0105d30:	74 24                	je     c0105d56 <copy_range+0x42>
+c0105d32:	c7 44 24 0c 4c d2 10 	movl   $0xc010d24c,0xc(%esp)
+c0105d39:	c0 
+c0105d3a:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105d41:	c0 
+c0105d42:	c7 44 24 04 f0 01 00 	movl   $0x1f0,0x4(%esp)
+c0105d49:	00 
+c0105d4a:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105d51:	e8 6b b0 ff ff       	call   c0100dc1 <__panic>
+    assert(USER_ACCESS(start, end));
+c0105d56:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c0105d5d:	76 11                	jbe    c0105d70 <copy_range+0x5c>
+c0105d5f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d62:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105d65:	73 09                	jae    c0105d70 <copy_range+0x5c>
+c0105d67:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c0105d6e:	76 24                	jbe    c0105d94 <copy_range+0x80>
+c0105d70:	c7 44 24 0c 75 d2 10 	movl   $0xc010d275,0xc(%esp)
+c0105d77:	c0 
+c0105d78:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105d7f:	c0 
+c0105d80:	c7 44 24 04 f1 01 00 	movl   $0x1f1,0x4(%esp)
+c0105d87:	00 
+c0105d88:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105d8f:	e8 2d b0 ff ff       	call   c0100dc1 <__panic>
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c0105d94:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105d9b:	00 
+c0105d9c:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105d9f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105da3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105da6:	89 04 24             	mov    %eax,(%esp)
+c0105da9:	e8 79 fb ff ff       	call   c0105927 <get_pte>
+c0105dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0105db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105db5:	75 1b                	jne    c0105dd2 <copy_range+0xbe>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0105db7:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105dba:	05 00 00 40 00       	add    $0x400000,%eax
+c0105dbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105dc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105dc5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0105dca:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue ;
+c0105dcd:	e9 49 01 00 00       	jmp    c0105f1b <copy_range+0x207>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+c0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105dd5:	8b 00                	mov    (%eax),%eax
+c0105dd7:	83 e0 01             	and    $0x1,%eax
+c0105dda:	85 c0                	test   %eax,%eax
+c0105ddc:	0f 84 32 01 00 00    	je     c0105f14 <copy_range+0x200>
+            if ((nptep = get_pte(to, start, 1)) == NULL) {
+c0105de2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105de9:	00 
+c0105dea:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ded:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105df1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105df4:	89 04 24             	mov    %eax,(%esp)
+c0105df7:	e8 2b fb ff ff       	call   c0105927 <get_pte>
+c0105dfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105dff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0105e03:	75 0a                	jne    c0105e0f <copy_range+0xfb>
+                return -E_NO_MEM;
+c0105e05:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105e0a:	e9 23 01 00 00       	jmp    c0105f32 <copy_range+0x21e>
+            }
+        uint32_t perm = (*ptep & PTE_USER);
+c0105e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e12:	8b 00                	mov    (%eax),%eax
+c0105e14:	83 e0 07             	and    $0x7,%eax
+c0105e17:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        //get page from ptep
+        struct Page *page = pte2page(*ptep);
+c0105e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e1d:	8b 00                	mov    (%eax),%eax
+c0105e1f:	89 04 24             	mov    %eax,(%esp)
+c0105e22:	e8 3e f1 ff ff       	call   c0104f65 <pte2page>
+c0105e27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        // alloc a page for process B
+        struct Page *npage=alloc_page();
+c0105e2a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0105e31:	e8 8a f3 ff ff       	call   c01051c0 <alloc_pages>
+c0105e36:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(page!=NULL);
+c0105e39:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105e3d:	75 24                	jne    c0105e63 <copy_range+0x14f>
+c0105e3f:	c7 44 24 0c 8d d2 10 	movl   $0xc010d28d,0xc(%esp)
+c0105e46:	c0 
+c0105e47:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105e4e:	c0 
+c0105e4f:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
+c0105e56:	00 
+c0105e57:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105e5e:	e8 5e af ff ff       	call   c0100dc1 <__panic>
+        assert(npage!=NULL);
+c0105e63:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0105e67:	75 24                	jne    c0105e8d <copy_range+0x179>
+c0105e69:	c7 44 24 0c 98 d2 10 	movl   $0xc010d298,0xc(%esp)
+c0105e70:	c0 
+c0105e71:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105e78:	c0 
+c0105e79:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
+c0105e80:	00 
+c0105e81:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105e88:	e8 34 af ff ff       	call   c0100dc1 <__panic>
+        int ret=0;
+c0105e8d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+	char *src_kvaddr = page2kva(page);
+c0105e94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105e97:	89 04 24             	mov    %eax,(%esp)
+c0105e9a:	e8 72 f0 ff ff       	call   c0104f11 <page2kva>
+c0105e9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+	char *dst_kvaddr = page2kva(npage);
+c0105ea2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105ea5:	89 04 24             	mov    %eax,(%esp)
+c0105ea8:	e8 64 f0 ff ff       	call   c0104f11 <page2kva>
+c0105ead:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+c0105eb0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0105eb7:	00 
+c0105eb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105ebb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ebf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105ec2:	89 04 24             	mov    %eax,(%esp)
+c0105ec5:	e8 af 63 00 00       	call   c010c279 <memcpy>
+	page_insert(to, npage, start, perm);
+c0105eca:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105ecd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0105ed1:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ed4:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105ed8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105edb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105edf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ee2:	89 04 24             	mov    %eax,(%esp)
+c0105ee5:	e8 8e 00 00 00       	call   c0105f78 <page_insert>
+        assert(ret == 0);
+c0105eea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105eee:	74 24                	je     c0105f14 <copy_range+0x200>
+c0105ef0:	c7 44 24 0c a4 d2 10 	movl   $0xc010d2a4,0xc(%esp)
+c0105ef7:	c0 
+c0105ef8:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0105eff:	c0 
+c0105f00:	c7 44 24 04 19 02 00 	movl   $0x219,0x4(%esp)
+c0105f07:	00 
+c0105f08:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0105f0f:	e8 ad ae ff ff       	call   c0100dc1 <__panic>
+        }
+        start += PGSIZE;
+c0105f14:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c0105f1b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105f1f:	74 0c                	je     c0105f2d <copy_range+0x219>
+c0105f21:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f24:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0105f27:	0f 82 67 fe ff ff    	jb     c0105d94 <copy_range+0x80>
+    return 0;
+c0105f2d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105f32:	c9                   	leave  
+c0105f33:	c3                   	ret    
+
+c0105f34 <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c0105f34:	55                   	push   %ebp
+c0105f35:	89 e5                	mov    %esp,%ebp
+c0105f37:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0105f3a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105f41:	00 
+c0105f42:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f45:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f49:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f4c:	89 04 24             	mov    %eax,(%esp)
+c0105f4f:	e8 d3 f9 ff ff       	call   c0105927 <get_pte>
+c0105f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c0105f57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105f5b:	74 19                	je     c0105f76 <page_remove+0x42>
+        page_remove_pte(pgdir, la, ptep);
+c0105f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f60:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105f64:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f67:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f6e:	89 04 24             	mov    %eax,(%esp)
+c0105f71:	e8 42 fb ff ff       	call   c0105ab8 <page_remove_pte>
+    }
+}
+c0105f76:	c9                   	leave  
+c0105f77:	c3                   	ret    
+
+c0105f78 <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c0105f78:	55                   	push   %ebp
+c0105f79:	89 e5                	mov    %esp,%ebp
+c0105f7b:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0105f7e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0105f85:	00 
+c0105f86:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f89:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105f8d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f90:	89 04 24             	mov    %eax,(%esp)
+c0105f93:	e8 8f f9 ff ff       	call   c0105927 <get_pte>
+c0105f98:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0105f9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105f9f:	75 0a                	jne    c0105fab <page_insert+0x33>
+        return -E_NO_MEM;
+c0105fa1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105fa6:	e9 84 00 00 00       	jmp    c010602f <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0105fab:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fae:	89 04 24             	mov    %eax,(%esp)
+c0105fb1:	e8 1c f0 ff ff       	call   c0104fd2 <page_ref_inc>
+    if (*ptep & PTE_P) {
+c0105fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fb9:	8b 00                	mov    (%eax),%eax
+c0105fbb:	83 e0 01             	and    $0x1,%eax
+c0105fbe:	85 c0                	test   %eax,%eax
+c0105fc0:	74 3e                	je     c0106000 <page_insert+0x88>
+        struct Page *p = pte2page(*ptep);
+c0105fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fc5:	8b 00                	mov    (%eax),%eax
+c0105fc7:	89 04 24             	mov    %eax,(%esp)
+c0105fca:	e8 96 ef ff ff       	call   c0104f65 <pte2page>
+c0105fcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0105fd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105fd5:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105fd8:	75 0d                	jne    c0105fe7 <page_insert+0x6f>
+            page_ref_dec(page);
+c0105fda:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105fdd:	89 04 24             	mov    %eax,(%esp)
+c0105fe0:	e8 04 f0 ff ff       	call   c0104fe9 <page_ref_dec>
+c0105fe5:	eb 19                	jmp    c0106000 <page_insert+0x88>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c0105fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fea:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105fee:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105ff1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105ff5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ff8:	89 04 24             	mov    %eax,(%esp)
+c0105ffb:	e8 b8 fa ff ff       	call   c0105ab8 <page_remove_pte>
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0106000:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106003:	89 04 24             	mov    %eax,(%esp)
+c0106006:	e8 ab ee ff ff       	call   c0104eb6 <page2pa>
+c010600b:	0b 45 14             	or     0x14(%ebp),%eax
+c010600e:	83 c8 01             	or     $0x1,%eax
+c0106011:	89 c2                	mov    %eax,%edx
+c0106013:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106016:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c0106018:	8b 45 10             	mov    0x10(%ebp),%eax
+c010601b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010601f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106022:	89 04 24             	mov    %eax,(%esp)
+c0106025:	e8 07 00 00 00       	call   c0106031 <tlb_invalidate>
+    return 0;
+c010602a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010602f:	c9                   	leave  
+c0106030:	c3                   	ret    
+
+c0106031 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c0106031:	55                   	push   %ebp
+c0106032:	89 e5                	mov    %esp,%ebp
+c0106034:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c0106037:	0f 20 d8             	mov    %cr3,%eax
+c010603a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr3;
+c010603d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    if (rcr3() == PADDR(pgdir)) {
+c0106040:	89 c2                	mov    %eax,%edx
+c0106042:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106045:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106048:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010604f:	77 23                	ja     c0106074 <tlb_invalidate+0x43>
+c0106051:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106054:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106058:	c7 44 24 08 c8 d1 10 	movl   $0xc010d1c8,0x8(%esp)
+c010605f:	c0 
+c0106060:	c7 44 24 04 4a 02 00 	movl   $0x24a,0x4(%esp)
+c0106067:	00 
+c0106068:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010606f:	e8 4d ad ff ff       	call   c0100dc1 <__panic>
+c0106074:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106077:	05 00 00 00 40       	add    $0x40000000,%eax
+c010607c:	39 c2                	cmp    %eax,%edx
+c010607e:	75 0c                	jne    c010608c <tlb_invalidate+0x5b>
+        invlpg((void *)la);
+c0106080:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106083:	89 45 ec             	mov    %eax,-0x14(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c0106086:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106089:	0f 01 38             	invlpg (%eax)
+    }
+}
+c010608c:	c9                   	leave  
+c010608d:	c3                   	ret    
+
+c010608e <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c010608e:	55                   	push   %ebp
+c010608f:	89 e5                	mov    %esp,%ebp
+c0106091:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_page();
+c0106094:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010609b:	e8 20 f1 ff ff       	call   c01051c0 <alloc_pages>
+c01060a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c01060a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01060a7:	0f 84 b0 00 00 00    	je     c010615d <pgdir_alloc_page+0xcf>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c01060ad:	8b 45 10             	mov    0x10(%ebp),%eax
+c01060b0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01060b4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01060b7:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01060bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060be:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01060c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01060c5:	89 04 24             	mov    %eax,(%esp)
+c01060c8:	e8 ab fe ff ff       	call   c0105f78 <page_insert>
+c01060cd:	85 c0                	test   %eax,%eax
+c01060cf:	74 1a                	je     c01060eb <pgdir_alloc_page+0x5d>
+            free_page(page);
+c01060d1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01060d8:	00 
+c01060d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060dc:	89 04 24             	mov    %eax,(%esp)
+c01060df:	e8 47 f1 ff ff       	call   c010522b <free_pages>
+            return NULL;
+c01060e4:	b8 00 00 00 00       	mov    $0x0,%eax
+c01060e9:	eb 75                	jmp    c0106160 <pgdir_alloc_page+0xd2>
+        }
+        if (swap_init_ok){
+c01060eb:	a1 0c ee 1a c0       	mov    0xc01aee0c,%eax
+c01060f0:	85 c0                	test   %eax,%eax
+c01060f2:	74 69                	je     c010615d <pgdir_alloc_page+0xcf>
+            if(check_mm_struct!=NULL) {
+c01060f4:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c01060f9:	85 c0                	test   %eax,%eax
+c01060fb:	74 60                	je     c010615d <pgdir_alloc_page+0xcf>
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c01060fd:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c0106102:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106109:	00 
+c010610a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010610d:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106111:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106114:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106118:	89 04 24             	mov    %eax,(%esp)
+c010611b:	e8 56 0e 00 00       	call   c0106f76 <swap_map_swappable>
+                page->pra_vaddr=la;
+c0106120:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106123:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106126:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c0106129:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010612c:	89 04 24             	mov    %eax,(%esp)
+c010612f:	e8 87 ee ff ff       	call   c0104fbb <page_ref>
+c0106134:	83 f8 01             	cmp    $0x1,%eax
+c0106137:	74 24                	je     c010615d <pgdir_alloc_page+0xcf>
+c0106139:	c7 44 24 0c ad d2 10 	movl   $0xc010d2ad,0xc(%esp)
+c0106140:	c0 
+c0106141:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106148:	c0 
+c0106149:	c7 44 24 04 5e 02 00 	movl   $0x25e,0x4(%esp)
+c0106150:	00 
+c0106151:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106158:	e8 64 ac ff ff       	call   c0100dc1 <__panic>
+            }
+        }
+
+    }
+
+    return page;
+c010615d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106160:	c9                   	leave  
+c0106161:	c3                   	ret    
+
+c0106162 <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c0106162:	55                   	push   %ebp
+c0106163:	89 e5                	mov    %esp,%ebp
+c0106165:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->check();
+c0106168:	a1 88 0e 1b c0       	mov    0xc01b0e88,%eax
+c010616d:	8b 40 18             	mov    0x18(%eax),%eax
+c0106170:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c0106172:	c7 04 24 c4 d2 10 c0 	movl   $0xc010d2c4,(%esp)
+c0106179:	e8 da a1 ff ff       	call   c0100358 <cprintf>
+}
+c010617e:	c9                   	leave  
+c010617f:	c3                   	ret    
+
+c0106180 <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c0106180:	55                   	push   %ebp
+c0106181:	89 e5                	mov    %esp,%ebp
+c0106183:	83 ec 38             	sub    $0x38,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c0106186:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c010618b:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c0106190:	76 24                	jbe    c01061b6 <check_pgdir+0x36>
+c0106192:	c7 44 24 0c e3 d2 10 	movl   $0xc010d2e3,0xc(%esp)
+c0106199:	c0 
+c010619a:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01061a1:	c0 
+c01061a2:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c01061a9:	00 
+c01061aa:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01061b1:	e8 0b ac ff ff       	call   c0100dc1 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c01061b6:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01061bb:	85 c0                	test   %eax,%eax
+c01061bd:	74 0e                	je     c01061cd <check_pgdir+0x4d>
+c01061bf:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01061c4:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01061c9:	85 c0                	test   %eax,%eax
+c01061cb:	74 24                	je     c01061f1 <check_pgdir+0x71>
+c01061cd:	c7 44 24 0c 00 d3 10 	movl   $0xc010d300,0xc(%esp)
+c01061d4:	c0 
+c01061d5:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01061dc:	c0 
+c01061dd:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
+c01061e4:	00 
+c01061e5:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01061ec:	e8 d0 ab ff ff       	call   c0100dc1 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c01061f1:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01061f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01061fd:	00 
+c01061fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0106205:	00 
+c0106206:	89 04 24             	mov    %eax,(%esp)
+c0106209:	e8 51 f8 ff ff       	call   c0105a5f <get_page>
+c010620e:	85 c0                	test   %eax,%eax
+c0106210:	74 24                	je     c0106236 <check_pgdir+0xb6>
+c0106212:	c7 44 24 0c 38 d3 10 	movl   $0xc010d338,0xc(%esp)
+c0106219:	c0 
+c010621a:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106221:	c0 
+c0106222:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
+c0106229:	00 
+c010622a:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106231:	e8 8b ab ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c0106236:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010623d:	e8 7e ef ff ff       	call   c01051c0 <alloc_pages>
+c0106242:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c0106245:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010624a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106251:	00 
+c0106252:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106259:	00 
+c010625a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010625d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106261:	89 04 24             	mov    %eax,(%esp)
+c0106264:	e8 0f fd ff ff       	call   c0105f78 <page_insert>
+c0106269:	85 c0                	test   %eax,%eax
+c010626b:	74 24                	je     c0106291 <check_pgdir+0x111>
+c010626d:	c7 44 24 0c 60 d3 10 	movl   $0xc010d360,0xc(%esp)
+c0106274:	c0 
+c0106275:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010627c:	c0 
+c010627d:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
+c0106284:	00 
+c0106285:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010628c:	e8 30 ab ff ff       	call   c0100dc1 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c0106291:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106296:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010629d:	00 
+c010629e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01062a5:	00 
+c01062a6:	89 04 24             	mov    %eax,(%esp)
+c01062a9:	e8 79 f6 ff ff       	call   c0105927 <get_pte>
+c01062ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01062b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01062b5:	75 24                	jne    c01062db <check_pgdir+0x15b>
+c01062b7:	c7 44 24 0c 8c d3 10 	movl   $0xc010d38c,0xc(%esp)
+c01062be:	c0 
+c01062bf:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01062c6:	c0 
+c01062c7:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
+c01062ce:	00 
+c01062cf:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01062d6:	e8 e6 aa ff ff       	call   c0100dc1 <__panic>
+    assert(pa2page(*ptep) == p1);
+c01062db:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01062de:	8b 00                	mov    (%eax),%eax
+c01062e0:	89 04 24             	mov    %eax,(%esp)
+c01062e3:	e8 e4 eb ff ff       	call   c0104ecc <pa2page>
+c01062e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01062eb:	74 24                	je     c0106311 <check_pgdir+0x191>
+c01062ed:	c7 44 24 0c b9 d3 10 	movl   $0xc010d3b9,0xc(%esp)
+c01062f4:	c0 
+c01062f5:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01062fc:	c0 
+c01062fd:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
+c0106304:	00 
+c0106305:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010630c:	e8 b0 aa ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p1) == 1);
+c0106311:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106314:	89 04 24             	mov    %eax,(%esp)
+c0106317:	e8 9f ec ff ff       	call   c0104fbb <page_ref>
+c010631c:	83 f8 01             	cmp    $0x1,%eax
+c010631f:	74 24                	je     c0106345 <check_pgdir+0x1c5>
+c0106321:	c7 44 24 0c ce d3 10 	movl   $0xc010d3ce,0xc(%esp)
+c0106328:	c0 
+c0106329:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106330:	c0 
+c0106331:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
+c0106338:	00 
+c0106339:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106340:	e8 7c aa ff ff       	call   c0100dc1 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c0106345:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010634a:	8b 00                	mov    (%eax),%eax
+c010634c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106351:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106354:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106357:	c1 e8 0c             	shr    $0xc,%eax
+c010635a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010635d:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0106362:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0106365:	72 23                	jb     c010638a <check_pgdir+0x20a>
+c0106367:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010636a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010636e:	c7 44 24 08 24 d1 10 	movl   $0xc010d124,0x8(%esp)
+c0106375:	c0 
+c0106376:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
+c010637d:	00 
+c010637e:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106385:	e8 37 aa ff ff       	call   c0100dc1 <__panic>
+c010638a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010638d:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106392:	83 c0 04             	add    $0x4,%eax
+c0106395:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c0106398:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010639d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01063a4:	00 
+c01063a5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c01063ac:	00 
+c01063ad:	89 04 24             	mov    %eax,(%esp)
+c01063b0:	e8 72 f5 ff ff       	call   c0105927 <get_pte>
+c01063b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01063b8:	74 24                	je     c01063de <check_pgdir+0x25e>
+c01063ba:	c7 44 24 0c e0 d3 10 	movl   $0xc010d3e0,0xc(%esp)
+c01063c1:	c0 
+c01063c2:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01063c9:	c0 
+c01063ca:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
+c01063d1:	00 
+c01063d2:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01063d9:	e8 e3 a9 ff ff       	call   c0100dc1 <__panic>
+
+    p2 = alloc_page();
+c01063de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01063e5:	e8 d6 ed ff ff       	call   c01051c0 <alloc_pages>
+c01063ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c01063ed:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01063f2:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
+c01063f9:	00 
+c01063fa:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0106401:	00 
+c0106402:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106405:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106409:	89 04 24             	mov    %eax,(%esp)
+c010640c:	e8 67 fb ff ff       	call   c0105f78 <page_insert>
+c0106411:	85 c0                	test   %eax,%eax
+c0106413:	74 24                	je     c0106439 <check_pgdir+0x2b9>
+c0106415:	c7 44 24 0c 08 d4 10 	movl   $0xc010d408,0xc(%esp)
+c010641c:	c0 
+c010641d:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106424:	c0 
+c0106425:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
+c010642c:	00 
+c010642d:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106434:	e8 88 a9 ff ff       	call   c0100dc1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0106439:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010643e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106445:	00 
+c0106446:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c010644d:	00 
+c010644e:	89 04 24             	mov    %eax,(%esp)
+c0106451:	e8 d1 f4 ff ff       	call   c0105927 <get_pte>
+c0106456:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106459:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010645d:	75 24                	jne    c0106483 <check_pgdir+0x303>
+c010645f:	c7 44 24 0c 40 d4 10 	movl   $0xc010d440,0xc(%esp)
+c0106466:	c0 
+c0106467:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010646e:	c0 
+c010646f:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
+c0106476:	00 
+c0106477:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010647e:	e8 3e a9 ff ff       	call   c0100dc1 <__panic>
+    assert(*ptep & PTE_U);
+c0106483:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106486:	8b 00                	mov    (%eax),%eax
+c0106488:	83 e0 04             	and    $0x4,%eax
+c010648b:	85 c0                	test   %eax,%eax
+c010648d:	75 24                	jne    c01064b3 <check_pgdir+0x333>
+c010648f:	c7 44 24 0c 70 d4 10 	movl   $0xc010d470,0xc(%esp)
+c0106496:	c0 
+c0106497:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010649e:	c0 
+c010649f:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
+c01064a6:	00 
+c01064a7:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01064ae:	e8 0e a9 ff ff       	call   c0100dc1 <__panic>
+    assert(*ptep & PTE_W);
+c01064b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01064b6:	8b 00                	mov    (%eax),%eax
+c01064b8:	83 e0 02             	and    $0x2,%eax
+c01064bb:	85 c0                	test   %eax,%eax
+c01064bd:	75 24                	jne    c01064e3 <check_pgdir+0x363>
+c01064bf:	c7 44 24 0c 7e d4 10 	movl   $0xc010d47e,0xc(%esp)
+c01064c6:	c0 
+c01064c7:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01064ce:	c0 
+c01064cf:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
+c01064d6:	00 
+c01064d7:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01064de:	e8 de a8 ff ff       	call   c0100dc1 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c01064e3:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01064e8:	8b 00                	mov    (%eax),%eax
+c01064ea:	83 e0 04             	and    $0x4,%eax
+c01064ed:	85 c0                	test   %eax,%eax
+c01064ef:	75 24                	jne    c0106515 <check_pgdir+0x395>
+c01064f1:	c7 44 24 0c 8c d4 10 	movl   $0xc010d48c,0xc(%esp)
+c01064f8:	c0 
+c01064f9:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106500:	c0 
+c0106501:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
+c0106508:	00 
+c0106509:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106510:	e8 ac a8 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 1);
+c0106515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106518:	89 04 24             	mov    %eax,(%esp)
+c010651b:	e8 9b ea ff ff       	call   c0104fbb <page_ref>
+c0106520:	83 f8 01             	cmp    $0x1,%eax
+c0106523:	74 24                	je     c0106549 <check_pgdir+0x3c9>
+c0106525:	c7 44 24 0c a2 d4 10 	movl   $0xc010d4a2,0xc(%esp)
+c010652c:	c0 
+c010652d:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106534:	c0 
+c0106535:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
+c010653c:	00 
+c010653d:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106544:	e8 78 a8 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c0106549:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010654e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0106555:	00 
+c0106556:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c010655d:	00 
+c010655e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106561:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106565:	89 04 24             	mov    %eax,(%esp)
+c0106568:	e8 0b fa ff ff       	call   c0105f78 <page_insert>
+c010656d:	85 c0                	test   %eax,%eax
+c010656f:	74 24                	je     c0106595 <check_pgdir+0x415>
+c0106571:	c7 44 24 0c b4 d4 10 	movl   $0xc010d4b4,0xc(%esp)
+c0106578:	c0 
+c0106579:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106580:	c0 
+c0106581:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
+c0106588:	00 
+c0106589:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106590:	e8 2c a8 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p1) == 2);
+c0106595:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106598:	89 04 24             	mov    %eax,(%esp)
+c010659b:	e8 1b ea ff ff       	call   c0104fbb <page_ref>
+c01065a0:	83 f8 02             	cmp    $0x2,%eax
+c01065a3:	74 24                	je     c01065c9 <check_pgdir+0x449>
+c01065a5:	c7 44 24 0c e0 d4 10 	movl   $0xc010d4e0,0xc(%esp)
+c01065ac:	c0 
+c01065ad:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01065b4:	c0 
+c01065b5:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
+c01065bc:	00 
+c01065bd:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01065c4:	e8 f8 a7 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c01065c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01065cc:	89 04 24             	mov    %eax,(%esp)
+c01065cf:	e8 e7 e9 ff ff       	call   c0104fbb <page_ref>
+c01065d4:	85 c0                	test   %eax,%eax
+c01065d6:	74 24                	je     c01065fc <check_pgdir+0x47c>
+c01065d8:	c7 44 24 0c f2 d4 10 	movl   $0xc010d4f2,0xc(%esp)
+c01065df:	c0 
+c01065e0:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01065e7:	c0 
+c01065e8:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
+c01065ef:	00 
+c01065f0:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01065f7:	e8 c5 a7 ff ff       	call   c0100dc1 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c01065fc:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106601:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0106608:	00 
+c0106609:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106610:	00 
+c0106611:	89 04 24             	mov    %eax,(%esp)
+c0106614:	e8 0e f3 ff ff       	call   c0105927 <get_pte>
+c0106619:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010661c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106620:	75 24                	jne    c0106646 <check_pgdir+0x4c6>
+c0106622:	c7 44 24 0c 40 d4 10 	movl   $0xc010d440,0xc(%esp)
+c0106629:	c0 
+c010662a:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106631:	c0 
+c0106632:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
+c0106639:	00 
+c010663a:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106641:	e8 7b a7 ff ff       	call   c0100dc1 <__panic>
+    assert(pa2page(*ptep) == p1);
+c0106646:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106649:	8b 00                	mov    (%eax),%eax
+c010664b:	89 04 24             	mov    %eax,(%esp)
+c010664e:	e8 79 e8 ff ff       	call   c0104ecc <pa2page>
+c0106653:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106656:	74 24                	je     c010667c <check_pgdir+0x4fc>
+c0106658:	c7 44 24 0c b9 d3 10 	movl   $0xc010d3b9,0xc(%esp)
+c010665f:	c0 
+c0106660:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106667:	c0 
+c0106668:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
+c010666f:	00 
+c0106670:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106677:	e8 45 a7 ff ff       	call   c0100dc1 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c010667c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010667f:	8b 00                	mov    (%eax),%eax
+c0106681:	83 e0 04             	and    $0x4,%eax
+c0106684:	85 c0                	test   %eax,%eax
+c0106686:	74 24                	je     c01066ac <check_pgdir+0x52c>
+c0106688:	c7 44 24 0c 04 d5 10 	movl   $0xc010d504,0xc(%esp)
+c010668f:	c0 
+c0106690:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106697:	c0 
+c0106698:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
+c010669f:	00 
+c01066a0:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01066a7:	e8 15 a7 ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c01066ac:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01066b1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01066b8:	00 
+c01066b9:	89 04 24             	mov    %eax,(%esp)
+c01066bc:	e8 73 f8 ff ff       	call   c0105f34 <page_remove>
+    assert(page_ref(p1) == 1);
+c01066c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01066c4:	89 04 24             	mov    %eax,(%esp)
+c01066c7:	e8 ef e8 ff ff       	call   c0104fbb <page_ref>
+c01066cc:	83 f8 01             	cmp    $0x1,%eax
+c01066cf:	74 24                	je     c01066f5 <check_pgdir+0x575>
+c01066d1:	c7 44 24 0c ce d3 10 	movl   $0xc010d3ce,0xc(%esp)
+c01066d8:	c0 
+c01066d9:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01066e0:	c0 
+c01066e1:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
+c01066e8:	00 
+c01066e9:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01066f0:	e8 cc a6 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c01066f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01066f8:	89 04 24             	mov    %eax,(%esp)
+c01066fb:	e8 bb e8 ff ff       	call   c0104fbb <page_ref>
+c0106700:	85 c0                	test   %eax,%eax
+c0106702:	74 24                	je     c0106728 <check_pgdir+0x5a8>
+c0106704:	c7 44 24 0c f2 d4 10 	movl   $0xc010d4f2,0xc(%esp)
+c010670b:	c0 
+c010670c:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106713:	c0 
+c0106714:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
+c010671b:	00 
+c010671c:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106723:	e8 99 a6 ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c0106728:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010672d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0106734:	00 
+c0106735:	89 04 24             	mov    %eax,(%esp)
+c0106738:	e8 f7 f7 ff ff       	call   c0105f34 <page_remove>
+    assert(page_ref(p1) == 0);
+c010673d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106740:	89 04 24             	mov    %eax,(%esp)
+c0106743:	e8 73 e8 ff ff       	call   c0104fbb <page_ref>
+c0106748:	85 c0                	test   %eax,%eax
+c010674a:	74 24                	je     c0106770 <check_pgdir+0x5f0>
+c010674c:	c7 44 24 0c 19 d5 10 	movl   $0xc010d519,0xc(%esp)
+c0106753:	c0 
+c0106754:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010675b:	c0 
+c010675c:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
+c0106763:	00 
+c0106764:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010676b:	e8 51 a6 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p2) == 0);
+c0106770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106773:	89 04 24             	mov    %eax,(%esp)
+c0106776:	e8 40 e8 ff ff       	call   c0104fbb <page_ref>
+c010677b:	85 c0                	test   %eax,%eax
+c010677d:	74 24                	je     c01067a3 <check_pgdir+0x623>
+c010677f:	c7 44 24 0c f2 d4 10 	movl   $0xc010d4f2,0xc(%esp)
+c0106786:	c0 
+c0106787:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c010678e:	c0 
+c010678f:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
+c0106796:	00 
+c0106797:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c010679e:	e8 1e a6 ff ff       	call   c0100dc1 <__panic>
+
+    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
+c01067a3:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01067a8:	8b 00                	mov    (%eax),%eax
+c01067aa:	89 04 24             	mov    %eax,(%esp)
+c01067ad:	e8 1a e7 ff ff       	call   c0104ecc <pa2page>
+c01067b2:	89 04 24             	mov    %eax,(%esp)
+c01067b5:	e8 01 e8 ff ff       	call   c0104fbb <page_ref>
+c01067ba:	83 f8 01             	cmp    $0x1,%eax
+c01067bd:	74 24                	je     c01067e3 <check_pgdir+0x663>
+c01067bf:	c7 44 24 0c 2c d5 10 	movl   $0xc010d52c,0xc(%esp)
+c01067c6:	c0 
+c01067c7:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01067ce:	c0 
+c01067cf:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
+c01067d6:	00 
+c01067d7:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01067de:	e8 de a5 ff ff       	call   c0100dc1 <__panic>
+    free_page(pa2page(boot_pgdir[0]));
+c01067e3:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01067e8:	8b 00                	mov    (%eax),%eax
+c01067ea:	89 04 24             	mov    %eax,(%esp)
+c01067ed:	e8 da e6 ff ff       	call   c0104ecc <pa2page>
+c01067f2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01067f9:	00 
+c01067fa:	89 04 24             	mov    %eax,(%esp)
+c01067fd:	e8 29 ea ff ff       	call   c010522b <free_pages>
+    boot_pgdir[0] = 0;
+c0106802:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c010680d:	c7 04 24 52 d5 10 c0 	movl   $0xc010d552,(%esp)
+c0106814:	e8 3f 9b ff ff       	call   c0100358 <cprintf>
+}
+c0106819:	c9                   	leave  
+c010681a:	c3                   	ret    
+
+c010681b <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c010681b:	55                   	push   %ebp
+c010681c:	89 e5                	mov    %esp,%ebp
+c010681e:	83 ec 38             	sub    $0x38,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0106821:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106828:	e9 ca 00 00 00       	jmp    c01068f7 <check_boot_pgdir+0xdc>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c010682d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106830:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106833:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106836:	c1 e8 0c             	shr    $0xc,%eax
+c0106839:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010683c:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0106841:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0106844:	72 23                	jb     c0106869 <check_boot_pgdir+0x4e>
+c0106846:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106849:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010684d:	c7 44 24 08 24 d1 10 	movl   $0xc010d124,0x8(%esp)
+c0106854:	c0 
+c0106855:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
+c010685c:	00 
+c010685d:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106864:	e8 58 a5 ff ff       	call   c0100dc1 <__panic>
+c0106869:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010686c:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106871:	89 c2                	mov    %eax,%edx
+c0106873:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106878:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010687f:	00 
+c0106880:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106884:	89 04 24             	mov    %eax,(%esp)
+c0106887:	e8 9b f0 ff ff       	call   c0105927 <get_pte>
+c010688c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010688f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0106893:	75 24                	jne    c01068b9 <check_boot_pgdir+0x9e>
+c0106895:	c7 44 24 0c 6c d5 10 	movl   $0xc010d56c,0xc(%esp)
+c010689c:	c0 
+c010689d:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01068a4:	c0 
+c01068a5:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
+c01068ac:	00 
+c01068ad:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01068b4:	e8 08 a5 ff ff       	call   c0100dc1 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c01068b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01068bc:	8b 00                	mov    (%eax),%eax
+c01068be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01068c3:	89 c2                	mov    %eax,%edx
+c01068c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01068c8:	39 c2                	cmp    %eax,%edx
+c01068ca:	74 24                	je     c01068f0 <check_boot_pgdir+0xd5>
+c01068cc:	c7 44 24 0c a9 d5 10 	movl   $0xc010d5a9,0xc(%esp)
+c01068d3:	c0 
+c01068d4:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01068db:	c0 
+c01068dc:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
+c01068e3:	00 
+c01068e4:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01068eb:	e8 d1 a4 ff ff       	call   c0100dc1 <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c01068f0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c01068f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01068fa:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c01068ff:	39 c2                	cmp    %eax,%edx
+c0106901:	0f 82 26 ff ff ff    	jb     c010682d <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c0106907:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010690c:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0106911:	8b 00                	mov    (%eax),%eax
+c0106913:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106918:	89 c2                	mov    %eax,%edx
+c010691a:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c010691f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106922:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c0106929:	77 23                	ja     c010694e <check_boot_pgdir+0x133>
+c010692b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010692e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106932:	c7 44 24 08 c8 d1 10 	movl   $0xc010d1c8,0x8(%esp)
+c0106939:	c0 
+c010693a:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c0106941:	00 
+c0106942:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106949:	e8 73 a4 ff ff       	call   c0100dc1 <__panic>
+c010694e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106951:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106956:	39 c2                	cmp    %eax,%edx
+c0106958:	74 24                	je     c010697e <check_boot_pgdir+0x163>
+c010695a:	c7 44 24 0c c0 d5 10 	movl   $0xc010d5c0,0xc(%esp)
+c0106961:	c0 
+c0106962:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106969:	c0 
+c010696a:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c0106971:	00 
+c0106972:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106979:	e8 43 a4 ff ff       	call   c0100dc1 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c010697e:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106983:	8b 00                	mov    (%eax),%eax
+c0106985:	85 c0                	test   %eax,%eax
+c0106987:	74 24                	je     c01069ad <check_boot_pgdir+0x192>
+c0106989:	c7 44 24 0c f4 d5 10 	movl   $0xc010d5f4,0xc(%esp)
+c0106990:	c0 
+c0106991:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106998:	c0 
+c0106999:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
+c01069a0:	00 
+c01069a1:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c01069a8:	e8 14 a4 ff ff       	call   c0100dc1 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c01069ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01069b4:	e8 07 e8 ff ff       	call   c01051c0 <alloc_pages>
+c01069b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c01069bc:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c01069c1:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c01069c8:	00 
+c01069c9:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
+c01069d0:	00 
+c01069d1:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01069d4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01069d8:	89 04 24             	mov    %eax,(%esp)
+c01069db:	e8 98 f5 ff ff       	call   c0105f78 <page_insert>
+c01069e0:	85 c0                	test   %eax,%eax
+c01069e2:	74 24                	je     c0106a08 <check_boot_pgdir+0x1ed>
+c01069e4:	c7 44 24 0c 08 d6 10 	movl   $0xc010d608,0xc(%esp)
+c01069eb:	c0 
+c01069ec:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c01069f3:	c0 
+c01069f4:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
+c01069fb:	00 
+c01069fc:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106a03:	e8 b9 a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p) == 1);
+c0106a08:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a0b:	89 04 24             	mov    %eax,(%esp)
+c0106a0e:	e8 a8 e5 ff ff       	call   c0104fbb <page_ref>
+c0106a13:	83 f8 01             	cmp    $0x1,%eax
+c0106a16:	74 24                	je     c0106a3c <check_boot_pgdir+0x221>
+c0106a18:	c7 44 24 0c 36 d6 10 	movl   $0xc010d636,0xc(%esp)
+c0106a1f:	c0 
+c0106a20:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106a27:	c0 
+c0106a28:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
+c0106a2f:	00 
+c0106a30:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106a37:	e8 85 a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c0106a3c:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106a41:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c0106a48:	00 
+c0106a49:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
+c0106a50:	00 
+c0106a51:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106a54:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106a58:	89 04 24             	mov    %eax,(%esp)
+c0106a5b:	e8 18 f5 ff ff       	call   c0105f78 <page_insert>
+c0106a60:	85 c0                	test   %eax,%eax
+c0106a62:	74 24                	je     c0106a88 <check_boot_pgdir+0x26d>
+c0106a64:	c7 44 24 0c 48 d6 10 	movl   $0xc010d648,0xc(%esp)
+c0106a6b:	c0 
+c0106a6c:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106a73:	c0 
+c0106a74:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
+c0106a7b:	00 
+c0106a7c:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106a83:	e8 39 a3 ff ff       	call   c0100dc1 <__panic>
+    assert(page_ref(p) == 2);
+c0106a88:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106a8b:	89 04 24             	mov    %eax,(%esp)
+c0106a8e:	e8 28 e5 ff ff       	call   c0104fbb <page_ref>
+c0106a93:	83 f8 02             	cmp    $0x2,%eax
+c0106a96:	74 24                	je     c0106abc <check_boot_pgdir+0x2a1>
+c0106a98:	c7 44 24 0c 7f d6 10 	movl   $0xc010d67f,0xc(%esp)
+c0106a9f:	c0 
+c0106aa0:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106aa7:	c0 
+c0106aa8:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
+c0106aaf:	00 
+c0106ab0:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106ab7:	e8 05 a3 ff ff       	call   c0100dc1 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c0106abc:	c7 45 dc 90 d6 10 c0 	movl   $0xc010d690,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c0106ac3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106ac6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106aca:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106ad1:	e8 ea 53 00 00       	call   c010bec0 <strcpy>
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c0106ad6:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
+c0106add:	00 
+c0106ade:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106ae5:	e8 4f 54 00 00       	call   c010bf39 <strcmp>
+c0106aea:	85 c0                	test   %eax,%eax
+c0106aec:	74 24                	je     c0106b12 <check_boot_pgdir+0x2f7>
+c0106aee:	c7 44 24 0c a8 d6 10 	movl   $0xc010d6a8,0xc(%esp)
+c0106af5:	c0 
+c0106af6:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106afd:	c0 
+c0106afe:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
+c0106b05:	00 
+c0106b06:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106b0d:	e8 af a2 ff ff       	call   c0100dc1 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c0106b12:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b15:	89 04 24             	mov    %eax,(%esp)
+c0106b18:	e8 f4 e3 ff ff       	call   c0104f11 <page2kva>
+c0106b1d:	05 00 01 00 00       	add    $0x100,%eax
+c0106b22:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0106b25:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0106b2c:	e8 37 53 00 00       	call   c010be68 <strlen>
+c0106b31:	85 c0                	test   %eax,%eax
+c0106b33:	74 24                	je     c0106b59 <check_boot_pgdir+0x33e>
+c0106b35:	c7 44 24 0c e0 d6 10 	movl   $0xc010d6e0,0xc(%esp)
+c0106b3c:	c0 
+c0106b3d:	c7 44 24 08 11 d2 10 	movl   $0xc010d211,0x8(%esp)
+c0106b44:	c0 
+c0106b45:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
+c0106b4c:	00 
+c0106b4d:	c7 04 24 ec d1 10 c0 	movl   $0xc010d1ec,(%esp)
+c0106b54:	e8 68 a2 ff ff       	call   c0100dc1 <__panic>
+
+    free_page(p);
+c0106b59:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106b60:	00 
+c0106b61:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b64:	89 04 24             	mov    %eax,(%esp)
+c0106b67:	e8 bf e6 ff ff       	call   c010522b <free_pages>
+    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
+c0106b6c:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106b71:	8b 00                	mov    (%eax),%eax
+c0106b73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106b78:	89 04 24             	mov    %eax,(%esp)
+c0106b7b:	e8 4c e3 ff ff       	call   c0104ecc <pa2page>
+c0106b80:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106b87:	00 
+c0106b88:	89 04 24             	mov    %eax,(%esp)
+c0106b8b:	e8 9b e6 ff ff       	call   c010522b <free_pages>
+    boot_pgdir[0] = 0;
+c0106b90:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0106b95:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c0106b9b:	c7 04 24 04 d7 10 c0 	movl   $0xc010d704,(%esp)
+c0106ba2:	e8 b1 97 ff ff       	call   c0100358 <cprintf>
+}
+c0106ba7:	c9                   	leave  
+c0106ba8:	c3                   	ret    
+
+c0106ba9 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0106ba9:	55                   	push   %ebp
+c0106baa:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0106bac:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106baf:	83 e0 04             	and    $0x4,%eax
+c0106bb2:	85 c0                	test   %eax,%eax
+c0106bb4:	74 07                	je     c0106bbd <perm2str+0x14>
+c0106bb6:	b8 75 00 00 00       	mov    $0x75,%eax
+c0106bbb:	eb 05                	jmp    c0106bc2 <perm2str+0x19>
+c0106bbd:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106bc2:	a2 08 ee 1a c0       	mov    %al,0xc01aee08
+    str[1] = 'r';
+c0106bc7:	c6 05 09 ee 1a c0 72 	movb   $0x72,0xc01aee09
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0106bce:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106bd1:	83 e0 02             	and    $0x2,%eax
+c0106bd4:	85 c0                	test   %eax,%eax
+c0106bd6:	74 07                	je     c0106bdf <perm2str+0x36>
+c0106bd8:	b8 77 00 00 00       	mov    $0x77,%eax
+c0106bdd:	eb 05                	jmp    c0106be4 <perm2str+0x3b>
+c0106bdf:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0106be4:	a2 0a ee 1a c0       	mov    %al,0xc01aee0a
+    str[3] = '\0';
+c0106be9:	c6 05 0b ee 1a c0 00 	movb   $0x0,0xc01aee0b
+    return str;
+c0106bf0:	b8 08 ee 1a c0       	mov    $0xc01aee08,%eax
+}
+c0106bf5:	5d                   	pop    %ebp
+c0106bf6:	c3                   	ret    
+
+c0106bf7 <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0106bf7:	55                   	push   %ebp
+c0106bf8:	89 e5                	mov    %esp,%ebp
+c0106bfa:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0106bfd:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c00:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c03:	72 0a                	jb     c0106c0f <get_pgtable_items+0x18>
+        return 0;
+c0106c05:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106c0a:	e9 9c 00 00 00       	jmp    c0106cab <get_pgtable_items+0xb4>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106c0f:	eb 04                	jmp    c0106c15 <get_pgtable_items+0x1e>
+        start ++;
+c0106c11:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0106c15:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c18:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c1b:	73 18                	jae    c0106c35 <get_pgtable_items+0x3e>
+c0106c1d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c27:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c2a:	01 d0                	add    %edx,%eax
+c0106c2c:	8b 00                	mov    (%eax),%eax
+c0106c2e:	83 e0 01             	and    $0x1,%eax
+c0106c31:	85 c0                	test   %eax,%eax
+c0106c33:	74 dc                	je     c0106c11 <get_pgtable_items+0x1a>
+        start ++;
+    }
+    if (start < right) {
+c0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c38:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c3b:	73 69                	jae    c0106ca6 <get_pgtable_items+0xaf>
+        if (left_store != NULL) {
+c0106c3d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0106c41:	74 08                	je     c0106c4b <get_pgtable_items+0x54>
+            *left_store = start;
+c0106c43:	8b 45 18             	mov    0x18(%ebp),%eax
+c0106c46:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106c49:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c0106c4b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c4e:	8d 50 01             	lea    0x1(%eax),%edx
+c0106c51:	89 55 10             	mov    %edx,0x10(%ebp)
+c0106c54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c5b:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c5e:	01 d0                	add    %edx,%eax
+c0106c60:	8b 00                	mov    (%eax),%eax
+c0106c62:	83 e0 07             	and    $0x7,%eax
+c0106c65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106c68:	eb 04                	jmp    c0106c6e <get_pgtable_items+0x77>
+            start ++;
+c0106c6a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0106c6e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c71:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106c74:	73 1d                	jae    c0106c93 <get_pgtable_items+0x9c>
+c0106c76:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c79:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106c80:	8b 45 14             	mov    0x14(%ebp),%eax
+c0106c83:	01 d0                	add    %edx,%eax
+c0106c85:	8b 00                	mov    (%eax),%eax
+c0106c87:	83 e0 07             	and    $0x7,%eax
+c0106c8a:	89 c2                	mov    %eax,%edx
+c0106c8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106c8f:	39 c2                	cmp    %eax,%edx
+c0106c91:	74 d7                	je     c0106c6a <get_pgtable_items+0x73>
+            start ++;
+        }
+        if (right_store != NULL) {
+c0106c93:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0106c97:	74 08                	je     c0106ca1 <get_pgtable_items+0xaa>
+            *right_store = start;
+c0106c99:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0106c9c:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106c9f:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c0106ca1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106ca4:	eb 05                	jmp    c0106cab <get_pgtable_items+0xb4>
+    }
+    return 0;
+c0106ca6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106cab:	c9                   	leave  
+c0106cac:	c3                   	ret    
+
+c0106cad <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c0106cad:	55                   	push   %ebp
+c0106cae:	89 e5                	mov    %esp,%ebp
+c0106cb0:	57                   	push   %edi
+c0106cb1:	56                   	push   %esi
+c0106cb2:	53                   	push   %ebx
+c0106cb3:	83 ec 4c             	sub    $0x4c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c0106cb6:	c7 04 24 24 d7 10 c0 	movl   $0xc010d724,(%esp)
+c0106cbd:	e8 96 96 ff ff       	call   c0100358 <cprintf>
+    size_t left, right = 0, perm;
+c0106cc2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106cc9:	e9 fa 00 00 00       	jmp    c0106dc8 <print_pgdir+0x11b>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106cce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106cd1:	89 04 24             	mov    %eax,(%esp)
+c0106cd4:	e8 d0 fe ff ff       	call   c0106ba9 <perm2str>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c0106cd9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106cdc:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106cdf:	29 d1                	sub    %edx,%ecx
+c0106ce1:	89 ca                	mov    %ecx,%edx
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0106ce3:	89 d6                	mov    %edx,%esi
+c0106ce5:	c1 e6 16             	shl    $0x16,%esi
+c0106ce8:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106ceb:	89 d3                	mov    %edx,%ebx
+c0106ced:	c1 e3 16             	shl    $0x16,%ebx
+c0106cf0:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106cf3:	89 d1                	mov    %edx,%ecx
+c0106cf5:	c1 e1 16             	shl    $0x16,%ecx
+c0106cf8:	8b 7d dc             	mov    -0x24(%ebp),%edi
+c0106cfb:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106cfe:	29 d7                	sub    %edx,%edi
+c0106d00:	89 fa                	mov    %edi,%edx
+c0106d02:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106d06:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106d0a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106d0e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106d12:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106d16:	c7 04 24 55 d7 10 c0 	movl   $0xc010d755,(%esp)
+c0106d1d:	e8 36 96 ff ff       	call   c0100358 <cprintf>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c0106d22:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106d25:	c1 e0 0a             	shl    $0xa,%eax
+c0106d28:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106d2b:	eb 54                	jmp    c0106d81 <print_pgdir+0xd4>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106d2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106d30:	89 04 24             	mov    %eax,(%esp)
+c0106d33:	e8 71 fe ff ff       	call   c0106ba9 <perm2str>
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c0106d38:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+c0106d3b:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d3e:	29 d1                	sub    %edx,%ecx
+c0106d40:	89 ca                	mov    %ecx,%edx
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0106d42:	89 d6                	mov    %edx,%esi
+c0106d44:	c1 e6 0c             	shl    $0xc,%esi
+c0106d47:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0106d4a:	89 d3                	mov    %edx,%ebx
+c0106d4c:	c1 e3 0c             	shl    $0xc,%ebx
+c0106d4f:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d52:	c1 e2 0c             	shl    $0xc,%edx
+c0106d55:	89 d1                	mov    %edx,%ecx
+c0106d57:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+c0106d5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0106d5d:	29 d7                	sub    %edx,%edi
+c0106d5f:	89 fa                	mov    %edi,%edx
+c0106d61:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0106d65:	89 74 24 10          	mov    %esi,0x10(%esp)
+c0106d69:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0106d6d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106d71:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106d75:	c7 04 24 74 d7 10 c0 	movl   $0xc010d774,(%esp)
+c0106d7c:	e8 d7 95 ff ff       	call   c0100358 <cprintf>
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0106d81:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
+c0106d86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0106d89:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0106d8c:	89 ce                	mov    %ecx,%esi
+c0106d8e:	c1 e6 0a             	shl    $0xa,%esi
+c0106d91:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c0106d94:	89 cb                	mov    %ecx,%ebx
+c0106d96:	c1 e3 0a             	shl    $0xa,%ebx
+c0106d99:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
+c0106d9c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106da0:	8d 4d d8             	lea    -0x28(%ebp),%ecx
+c0106da3:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106da7:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106dab:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106daf:	89 74 24 04          	mov    %esi,0x4(%esp)
+c0106db3:	89 1c 24             	mov    %ebx,(%esp)
+c0106db6:	e8 3c fe ff ff       	call   c0106bf7 <get_pgtable_items>
+c0106dbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106dbe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106dc2:	0f 85 65 ff ff ff    	jne    c0106d2d <print_pgdir+0x80>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0106dc8:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
+c0106dcd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106dd0:	8d 4d dc             	lea    -0x24(%ebp),%ecx
+c0106dd3:	89 4c 24 14          	mov    %ecx,0x14(%esp)
+c0106dd7:	8d 4d e0             	lea    -0x20(%ebp),%ecx
+c0106dda:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0106dde:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106de2:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106de6:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
+c0106ded:	00 
+c0106dee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0106df5:	e8 fd fd ff ff       	call   c0106bf7 <get_pgtable_items>
+c0106dfa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0106dfd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106e01:	0f 85 c7 fe ff ff    	jne    c0106cce <print_pgdir+0x21>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0106e07:	c7 04 24 98 d7 10 c0 	movl   $0xc010d798,(%esp)
+c0106e0e:	e8 45 95 ff ff       	call   c0100358 <cprintf>
+}
+c0106e13:	83 c4 4c             	add    $0x4c,%esp
+c0106e16:	5b                   	pop    %ebx
+c0106e17:	5e                   	pop    %esi
+c0106e18:	5f                   	pop    %edi
+c0106e19:	5d                   	pop    %ebp
+c0106e1a:	c3                   	ret    
+
+c0106e1b <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106e1b:	55                   	push   %ebp
+c0106e1c:	89 e5                	mov    %esp,%ebp
+c0106e1e:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0106e21:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e24:	c1 e8 0c             	shr    $0xc,%eax
+c0106e27:	89 c2                	mov    %eax,%edx
+c0106e29:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0106e2e:	39 c2                	cmp    %eax,%edx
+c0106e30:	72 1c                	jb     c0106e4e <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0106e32:	c7 44 24 08 cc d7 10 	movl   $0xc010d7cc,0x8(%esp)
+c0106e39:	c0 
+c0106e3a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0106e41:	00 
+c0106e42:	c7 04 24 eb d7 10 c0 	movl   $0xc010d7eb,(%esp)
+c0106e49:	e8 73 9f ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106e4e:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0106e53:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106e56:	c1 ea 0c             	shr    $0xc,%edx
+c0106e59:	c1 e2 05             	shl    $0x5,%edx
+c0106e5c:	01 d0                	add    %edx,%eax
+}
+c0106e5e:	c9                   	leave  
+c0106e5f:	c3                   	ret    
+
+c0106e60 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106e60:	55                   	push   %ebp
+c0106e61:	89 e5                	mov    %esp,%ebp
+c0106e63:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0106e66:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e69:	83 e0 01             	and    $0x1,%eax
+c0106e6c:	85 c0                	test   %eax,%eax
+c0106e6e:	75 1c                	jne    c0106e8c <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0106e70:	c7 44 24 08 fc d7 10 	movl   $0xc010d7fc,0x8(%esp)
+c0106e77:	c0 
+c0106e78:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c0106e7f:	00 
+c0106e80:	c7 04 24 eb d7 10 c0 	movl   $0xc010d7eb,(%esp)
+c0106e87:	e8 35 9f ff ff       	call   c0100dc1 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e94:	89 04 24             	mov    %eax,(%esp)
+c0106e97:	e8 7f ff ff ff       	call   c0106e1b <pa2page>
+}
+c0106e9c:	c9                   	leave  
+c0106e9d:	c3                   	ret    
+
+c0106e9e <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0106e9e:	55                   	push   %ebp
+c0106e9f:	89 e5                	mov    %esp,%ebp
+c0106ea1:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106ea4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ea7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106eac:	89 04 24             	mov    %eax,(%esp)
+c0106eaf:	e8 67 ff ff ff       	call   c0106e1b <pa2page>
+}
+c0106eb4:	c9                   	leave  
+c0106eb5:	c3                   	ret    
+
+c0106eb6 <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c0106eb6:	55                   	push   %ebp
+c0106eb7:	89 e5                	mov    %esp,%ebp
+c0106eb9:	83 ec 28             	sub    $0x28,%esp
+     swapfs_init();
+c0106ebc:	e8 86 23 00 00       	call   c0109247 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c0106ec1:	a1 3c 0f 1b c0       	mov    0xc01b0f3c,%eax
+c0106ec6:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c0106ecb:	76 0c                	jbe    c0106ed9 <swap_init+0x23>
+c0106ecd:	a1 3c 0f 1b c0       	mov    0xc01b0f3c,%eax
+c0106ed2:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c0106ed7:	76 25                	jbe    c0106efe <swap_init+0x48>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c0106ed9:	a1 3c 0f 1b c0       	mov    0xc01b0f3c,%eax
+c0106ede:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106ee2:	c7 44 24 08 1d d8 10 	movl   $0xc010d81d,0x8(%esp)
+c0106ee9:	c0 
+c0106eea:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
+c0106ef1:	00 
+c0106ef2:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0106ef9:	e8 c3 9e ff ff       	call   c0100dc1 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0106efe:	c7 05 14 ee 1a c0 60 	movl   $0xc012ca60,0xc01aee14
+c0106f05:	ca 12 c0 
+     int r = sm->init();
+c0106f08:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106f0d:	8b 40 04             	mov    0x4(%eax),%eax
+c0106f10:	ff d0                	call   *%eax
+c0106f12:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0106f15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106f19:	75 26                	jne    c0106f41 <swap_init+0x8b>
+     {
+          swap_init_ok = 1;
+c0106f1b:	c7 05 0c ee 1a c0 01 	movl   $0x1,0xc01aee0c
+c0106f22:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0106f25:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106f2a:	8b 00                	mov    (%eax),%eax
+c0106f2c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106f30:	c7 04 24 47 d8 10 c0 	movl   $0xc010d847,(%esp)
+c0106f37:	e8 1c 94 ff ff       	call   c0100358 <cprintf>
+          check_swap();
+c0106f3c:	e8 a4 04 00 00       	call   c01073e5 <check_swap>
+     }
+
+     return r;
+c0106f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106f44:	c9                   	leave  
+c0106f45:	c3                   	ret    
+
+c0106f46 <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0106f46:	55                   	push   %ebp
+c0106f47:	89 e5                	mov    %esp,%ebp
+c0106f49:	83 ec 18             	sub    $0x18,%esp
+     return sm->init_mm(mm);
+c0106f4c:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106f51:	8b 40 08             	mov    0x8(%eax),%eax
+c0106f54:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f57:	89 14 24             	mov    %edx,(%esp)
+c0106f5a:	ff d0                	call   *%eax
+}
+c0106f5c:	c9                   	leave  
+c0106f5d:	c3                   	ret    
+
+c0106f5e <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0106f5e:	55                   	push   %ebp
+c0106f5f:	89 e5                	mov    %esp,%ebp
+c0106f61:	83 ec 18             	sub    $0x18,%esp
+     return sm->tick_event(mm);
+c0106f64:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106f69:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106f6c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f6f:	89 14 24             	mov    %edx,(%esp)
+c0106f72:	ff d0                	call   *%eax
+}
+c0106f74:	c9                   	leave  
+c0106f75:	c3                   	ret    
+
+c0106f76 <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0106f76:	55                   	push   %ebp
+c0106f77:	89 e5                	mov    %esp,%ebp
+c0106f79:	83 ec 18             	sub    $0x18,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c0106f7c:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106f81:	8b 40 10             	mov    0x10(%eax),%eax
+c0106f84:	8b 55 14             	mov    0x14(%ebp),%edx
+c0106f87:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106f8b:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106f8e:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106f92:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106f95:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106f99:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106f9c:	89 14 24             	mov    %edx,(%esp)
+c0106f9f:	ff d0                	call   *%eax
+}
+c0106fa1:	c9                   	leave  
+c0106fa2:	c3                   	ret    
+
+c0106fa3 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0106fa3:	55                   	push   %ebp
+c0106fa4:	89 e5                	mov    %esp,%ebp
+c0106fa6:	83 ec 18             	sub    $0x18,%esp
+     return sm->set_unswappable(mm, addr);
+c0106fa9:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106fae:	8b 40 14             	mov    0x14(%eax),%eax
+c0106fb1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106fb4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106fb8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106fbb:	89 14 24             	mov    %edx,(%esp)
+c0106fbe:	ff d0                	call   *%eax
+}
+c0106fc0:	c9                   	leave  
+c0106fc1:	c3                   	ret    
+
+c0106fc2 <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c0106fc2:	55                   	push   %ebp
+c0106fc3:	89 e5                	mov    %esp,%ebp
+c0106fc5:	83 ec 38             	sub    $0x38,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c0106fc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106fcf:	e9 5a 01 00 00       	jmp    c010712e <swap_out+0x16c>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0106fd4:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c0106fd9:	8b 40 18             	mov    0x18(%eax),%eax
+c0106fdc:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106fdf:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106fe3:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0106fe6:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106fea:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106fed:	89 14 24             	mov    %edx,(%esp)
+c0106ff0:	ff d0                	call   *%eax
+c0106ff2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0106ff5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106ff9:	74 18                	je     c0107013 <swap_out+0x51>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0106ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ffe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107002:	c7 04 24 5c d8 10 c0 	movl   $0xc010d85c,(%esp)
+c0107009:	e8 4a 93 ff ff       	call   c0100358 <cprintf>
+c010700e:	e9 27 01 00 00       	jmp    c010713a <swap_out+0x178>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0107013:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107016:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107019:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c010701c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010701f:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107022:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107029:	00 
+c010702a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010702d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107031:	89 04 24             	mov    %eax,(%esp)
+c0107034:	e8 ee e8 ff ff       	call   c0105927 <get_pte>
+c0107039:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c010703c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010703f:	8b 00                	mov    (%eax),%eax
+c0107041:	83 e0 01             	and    $0x1,%eax
+c0107044:	85 c0                	test   %eax,%eax
+c0107046:	75 24                	jne    c010706c <swap_out+0xaa>
+c0107048:	c7 44 24 0c 89 d8 10 	movl   $0xc010d889,0xc(%esp)
+c010704f:	c0 
+c0107050:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107057:	c0 
+c0107058:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
+c010705f:	00 
+c0107060:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107067:	e8 55 9d ff ff       	call   c0100dc1 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c010706c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010706f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107072:	8b 52 1c             	mov    0x1c(%edx),%edx
+c0107075:	c1 ea 0c             	shr    $0xc,%edx
+c0107078:	83 c2 01             	add    $0x1,%edx
+c010707b:	c1 e2 08             	shl    $0x8,%edx
+c010707e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107082:	89 14 24             	mov    %edx,(%esp)
+c0107085:	e8 77 22 00 00       	call   c0109301 <swapfs_write>
+c010708a:	85 c0                	test   %eax,%eax
+c010708c:	74 34                	je     c01070c2 <swap_out+0x100>
+                    cprintf("SWAP: failed to save\n");
+c010708e:	c7 04 24 b3 d8 10 c0 	movl   $0xc010d8b3,(%esp)
+c0107095:	e8 be 92 ff ff       	call   c0100358 <cprintf>
+                    sm->map_swappable(mm, v, page, 0);
+c010709a:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c010709f:	8b 40 10             	mov    0x10(%eax),%eax
+c01070a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01070a5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01070ac:	00 
+c01070ad:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01070b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01070b4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01070b8:	8b 55 08             	mov    0x8(%ebp),%edx
+c01070bb:	89 14 24             	mov    %edx,(%esp)
+c01070be:	ff d0                	call   *%eax
+c01070c0:	eb 68                	jmp    c010712a <swap_out+0x168>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c01070c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01070c5:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01070c8:	c1 e8 0c             	shr    $0xc,%eax
+c01070cb:	83 c0 01             	add    $0x1,%eax
+c01070ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01070d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01070d5:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01070d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01070e0:	c7 04 24 cc d8 10 c0 	movl   $0xc010d8cc,(%esp)
+c01070e7:	e8 6c 92 ff ff       	call   c0100358 <cprintf>
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c01070ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01070ef:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01070f2:	c1 e8 0c             	shr    $0xc,%eax
+c01070f5:	83 c0 01             	add    $0x1,%eax
+c01070f8:	c1 e0 08             	shl    $0x8,%eax
+c01070fb:	89 c2                	mov    %eax,%edx
+c01070fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107100:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c0107102:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107105:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010710c:	00 
+c010710d:	89 04 24             	mov    %eax,(%esp)
+c0107110:	e8 16 e1 ff ff       	call   c010522b <free_pages>
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c0107115:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107118:	8b 40 0c             	mov    0xc(%eax),%eax
+c010711b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010711e:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107122:	89 04 24             	mov    %eax,(%esp)
+c0107125:	e8 07 ef ff ff       	call   c0106031 <tlb_invalidate>
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c010712a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010712e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107131:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107134:	0f 85 9a fe ff ff    	jne    c0106fd4 <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c010713a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010713d:	c9                   	leave  
+c010713e:	c3                   	ret    
+
+c010713f <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c010713f:	55                   	push   %ebp
+c0107140:	89 e5                	mov    %esp,%ebp
+c0107142:	83 ec 28             	sub    $0x28,%esp
+     struct Page *result = alloc_page();
+c0107145:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010714c:	e8 6f e0 ff ff       	call   c01051c0 <alloc_pages>
+c0107151:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c0107154:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107158:	75 24                	jne    c010717e <swap_in+0x3f>
+c010715a:	c7 44 24 0c 0c d9 10 	movl   $0xc010d90c,0xc(%esp)
+c0107161:	c0 
+c0107162:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107169:	c0 
+c010716a:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c0107171:	00 
+c0107172:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107179:	e8 43 9c ff ff       	call   c0100dc1 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c010717e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107181:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107184:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010718b:	00 
+c010718c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010718f:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107193:	89 04 24             	mov    %eax,(%esp)
+c0107196:	e8 8c e7 ff ff       	call   c0105927 <get_pte>
+c010719b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c010719e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01071a1:	8b 00                	mov    (%eax),%eax
+c01071a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01071a6:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01071aa:	89 04 24             	mov    %eax,(%esp)
+c01071ad:	e8 dd 20 00 00       	call   c010928f <swapfs_read>
+c01071b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01071b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01071b9:	74 2a                	je     c01071e5 <swap_in+0xa6>
+     {
+        assert(r!=0);
+c01071bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01071bf:	75 24                	jne    c01071e5 <swap_in+0xa6>
+c01071c1:	c7 44 24 0c 19 d9 10 	movl   $0xc010d919,0xc(%esp)
+c01071c8:	c0 
+c01071c9:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01071d0:	c0 
+c01071d1:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
+c01071d8:	00 
+c01071d9:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01071e0:	e8 dc 9b ff ff       	call   c0100dc1 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c01071e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01071e8:	8b 00                	mov    (%eax),%eax
+c01071ea:	c1 e8 08             	shr    $0x8,%eax
+c01071ed:	89 c2                	mov    %eax,%edx
+c01071ef:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01071f2:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01071f6:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01071fa:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
+c0107201:	e8 52 91 ff ff       	call   c0100358 <cprintf>
+     *ptr_result=result;
+c0107206:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107209:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010720c:	89 10                	mov    %edx,(%eax)
+     return 0;
+c010720e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107213:	c9                   	leave  
+c0107214:	c3                   	ret    
+
+c0107215 <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c0107215:	55                   	push   %ebp
+c0107216:	89 e5                	mov    %esp,%ebp
+c0107218:	83 ec 18             	sub    $0x18,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c010721b:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107220:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107223:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107228:	83 f8 01             	cmp    $0x1,%eax
+c010722b:	74 24                	je     c0107251 <check_content_set+0x3c>
+c010722d:	c7 44 24 0c 5e d9 10 	movl   $0xc010d95e,0xc(%esp)
+c0107234:	c0 
+c0107235:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c010723c:	c0 
+c010723d:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
+c0107244:	00 
+c0107245:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c010724c:	e8 70 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c0107251:	b8 10 10 00 00       	mov    $0x1010,%eax
+c0107256:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107259:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c010725e:	83 f8 01             	cmp    $0x1,%eax
+c0107261:	74 24                	je     c0107287 <check_content_set+0x72>
+c0107263:	c7 44 24 0c 5e d9 10 	movl   $0xc010d95e,0xc(%esp)
+c010726a:	c0 
+c010726b:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107272:	c0 
+c0107273:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c010727a:	00 
+c010727b:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107282:	e8 3a 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c0107287:	b8 00 20 00 00       	mov    $0x2000,%eax
+c010728c:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c010728f:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107294:	83 f8 02             	cmp    $0x2,%eax
+c0107297:	74 24                	je     c01072bd <check_content_set+0xa8>
+c0107299:	c7 44 24 0c 6d d9 10 	movl   $0xc010d96d,0xc(%esp)
+c01072a0:	c0 
+c01072a1:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01072a8:	c0 
+c01072a9:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
+c01072b0:	00 
+c01072b1:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01072b8:	e8 04 9b ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01072bd:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01072c2:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01072c5:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c01072ca:	83 f8 02             	cmp    $0x2,%eax
+c01072cd:	74 24                	je     c01072f3 <check_content_set+0xde>
+c01072cf:	c7 44 24 0c 6d d9 10 	movl   $0xc010d96d,0xc(%esp)
+c01072d6:	c0 
+c01072d7:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01072de:	c0 
+c01072df:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
+c01072e6:	00 
+c01072e7:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01072ee:	e8 ce 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c01072f3:	b8 00 30 00 00       	mov    $0x3000,%eax
+c01072f8:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c01072fb:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107300:	83 f8 03             	cmp    $0x3,%eax
+c0107303:	74 24                	je     c0107329 <check_content_set+0x114>
+c0107305:	c7 44 24 0c 7c d9 10 	movl   $0xc010d97c,0xc(%esp)
+c010730c:	c0 
+c010730d:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107314:	c0 
+c0107315:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c010731c:	00 
+c010731d:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107324:	e8 98 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c0107329:	b8 10 30 00 00       	mov    $0x3010,%eax
+c010732e:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107331:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107336:	83 f8 03             	cmp    $0x3,%eax
+c0107339:	74 24                	je     c010735f <check_content_set+0x14a>
+c010733b:	c7 44 24 0c 7c d9 10 	movl   $0xc010d97c,0xc(%esp)
+c0107342:	c0 
+c0107343:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c010734a:	c0 
+c010734b:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c0107352:	00 
+c0107353:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c010735a:	e8 62 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c010735f:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107364:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0107367:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c010736c:	83 f8 04             	cmp    $0x4,%eax
+c010736f:	74 24                	je     c0107395 <check_content_set+0x180>
+c0107371:	c7 44 24 0c 8b d9 10 	movl   $0xc010d98b,0xc(%esp)
+c0107378:	c0 
+c0107379:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107380:	c0 
+c0107381:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c0107388:	00 
+c0107389:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107390:	e8 2c 9a ff ff       	call   c0100dc1 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c0107395:	b8 10 40 00 00       	mov    $0x4010,%eax
+c010739a:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c010739d:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c01073a2:	83 f8 04             	cmp    $0x4,%eax
+c01073a5:	74 24                	je     c01073cb <check_content_set+0x1b6>
+c01073a7:	c7 44 24 0c 8b d9 10 	movl   $0xc010d98b,0xc(%esp)
+c01073ae:	c0 
+c01073af:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01073b6:	c0 
+c01073b7:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c01073be:	00 
+c01073bf:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01073c6:	e8 f6 99 ff ff       	call   c0100dc1 <__panic>
+}
+c01073cb:	c9                   	leave  
+c01073cc:	c3                   	ret    
+
+c01073cd <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01073cd:	55                   	push   %ebp
+c01073ce:	89 e5                	mov    %esp,%ebp
+c01073d0:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c01073d3:	a1 14 ee 1a c0       	mov    0xc01aee14,%eax
+c01073d8:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01073db:	ff d0                	call   *%eax
+c01073dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c01073e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01073e3:	c9                   	leave  
+c01073e4:	c3                   	ret    
+
+c01073e5 <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c01073e5:	55                   	push   %ebp
+c01073e6:	89 e5                	mov    %esp,%ebp
+c01073e8:	53                   	push   %ebx
+c01073e9:	83 ec 74             	sub    $0x74,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c01073ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01073f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c01073fa:	c7 45 e8 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107401:	eb 6b                	jmp    c010746e <check_swap+0x89>
+        struct Page *p = le2page(le, page_link);
+c0107403:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107406:	83 e8 0c             	sub    $0xc,%eax
+c0107409:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c010740c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010740f:	83 c0 04             	add    $0x4,%eax
+c0107412:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0107419:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010741c:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010741f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107422:	0f a3 10             	bt     %edx,(%eax)
+c0107425:	19 c0                	sbb    %eax,%eax
+c0107427:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c010742a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c010742e:	0f 95 c0             	setne  %al
+c0107431:	0f b6 c0             	movzbl %al,%eax
+c0107434:	85 c0                	test   %eax,%eax
+c0107436:	75 24                	jne    c010745c <check_swap+0x77>
+c0107438:	c7 44 24 0c 9a d9 10 	movl   $0xc010d99a,0xc(%esp)
+c010743f:	c0 
+c0107440:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107447:	c0 
+c0107448:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
+c010744f:	00 
+c0107450:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107457:	e8 65 99 ff ff       	call   c0100dc1 <__panic>
+        count ++, total += p->property;
+c010745c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0107460:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107463:	8b 50 08             	mov    0x8(%eax),%edx
+c0107466:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107469:	01 d0                	add    %edx,%eax
+c010746b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010746e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107471:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0107474:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107477:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c010747a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010747d:	81 7d e8 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x18(%ebp)
+c0107484:	0f 85 79 ff ff ff    	jne    c0107403 <check_swap+0x1e>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c010748a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+c010748d:	e8 cb dd ff ff       	call   c010525d <nr_free_pages>
+c0107492:	39 c3                	cmp    %eax,%ebx
+c0107494:	74 24                	je     c01074ba <check_swap+0xd5>
+c0107496:	c7 44 24 0c aa d9 10 	movl   $0xc010d9aa,0xc(%esp)
+c010749d:	c0 
+c010749e:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01074a5:	c0 
+c01074a6:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c01074ad:	00 
+c01074ae:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01074b5:	e8 07 99 ff ff       	call   c0100dc1 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c01074ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01074bd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01074c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01074c4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01074c8:	c7 04 24 c4 d9 10 c0 	movl   $0xc010d9c4,(%esp)
+c01074cf:	e8 84 8e ff ff       	call   c0100358 <cprintf>
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c01074d4:	e8 44 0b 00 00       	call   c010801d <mm_create>
+c01074d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+     assert(mm != NULL);
+c01074dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01074e0:	75 24                	jne    c0107506 <check_swap+0x121>
+c01074e2:	c7 44 24 0c ea d9 10 	movl   $0xc010d9ea,0xc(%esp)
+c01074e9:	c0 
+c01074ea:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01074f1:	c0 
+c01074f2:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
+c01074f9:	00 
+c01074fa:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107501:	e8 bb 98 ff ff       	call   c0100dc1 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c0107506:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c010750b:	85 c0                	test   %eax,%eax
+c010750d:	74 24                	je     c0107533 <check_swap+0x14e>
+c010750f:	c7 44 24 0c f5 d9 10 	movl   $0xc010d9f5,0xc(%esp)
+c0107516:	c0 
+c0107517:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c010751e:	c0 
+c010751f:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
+c0107526:	00 
+c0107527:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c010752e:	e8 8e 98 ff ff       	call   c0100dc1 <__panic>
+
+     check_mm_struct = mm;
+c0107533:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107536:	a3 6c 0f 1b c0       	mov    %eax,0xc01b0f6c
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c010753b:	8b 15 84 ed 1a c0    	mov    0xc01aed84,%edx
+c0107541:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107544:	89 50 0c             	mov    %edx,0xc(%eax)
+c0107547:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010754a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010754d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+     assert(pgdir[0] == 0);
+c0107550:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107553:	8b 00                	mov    (%eax),%eax
+c0107555:	85 c0                	test   %eax,%eax
+c0107557:	74 24                	je     c010757d <check_swap+0x198>
+c0107559:	c7 44 24 0c 0d da 10 	movl   $0xc010da0d,0xc(%esp)
+c0107560:	c0 
+c0107561:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107568:	c0 
+c0107569:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c0107570:	00 
+c0107571:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107578:	e8 44 98 ff ff       	call   c0100dc1 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c010757d:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
+c0107584:	00 
+c0107585:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
+c010758c:	00 
+c010758d:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+c0107594:	e8 1d 0b 00 00       	call   c01080b6 <vma_create>
+c0107599:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(vma != NULL);
+c010759c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01075a0:	75 24                	jne    c01075c6 <check_swap+0x1e1>
+c01075a2:	c7 44 24 0c 1b da 10 	movl   $0xc010da1b,0xc(%esp)
+c01075a9:	c0 
+c01075aa:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01075b1:	c0 
+c01075b2:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
+c01075b9:	00 
+c01075ba:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01075c1:	e8 fb 97 ff ff       	call   c0100dc1 <__panic>
+
+     insert_vma_struct(mm, vma);
+c01075c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01075c9:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01075cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01075d0:	89 04 24             	mov    %eax,(%esp)
+c01075d3:	e8 6e 0c 00 00       	call   c0108246 <insert_vma_struct>
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c01075d8:	c7 04 24 28 da 10 c0 	movl   $0xc010da28,(%esp)
+c01075df:	e8 74 8d ff ff       	call   c0100358 <cprintf>
+     pte_t *temp_ptep=NULL;
+c01075e4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c01075eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01075ee:	8b 40 0c             	mov    0xc(%eax),%eax
+c01075f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c01075f8:	00 
+c01075f9:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0107600:	00 
+c0107601:	89 04 24             	mov    %eax,(%esp)
+c0107604:	e8 1e e3 ff ff       	call   c0105927 <get_pte>
+c0107609:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(temp_ptep!= NULL);
+c010760c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+c0107610:	75 24                	jne    c0107636 <check_swap+0x251>
+c0107612:	c7 44 24 0c 5c da 10 	movl   $0xc010da5c,0xc(%esp)
+c0107619:	c0 
+c010761a:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107621:	c0 
+c0107622:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0107629:	00 
+c010762a:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107631:	e8 8b 97 ff ff       	call   c0100dc1 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c0107636:	c7 04 24 70 da 10 c0 	movl   $0xc010da70,(%esp)
+c010763d:	e8 16 8d ff ff       	call   c0100358 <cprintf>
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107642:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107649:	e9 a3 00 00 00       	jmp    c01076f1 <check_swap+0x30c>
+          check_rp[i] = alloc_page();
+c010764e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0107655:	e8 66 db ff ff       	call   c01051c0 <alloc_pages>
+c010765a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010765d:	89 04 95 a0 0e 1b c0 	mov    %eax,-0x3fe4f160(,%edx,4)
+          assert(check_rp[i] != NULL );
+c0107664:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107667:	8b 04 85 a0 0e 1b c0 	mov    -0x3fe4f160(,%eax,4),%eax
+c010766e:	85 c0                	test   %eax,%eax
+c0107670:	75 24                	jne    c0107696 <check_swap+0x2b1>
+c0107672:	c7 44 24 0c 94 da 10 	movl   $0xc010da94,0xc(%esp)
+c0107679:	c0 
+c010767a:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107681:	c0 
+c0107682:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
+c0107689:	00 
+c010768a:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107691:	e8 2b 97 ff ff       	call   c0100dc1 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c0107696:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107699:	8b 04 85 a0 0e 1b c0 	mov    -0x3fe4f160(,%eax,4),%eax
+c01076a0:	83 c0 04             	add    $0x4,%eax
+c01076a3:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
+c01076aa:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01076ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01076b0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01076b3:	0f a3 10             	bt     %edx,(%eax)
+c01076b6:	19 c0                	sbb    %eax,%eax
+c01076b8:	89 45 ac             	mov    %eax,-0x54(%ebp)
+    return oldbit != 0;
+c01076bb:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
+c01076bf:	0f 95 c0             	setne  %al
+c01076c2:	0f b6 c0             	movzbl %al,%eax
+c01076c5:	85 c0                	test   %eax,%eax
+c01076c7:	74 24                	je     c01076ed <check_swap+0x308>
+c01076c9:	c7 44 24 0c a8 da 10 	movl   $0xc010daa8,0xc(%esp)
+c01076d0:	c0 
+c01076d1:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01076d8:	c0 
+c01076d9:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c01076e0:	00 
+c01076e1:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01076e8:	e8 d4 96 ff ff       	call   c0100dc1 <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01076ed:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01076f1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01076f5:	0f 8e 53 ff ff ff    	jle    c010764e <check_swap+0x269>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c01076fb:	a1 7c 0e 1b c0       	mov    0xc01b0e7c,%eax
+c0107700:	8b 15 80 0e 1b c0    	mov    0xc01b0e80,%edx
+c0107706:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107709:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c010770c:	c7 45 a8 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x58(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107713:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107716:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107719:	89 50 04             	mov    %edx,0x4(%eax)
+c010771c:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c010771f:	8b 50 04             	mov    0x4(%eax),%edx
+c0107722:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107725:	89 10                	mov    %edx,(%eax)
+c0107727:	c7 45 a4 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x5c(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010772e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107731:	8b 40 04             	mov    0x4(%eax),%eax
+c0107734:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+c0107737:	0f 94 c0             	sete   %al
+c010773a:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c010773d:	85 c0                	test   %eax,%eax
+c010773f:	75 24                	jne    c0107765 <check_swap+0x380>
+c0107741:	c7 44 24 0c c3 da 10 	movl   $0xc010dac3,0xc(%esp)
+c0107748:	c0 
+c0107749:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107750:	c0 
+c0107751:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
+c0107758:	00 
+c0107759:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107760:	e8 5c 96 ff ff       	call   c0100dc1 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c0107765:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c010776a:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     nr_free = 0;
+c010776d:	c7 05 84 0e 1b c0 00 	movl   $0x0,0xc01b0e84
+c0107774:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107777:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010777e:	eb 1e                	jmp    c010779e <check_swap+0x3b9>
+        free_pages(check_rp[i],1);
+c0107780:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107783:	8b 04 85 a0 0e 1b c0 	mov    -0x3fe4f160(,%eax,4),%eax
+c010778a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107791:	00 
+c0107792:	89 04 24             	mov    %eax,(%esp)
+c0107795:	e8 91 da ff ff       	call   c010522b <free_pages>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010779a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c010779e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01077a2:	7e dc                	jle    c0107780 <check_swap+0x39b>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c01077a4:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c01077a9:	83 f8 04             	cmp    $0x4,%eax
+c01077ac:	74 24                	je     c01077d2 <check_swap+0x3ed>
+c01077ae:	c7 44 24 0c dc da 10 	movl   $0xc010dadc,0xc(%esp)
+c01077b5:	c0 
+c01077b6:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01077bd:	c0 
+c01077be:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c01077c5:	00 
+c01077c6:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01077cd:	e8 ef 95 ff ff       	call   c0100dc1 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c01077d2:	c7 04 24 00 db 10 c0 	movl   $0xc010db00,(%esp)
+c01077d9:	e8 7a 8b ff ff       	call   c0100358 <cprintf>
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c01077de:	c7 05 18 ee 1a c0 00 	movl   $0x0,0xc01aee18
+c01077e5:	00 00 00 
+     
+     check_content_set();
+c01077e8:	e8 28 fa ff ff       	call   c0107215 <check_content_set>
+     assert( nr_free == 0);         
+c01077ed:	a1 84 0e 1b c0       	mov    0xc01b0e84,%eax
+c01077f2:	85 c0                	test   %eax,%eax
+c01077f4:	74 24                	je     c010781a <check_swap+0x435>
+c01077f6:	c7 44 24 0c 27 db 10 	movl   $0xc010db27,0xc(%esp)
+c01077fd:	c0 
+c01077fe:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107805:	c0 
+c0107806:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
+c010780d:	00 
+c010780e:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107815:	e8 a7 95 ff ff       	call   c0100dc1 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c010781a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107821:	eb 26                	jmp    c0107849 <check_swap+0x464>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0107823:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107826:	c7 04 85 c0 0e 1b c0 	movl   $0xffffffff,-0x3fe4f140(,%eax,4)
+c010782d:	ff ff ff ff 
+c0107831:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107834:	8b 14 85 c0 0e 1b c0 	mov    -0x3fe4f140(,%eax,4),%edx
+c010783b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010783e:	89 14 85 00 0f 1b c0 	mov    %edx,-0x3fe4f100(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107845:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107849:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c010784d:	7e d4                	jle    c0107823 <check_swap+0x43e>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010784f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107856:	e9 eb 00 00 00       	jmp    c0107946 <check_swap+0x561>
+         check_ptep[i]=0;
+c010785b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010785e:	c7 04 85 54 0f 1b c0 	movl   $0x0,-0x3fe4f0ac(,%eax,4)
+c0107865:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c0107869:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010786c:	83 c0 01             	add    $0x1,%eax
+c010786f:	c1 e0 0c             	shl    $0xc,%eax
+c0107872:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107879:	00 
+c010787a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010787e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107881:	89 04 24             	mov    %eax,(%esp)
+c0107884:	e8 9e e0 ff ff       	call   c0105927 <get_pte>
+c0107889:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010788c:	89 04 95 54 0f 1b c0 	mov    %eax,-0x3fe4f0ac(,%edx,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c0107893:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107896:	8b 04 85 54 0f 1b c0 	mov    -0x3fe4f0ac(,%eax,4),%eax
+c010789d:	85 c0                	test   %eax,%eax
+c010789f:	75 24                	jne    c01078c5 <check_swap+0x4e0>
+c01078a1:	c7 44 24 0c 34 db 10 	movl   $0xc010db34,0xc(%esp)
+c01078a8:	c0 
+c01078a9:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01078b0:	c0 
+c01078b1:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
+c01078b8:	00 
+c01078b9:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c01078c0:	e8 fc 94 ff ff       	call   c0100dc1 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c01078c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01078c8:	8b 04 85 54 0f 1b c0 	mov    -0x3fe4f0ac(,%eax,4),%eax
+c01078cf:	8b 00                	mov    (%eax),%eax
+c01078d1:	89 04 24             	mov    %eax,(%esp)
+c01078d4:	e8 87 f5 ff ff       	call   c0106e60 <pte2page>
+c01078d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01078dc:	8b 14 95 a0 0e 1b c0 	mov    -0x3fe4f160(,%edx,4),%edx
+c01078e3:	39 d0                	cmp    %edx,%eax
+c01078e5:	74 24                	je     c010790b <check_swap+0x526>
+c01078e7:	c7 44 24 0c 4c db 10 	movl   $0xc010db4c,0xc(%esp)
+c01078ee:	c0 
+c01078ef:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c01078f6:	c0 
+c01078f7:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c01078fe:	00 
+c01078ff:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107906:	e8 b6 94 ff ff       	call   c0100dc1 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c010790b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010790e:	8b 04 85 54 0f 1b c0 	mov    -0x3fe4f0ac(,%eax,4),%eax
+c0107915:	8b 00                	mov    (%eax),%eax
+c0107917:	83 e0 01             	and    $0x1,%eax
+c010791a:	85 c0                	test   %eax,%eax
+c010791c:	75 24                	jne    c0107942 <check_swap+0x55d>
+c010791e:	c7 44 24 0c 74 db 10 	movl   $0xc010db74,0xc(%esp)
+c0107925:	c0 
+c0107926:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c010792d:	c0 
+c010792e:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
+c0107935:	00 
+c0107936:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c010793d:	e8 7f 94 ff ff       	call   c0100dc1 <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107942:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107946:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c010794a:	0f 8e 0b ff ff ff    	jle    c010785b <check_swap+0x476>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c0107950:	c7 04 24 90 db 10 c0 	movl   $0xc010db90,(%esp)
+c0107957:	e8 fc 89 ff ff       	call   c0100358 <cprintf>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c010795c:	e8 6c fa ff ff       	call   c01073cd <check_content_access>
+c0107961:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(ret==0);
+c0107964:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0107968:	74 24                	je     c010798e <check_swap+0x5a9>
+c010796a:	c7 44 24 0c b6 db 10 	movl   $0xc010dbb6,0xc(%esp)
+c0107971:	c0 
+c0107972:	c7 44 24 08 9e d8 10 	movl   $0xc010d89e,0x8(%esp)
+c0107979:	c0 
+c010797a:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
+c0107981:	00 
+c0107982:	c7 04 24 38 d8 10 c0 	movl   $0xc010d838,(%esp)
+c0107989:	e8 33 94 ff ff       	call   c0100dc1 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c010798e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107995:	eb 1e                	jmp    c01079b5 <check_swap+0x5d0>
+         free_pages(check_rp[i],1);
+c0107997:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010799a:	8b 04 85 a0 0e 1b c0 	mov    -0x3fe4f160(,%eax,4),%eax
+c01079a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01079a8:	00 
+c01079a9:	89 04 24             	mov    %eax,(%esp)
+c01079ac:	e8 7a d8 ff ff       	call   c010522b <free_pages>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01079b1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01079b5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01079b9:	7e dc                	jle    c0107997 <check_swap+0x5b2>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c01079bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01079be:	8b 00                	mov    (%eax),%eax
+c01079c0:	89 04 24             	mov    %eax,(%esp)
+c01079c3:	e8 d6 f4 ff ff       	call   c0106e9e <pde2page>
+c01079c8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01079cf:	00 
+c01079d0:	89 04 24             	mov    %eax,(%esp)
+c01079d3:	e8 53 d8 ff ff       	call   c010522b <free_pages>
+     pgdir[0] = 0;
+c01079d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01079db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c01079e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01079e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c01079eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01079ee:	89 04 24             	mov    %eax,(%esp)
+c01079f1:	e8 80 09 00 00       	call   c0108376 <mm_destroy>
+     check_mm_struct = NULL;
+c01079f6:	c7 05 6c 0f 1b c0 00 	movl   $0x0,0xc01b0f6c
+c01079fd:	00 00 00 
+     
+     nr_free = nr_free_store;
+c0107a00:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107a03:	a3 84 0e 1b c0       	mov    %eax,0xc01b0e84
+     free_list = free_list_store;
+c0107a08:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0107a0b:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107a0e:	a3 7c 0e 1b c0       	mov    %eax,0xc01b0e7c
+c0107a13:	89 15 80 0e 1b c0    	mov    %edx,0xc01b0e80
+
+     
+     le = &free_list;
+c0107a19:	c7 45 e8 7c 0e 1b c0 	movl   $0xc01b0e7c,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107a20:	eb 1d                	jmp    c0107a3f <check_swap+0x65a>
+         struct Page *p = le2page(le, page_link);
+c0107a22:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a25:	83 e8 0c             	sub    $0xc,%eax
+c0107a28:	89 45 c8             	mov    %eax,-0x38(%ebp)
+         count --, total -= p->property;
+c0107a2b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0107a2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107a32:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107a35:	8b 40 08             	mov    0x8(%eax),%eax
+c0107a38:	29 c2                	sub    %eax,%edx
+c0107a3a:	89 d0                	mov    %edx,%eax
+c0107a3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a42:	89 45 a0             	mov    %eax,-0x60(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107a45:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0107a48:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107a4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107a4e:	81 7d e8 7c 0e 1b c0 	cmpl   $0xc01b0e7c,-0x18(%ebp)
+c0107a55:	75 cb                	jne    c0107a22 <check_swap+0x63d>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0107a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a5a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107a61:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107a65:	c7 04 24 bd db 10 c0 	movl   $0xc010dbbd,(%esp)
+c0107a6c:	e8 e7 88 ff ff       	call   c0100358 <cprintf>
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c0107a71:	c7 04 24 d7 db 10 c0 	movl   $0xc010dbd7,(%esp)
+c0107a78:	e8 db 88 ff ff       	call   c0100358 <cprintf>
+}
+c0107a7d:	83 c4 74             	add    $0x74,%esp
+c0107a80:	5b                   	pop    %ebx
+c0107a81:	5d                   	pop    %ebp
+c0107a82:	c3                   	ret    
+
+c0107a83 <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c0107a83:	55                   	push   %ebp
+c0107a84:	89 e5                	mov    %esp,%ebp
+c0107a86:	83 ec 10             	sub    $0x10,%esp
+c0107a89:	c7 45 fc 64 0f 1b c0 	movl   $0xc01b0f64,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107a90:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107a93:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0107a96:	89 50 04             	mov    %edx,0x4(%eax)
+c0107a99:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107a9c:	8b 50 04             	mov    0x4(%eax),%edx
+c0107a9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107aa2:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c0107aa4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107aa7:	c7 40 14 64 0f 1b c0 	movl   $0xc01b0f64,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c0107aae:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107ab3:	c9                   	leave  
+c0107ab4:	c3                   	ret    
+
+c0107ab5 <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0107ab5:	55                   	push   %ebp
+c0107ab6:	89 e5                	mov    %esp,%ebp
+c0107ab8:	83 ec 38             	sub    $0x38,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0107abb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107abe:	8b 40 14             	mov    0x14(%eax),%eax
+c0107ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c0107ac4:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107ac7:	83 c0 14             	add    $0x14,%eax
+c0107aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c0107acd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107ad1:	74 06                	je     c0107ad9 <_fifo_map_swappable+0x24>
+c0107ad3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107ad7:	75 24                	jne    c0107afd <_fifo_map_swappable+0x48>
+c0107ad9:	c7 44 24 0c f0 db 10 	movl   $0xc010dbf0,0xc(%esp)
+c0107ae0:	c0 
+c0107ae1:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107ae8:	c0 
+c0107ae9:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
+c0107af0:	00 
+c0107af1:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107af8:	e8 c4 92 ff ff       	call   c0100dc1 <__panic>
+c0107afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b00:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107b03:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107b06:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107b09:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107b0c:	8b 00                	mov    (%eax),%eax
+c0107b0e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0107b11:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0107b14:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0107b17:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107b1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107b1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107b20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107b23:	89 10                	mov    %edx,(%eax)
+c0107b25:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107b28:	8b 10                	mov    (%eax),%edx
+c0107b2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b2d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107b30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b33:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107b36:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b3c:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107b3f:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: 2012011268*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
+    return 0;
+c0107b41:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107b46:	c9                   	leave  
+c0107b47:	c3                   	ret    
+
+c0107b48 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0107b48:	55                   	push   %ebp
+c0107b49:	89 e5                	mov    %esp,%ebp
+c0107b4b:	83 ec 38             	sub    $0x38,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0107b4e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107b51:	8b 40 14             	mov    0x14(%eax),%eax
+c0107b54:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0107b57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107b5b:	75 24                	jne    c0107b81 <_fifo_swap_out_victim+0x39>
+c0107b5d:	c7 44 24 0c 37 dc 10 	movl   $0xc010dc37,0xc(%esp)
+c0107b64:	c0 
+c0107b65:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107b6c:	c0 
+c0107b6d:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
+c0107b74:	00 
+c0107b75:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107b7c:	e8 40 92 ff ff       	call   c0100dc1 <__panic>
+     assert(in_tick==0);
+c0107b81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107b85:	74 24                	je     c0107bab <_fifo_swap_out_victim+0x63>
+c0107b87:	c7 44 24 0c 44 dc 10 	movl   $0xc010dc44,0xc(%esp)
+c0107b8e:	c0 
+c0107b8f:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107b96:	c0 
+c0107b97:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
+c0107b9e:	00 
+c0107b9f:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107ba6:	e8 16 92 ff ff       	call   c0100dc1 <__panic>
+c0107bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107bae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107bb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107bb4:	8b 40 04             	mov    0x4(%eax),%eax
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: 2012011268*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = list_next(head);
+c0107bb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     assert(le != head);
+c0107bba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107bbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107bc0:	75 24                	jne    c0107be6 <_fifo_swap_out_victim+0x9e>
+c0107bc2:	c7 44 24 0c 4f dc 10 	movl   $0xc010dc4f,0xc(%esp)
+c0107bc9:	c0 
+c0107bca:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107bd1:	c0 
+c0107bd2:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c0107bd9:	00 
+c0107bda:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107be1:	e8 db 91 ff ff       	call   c0100dc1 <__panic>
+     struct Page *page = le2page(le, pra_page_link);
+c0107be6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107be9:	83 e8 14             	sub    $0x14,%eax
+c0107bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107bf8:	8b 40 04             	mov    0x4(%eax),%eax
+c0107bfb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107bfe:	8b 12                	mov    (%edx),%edx
+c0107c00:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0107c03:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107c06:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107c09:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107c0c:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107c0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107c12:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107c15:	89 10                	mov    %edx,(%eax)
+     list_del(le);
+     *ptr_page = page;
+c0107c17:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107c1a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107c1d:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0107c1f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107c24:	c9                   	leave  
+c0107c25:	c3                   	ret    
+
+c0107c26 <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c0107c26:	55                   	push   %ebp
+c0107c27:	89 e5                	mov    %esp,%ebp
+c0107c29:	83 ec 18             	sub    $0x18,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107c2c:	c7 04 24 5c dc 10 c0 	movl   $0xc010dc5c,(%esp)
+c0107c33:	e8 20 87 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107c38:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107c3d:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0107c40:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107c45:	83 f8 04             	cmp    $0x4,%eax
+c0107c48:	74 24                	je     c0107c6e <_fifo_check_swap+0x48>
+c0107c4a:	c7 44 24 0c 82 dc 10 	movl   $0xc010dc82,0xc(%esp)
+c0107c51:	c0 
+c0107c52:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107c59:	c0 
+c0107c5a:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
+c0107c61:	00 
+c0107c62:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107c69:	e8 53 91 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107c6e:	c7 04 24 94 dc 10 c0 	movl   $0xc010dc94,(%esp)
+c0107c75:	e8 de 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107c7a:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107c7f:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c0107c82:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107c87:	83 f8 04             	cmp    $0x4,%eax
+c0107c8a:	74 24                	je     c0107cb0 <_fifo_check_swap+0x8a>
+c0107c8c:	c7 44 24 0c 82 dc 10 	movl   $0xc010dc82,0xc(%esp)
+c0107c93:	c0 
+c0107c94:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107c9b:	c0 
+c0107c9c:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
+c0107ca3:	00 
+c0107ca4:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107cab:	e8 11 91 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107cb0:	c7 04 24 bc dc 10 c0 	movl   $0xc010dcbc,(%esp)
+c0107cb7:	e8 9c 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107cbc:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107cc1:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c0107cc4:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107cc9:	83 f8 04             	cmp    $0x4,%eax
+c0107ccc:	74 24                	je     c0107cf2 <_fifo_check_swap+0xcc>
+c0107cce:	c7 44 24 0c 82 dc 10 	movl   $0xc010dc82,0xc(%esp)
+c0107cd5:	c0 
+c0107cd6:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107cdd:	c0 
+c0107cde:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
+c0107ce5:	00 
+c0107ce6:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107ced:	e8 cf 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107cf2:	c7 04 24 e4 dc 10 c0 	movl   $0xc010dce4,(%esp)
+c0107cf9:	e8 5a 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107cfe:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107d03:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c0107d06:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107d0b:	83 f8 04             	cmp    $0x4,%eax
+c0107d0e:	74 24                	je     c0107d34 <_fifo_check_swap+0x10e>
+c0107d10:	c7 44 24 0c 82 dc 10 	movl   $0xc010dc82,0xc(%esp)
+c0107d17:	c0 
+c0107d18:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107d1f:	c0 
+c0107d20:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
+c0107d27:	00 
+c0107d28:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107d2f:	e8 8d 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107d34:	c7 04 24 0c dd 10 c0 	movl   $0xc010dd0c,(%esp)
+c0107d3b:	e8 18 86 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107d40:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107d45:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c0107d48:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107d4d:	83 f8 05             	cmp    $0x5,%eax
+c0107d50:	74 24                	je     c0107d76 <_fifo_check_swap+0x150>
+c0107d52:	c7 44 24 0c 32 dd 10 	movl   $0xc010dd32,0xc(%esp)
+c0107d59:	c0 
+c0107d5a:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107d61:	c0 
+c0107d62:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
+c0107d69:	00 
+c0107d6a:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107d71:	e8 4b 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107d76:	c7 04 24 e4 dc 10 c0 	movl   $0xc010dce4,(%esp)
+c0107d7d:	e8 d6 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107d82:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107d87:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c0107d8a:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107d8f:	83 f8 05             	cmp    $0x5,%eax
+c0107d92:	74 24                	je     c0107db8 <_fifo_check_swap+0x192>
+c0107d94:	c7 44 24 0c 32 dd 10 	movl   $0xc010dd32,0xc(%esp)
+c0107d9b:	c0 
+c0107d9c:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107da3:	c0 
+c0107da4:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
+c0107dab:	00 
+c0107dac:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107db3:	e8 09 90 ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107db8:	c7 04 24 94 dc 10 c0 	movl   $0xc010dc94,(%esp)
+c0107dbf:	e8 94 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107dc4:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107dc9:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c0107dcc:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107dd1:	83 f8 06             	cmp    $0x6,%eax
+c0107dd4:	74 24                	je     c0107dfa <_fifo_check_swap+0x1d4>
+c0107dd6:	c7 44 24 0c 41 dd 10 	movl   $0xc010dd41,0xc(%esp)
+c0107ddd:	c0 
+c0107dde:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107de5:	c0 
+c0107de6:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0107ded:	00 
+c0107dee:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107df5:	e8 c7 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0107dfa:	c7 04 24 e4 dc 10 c0 	movl   $0xc010dce4,(%esp)
+c0107e01:	e8 52 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0107e06:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0107e0b:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c0107e0e:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107e13:	83 f8 07             	cmp    $0x7,%eax
+c0107e16:	74 24                	je     c0107e3c <_fifo_check_swap+0x216>
+c0107e18:	c7 44 24 0c 50 dd 10 	movl   $0xc010dd50,0xc(%esp)
+c0107e1f:	c0 
+c0107e20:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107e27:	c0 
+c0107e28:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
+c0107e2f:	00 
+c0107e30:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107e37:	e8 85 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0107e3c:	c7 04 24 5c dc 10 c0 	movl   $0xc010dc5c,(%esp)
+c0107e43:	e8 10 85 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c0107e48:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107e4d:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c0107e50:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107e55:	83 f8 08             	cmp    $0x8,%eax
+c0107e58:	74 24                	je     c0107e7e <_fifo_check_swap+0x258>
+c0107e5a:	c7 44 24 0c 5f dd 10 	movl   $0xc010dd5f,0xc(%esp)
+c0107e61:	c0 
+c0107e62:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107e69:	c0 
+c0107e6a:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c0107e71:	00 
+c0107e72:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107e79:	e8 43 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0107e7e:	c7 04 24 bc dc 10 c0 	movl   $0xc010dcbc,(%esp)
+c0107e85:	e8 ce 84 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0107e8a:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107e8f:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c0107e92:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107e97:	83 f8 09             	cmp    $0x9,%eax
+c0107e9a:	74 24                	je     c0107ec0 <_fifo_check_swap+0x29a>
+c0107e9c:	c7 44 24 0c 6e dd 10 	movl   $0xc010dd6e,0xc(%esp)
+c0107ea3:	c0 
+c0107ea4:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107eab:	c0 
+c0107eac:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
+c0107eb3:	00 
+c0107eb4:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107ebb:	e8 01 8f ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0107ec0:	c7 04 24 0c dd 10 c0 	movl   $0xc010dd0c,(%esp)
+c0107ec7:	e8 8c 84 ff ff       	call   c0100358 <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0107ecc:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0107ed1:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c0107ed4:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107ed9:	83 f8 0a             	cmp    $0xa,%eax
+c0107edc:	74 24                	je     c0107f02 <_fifo_check_swap+0x2dc>
+c0107ede:	c7 44 24 0c 7d dd 10 	movl   $0xc010dd7d,0xc(%esp)
+c0107ee5:	c0 
+c0107ee6:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107eed:	c0 
+c0107eee:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
+c0107ef5:	00 
+c0107ef6:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107efd:	e8 bf 8e ff ff       	call   c0100dc1 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0107f02:	c7 04 24 94 dc 10 c0 	movl   $0xc010dc94,(%esp)
+c0107f09:	e8 4a 84 ff ff       	call   c0100358 <cprintf>
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0107f0e:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107f13:	0f b6 00             	movzbl (%eax),%eax
+c0107f16:	3c 0a                	cmp    $0xa,%al
+c0107f18:	74 24                	je     c0107f3e <_fifo_check_swap+0x318>
+c0107f1a:	c7 44 24 0c 90 dd 10 	movl   $0xc010dd90,0xc(%esp)
+c0107f21:	c0 
+c0107f22:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107f29:	c0 
+c0107f2a:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c0107f31:	00 
+c0107f32:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107f39:	e8 83 8e ff ff       	call   c0100dc1 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0107f3e:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107f43:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c0107f46:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0107f4b:	83 f8 0b             	cmp    $0xb,%eax
+c0107f4e:	74 24                	je     c0107f74 <_fifo_check_swap+0x34e>
+c0107f50:	c7 44 24 0c b1 dd 10 	movl   $0xc010ddb1,0xc(%esp)
+c0107f57:	c0 
+c0107f58:	c7 44 24 08 0e dc 10 	movl   $0xc010dc0e,0x8(%esp)
+c0107f5f:	c0 
+c0107f60:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
+c0107f67:	00 
+c0107f68:	c7 04 24 23 dc 10 c0 	movl   $0xc010dc23,(%esp)
+c0107f6f:	e8 4d 8e ff ff       	call   c0100dc1 <__panic>
+    return 0;
+c0107f74:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f79:	c9                   	leave  
+c0107f7a:	c3                   	ret    
+
+c0107f7b <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c0107f7b:	55                   	push   %ebp
+c0107f7c:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107f7e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f83:	5d                   	pop    %ebp
+c0107f84:	c3                   	ret    
+
+c0107f85 <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0107f85:	55                   	push   %ebp
+c0107f86:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0107f88:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107f8d:	5d                   	pop    %ebp
+c0107f8e:	c3                   	ret    
+
+c0107f8f <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c0107f8f:	55                   	push   %ebp
+c0107f90:	89 e5                	mov    %esp,%ebp
+c0107f92:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107f97:	5d                   	pop    %ebp
+c0107f98:	c3                   	ret    
+
+c0107f99 <lock_init>:
+#define local_intr_restore(x)   __intr_restore(x);
+
+typedef volatile bool lock_t;
+
+static inline void
+lock_init(lock_t *lock) {
+c0107f99:	55                   	push   %ebp
+c0107f9a:	89 e5                	mov    %esp,%ebp
+    *lock = 0;
+c0107f9c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+}
+c0107fa5:	5d                   	pop    %ebp
+c0107fa6:	c3                   	ret    
+
+c0107fa7 <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c0107fa7:	55                   	push   %ebp
+c0107fa8:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c0107faa:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fad:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0107fb0:	5d                   	pop    %ebp
+c0107fb1:	c3                   	ret    
+
+c0107fb2 <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c0107fb2:	55                   	push   %ebp
+c0107fb3:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c0107fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fb8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107fbb:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c0107fbe:	5d                   	pop    %ebp
+c0107fbf:	c3                   	ret    
+
+c0107fc0 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0107fc0:	55                   	push   %ebp
+c0107fc1:	89 e5                	mov    %esp,%ebp
+c0107fc3:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0107fc6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fc9:	c1 e8 0c             	shr    $0xc,%eax
+c0107fcc:	89 c2                	mov    %eax,%edx
+c0107fce:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0107fd3:	39 c2                	cmp    %eax,%edx
+c0107fd5:	72 1c                	jb     c0107ff3 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0107fd7:	c7 44 24 08 d4 dd 10 	movl   $0xc010ddd4,0x8(%esp)
+c0107fde:	c0 
+c0107fdf:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0107fe6:	00 
+c0107fe7:	c7 04 24 f3 dd 10 c0 	movl   $0xc010ddf3,(%esp)
+c0107fee:	e8 ce 8d ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0107ff3:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0107ff8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0107ffb:	c1 ea 0c             	shr    $0xc,%edx
+c0107ffe:	c1 e2 05             	shl    $0x5,%edx
+c0108001:	01 d0                	add    %edx,%eax
+}
+c0108003:	c9                   	leave  
+c0108004:	c3                   	ret    
+
+c0108005 <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0108005:	55                   	push   %ebp
+c0108006:	89 e5                	mov    %esp,%ebp
+c0108008:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c010800b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010800e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108013:	89 04 24             	mov    %eax,(%esp)
+c0108016:	e8 a5 ff ff ff       	call   c0107fc0 <pa2page>
+}
+c010801b:	c9                   	leave  
+c010801c:	c3                   	ret    
+
+c010801d <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c010801d:	55                   	push   %ebp
+c010801e:	89 e5                	mov    %esp,%ebp
+c0108020:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c0108023:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010802a:	e8 1c cd ff ff       	call   c0104d4b <kmalloc>
+c010802f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c0108032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108036:	74 79                	je     c01080b1 <mm_create+0x94>
+        list_init(&(mm->mmap_list));
+c0108038:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010803b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010803e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108041:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108044:	89 50 04             	mov    %edx,0x4(%eax)
+c0108047:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010804a:	8b 50 04             	mov    0x4(%eax),%edx
+c010804d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108050:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c0108052:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108055:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c010805c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010805f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c0108066:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108069:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c0108070:	a1 0c ee 1a c0       	mov    0xc01aee0c,%eax
+c0108075:	85 c0                	test   %eax,%eax
+c0108077:	74 0d                	je     c0108086 <mm_create+0x69>
+c0108079:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010807c:	89 04 24             	mov    %eax,(%esp)
+c010807f:	e8 c2 ee ff ff       	call   c0106f46 <swap_init_mm>
+c0108084:	eb 0a                	jmp    c0108090 <mm_create+0x73>
+        else mm->sm_priv = NULL;
+c0108086:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108089:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        
+        set_mm_count(mm, 0);
+c0108090:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0108097:	00 
+c0108098:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010809b:	89 04 24             	mov    %eax,(%esp)
+c010809e:	e8 0f ff ff ff       	call   c0107fb2 <set_mm_count>
+        lock_init(&(mm->mm_lock));
+c01080a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080a6:	83 c0 1c             	add    $0x1c,%eax
+c01080a9:	89 04 24             	mov    %eax,(%esp)
+c01080ac:	e8 e8 fe ff ff       	call   c0107f99 <lock_init>
+    }    
+    return mm;
+c01080b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01080b4:	c9                   	leave  
+c01080b5:	c3                   	ret    
+
+c01080b6 <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c01080b6:	55                   	push   %ebp
+c01080b7:	89 e5                	mov    %esp,%ebp
+c01080b9:	83 ec 28             	sub    $0x28,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c01080bc:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
+c01080c3:	e8 83 cc ff ff       	call   c0104d4b <kmalloc>
+c01080c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c01080cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01080cf:	74 1b                	je     c01080ec <vma_create+0x36>
+        vma->vm_start = vm_start;
+c01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080d4:	8b 55 08             	mov    0x8(%ebp),%edx
+c01080d7:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c01080da:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080dd:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01080e0:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c01080e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01080e6:	8b 55 10             	mov    0x10(%ebp),%edx
+c01080e9:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c01080ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01080ef:	c9                   	leave  
+c01080f0:	c3                   	ret    
+
+c01080f1 <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c01080f1:	55                   	push   %ebp
+c01080f2:	89 e5                	mov    %esp,%ebp
+c01080f4:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c01080f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c01080fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108102:	0f 84 95 00 00 00    	je     c010819d <find_vma+0xac>
+        vma = mm->mmap_cache;
+c0108108:	8b 45 08             	mov    0x8(%ebp),%eax
+c010810b:	8b 40 08             	mov    0x8(%eax),%eax
+c010810e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c0108111:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108115:	74 16                	je     c010812d <find_vma+0x3c>
+c0108117:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010811a:	8b 40 04             	mov    0x4(%eax),%eax
+c010811d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0108120:	77 0b                	ja     c010812d <find_vma+0x3c>
+c0108122:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108125:	8b 40 08             	mov    0x8(%eax),%eax
+c0108128:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010812b:	77 61                	ja     c010818e <find_vma+0x9d>
+                bool found = 0;
+c010812d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c0108134:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108137:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010813a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010813d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c0108140:	eb 28                	jmp    c010816a <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c0108142:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108145:	83 e8 10             	sub    $0x10,%eax
+c0108148:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c010814b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010814e:	8b 40 04             	mov    0x4(%eax),%eax
+c0108151:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0108154:	77 14                	ja     c010816a <find_vma+0x79>
+c0108156:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108159:	8b 40 08             	mov    0x8(%eax),%eax
+c010815c:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010815f:	76 09                	jbe    c010816a <find_vma+0x79>
+                        found = 1;
+c0108161:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c0108168:	eb 17                	jmp    c0108181 <find_vma+0x90>
+c010816a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010816d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108170:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108173:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c0108176:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108179:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010817c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010817f:	75 c1                	jne    c0108142 <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c0108181:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c0108185:	75 07                	jne    c010818e <find_vma+0x9d>
+                    vma = NULL;
+c0108187:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c010818e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108192:	74 09                	je     c010819d <find_vma+0xac>
+            mm->mmap_cache = vma;
+c0108194:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108197:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010819a:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c010819d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01081a0:	c9                   	leave  
+c01081a1:	c3                   	ret    
+
+c01081a2 <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c01081a2:	55                   	push   %ebp
+c01081a3:	89 e5                	mov    %esp,%ebp
+c01081a5:	83 ec 18             	sub    $0x18,%esp
+    assert(prev->vm_start < prev->vm_end);
+c01081a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081ab:	8b 50 04             	mov    0x4(%eax),%edx
+c01081ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081b1:	8b 40 08             	mov    0x8(%eax),%eax
+c01081b4:	39 c2                	cmp    %eax,%edx
+c01081b6:	72 24                	jb     c01081dc <check_vma_overlap+0x3a>
+c01081b8:	c7 44 24 0c 01 de 10 	movl   $0xc010de01,0xc(%esp)
+c01081bf:	c0 
+c01081c0:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c01081c7:	c0 
+c01081c8:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c01081cf:	00 
+c01081d0:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c01081d7:	e8 e5 8b ff ff       	call   c0100dc1 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c01081dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081df:	8b 50 08             	mov    0x8(%eax),%edx
+c01081e2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01081e5:	8b 40 04             	mov    0x4(%eax),%eax
+c01081e8:	39 c2                	cmp    %eax,%edx
+c01081ea:	76 24                	jbe    c0108210 <check_vma_overlap+0x6e>
+c01081ec:	c7 44 24 0c 44 de 10 	movl   $0xc010de44,0xc(%esp)
+c01081f3:	c0 
+c01081f4:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c01081fb:	c0 
+c01081fc:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
+c0108203:	00 
+c0108204:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010820b:	e8 b1 8b ff ff       	call   c0100dc1 <__panic>
+    assert(next->vm_start < next->vm_end);
+c0108210:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108213:	8b 50 04             	mov    0x4(%eax),%edx
+c0108216:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108219:	8b 40 08             	mov    0x8(%eax),%eax
+c010821c:	39 c2                	cmp    %eax,%edx
+c010821e:	72 24                	jb     c0108244 <check_vma_overlap+0xa2>
+c0108220:	c7 44 24 0c 63 de 10 	movl   $0xc010de63,0xc(%esp)
+c0108227:	c0 
+c0108228:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010822f:	c0 
+c0108230:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
+c0108237:	00 
+c0108238:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010823f:	e8 7d 8b ff ff       	call   c0100dc1 <__panic>
+}
+c0108244:	c9                   	leave  
+c0108245:	c3                   	ret    
+
+c0108246 <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c0108246:	55                   	push   %ebp
+c0108247:	89 e5                	mov    %esp,%ebp
+c0108249:	83 ec 48             	sub    $0x48,%esp
+    assert(vma->vm_start < vma->vm_end);
+c010824c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010824f:	8b 50 04             	mov    0x4(%eax),%edx
+c0108252:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108255:	8b 40 08             	mov    0x8(%eax),%eax
+c0108258:	39 c2                	cmp    %eax,%edx
+c010825a:	72 24                	jb     c0108280 <insert_vma_struct+0x3a>
+c010825c:	c7 44 24 0c 81 de 10 	movl   $0xc010de81,0xc(%esp)
+c0108263:	c0 
+c0108264:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010826b:	c0 
+c010826c:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
+c0108273:	00 
+c0108274:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010827b:	e8 41 8b ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c0108280:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108283:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c0108286:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108289:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c010828c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010828f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c0108292:	eb 21                	jmp    c01082b5 <insert_vma_struct+0x6f>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c0108294:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108297:	83 e8 10             	sub    $0x10,%eax
+c010829a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c010829d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01082a0:	8b 50 04             	mov    0x4(%eax),%edx
+c01082a3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01082a6:	8b 40 04             	mov    0x4(%eax),%eax
+c01082a9:	39 c2                	cmp    %eax,%edx
+c01082ab:	76 02                	jbe    c01082af <insert_vma_struct+0x69>
+                break;
+c01082ad:	eb 1d                	jmp    c01082cc <insert_vma_struct+0x86>
+            }
+            le_prev = le;
+c01082af:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01082b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01082bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01082be:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c01082c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01082c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082ca:	75 c8                	jne    c0108294 <insert_vma_struct+0x4e>
+c01082cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01082d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01082d5:	8b 40 04             	mov    0x4(%eax),%eax
+                break;
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c01082d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c01082db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082de:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082e1:	74 15                	je     c01082f8 <insert_vma_struct+0xb2>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c01082e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01082e6:	8d 50 f0             	lea    -0x10(%eax),%edx
+c01082e9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01082ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01082f0:	89 14 24             	mov    %edx,(%esp)
+c01082f3:	e8 aa fe ff ff       	call   c01081a2 <check_vma_overlap>
+    }
+    if (le_next != list) {
+c01082f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01082fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01082fe:	74 15                	je     c0108315 <insert_vma_struct+0xcf>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c0108300:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108303:	83 e8 10             	sub    $0x10,%eax
+c0108306:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010830a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010830d:	89 04 24             	mov    %eax,(%esp)
+c0108310:	e8 8d fe ff ff       	call   c01081a2 <check_vma_overlap>
+    }
+
+    vma->vm_mm = mm;
+c0108315:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108318:	8b 55 08             	mov    0x8(%ebp),%edx
+c010831b:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c010831d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108320:	8d 50 10             	lea    0x10(%eax),%edx
+c0108323:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108326:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108329:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010832c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010832f:	8b 40 04             	mov    0x4(%eax),%eax
+c0108332:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108335:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0108338:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010833b:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c010833e:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0108341:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0108344:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0108347:	89 10                	mov    %edx,(%eax)
+c0108349:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010834c:	8b 10                	mov    (%eax),%edx
+c010834e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108351:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0108354:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108357:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c010835a:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010835d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108360:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0108363:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c0108365:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108368:	8b 40 10             	mov    0x10(%eax),%eax
+c010836b:	8d 50 01             	lea    0x1(%eax),%edx
+c010836e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108371:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c0108374:	c9                   	leave  
+c0108375:	c3                   	ret    
+
+c0108376 <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c0108376:	55                   	push   %ebp
+c0108377:	89 e5                	mov    %esp,%ebp
+c0108379:	83 ec 38             	sub    $0x38,%esp
+    assert(mm_count(mm) == 0);
+c010837c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010837f:	89 04 24             	mov    %eax,(%esp)
+c0108382:	e8 20 fc ff ff       	call   c0107fa7 <mm_count>
+c0108387:	85 c0                	test   %eax,%eax
+c0108389:	74 24                	je     c01083af <mm_destroy+0x39>
+c010838b:	c7 44 24 0c 9d de 10 	movl   $0xc010de9d,0xc(%esp)
+c0108392:	c0 
+c0108393:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010839a:	c0 
+c010839b:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c01083a2:	00 
+c01083a3:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c01083aa:	e8 12 8a ff ff       	call   c0100dc1 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c01083af:	8b 45 08             	mov    0x8(%ebp),%eax
+c01083b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c01083b5:	eb 36                	jmp    c01083ed <mm_destroy+0x77>
+c01083b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01083bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01083c0:	8b 40 04             	mov    0x4(%eax),%eax
+c01083c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01083c6:	8b 12                	mov    (%edx),%edx
+c01083c8:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c01083cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01083ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01083d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01083d4:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01083d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01083da:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01083dd:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+c01083df:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083e2:	83 e8 10             	sub    $0x10,%eax
+c01083e5:	89 04 24             	mov    %eax,(%esp)
+c01083e8:	e8 79 c9 ff ff       	call   c0104d66 <kfree>
+c01083ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01083f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01083f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01083f6:	8b 40 04             	mov    0x4(%eax),%eax
+void
+mm_destroy(struct mm_struct *mm) {
+    assert(mm_count(mm) == 0);
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c01083f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01083fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0108402:	75 b3                	jne    c01083b7 <mm_destroy+0x41>
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+    }
+    kfree(mm); //kfree mm
+c0108404:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108407:	89 04 24             	mov    %eax,(%esp)
+c010840a:	e8 57 c9 ff ff       	call   c0104d66 <kfree>
+    mm=NULL;
+c010840f:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0108416:	c9                   	leave  
+c0108417:	c3                   	ret    
+
+c0108418 <mm_map>:
+
+int
+mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+       struct vma_struct **vma_store) {
+c0108418:	55                   	push   %ebp
+c0108419:	89 e5                	mov    %esp,%ebp
+c010841b:	83 ec 38             	sub    $0x38,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c010841e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108421:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108424:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108427:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010842c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010842f:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c0108436:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108439:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010843c:	01 c2                	add    %eax,%edx
+c010843e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108441:	01 d0                	add    %edx,%eax
+c0108443:	83 e8 01             	sub    $0x1,%eax
+c0108446:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010844c:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108451:	f7 75 e8             	divl   -0x18(%ebp)
+c0108454:	89 d0                	mov    %edx,%eax
+c0108456:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108459:	29 c2                	sub    %eax,%edx
+c010845b:	89 d0                	mov    %edx,%eax
+c010845d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end)) {
+c0108460:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c0108467:	76 11                	jbe    c010847a <mm_map+0x62>
+c0108469:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010846c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c010846f:	73 09                	jae    c010847a <mm_map+0x62>
+c0108471:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c0108478:	76 0a                	jbe    c0108484 <mm_map+0x6c>
+        return -E_INVAL;
+c010847a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010847f:	e9 ae 00 00 00       	jmp    c0108532 <mm_map+0x11a>
+    }
+
+    assert(mm != NULL);
+c0108484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108488:	75 24                	jne    c01084ae <mm_map+0x96>
+c010848a:	c7 44 24 0c af de 10 	movl   $0xc010deaf,0xc(%esp)
+c0108491:	c0 
+c0108492:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108499:	c0 
+c010849a:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c01084a1:	00 
+c01084a2:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c01084a9:	e8 13 89 ff ff       	call   c0100dc1 <__panic>
+
+    int ret = -E_INVAL;
+c01084ae:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+c01084b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084b8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01084bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01084bf:	89 04 24             	mov    %eax,(%esp)
+c01084c2:	e8 2a fc ff ff       	call   c01080f1 <find_vma>
+c01084c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01084ca:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01084ce:	74 0d                	je     c01084dd <mm_map+0xc5>
+c01084d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01084d3:	8b 40 04             	mov    0x4(%eax),%eax
+c01084d6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01084d9:	73 02                	jae    c01084dd <mm_map+0xc5>
+        goto out;
+c01084db:	eb 52                	jmp    c010852f <mm_map+0x117>
+    }
+    ret = -E_NO_MEM;
+c01084dd:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+c01084e4:	8b 45 14             	mov    0x14(%ebp),%eax
+c01084e7:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01084eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01084ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01084f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01084f5:	89 04 24             	mov    %eax,(%esp)
+c01084f8:	e8 b9 fb ff ff       	call   c01080b6 <vma_create>
+c01084fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108500:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0108504:	75 02                	jne    c0108508 <mm_map+0xf0>
+        goto out;
+c0108506:	eb 27                	jmp    c010852f <mm_map+0x117>
+    }
+    insert_vma_struct(mm, vma);
+c0108508:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010850b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010850f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108512:	89 04 24             	mov    %eax,(%esp)
+c0108515:	e8 2c fd ff ff       	call   c0108246 <insert_vma_struct>
+    if (vma_store != NULL) {
+c010851a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c010851e:	74 08                	je     c0108528 <mm_map+0x110>
+        *vma_store = vma;
+c0108520:	8b 45 18             	mov    0x18(%ebp),%eax
+c0108523:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0108526:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c0108528:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+out:
+    return ret;
+c010852f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108532:	c9                   	leave  
+c0108533:	c3                   	ret    
+
+c0108534 <dup_mmap>:
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+c0108534:	55                   	push   %ebp
+c0108535:	89 e5                	mov    %esp,%ebp
+c0108537:	56                   	push   %esi
+c0108538:	53                   	push   %ebx
+c0108539:	83 ec 40             	sub    $0x40,%esp
+    assert(to != NULL && from != NULL);
+c010853c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108540:	74 06                	je     c0108548 <dup_mmap+0x14>
+c0108542:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0108546:	75 24                	jne    c010856c <dup_mmap+0x38>
+c0108548:	c7 44 24 0c ba de 10 	movl   $0xc010deba,0xc(%esp)
+c010854f:	c0 
+c0108550:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108557:	c0 
+c0108558:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
+c010855f:	00 
+c0108560:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108567:	e8 55 88 ff ff       	call   c0100dc1 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c010856c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010856f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108572:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108575:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list) {
+c0108578:	e9 92 00 00 00       	jmp    c010860f <dup_mmap+0xdb>
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c010857d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108580:	83 e8 10             	sub    $0x10,%eax
+c0108583:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c0108586:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108589:	8b 48 0c             	mov    0xc(%eax),%ecx
+c010858c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010858f:	8b 50 08             	mov    0x8(%eax),%edx
+c0108592:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108595:	8b 40 04             	mov    0x4(%eax),%eax
+c0108598:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c010859c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01085a0:	89 04 24             	mov    %eax,(%esp)
+c01085a3:	e8 0e fb ff ff       	call   c01080b6 <vma_create>
+c01085a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL) {
+c01085ab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01085af:	75 07                	jne    c01085b8 <dup_mmap+0x84>
+            return -E_NO_MEM;
+c01085b1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01085b6:	eb 76                	jmp    c010862e <dup_mmap+0xfa>
+        }
+
+        insert_vma_struct(to, nvma);
+c01085b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01085bb:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01085bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085c2:	89 04 24             	mov    %eax,(%esp)
+c01085c5:	e8 7c fc ff ff       	call   c0108246 <insert_vma_struct>
+
+        bool share = 0;
+c01085ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+c01085d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01085d4:	8b 58 08             	mov    0x8(%eax),%ebx
+c01085d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01085da:	8b 48 04             	mov    0x4(%eax),%ecx
+c01085dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01085e0:	8b 50 0c             	mov    0xc(%eax),%edx
+c01085e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085e6:	8b 40 0c             	mov    0xc(%eax),%eax
+c01085e9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+c01085ec:	89 74 24 10          	mov    %esi,0x10(%esp)
+c01085f0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01085f4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01085f8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01085fc:	89 04 24             	mov    %eax,(%esp)
+c01085ff:	e8 10 d7 ff ff       	call   c0105d14 <copy_range>
+c0108604:	85 c0                	test   %eax,%eax
+c0108606:	74 07                	je     c010860f <dup_mmap+0xdb>
+            return -E_NO_MEM;
+c0108608:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c010860d:	eb 1f                	jmp    c010862e <dup_mmap+0xfa>
+c010860f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108612:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0108615:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108618:	8b 00                	mov    (%eax),%eax
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+    assert(to != NULL && from != NULL);
+    list_entry_t *list = &(from->mmap_list), *le = list;
+    while ((le = list_prev(le)) != list) {
+c010861a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010861d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108620:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108623:	0f 85 54 ff ff ff    	jne    c010857d <dup_mmap+0x49>
+        bool share = 0;
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+            return -E_NO_MEM;
+        }
+    }
+    return 0;
+c0108629:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010862e:	83 c4 40             	add    $0x40,%esp
+c0108631:	5b                   	pop    %ebx
+c0108632:	5e                   	pop    %esi
+c0108633:	5d                   	pop    %ebp
+c0108634:	c3                   	ret    
+
+c0108635 <exit_mmap>:
+
+void
+exit_mmap(struct mm_struct *mm) {
+c0108635:	55                   	push   %ebp
+c0108636:	89 e5                	mov    %esp,%ebp
+c0108638:	83 ec 38             	sub    $0x38,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c010863b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010863f:	74 0f                	je     c0108650 <exit_mmap+0x1b>
+c0108641:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108644:	89 04 24             	mov    %eax,(%esp)
+c0108647:	e8 5b f9 ff ff       	call   c0107fa7 <mm_count>
+c010864c:	85 c0                	test   %eax,%eax
+c010864e:	74 24                	je     c0108674 <exit_mmap+0x3f>
+c0108650:	c7 44 24 0c d8 de 10 	movl   $0xc010ded8,0xc(%esp)
+c0108657:	c0 
+c0108658:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010865f:	c0 
+c0108660:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0108667:	00 
+c0108668:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010866f:	e8 4d 87 ff ff       	call   c0100dc1 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c0108674:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108677:	8b 40 0c             	mov    0xc(%eax),%eax
+c010867a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c010867d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108680:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108683:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108686:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list) {
+c0108689:	eb 28                	jmp    c01086b3 <exit_mmap+0x7e>
+        struct vma_struct *vma = le2vma(le, list_link);
+c010868b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010868e:	83 e8 10             	sub    $0x10,%eax
+c0108691:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c0108694:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108697:	8b 50 08             	mov    0x8(%eax),%edx
+c010869a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010869d:	8b 40 04             	mov    0x4(%eax),%eax
+c01086a0:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01086a4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01086a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01086ab:	89 04 24             	mov    %eax,(%esp)
+c01086ae:	e8 66 d4 ff ff       	call   c0105b19 <unmap_range>
+c01086b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01086b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01086bc:	8b 40 04             	mov    0x4(%eax),%eax
+void
+exit_mmap(struct mm_struct *mm) {
+    assert(mm != NULL && mm_count(mm) == 0);
+    pde_t *pgdir = mm->pgdir;
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+c01086bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01086c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086c5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01086c8:	75 c1                	jne    c010868b <exit_mmap+0x56>
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c01086ca:	eb 28                	jmp    c01086f4 <exit_mmap+0xbf>
+        struct vma_struct *vma = le2vma(le, list_link);
+c01086cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086cf:	83 e8 10             	sub    $0x10,%eax
+c01086d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c01086d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01086d8:	8b 50 08             	mov    0x8(%eax),%edx
+c01086db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01086de:	8b 40 04             	mov    0x4(%eax),%eax
+c01086e1:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01086e5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01086e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01086ec:	89 04 24             	mov    %eax,(%esp)
+c01086ef:	e8 19 d5 ff ff       	call   c0105c0d <exit_range>
+c01086f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01086fd:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0108700:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108703:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108706:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108709:	75 c1                	jne    c01086cc <exit_mmap+0x97>
+        struct vma_struct *vma = le2vma(le, list_link);
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+}
+c010870b:	c9                   	leave  
+c010870c:	c3                   	ret    
+
+c010870d <copy_from_user>:
+
+bool
+copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
+c010870d:	55                   	push   %ebp
+c010870e:	89 e5                	mov    %esp,%ebp
+c0108710:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+c0108713:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108716:	8b 55 18             	mov    0x18(%ebp),%edx
+c0108719:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010871d:	8b 55 14             	mov    0x14(%ebp),%edx
+c0108720:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108724:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108728:	8b 45 08             	mov    0x8(%ebp),%eax
+c010872b:	89 04 24             	mov    %eax,(%esp)
+c010872e:	e8 73 09 00 00       	call   c01090a6 <user_mem_check>
+c0108733:	85 c0                	test   %eax,%eax
+c0108735:	75 07                	jne    c010873e <copy_from_user+0x31>
+        return 0;
+c0108737:	b8 00 00 00 00       	mov    $0x0,%eax
+c010873c:	eb 1e                	jmp    c010875c <copy_from_user+0x4f>
+    }
+    memcpy(dst, src, len);
+c010873e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108741:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108745:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108748:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010874c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010874f:	89 04 24             	mov    %eax,(%esp)
+c0108752:	e8 22 3b 00 00       	call   c010c279 <memcpy>
+    return 1;
+c0108757:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c010875c:	c9                   	leave  
+c010875d:	c3                   	ret    
+
+c010875e <copy_to_user>:
+
+bool
+copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
+c010875e:	55                   	push   %ebp
+c010875f:	89 e5                	mov    %esp,%ebp
+c0108761:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+c0108764:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108767:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c010876e:	00 
+c010876f:	8b 55 14             	mov    0x14(%ebp),%edx
+c0108772:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108776:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010877a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010877d:	89 04 24             	mov    %eax,(%esp)
+c0108780:	e8 21 09 00 00       	call   c01090a6 <user_mem_check>
+c0108785:	85 c0                	test   %eax,%eax
+c0108787:	75 07                	jne    c0108790 <copy_to_user+0x32>
+        return 0;
+c0108789:	b8 00 00 00 00       	mov    $0x0,%eax
+c010878e:	eb 1e                	jmp    c01087ae <copy_to_user+0x50>
+    }
+    memcpy(dst, src, len);
+c0108790:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108793:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108797:	8b 45 10             	mov    0x10(%ebp),%eax
+c010879a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010879e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01087a1:	89 04 24             	mov    %eax,(%esp)
+c01087a4:	e8 d0 3a 00 00       	call   c010c279 <memcpy>
+    return 1;
+c01087a9:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01087ae:	c9                   	leave  
+c01087af:	c3                   	ret    
+
+c01087b0 <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c01087b0:	55                   	push   %ebp
+c01087b1:	89 e5                	mov    %esp,%ebp
+c01087b3:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c01087b6:	e8 02 00 00 00       	call   c01087bd <check_vmm>
+}
+c01087bb:	c9                   	leave  
+c01087bc:	c3                   	ret    
+
+c01087bd <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c01087bd:	55                   	push   %ebp
+c01087be:	89 e5                	mov    %esp,%ebp
+c01087c0:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01087c3:	e8 95 ca ff ff       	call   c010525d <nr_free_pages>
+c01087c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c01087cb:	e8 13 00 00 00       	call   c01087e3 <check_vma_struct>
+    check_pgfault();
+c01087d0:	e8 a7 04 00 00       	call   c0108c7c <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c01087d5:	c7 04 24 f8 de 10 c0 	movl   $0xc010def8,(%esp)
+c01087dc:	e8 77 7b ff ff       	call   c0100358 <cprintf>
+}
+c01087e1:	c9                   	leave  
+c01087e2:	c3                   	ret    
+
+c01087e3 <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c01087e3:	55                   	push   %ebp
+c01087e4:	89 e5                	mov    %esp,%ebp
+c01087e6:	83 ec 68             	sub    $0x68,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01087e9:	e8 6f ca ff ff       	call   c010525d <nr_free_pages>
+c01087ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c01087f1:	e8 27 f8 ff ff       	call   c010801d <mm_create>
+c01087f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c01087f9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01087fd:	75 24                	jne    c0108823 <check_vma_struct+0x40>
+c01087ff:	c7 44 24 0c af de 10 	movl   $0xc010deaf,0xc(%esp)
+c0108806:	c0 
+c0108807:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010880e:	c0 
+c010880f:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
+c0108816:	00 
+c0108817:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010881e:	e8 9e 85 ff ff       	call   c0100dc1 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c0108823:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c010882a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010882d:	89 d0                	mov    %edx,%eax
+c010882f:	c1 e0 02             	shl    $0x2,%eax
+c0108832:	01 d0                	add    %edx,%eax
+c0108834:	01 c0                	add    %eax,%eax
+c0108836:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0108839:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010883c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010883f:	eb 70                	jmp    c01088b1 <check_vma_struct+0xce>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0108841:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108844:	89 d0                	mov    %edx,%eax
+c0108846:	c1 e0 02             	shl    $0x2,%eax
+c0108849:	01 d0                	add    %edx,%eax
+c010884b:	83 c0 02             	add    $0x2,%eax
+c010884e:	89 c1                	mov    %eax,%ecx
+c0108850:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108853:	89 d0                	mov    %edx,%eax
+c0108855:	c1 e0 02             	shl    $0x2,%eax
+c0108858:	01 d0                	add    %edx,%eax
+c010885a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0108861:	00 
+c0108862:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0108866:	89 04 24             	mov    %eax,(%esp)
+c0108869:	e8 48 f8 ff ff       	call   c01080b6 <vma_create>
+c010886e:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c0108871:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0108875:	75 24                	jne    c010889b <check_vma_struct+0xb8>
+c0108877:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
+c010887e:	c0 
+c010887f:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108886:	c0 
+c0108887:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
+c010888e:	00 
+c010888f:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108896:	e8 26 85 ff ff       	call   c0100dc1 <__panic>
+        insert_vma_struct(mm, vma);
+c010889b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010889e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01088a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01088a5:	89 04 24             	mov    %eax,(%esp)
+c01088a8:	e8 99 f9 ff ff       	call   c0108246 <insert_vma_struct>
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c01088ad:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01088b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01088b5:	7f 8a                	jg     c0108841 <check_vma_struct+0x5e>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c01088b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01088ba:	83 c0 01             	add    $0x1,%eax
+c01088bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01088c0:	eb 70                	jmp    c0108932 <check_vma_struct+0x14f>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c01088c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088c5:	89 d0                	mov    %edx,%eax
+c01088c7:	c1 e0 02             	shl    $0x2,%eax
+c01088ca:	01 d0                	add    %edx,%eax
+c01088cc:	83 c0 02             	add    $0x2,%eax
+c01088cf:	89 c1                	mov    %eax,%ecx
+c01088d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01088d4:	89 d0                	mov    %edx,%eax
+c01088d6:	c1 e0 02             	shl    $0x2,%eax
+c01088d9:	01 d0                	add    %edx,%eax
+c01088db:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01088e2:	00 
+c01088e3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c01088e7:	89 04 24             	mov    %eax,(%esp)
+c01088ea:	e8 c7 f7 ff ff       	call   c01080b6 <vma_create>
+c01088ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c01088f2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01088f6:	75 24                	jne    c010891c <check_vma_struct+0x139>
+c01088f8:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
+c01088ff:	c0 
+c0108900:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108907:	c0 
+c0108908:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
+c010890f:	00 
+c0108910:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108917:	e8 a5 84 ff ff       	call   c0100dc1 <__panic>
+        insert_vma_struct(mm, vma);
+c010891c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010891f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108923:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108926:	89 04 24             	mov    %eax,(%esp)
+c0108929:	e8 18 f9 ff ff       	call   c0108246 <insert_vma_struct>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c010892e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108932:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108935:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108938:	7e 88                	jle    c01088c2 <check_vma_struct+0xdf>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c010893a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010893d:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0108940:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0108943:	8b 40 04             	mov    0x4(%eax),%eax
+c0108946:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c0108949:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c0108950:	e9 97 00 00 00       	jmp    c01089ec <check_vma_struct+0x209>
+        assert(le != &(mm->mmap_list));
+c0108955:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108958:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010895b:	75 24                	jne    c0108981 <check_vma_struct+0x19e>
+c010895d:	c7 44 24 0c 1c df 10 	movl   $0xc010df1c,0xc(%esp)
+c0108964:	c0 
+c0108965:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c010896c:	c0 
+c010896d:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
+c0108974:	00 
+c0108975:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c010897c:	e8 40 84 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c0108981:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108984:	83 e8 10             	sub    $0x10,%eax
+c0108987:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c010898a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010898d:	8b 48 04             	mov    0x4(%eax),%ecx
+c0108990:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108993:	89 d0                	mov    %edx,%eax
+c0108995:	c1 e0 02             	shl    $0x2,%eax
+c0108998:	01 d0                	add    %edx,%eax
+c010899a:	39 c1                	cmp    %eax,%ecx
+c010899c:	75 17                	jne    c01089b5 <check_vma_struct+0x1d2>
+c010899e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01089a1:	8b 48 08             	mov    0x8(%eax),%ecx
+c01089a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01089a7:	89 d0                	mov    %edx,%eax
+c01089a9:	c1 e0 02             	shl    $0x2,%eax
+c01089ac:	01 d0                	add    %edx,%eax
+c01089ae:	83 c0 02             	add    $0x2,%eax
+c01089b1:	39 c1                	cmp    %eax,%ecx
+c01089b3:	74 24                	je     c01089d9 <check_vma_struct+0x1f6>
+c01089b5:	c7 44 24 0c 34 df 10 	movl   $0xc010df34,0xc(%esp)
+c01089bc:	c0 
+c01089bd:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c01089c4:	c0 
+c01089c5:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
+c01089cc:	00 
+c01089cd:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c01089d4:	e8 e8 83 ff ff       	call   c0100dc1 <__panic>
+c01089d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01089dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c01089df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01089e2:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c01089e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c01089e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01089ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01089f2:	0f 8e 5d ff ff ff    	jle    c0108955 <check_vma_struct+0x172>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c01089f8:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c01089ff:	e9 cd 01 00 00       	jmp    c0108bd1 <check_vma_struct+0x3ee>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c0108a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a07:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a0e:	89 04 24             	mov    %eax,(%esp)
+c0108a11:	e8 db f6 ff ff       	call   c01080f1 <find_vma>
+c0108a16:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(vma1 != NULL);
+c0108a19:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0108a1d:	75 24                	jne    c0108a43 <check_vma_struct+0x260>
+c0108a1f:	c7 44 24 0c 69 df 10 	movl   $0xc010df69,0xc(%esp)
+c0108a26:	c0 
+c0108a27:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108a2e:	c0 
+c0108a2f:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
+c0108a36:	00 
+c0108a37:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108a3e:	e8 7e 83 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c0108a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a46:	83 c0 01             	add    $0x1,%eax
+c0108a49:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a50:	89 04 24             	mov    %eax,(%esp)
+c0108a53:	e8 99 f6 ff ff       	call   c01080f1 <find_vma>
+c0108a58:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma2 != NULL);
+c0108a5b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0108a5f:	75 24                	jne    c0108a85 <check_vma_struct+0x2a2>
+c0108a61:	c7 44 24 0c 76 df 10 	movl   $0xc010df76,0xc(%esp)
+c0108a68:	c0 
+c0108a69:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108a70:	c0 
+c0108a71:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
+c0108a78:	00 
+c0108a79:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108a80:	e8 3c 83 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c0108a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a88:	83 c0 02             	add    $0x2,%eax
+c0108a8b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108a8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108a92:	89 04 24             	mov    %eax,(%esp)
+c0108a95:	e8 57 f6 ff ff       	call   c01080f1 <find_vma>
+c0108a9a:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma3 == NULL);
+c0108a9d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0108aa1:	74 24                	je     c0108ac7 <check_vma_struct+0x2e4>
+c0108aa3:	c7 44 24 0c 83 df 10 	movl   $0xc010df83,0xc(%esp)
+c0108aaa:	c0 
+c0108aab:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108ab2:	c0 
+c0108ab3:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
+c0108aba:	00 
+c0108abb:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108ac2:	e8 fa 82 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c0108ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108aca:	83 c0 03             	add    $0x3,%eax
+c0108acd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108ad4:	89 04 24             	mov    %eax,(%esp)
+c0108ad7:	e8 15 f6 ff ff       	call   c01080f1 <find_vma>
+c0108adc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma4 == NULL);
+c0108adf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0108ae3:	74 24                	je     c0108b09 <check_vma_struct+0x326>
+c0108ae5:	c7 44 24 0c 90 df 10 	movl   $0xc010df90,0xc(%esp)
+c0108aec:	c0 
+c0108aed:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108af4:	c0 
+c0108af5:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
+c0108afc:	00 
+c0108afd:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108b04:	e8 b8 82 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0108b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b0c:	83 c0 04             	add    $0x4,%eax
+c0108b0f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108b13:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108b16:	89 04 24             	mov    %eax,(%esp)
+c0108b19:	e8 d3 f5 ff ff       	call   c01080f1 <find_vma>
+c0108b1e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma5 == NULL);
+c0108b21:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c0108b25:	74 24                	je     c0108b4b <check_vma_struct+0x368>
+c0108b27:	c7 44 24 0c 9d df 10 	movl   $0xc010df9d,0xc(%esp)
+c0108b2e:	c0 
+c0108b2f:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108b36:	c0 
+c0108b37:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
+c0108b3e:	00 
+c0108b3f:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108b46:	e8 76 82 ff ff       	call   c0100dc1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0108b4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108b4e:	8b 50 04             	mov    0x4(%eax),%edx
+c0108b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b54:	39 c2                	cmp    %eax,%edx
+c0108b56:	75 10                	jne    c0108b68 <check_vma_struct+0x385>
+c0108b58:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108b5b:	8b 50 08             	mov    0x8(%eax),%edx
+c0108b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b61:	83 c0 02             	add    $0x2,%eax
+c0108b64:	39 c2                	cmp    %eax,%edx
+c0108b66:	74 24                	je     c0108b8c <check_vma_struct+0x3a9>
+c0108b68:	c7 44 24 0c ac df 10 	movl   $0xc010dfac,0xc(%esp)
+c0108b6f:	c0 
+c0108b70:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108b77:	c0 
+c0108b78:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
+c0108b7f:	00 
+c0108b80:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108b87:	e8 35 82 ff ff       	call   c0100dc1 <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c0108b8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108b8f:	8b 50 04             	mov    0x4(%eax),%edx
+c0108b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b95:	39 c2                	cmp    %eax,%edx
+c0108b97:	75 10                	jne    c0108ba9 <check_vma_struct+0x3c6>
+c0108b99:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108b9c:	8b 50 08             	mov    0x8(%eax),%edx
+c0108b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ba2:	83 c0 02             	add    $0x2,%eax
+c0108ba5:	39 c2                	cmp    %eax,%edx
+c0108ba7:	74 24                	je     c0108bcd <check_vma_struct+0x3ea>
+c0108ba9:	c7 44 24 0c dc df 10 	movl   $0xc010dfdc,0xc(%esp)
+c0108bb0:	c0 
+c0108bb1:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108bb8:	c0 
+c0108bb9:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
+c0108bc0:	00 
+c0108bc1:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108bc8:	e8 f4 81 ff ff       	call   c0100dc1 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0108bcd:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c0108bd1:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108bd4:	89 d0                	mov    %edx,%eax
+c0108bd6:	c1 e0 02             	shl    $0x2,%eax
+c0108bd9:	01 d0                	add    %edx,%eax
+c0108bdb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0108bde:	0f 8d 20 fe ff ff    	jge    c0108a04 <check_vma_struct+0x221>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108be4:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c0108beb:	eb 70                	jmp    c0108c5d <check_vma_struct+0x47a>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c0108bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108bf0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108bf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108bf7:	89 04 24             	mov    %eax,(%esp)
+c0108bfa:	e8 f2 f4 ff ff       	call   c01080f1 <find_vma>
+c0108bff:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        if (vma_below_5 != NULL ) {
+c0108c02:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108c06:	74 27                	je     c0108c2f <check_vma_struct+0x44c>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0108c08:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108c0b:	8b 50 08             	mov    0x8(%eax),%edx
+c0108c0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108c11:	8b 40 04             	mov    0x4(%eax),%eax
+c0108c14:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0108c18:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c1f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108c23:	c7 04 24 0c e0 10 c0 	movl   $0xc010e00c,(%esp)
+c0108c2a:	e8 29 77 ff ff       	call   c0100358 <cprintf>
+        }
+        assert(vma_below_5 == NULL);
+c0108c2f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0108c33:	74 24                	je     c0108c59 <check_vma_struct+0x476>
+c0108c35:	c7 44 24 0c 31 e0 10 	movl   $0xc010e031,0xc(%esp)
+c0108c3c:	c0 
+c0108c3d:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108c44:	c0 
+c0108c45:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
+c0108c4c:	00 
+c0108c4d:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108c54:	e8 68 81 ff ff       	call   c0100dc1 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0108c59:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0108c5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108c61:	79 8a                	jns    c0108bed <check_vma_struct+0x40a>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c0108c63:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108c66:	89 04 24             	mov    %eax,(%esp)
+c0108c69:	e8 08 f7 ff ff       	call   c0108376 <mm_destroy>
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0108c6e:	c7 04 24 48 e0 10 c0 	movl   $0xc010e048,(%esp)
+c0108c75:	e8 de 76 ff ff       	call   c0100358 <cprintf>
+}
+c0108c7a:	c9                   	leave  
+c0108c7b:	c3                   	ret    
+
+c0108c7c <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c0108c7c:	55                   	push   %ebp
+c0108c7d:	89 e5                	mov    %esp,%ebp
+c0108c7f:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0108c82:	e8 d6 c5 ff ff       	call   c010525d <nr_free_pages>
+c0108c87:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c0108c8a:	e8 8e f3 ff ff       	call   c010801d <mm_create>
+c0108c8f:	a3 6c 0f 1b c0       	mov    %eax,0xc01b0f6c
+    assert(check_mm_struct != NULL);
+c0108c94:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c0108c99:	85 c0                	test   %eax,%eax
+c0108c9b:	75 24                	jne    c0108cc1 <check_pgfault+0x45>
+c0108c9d:	c7 44 24 0c 67 e0 10 	movl   $0xc010e067,0xc(%esp)
+c0108ca4:	c0 
+c0108ca5:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108cac:	c0 
+c0108cad:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
+c0108cb4:	00 
+c0108cb5:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108cbc:	e8 00 81 ff ff       	call   c0100dc1 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c0108cc1:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
+c0108cc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0108cc9:	8b 15 84 ed 1a c0    	mov    0xc01aed84,%edx
+c0108ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cd2:	89 50 0c             	mov    %edx,0xc(%eax)
+c0108cd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108cd8:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108cdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c0108cde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108ce1:	8b 00                	mov    (%eax),%eax
+c0108ce3:	85 c0                	test   %eax,%eax
+c0108ce5:	74 24                	je     c0108d0b <check_pgfault+0x8f>
+c0108ce7:	c7 44 24 0c 7f e0 10 	movl   $0xc010e07f,0xc(%esp)
+c0108cee:	c0 
+c0108cef:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108cf6:	c0 
+c0108cf7:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
+c0108cfe:	00 
+c0108cff:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108d06:	e8 b6 80 ff ff       	call   c0100dc1 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0108d0b:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+c0108d12:	00 
+c0108d13:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
+c0108d1a:	00 
+c0108d1b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0108d22:	e8 8f f3 ff ff       	call   c01080b6 <vma_create>
+c0108d27:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c0108d2a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0108d2e:	75 24                	jne    c0108d54 <check_pgfault+0xd8>
+c0108d30:	c7 44 24 0c 10 df 10 	movl   $0xc010df10,0xc(%esp)
+c0108d37:	c0 
+c0108d38:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108d3f:	c0 
+c0108d40:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
+c0108d47:	00 
+c0108d48:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108d4f:	e8 6d 80 ff ff       	call   c0100dc1 <__panic>
+
+    insert_vma_struct(mm, vma);
+c0108d54:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108d57:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108d5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108d5e:	89 04 24             	mov    %eax,(%esp)
+c0108d61:	e8 e0 f4 ff ff       	call   c0108246 <insert_vma_struct>
+
+    uintptr_t addr = 0x100;
+c0108d66:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0108d6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108d70:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108d74:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108d77:	89 04 24             	mov    %eax,(%esp)
+c0108d7a:	e8 72 f3 ff ff       	call   c01080f1 <find_vma>
+c0108d7f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0108d82:	74 24                	je     c0108da8 <check_pgfault+0x12c>
+c0108d84:	c7 44 24 0c 8d e0 10 	movl   $0xc010e08d,0xc(%esp)
+c0108d8b:	c0 
+c0108d8c:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108d93:	c0 
+c0108d94:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
+c0108d9b:	00 
+c0108d9c:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108da3:	e8 19 80 ff ff       	call   c0100dc1 <__panic>
+
+    int i, sum = 0;
+c0108da8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c0108daf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108db6:	eb 17                	jmp    c0108dcf <check_pgfault+0x153>
+        *(char *)(addr + i) = i;
+c0108db8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108dbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108dbe:	01 d0                	add    %edx,%eax
+c0108dc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108dc3:	88 10                	mov    %dl,(%eax)
+        sum += i;
+c0108dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dc8:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c0108dcb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108dcf:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108dd3:	7e e3                	jle    c0108db8 <check_pgfault+0x13c>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108dd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108ddc:	eb 15                	jmp    c0108df3 <check_pgfault+0x177>
+        sum -= *(char *)(addr + i);
+c0108dde:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108de1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108de4:	01 d0                	add    %edx,%eax
+c0108de6:	0f b6 00             	movzbl (%eax),%eax
+c0108de9:	0f be c0             	movsbl %al,%eax
+c0108dec:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0108def:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108df3:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0108df7:	7e e5                	jle    c0108dde <check_pgfault+0x162>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c0108df9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108dfd:	74 24                	je     c0108e23 <check_pgfault+0x1a7>
+c0108dff:	c7 44 24 0c a7 e0 10 	movl   $0xc010e0a7,0xc(%esp)
+c0108e06:	c0 
+c0108e07:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108e0e:	c0 
+c0108e0f:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
+c0108e16:	00 
+c0108e17:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108e1e:	e8 9e 7f ff ff       	call   c0100dc1 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0108e23:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108e26:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108e29:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108e2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108e31:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108e35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e38:	89 04 24             	mov    %eax,(%esp)
+c0108e3b:	e8 f4 d0 ff ff       	call   c0105f34 <page_remove>
+    free_page(pde2page(pgdir[0]));
+c0108e40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e43:	8b 00                	mov    (%eax),%eax
+c0108e45:	89 04 24             	mov    %eax,(%esp)
+c0108e48:	e8 b8 f1 ff ff       	call   c0108005 <pde2page>
+c0108e4d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108e54:	00 
+c0108e55:	89 04 24             	mov    %eax,(%esp)
+c0108e58:	e8 ce c3 ff ff       	call   c010522b <free_pages>
+    pgdir[0] = 0;
+c0108e5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0108e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e69:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0108e70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e73:	89 04 24             	mov    %eax,(%esp)
+c0108e76:	e8 fb f4 ff ff       	call   c0108376 <mm_destroy>
+    check_mm_struct = NULL;
+c0108e7b:	c7 05 6c 0f 1b c0 00 	movl   $0x0,0xc01b0f6c
+c0108e82:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0108e85:	e8 d3 c3 ff ff       	call   c010525d <nr_free_pages>
+c0108e8a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108e8d:	74 24                	je     c0108eb3 <check_pgfault+0x237>
+c0108e8f:	c7 44 24 0c b0 e0 10 	movl   $0xc010e0b0,0xc(%esp)
+c0108e96:	c0 
+c0108e97:	c7 44 24 08 1f de 10 	movl   $0xc010de1f,0x8(%esp)
+c0108e9e:	c0 
+c0108e9f:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
+c0108ea6:	00 
+c0108ea7:	c7 04 24 34 de 10 c0 	movl   $0xc010de34,(%esp)
+c0108eae:	e8 0e 7f ff ff       	call   c0100dc1 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c0108eb3:	c7 04 24 d7 e0 10 c0 	movl   $0xc010e0d7,(%esp)
+c0108eba:	e8 99 74 ff ff       	call   c0100358 <cprintf>
+}
+c0108ebf:	c9                   	leave  
+c0108ec0:	c3                   	ret    
+
+c0108ec1 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c0108ec1:	55                   	push   %ebp
+c0108ec2:	89 e5                	mov    %esp,%ebp
+c0108ec4:	83 ec 38             	sub    $0x38,%esp
+    int ret = -E_INVAL;
+c0108ec7:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c0108ece:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108ed1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108ed5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ed8:	89 04 24             	mov    %eax,(%esp)
+c0108edb:	e8 11 f2 ff ff       	call   c01080f1 <find_vma>
+c0108ee0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c0108ee3:	a1 18 ee 1a c0       	mov    0xc01aee18,%eax
+c0108ee8:	83 c0 01             	add    $0x1,%eax
+c0108eeb:	a3 18 ee 1a c0       	mov    %eax,0xc01aee18
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c0108ef0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0108ef4:	74 0b                	je     c0108f01 <do_pgfault+0x40>
+c0108ef6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108ef9:	8b 40 04             	mov    0x4(%eax),%eax
+c0108efc:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0108eff:	76 18                	jbe    c0108f19 <do_pgfault+0x58>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c0108f01:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108f04:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108f08:	c7 04 24 f4 e0 10 c0 	movl   $0xc010e0f4,(%esp)
+c0108f0f:	e8 44 74 ff ff       	call   c0100358 <cprintf>
+        goto failed;
+c0108f14:	e9 88 01 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c0108f19:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f1c:	83 e0 03             	and    $0x3,%eax
+c0108f1f:	85 c0                	test   %eax,%eax
+c0108f21:	74 36                	je     c0108f59 <do_pgfault+0x98>
+c0108f23:	83 f8 01             	cmp    $0x1,%eax
+c0108f26:	74 20                	je     c0108f48 <do_pgfault+0x87>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c0108f28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f2b:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f2e:	83 e0 02             	and    $0x2,%eax
+c0108f31:	85 c0                	test   %eax,%eax
+c0108f33:	75 11                	jne    c0108f46 <do_pgfault+0x85>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c0108f35:	c7 04 24 24 e1 10 c0 	movl   $0xc010e124,(%esp)
+c0108f3c:	e8 17 74 ff ff       	call   c0100358 <cprintf>
+            goto failed;
+c0108f41:	e9 5b 01 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+        }
+        break;
+c0108f46:	eb 2f                	jmp    c0108f77 <do_pgfault+0xb6>
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0108f48:	c7 04 24 84 e1 10 c0 	movl   $0xc010e184,(%esp)
+c0108f4f:	e8 04 74 ff ff       	call   c0100358 <cprintf>
+        goto failed;
+c0108f54:	e9 48 01 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c0108f59:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f5c:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f5f:	83 e0 05             	and    $0x5,%eax
+c0108f62:	85 c0                	test   %eax,%eax
+c0108f64:	75 11                	jne    c0108f77 <do_pgfault+0xb6>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0108f66:	c7 04 24 bc e1 10 c0 	movl   $0xc010e1bc,(%esp)
+c0108f6d:	e8 e6 73 ff ff       	call   c0100358 <cprintf>
+            goto failed;
+c0108f72:	e9 2a 01 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0108f77:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0108f7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108f81:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108f84:	83 e0 02             	and    $0x2,%eax
+c0108f87:	85 c0                	test   %eax,%eax
+c0108f89:	74 04                	je     c0108f8f <do_pgfault+0xce>
+        perm |= PTE_W;
+c0108f8b:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0108f8f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108f92:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108f95:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0108f9d:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0108fa0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c0108fa7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+c0108fae:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108fb1:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108fb4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0108fbb:	00 
+c0108fbc:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108fc3:	89 04 24             	mov    %eax,(%esp)
+c0108fc6:	e8 5c c9 ff ff       	call   c0105927 <get_pte>
+c0108fcb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (ptep == NULL) goto failed;
+c0108fce:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0108fd2:	75 05                	jne    c0108fd9 <do_pgfault+0x118>
+c0108fd4:	e9 c8 00 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+    if (*ptep == 0) {
+c0108fd9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108fdc:	8b 00                	mov    (%eax),%eax
+c0108fde:	85 c0                	test   %eax,%eax
+c0108fe0:	75 29                	jne    c010900b <do_pgfault+0x14a>
+	    if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) goto failed;
+c0108fe2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108fe5:	8b 40 0c             	mov    0xc(%eax),%eax
+c0108fe8:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108feb:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0108fef:	8b 55 10             	mov    0x10(%ebp),%edx
+c0108ff2:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0108ff6:	89 04 24             	mov    %eax,(%esp)
+c0108ff9:	e8 90 d0 ff ff       	call   c010608e <pgdir_alloc_page>
+c0108ffe:	85 c0                	test   %eax,%eax
+c0109000:	0f 85 94 00 00 00    	jne    c010909a <do_pgfault+0x1d9>
+c0109006:	e9 96 00 00 00       	jmp    c01090a1 <do_pgfault+0x1e0>
+    } else {
+	    if (swap_init_ok) {
+c010900b:	a1 0c ee 1a c0       	mov    0xc01aee0c,%eax
+c0109010:	85 c0                	test   %eax,%eax
+c0109012:	74 6f                	je     c0109083 <do_pgfault+0x1c2>
+		    struct Page *page = NULL;
+c0109014:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+		    swap_in(mm, addr, &page);
+c010901b:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c010901e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109022:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109025:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109029:	8b 45 08             	mov    0x8(%ebp),%eax
+c010902c:	89 04 24             	mov    %eax,(%esp)
+c010902f:	e8 0b e1 ff ff       	call   c010713f <swap_in>
+		    page_insert(mm->pgdir, page, addr, perm);
+c0109034:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109037:	8b 45 08             	mov    0x8(%ebp),%eax
+c010903a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010903d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0109040:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0109044:	8b 4d 10             	mov    0x10(%ebp),%ecx
+c0109047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c010904b:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010904f:	89 04 24             	mov    %eax,(%esp)
+c0109052:	e8 21 cf ff ff       	call   c0105f78 <page_insert>
+		    swap_map_swappable(mm, addr, page, 1);
+c0109057:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010905a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0109061:	00 
+c0109062:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109066:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109069:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010906d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109070:	89 04 24             	mov    %eax,(%esp)
+c0109073:	e8 fe de ff ff       	call   c0106f76 <swap_map_swappable>
+		    page->pra_vaddr = addr; 
+c0109078:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010907b:	8b 55 10             	mov    0x10(%ebp),%edx
+c010907e:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0109081:	eb 17                	jmp    c010909a <do_pgfault+0x1d9>
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0109083:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109086:	8b 00                	mov    (%eax),%eax
+c0109088:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010908c:	c7 04 24 20 e2 10 c0 	movl   $0xc010e220,(%esp)
+c0109093:	e8 c0 72 ff ff       	call   c0100358 <cprintf>
+            	goto failed;
+c0109098:	eb 07                	jmp    c01090a1 <do_pgfault+0x1e0>
+	    }
+    }
+
+   ret = 0;
+c010909a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c01090a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01090a4:	c9                   	leave  
+c01090a5:	c3                   	ret    
+
+c01090a6 <user_mem_check>:
+
+bool
+user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
+c01090a6:	55                   	push   %ebp
+c01090a7:	89 e5                	mov    %esp,%ebp
+c01090a9:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c01090ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01090b0:	0f 84 e0 00 00 00    	je     c0109196 <user_mem_check+0xf0>
+        if (!USER_ACCESS(addr, addr + len)) {
+c01090b6:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c01090bd:	76 1c                	jbe    c01090db <user_mem_check+0x35>
+c01090bf:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090c2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090c5:	01 d0                	add    %edx,%eax
+c01090c7:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01090ca:	76 0f                	jbe    c01090db <user_mem_check+0x35>
+c01090cc:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090cf:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090d2:	01 d0                	add    %edx,%eax
+c01090d4:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c01090d9:	76 0a                	jbe    c01090e5 <user_mem_check+0x3f>
+            return 0;
+c01090db:	b8 00 00 00 00       	mov    $0x0,%eax
+c01090e0:	e9 e2 00 00 00       	jmp    c01091c7 <user_mem_check+0x121>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c01090e5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01090e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01090eb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01090ee:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01090f1:	01 d0                	add    %edx,%eax
+c01090f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end) {
+c01090f6:	e9 88 00 00 00       	jmp    c0109183 <user_mem_check+0xdd>
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+c01090fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01090fe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109102:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109105:	89 04 24             	mov    %eax,(%esp)
+c0109108:	e8 e4 ef ff ff       	call   c01080f1 <find_vma>
+c010910d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109110:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109114:	74 0b                	je     c0109121 <user_mem_check+0x7b>
+c0109116:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109119:	8b 40 04             	mov    0x4(%eax),%eax
+c010911c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010911f:	76 0a                	jbe    c010912b <user_mem_check+0x85>
+                return 0;
+c0109121:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109126:	e9 9c 00 00 00       	jmp    c01091c7 <user_mem_check+0x121>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+c010912b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010912e:	8b 50 0c             	mov    0xc(%eax),%edx
+c0109131:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0109135:	74 07                	je     c010913e <user_mem_check+0x98>
+c0109137:	b8 02 00 00 00       	mov    $0x2,%eax
+c010913c:	eb 05                	jmp    c0109143 <user_mem_check+0x9d>
+c010913e:	b8 01 00 00 00       	mov    $0x1,%eax
+c0109143:	21 d0                	and    %edx,%eax
+c0109145:	85 c0                	test   %eax,%eax
+c0109147:	75 07                	jne    c0109150 <user_mem_check+0xaa>
+                return 0;
+c0109149:	b8 00 00 00 00       	mov    $0x0,%eax
+c010914e:	eb 77                	jmp    c01091c7 <user_mem_check+0x121>
+            }
+            if (write && (vma->vm_flags & VM_STACK)) {
+c0109150:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0109154:	74 24                	je     c010917a <user_mem_check+0xd4>
+c0109156:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109159:	8b 40 0c             	mov    0xc(%eax),%eax
+c010915c:	83 e0 08             	and    $0x8,%eax
+c010915f:	85 c0                	test   %eax,%eax
+c0109161:	74 17                	je     c010917a <user_mem_check+0xd4>
+                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+c0109163:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109166:	8b 40 04             	mov    0x4(%eax),%eax
+c0109169:	05 00 10 00 00       	add    $0x1000,%eax
+c010916e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109171:	76 07                	jbe    c010917a <user_mem_check+0xd4>
+                    return 0;
+c0109173:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109178:	eb 4d                	jmp    c01091c7 <user_mem_check+0x121>
+                }
+            }
+            start = vma->vm_end;
+c010917a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010917d:	8b 40 08             	mov    0x8(%eax),%eax
+c0109180:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!USER_ACCESS(addr, addr + len)) {
+            return 0;
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+        while (start < end) {
+c0109183:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109186:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0109189:	0f 82 6c ff ff ff    	jb     c01090fb <user_mem_check+0x55>
+                    return 0;
+                }
+            }
+            start = vma->vm_end;
+        }
+        return 1;
+c010918f:	b8 01 00 00 00       	mov    $0x1,%eax
+c0109194:	eb 31                	jmp    c01091c7 <user_mem_check+0x121>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c0109196:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c010919d:	76 23                	jbe    c01091c2 <user_mem_check+0x11c>
+c010919f:	8b 45 10             	mov    0x10(%ebp),%eax
+c01091a2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01091a5:	01 d0                	add    %edx,%eax
+c01091a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01091aa:	76 16                	jbe    c01091c2 <user_mem_check+0x11c>
+c01091ac:	8b 45 10             	mov    0x10(%ebp),%eax
+c01091af:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01091b2:	01 d0                	add    %edx,%eax
+c01091b4:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c01091b9:	77 07                	ja     c01091c2 <user_mem_check+0x11c>
+c01091bb:	b8 01 00 00 00       	mov    $0x1,%eax
+c01091c0:	eb 05                	jmp    c01091c7 <user_mem_check+0x121>
+c01091c2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01091c7:	c9                   	leave  
+c01091c8:	c3                   	ret    
+
+c01091c9 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01091c9:	55                   	push   %ebp
+c01091ca:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01091cc:	8b 55 08             	mov    0x8(%ebp),%edx
+c01091cf:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c01091d4:	29 c2                	sub    %eax,%edx
+c01091d6:	89 d0                	mov    %edx,%eax
+c01091d8:	c1 f8 05             	sar    $0x5,%eax
+}
+c01091db:	5d                   	pop    %ebp
+c01091dc:	c3                   	ret    
+
+c01091dd <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01091dd:	55                   	push   %ebp
+c01091de:	89 e5                	mov    %esp,%ebp
+c01091e0:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01091e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091e6:	89 04 24             	mov    %eax,(%esp)
+c01091e9:	e8 db ff ff ff       	call   c01091c9 <page2ppn>
+c01091ee:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01091f1:	c9                   	leave  
+c01091f2:	c3                   	ret    
+
+c01091f3 <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c01091f3:	55                   	push   %ebp
+c01091f4:	89 e5                	mov    %esp,%ebp
+c01091f6:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c01091f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091fc:	89 04 24             	mov    %eax,(%esp)
+c01091ff:	e8 d9 ff ff ff       	call   c01091dd <page2pa>
+c0109204:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109207:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010920a:	c1 e8 0c             	shr    $0xc,%eax
+c010920d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109210:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0109215:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109218:	72 23                	jb     c010923d <page2kva+0x4a>
+c010921a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010921d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109221:	c7 44 24 08 48 e2 10 	movl   $0xc010e248,0x8(%esp)
+c0109228:	c0 
+c0109229:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0109230:	00 
+c0109231:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
+c0109238:	e8 84 7b ff ff       	call   c0100dc1 <__panic>
+c010923d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109240:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0109245:	c9                   	leave  
+c0109246:	c3                   	ret    
+
+c0109247 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c0109247:	55                   	push   %ebp
+c0109248:	89 e5                	mov    %esp,%ebp
+c010924a:	83 ec 18             	sub    $0x18,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c010924d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109254:	e8 b8 88 ff ff       	call   c0101b11 <ide_device_valid>
+c0109259:	85 c0                	test   %eax,%eax
+c010925b:	75 1c                	jne    c0109279 <swapfs_init+0x32>
+        panic("swap fs isn't available.\n");
+c010925d:	c7 44 24 08 79 e2 10 	movl   $0xc010e279,0x8(%esp)
+c0109264:	c0 
+c0109265:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
+c010926c:	00 
+c010926d:	c7 04 24 93 e2 10 c0 	movl   $0xc010e293,(%esp)
+c0109274:	e8 48 7b ff ff       	call   c0100dc1 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c0109279:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109280:	e8 cb 88 ff ff       	call   c0101b50 <ide_device_size>
+c0109285:	c1 e8 03             	shr    $0x3,%eax
+c0109288:	a3 3c 0f 1b c0       	mov    %eax,0xc01b0f3c
+}
+c010928d:	c9                   	leave  
+c010928e:	c3                   	ret    
+
+c010928f <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c010928f:	55                   	push   %ebp
+c0109290:	89 e5                	mov    %esp,%ebp
+c0109292:	83 ec 28             	sub    $0x28,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109295:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109298:	89 04 24             	mov    %eax,(%esp)
+c010929b:	e8 53 ff ff ff       	call   c01091f3 <page2kva>
+c01092a0:	8b 55 08             	mov    0x8(%ebp),%edx
+c01092a3:	c1 ea 08             	shr    $0x8,%edx
+c01092a6:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01092a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01092ad:	74 0b                	je     c01092ba <swapfs_read+0x2b>
+c01092af:	8b 15 3c 0f 1b c0    	mov    0xc01b0f3c,%edx
+c01092b5:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c01092b8:	72 23                	jb     c01092dd <swapfs_read+0x4e>
+c01092ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01092c1:	c7 44 24 08 a4 e2 10 	movl   $0xc010e2a4,0x8(%esp)
+c01092c8:	c0 
+c01092c9:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+c01092d0:	00 
+c01092d1:	c7 04 24 93 e2 10 c0 	movl   $0xc010e293,(%esp)
+c01092d8:	e8 e4 7a ff ff       	call   c0100dc1 <__panic>
+c01092dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01092e0:	c1 e2 03             	shl    $0x3,%edx
+c01092e3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c01092ea:	00 
+c01092eb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01092ef:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01092f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01092fa:	e8 90 88 ff ff       	call   c0101b8f <ide_read_secs>
+}
+c01092ff:	c9                   	leave  
+c0109300:	c3                   	ret    
+
+c0109301 <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c0109301:	55                   	push   %ebp
+c0109302:	89 e5                	mov    %esp,%ebp
+c0109304:	83 ec 28             	sub    $0x28,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109307:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010930a:	89 04 24             	mov    %eax,(%esp)
+c010930d:	e8 e1 fe ff ff       	call   c01091f3 <page2kva>
+c0109312:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109315:	c1 ea 08             	shr    $0x8,%edx
+c0109318:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010931b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010931f:	74 0b                	je     c010932c <swapfs_write+0x2b>
+c0109321:	8b 15 3c 0f 1b c0    	mov    0xc01b0f3c,%edx
+c0109327:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c010932a:	72 23                	jb     c010934f <swapfs_write+0x4e>
+c010932c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010932f:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109333:	c7 44 24 08 a4 e2 10 	movl   $0xc010e2a4,0x8(%esp)
+c010933a:	c0 
+c010933b:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c0109342:	00 
+c0109343:	c7 04 24 93 e2 10 c0 	movl   $0xc010e293,(%esp)
+c010934a:	e8 72 7a ff ff       	call   c0100dc1 <__panic>
+c010934f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109352:	c1 e2 03             	shl    $0x3,%edx
+c0109355:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c010935c:	00 
+c010935d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109361:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109365:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010936c:	e8 60 8a ff ff       	call   c0101dd1 <ide_write_secs>
+}
+c0109371:	c9                   	leave  
+c0109372:	c3                   	ret    
+
+c0109373 <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c0109373:	52                   	push   %edx
+    call *%ebx              # call fn
+c0109374:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c0109376:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c0109377:	e8 f1 0c 00 00       	call   c010a06d <do_exit>
+
+c010937c <test_and_set_bit>:
+ * test_and_set_bit - Atomically set a bit and return its old value
+ * @nr:     the bit to set
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_set_bit(int nr, volatile void *addr) {
+c010937c:	55                   	push   %ebp
+c010937d:	89 e5                	mov    %esp,%ebp
+c010937f:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0109382:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109385:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109388:	0f ab 02             	bts    %eax,(%edx)
+c010938b:	19 c0                	sbb    %eax,%eax
+c010938d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0109390:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0109394:	0f 95 c0             	setne  %al
+c0109397:	0f b6 c0             	movzbl %al,%eax
+}
+c010939a:	c9                   	leave  
+c010939b:	c3                   	ret    
+
+c010939c <test_and_clear_bit>:
+ * test_and_clear_bit - Atomically clear a bit and return its old value
+ * @nr:     the bit to clear
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_clear_bit(int nr, volatile void *addr) {
+c010939c:	55                   	push   %ebp
+c010939d:	89 e5                	mov    %esp,%ebp
+c010939f:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c01093a2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01093a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093a8:	0f b3 02             	btr    %eax,(%edx)
+c01093ab:	19 c0                	sbb    %eax,%eax
+c01093ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c01093b0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c01093b4:	0f 95 c0             	setne  %al
+c01093b7:	0f b6 c0             	movzbl %al,%eax
+}
+c01093ba:	c9                   	leave  
+c01093bb:	c3                   	ret    
+
+c01093bc <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01093bc:	55                   	push   %ebp
+c01093bd:	89 e5                	mov    %esp,%ebp
+c01093bf:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01093c2:	9c                   	pushf  
+c01093c3:	58                   	pop    %eax
+c01093c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01093c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01093ca:	25 00 02 00 00       	and    $0x200,%eax
+c01093cf:	85 c0                	test   %eax,%eax
+c01093d1:	74 0c                	je     c01093df <__intr_save+0x23>
+        intr_disable();
+c01093d3:	e8 41 8c ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c01093d8:	b8 01 00 00 00       	mov    $0x1,%eax
+c01093dd:	eb 05                	jmp    c01093e4 <__intr_save+0x28>
+    }
+    return 0;
+c01093df:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01093e4:	c9                   	leave  
+c01093e5:	c3                   	ret    
+
+c01093e6 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01093e6:	55                   	push   %ebp
+c01093e7:	89 e5                	mov    %esp,%ebp
+c01093e9:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01093ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01093f0:	74 05                	je     c01093f7 <__intr_restore+0x11>
+        intr_enable();
+c01093f2:	e8 1c 8c ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c01093f7:	c9                   	leave  
+c01093f8:	c3                   	ret    
+
+c01093f9 <try_lock>:
+lock_init(lock_t *lock) {
+    *lock = 0;
+}
+
+static inline bool
+try_lock(lock_t *lock) {
+c01093f9:	55                   	push   %ebp
+c01093fa:	89 e5                	mov    %esp,%ebp
+c01093fc:	83 ec 08             	sub    $0x8,%esp
+    return !test_and_set_bit(0, lock);
+c01093ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109402:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109406:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010940d:	e8 6a ff ff ff       	call   c010937c <test_and_set_bit>
+c0109412:	85 c0                	test   %eax,%eax
+c0109414:	0f 94 c0             	sete   %al
+c0109417:	0f b6 c0             	movzbl %al,%eax
+}
+c010941a:	c9                   	leave  
+c010941b:	c3                   	ret    
+
+c010941c <lock>:
+
+static inline void
+lock(lock_t *lock) {
+c010941c:	55                   	push   %ebp
+c010941d:	89 e5                	mov    %esp,%ebp
+c010941f:	83 ec 18             	sub    $0x18,%esp
+    while (!try_lock(lock)) {
+c0109422:	eb 05                	jmp    c0109429 <lock+0xd>
+        schedule();
+c0109424:	e8 12 20 00 00       	call   c010b43b <schedule>
+    return !test_and_set_bit(0, lock);
+}
+
+static inline void
+lock(lock_t *lock) {
+    while (!try_lock(lock)) {
+c0109429:	8b 45 08             	mov    0x8(%ebp),%eax
+c010942c:	89 04 24             	mov    %eax,(%esp)
+c010942f:	e8 c5 ff ff ff       	call   c01093f9 <try_lock>
+c0109434:	85 c0                	test   %eax,%eax
+c0109436:	74 ec                	je     c0109424 <lock+0x8>
+        schedule();
+    }
+}
+c0109438:	c9                   	leave  
+c0109439:	c3                   	ret    
+
+c010943a <unlock>:
+
+static inline void
+unlock(lock_t *lock) {
+c010943a:	55                   	push   %ebp
+c010943b:	89 e5                	mov    %esp,%ebp
+c010943d:	83 ec 18             	sub    $0x18,%esp
+    if (!test_and_clear_bit(0, lock)) {
+c0109440:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109443:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109447:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010944e:	e8 49 ff ff ff       	call   c010939c <test_and_clear_bit>
+c0109453:	85 c0                	test   %eax,%eax
+c0109455:	75 1c                	jne    c0109473 <unlock+0x39>
+        panic("Unlock failed.\n");
+c0109457:	c7 44 24 08 c4 e2 10 	movl   $0xc010e2c4,0x8(%esp)
+c010945e:	c0 
+c010945f:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+c0109466:	00 
+c0109467:	c7 04 24 d4 e2 10 c0 	movl   $0xc010e2d4,(%esp)
+c010946e:	e8 4e 79 ff ff       	call   c0100dc1 <__panic>
+    }
+}
+c0109473:	c9                   	leave  
+c0109474:	c3                   	ret    
+
+c0109475 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0109475:	55                   	push   %ebp
+c0109476:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0109478:	8b 55 08             	mov    0x8(%ebp),%edx
+c010947b:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c0109480:	29 c2                	sub    %eax,%edx
+c0109482:	89 d0                	mov    %edx,%eax
+c0109484:	c1 f8 05             	sar    $0x5,%eax
+}
+c0109487:	5d                   	pop    %ebp
+c0109488:	c3                   	ret    
+
+c0109489 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0109489:	55                   	push   %ebp
+c010948a:	89 e5                	mov    %esp,%ebp
+c010948c:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c010948f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109492:	89 04 24             	mov    %eax,(%esp)
+c0109495:	e8 db ff ff ff       	call   c0109475 <page2ppn>
+c010949a:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010949d:	c9                   	leave  
+c010949e:	c3                   	ret    
+
+c010949f <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c010949f:	55                   	push   %ebp
+c01094a0:	89 e5                	mov    %esp,%ebp
+c01094a2:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c01094a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094a8:	c1 e8 0c             	shr    $0xc,%eax
+c01094ab:	89 c2                	mov    %eax,%edx
+c01094ad:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c01094b2:	39 c2                	cmp    %eax,%edx
+c01094b4:	72 1c                	jb     c01094d2 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c01094b6:	c7 44 24 08 e8 e2 10 	movl   $0xc010e2e8,0x8(%esp)
+c01094bd:	c0 
+c01094be:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c01094c5:	00 
+c01094c6:	c7 04 24 07 e3 10 c0 	movl   $0xc010e307,(%esp)
+c01094cd:	e8 ef 78 ff ff       	call   c0100dc1 <__panic>
+    }
+    return &pages[PPN(pa)];
+c01094d2:	a1 90 0e 1b c0       	mov    0xc01b0e90,%eax
+c01094d7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01094da:	c1 ea 0c             	shr    $0xc,%edx
+c01094dd:	c1 e2 05             	shl    $0x5,%edx
+c01094e0:	01 d0                	add    %edx,%eax
+}
+c01094e2:	c9                   	leave  
+c01094e3:	c3                   	ret    
+
+c01094e4 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01094e4:	55                   	push   %ebp
+c01094e5:	89 e5                	mov    %esp,%ebp
+c01094e7:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c01094ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094ed:	89 04 24             	mov    %eax,(%esp)
+c01094f0:	e8 94 ff ff ff       	call   c0109489 <page2pa>
+c01094f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01094f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01094fb:	c1 e8 0c             	shr    $0xc,%eax
+c01094fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109501:	a1 80 ed 1a c0       	mov    0xc01aed80,%eax
+c0109506:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109509:	72 23                	jb     c010952e <page2kva+0x4a>
+c010950b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010950e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109512:	c7 44 24 08 18 e3 10 	movl   $0xc010e318,0x8(%esp)
+c0109519:	c0 
+c010951a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0109521:	00 
+c0109522:	c7 04 24 07 e3 10 c0 	movl   $0xc010e307,(%esp)
+c0109529:	e8 93 78 ff ff       	call   c0100dc1 <__panic>
+c010952e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109531:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0109536:	c9                   	leave  
+c0109537:	c3                   	ret    
+
+c0109538 <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c0109538:	55                   	push   %ebp
+c0109539:	89 e5                	mov    %esp,%ebp
+c010953b:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c010953e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109541:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109544:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010954b:	77 23                	ja     c0109570 <kva2page+0x38>
+c010954d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109550:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109554:	c7 44 24 08 3c e3 10 	movl   $0xc010e33c,0x8(%esp)
+c010955b:	c0 
+c010955c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c0109563:	00 
+c0109564:	c7 04 24 07 e3 10 c0 	movl   $0xc010e307,(%esp)
+c010956b:	e8 51 78 ff ff       	call   c0100dc1 <__panic>
+c0109570:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109573:	05 00 00 00 40       	add    $0x40000000,%eax
+c0109578:	89 04 24             	mov    %eax,(%esp)
+c010957b:	e8 1f ff ff ff       	call   c010949f <pa2page>
+}
+c0109580:	c9                   	leave  
+c0109581:	c3                   	ret    
+
+c0109582 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c0109582:	55                   	push   %ebp
+c0109583:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c0109585:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109588:	8b 40 18             	mov    0x18(%eax),%eax
+c010958b:	8d 50 01             	lea    0x1(%eax),%edx
+c010958e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109591:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109594:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109597:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c010959a:	5d                   	pop    %ebp
+c010959b:	c3                   	ret    
+
+c010959c <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c010959c:	55                   	push   %ebp
+c010959d:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c010959f:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095a2:	8b 40 18             	mov    0x18(%eax),%eax
+c01095a5:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01095a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095ab:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c01095ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095b1:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c01095b4:	5d                   	pop    %ebp
+c01095b5:	c3                   	ret    
+
+c01095b6 <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c01095b6:	55                   	push   %ebp
+c01095b7:	89 e5                	mov    %esp,%ebp
+c01095b9:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c01095bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01095c0:	74 0e                	je     c01095d0 <lock_mm+0x1a>
+        lock(&(mm->mm_lock));
+c01095c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095c5:	83 c0 1c             	add    $0x1c,%eax
+c01095c8:	89 04 24             	mov    %eax,(%esp)
+c01095cb:	e8 4c fe ff ff       	call   c010941c <lock>
+    }
+}
+c01095d0:	c9                   	leave  
+c01095d1:	c3                   	ret    
+
+c01095d2 <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c01095d2:	55                   	push   %ebp
+c01095d3:	89 e5                	mov    %esp,%ebp
+c01095d5:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c01095d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01095dc:	74 0e                	je     c01095ec <unlock_mm+0x1a>
+        unlock(&(mm->mm_lock));
+c01095de:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095e1:	83 c0 1c             	add    $0x1c,%eax
+c01095e4:	89 04 24             	mov    %eax,(%esp)
+c01095e7:	e8 4e fe ff ff       	call   c010943a <unlock>
+    }
+}
+c01095ec:	c9                   	leave  
+c01095ed:	c3                   	ret    
+
+c01095ee <alloc_proc>:
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+c01095ee:	55                   	push   %ebp
+c01095ef:	89 e5                	mov    %esp,%ebp
+c01095f1:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c01095f4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
+c01095fb:	e8 4b b7 ff ff       	call   c0104d4b <kmalloc>
+c0109600:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (proc != NULL) {
+c0109603:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109607:	0f 84 51 01 00 00    	je     c010975e <alloc_proc+0x170>
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+        proc->state = PROC_UNINIT;
+c010960d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109610:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        proc->pid = -1;
+c0109616:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109619:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+        proc->runs = 0;
+c0109620:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109623:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        proc->kstack = 0;
+c010962a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010962d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        proc->need_resched = 0;
+c0109634:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109637:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        proc->parent = NULL;
+c010963e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109641:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        proc->mm = NULL;
+c0109648:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010964b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+        memset(&(proc->context), 0, sizeof(struct context));
+c0109652:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109655:	83 c0 1c             	add    $0x1c,%eax
+c0109658:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
+c010965f:	00 
+c0109660:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109667:	00 
+c0109668:	89 04 24             	mov    %eax,(%esp)
+c010966b:	e8 27 2b 00 00       	call   c010c197 <memset>
+        proc->tf = NULL;
+c0109670:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109673:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+        proc->cr3 = boot_cr3;
+c010967a:	8b 15 8c 0e 1b c0    	mov    0xc01b0e8c,%edx
+c0109680:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109683:	89 50 40             	mov    %edx,0x40(%eax)
+        proc->flags = 0;
+c0109686:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109689:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+        memset(proc->name, 0, PROC_NAME_LEN + 1);
+c0109690:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109693:	83 c0 48             	add    $0x48,%eax
+c0109696:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c010969d:	00 
+c010969e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01096a5:	00 
+c01096a6:	89 04 24             	mov    %eax,(%esp)
+c01096a9:	e8 e9 2a 00 00       	call   c010c197 <memset>
+        proc->wait_state = 0;
+c01096ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096b1:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+        proc->cptr = proc->yptr = proc->optr = NULL;
+c01096b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096bb:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
+c01096c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096c5:	8b 50 78             	mov    0x78(%eax),%edx
+c01096c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096cb:	89 50 74             	mov    %edx,0x74(%eax)
+c01096ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096d1:	8b 50 74             	mov    0x74(%eax),%edx
+c01096d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096d7:	89 50 70             	mov    %edx,0x70(%eax)
+        proc->rq = NULL;
+c01096da:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096dd:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
+        list_init(&(proc->run_link));
+c01096e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096e7:	83 e8 80             	sub    $0xffffff80,%eax
+c01096ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01096ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01096f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01096f3:	89 50 04             	mov    %edx,0x4(%eax)
+c01096f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01096f9:	8b 50 04             	mov    0x4(%eax),%edx
+c01096fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01096ff:	89 10                	mov    %edx,(%eax)
+        proc->time_slice = 0;
+c0109701:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109704:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
+c010970b:	00 00 00 
+        proc->lab6_run_pool.parent = proc->lab6_run_pool.left = proc->lab6_run_pool.right = NULL;
+c010970e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109711:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
+c0109718:	00 00 00 
+c010971b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010971e:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c0109724:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109727:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
+c010972d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109730:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
+c0109736:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109739:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
+        proc->lab6_stride = proc->lab6_priority = 0;
+c010973f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109742:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
+c0109749:	00 00 00 
+c010974c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010974f:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
+c0109755:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109758:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+    }
+    return proc;
+c010975e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0109761:	c9                   	leave  
+c0109762:	c3                   	ret    
+
+c0109763 <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+c0109763:	55                   	push   %ebp
+c0109764:	89 e5                	mov    %esp,%ebp
+c0109766:	83 ec 18             	sub    $0x18,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c0109769:	8b 45 08             	mov    0x8(%ebp),%eax
+c010976c:	83 c0 48             	add    $0x48,%eax
+c010976f:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c0109776:	00 
+c0109777:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010977e:	00 
+c010977f:	89 04 24             	mov    %eax,(%esp)
+c0109782:	e8 10 2a 00 00       	call   c010c197 <memset>
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c0109787:	8b 45 08             	mov    0x8(%ebp),%eax
+c010978a:	8d 50 48             	lea    0x48(%eax),%edx
+c010978d:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c0109794:	00 
+c0109795:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109798:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010979c:	89 14 24             	mov    %edx,(%esp)
+c010979f:	e8 d5 2a 00 00       	call   c010c279 <memcpy>
+}
+c01097a4:	c9                   	leave  
+c01097a5:	c3                   	ret    
+
+c01097a6 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+c01097a6:	55                   	push   %ebp
+c01097a7:	89 e5                	mov    %esp,%ebp
+c01097a9:	83 ec 18             	sub    $0x18,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c01097ac:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01097b3:	00 
+c01097b4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01097bb:	00 
+c01097bc:	c7 04 24 44 0e 1b c0 	movl   $0xc01b0e44,(%esp)
+c01097c3:	e8 cf 29 00 00       	call   c010c197 <memset>
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c01097c8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097cb:	83 c0 48             	add    $0x48,%eax
+c01097ce:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c01097d5:	00 
+c01097d6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01097da:	c7 04 24 44 0e 1b c0 	movl   $0xc01b0e44,(%esp)
+c01097e1:	e8 93 2a 00 00       	call   c010c279 <memcpy>
+}
+c01097e6:	c9                   	leave  
+c01097e7:	c3                   	ret    
+
+c01097e8 <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+c01097e8:	55                   	push   %ebp
+c01097e9:	89 e5                	mov    %esp,%ebp
+c01097eb:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c01097ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097f1:	83 c0 58             	add    $0x58,%eax
+c01097f4:	c7 45 fc 70 0f 1b c0 	movl   $0xc01b0f70,-0x4(%ebp)
+c01097fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01097fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109801:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109804:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109807:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010980a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010980d:	8b 40 04             	mov    0x4(%eax),%eax
+c0109810:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109813:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0109816:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109819:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010981c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010981f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109822:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109825:	89 10                	mov    %edx,(%eax)
+c0109827:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010982a:	8b 10                	mov    (%eax),%edx
+c010982c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010982f:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109832:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109835:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109838:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010983b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010983e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109841:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c0109843:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109846:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+c010984d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109850:	8b 40 14             	mov    0x14(%eax),%eax
+c0109853:	8b 50 70             	mov    0x70(%eax),%edx
+c0109856:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109859:	89 50 78             	mov    %edx,0x78(%eax)
+c010985c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010985f:	8b 40 78             	mov    0x78(%eax),%eax
+c0109862:	85 c0                	test   %eax,%eax
+c0109864:	74 0c                	je     c0109872 <set_links+0x8a>
+        proc->optr->yptr = proc;
+c0109866:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109869:	8b 40 78             	mov    0x78(%eax),%eax
+c010986c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010986f:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    proc->parent->cptr = proc;
+c0109872:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109875:	8b 40 14             	mov    0x14(%eax),%eax
+c0109878:	8b 55 08             	mov    0x8(%ebp),%edx
+c010987b:	89 50 70             	mov    %edx,0x70(%eax)
+    nr_process ++;
+c010987e:	a1 40 0e 1b c0       	mov    0xc01b0e40,%eax
+c0109883:	83 c0 01             	add    $0x1,%eax
+c0109886:	a3 40 0e 1b c0       	mov    %eax,0xc01b0e40
+}
+c010988b:	c9                   	leave  
+c010988c:	c3                   	ret    
+
+c010988d <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+c010988d:	55                   	push   %ebp
+c010988e:	89 e5                	mov    %esp,%ebp
+c0109890:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c0109893:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109896:	83 c0 58             	add    $0x58,%eax
+c0109899:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010989c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010989f:	8b 40 04             	mov    0x4(%eax),%eax
+c01098a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01098a5:	8b 12                	mov    (%edx),%edx
+c01098a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c01098aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01098ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01098b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01098b3:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01098b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098b9:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c01098bc:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL) {
+c01098be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098c1:	8b 40 78             	mov    0x78(%eax),%eax
+c01098c4:	85 c0                	test   %eax,%eax
+c01098c6:	74 0f                	je     c01098d7 <remove_links+0x4a>
+        proc->optr->yptr = proc->yptr;
+c01098c8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098cb:	8b 40 78             	mov    0x78(%eax),%eax
+c01098ce:	8b 55 08             	mov    0x8(%ebp),%edx
+c01098d1:	8b 52 74             	mov    0x74(%edx),%edx
+c01098d4:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    if (proc->yptr != NULL) {
+c01098d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098da:	8b 40 74             	mov    0x74(%eax),%eax
+c01098dd:	85 c0                	test   %eax,%eax
+c01098df:	74 11                	je     c01098f2 <remove_links+0x65>
+        proc->yptr->optr = proc->optr;
+c01098e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098e4:	8b 40 74             	mov    0x74(%eax),%eax
+c01098e7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01098ea:	8b 52 78             	mov    0x78(%edx),%edx
+c01098ed:	89 50 78             	mov    %edx,0x78(%eax)
+c01098f0:	eb 0f                	jmp    c0109901 <remove_links+0x74>
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+c01098f2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098f5:	8b 40 14             	mov    0x14(%eax),%eax
+c01098f8:	8b 55 08             	mov    0x8(%ebp),%edx
+c01098fb:	8b 52 78             	mov    0x78(%edx),%edx
+c01098fe:	89 50 70             	mov    %edx,0x70(%eax)
+    }
+    nr_process --;
+c0109901:	a1 40 0e 1b c0       	mov    0xc01b0e40,%eax
+c0109906:	83 e8 01             	sub    $0x1,%eax
+c0109909:	a3 40 0e 1b c0       	mov    %eax,0xc01b0e40
+}
+c010990e:	c9                   	leave  
+c010990f:	c3                   	ret    
+
+c0109910 <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+c0109910:	55                   	push   %ebp
+c0109911:	89 e5                	mov    %esp,%ebp
+c0109913:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c0109916:	c7 45 f8 70 0f 1b c0 	movl   $0xc01b0f70,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+c010991d:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c0109922:	83 c0 01             	add    $0x1,%eax
+c0109925:	a3 80 ca 12 c0       	mov    %eax,0xc012ca80
+c010992a:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c010992f:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0109934:	7e 0c                	jle    c0109942 <get_pid+0x32>
+        last_pid = 1;
+c0109936:	c7 05 80 ca 12 c0 01 	movl   $0x1,0xc012ca80
+c010993d:	00 00 00 
+        goto inside;
+c0109940:	eb 13                	jmp    c0109955 <get_pid+0x45>
+    }
+    if (last_pid >= next_safe) {
+c0109942:	8b 15 80 ca 12 c0    	mov    0xc012ca80,%edx
+c0109948:	a1 84 ca 12 c0       	mov    0xc012ca84,%eax
+c010994d:	39 c2                	cmp    %eax,%edx
+c010994f:	0f 8c ac 00 00 00    	jl     c0109a01 <get_pid+0xf1>
+    inside:
+        next_safe = MAX_PID;
+c0109955:	c7 05 84 ca 12 c0 00 	movl   $0x2000,0xc012ca84
+c010995c:	20 00 00 
+    repeat:
+        le = list;
+c010995f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109962:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list) {
+c0109965:	eb 7f                	jmp    c01099e6 <get_pid+0xd6>
+            proc = le2proc(le, list_link);
+c0109967:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010996a:	83 e8 58             	sub    $0x58,%eax
+c010996d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid) {
+c0109970:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109973:	8b 50 04             	mov    0x4(%eax),%edx
+c0109976:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c010997b:	39 c2                	cmp    %eax,%edx
+c010997d:	75 3e                	jne    c01099bd <get_pid+0xad>
+                if (++ last_pid >= next_safe) {
+c010997f:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c0109984:	83 c0 01             	add    $0x1,%eax
+c0109987:	a3 80 ca 12 c0       	mov    %eax,0xc012ca80
+c010998c:	8b 15 80 ca 12 c0    	mov    0xc012ca80,%edx
+c0109992:	a1 84 ca 12 c0       	mov    0xc012ca84,%eax
+c0109997:	39 c2                	cmp    %eax,%edx
+c0109999:	7c 4b                	jl     c01099e6 <get_pid+0xd6>
+                    if (last_pid >= MAX_PID) {
+c010999b:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c01099a0:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c01099a5:	7e 0a                	jle    c01099b1 <get_pid+0xa1>
+                        last_pid = 1;
+c01099a7:	c7 05 80 ca 12 c0 01 	movl   $0x1,0xc012ca80
+c01099ae:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c01099b1:	c7 05 84 ca 12 c0 00 	movl   $0x2000,0xc012ca84
+c01099b8:	20 00 00 
+                    goto repeat;
+c01099bb:	eb a2                	jmp    c010995f <get_pid+0x4f>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+c01099bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01099c0:	8b 50 04             	mov    0x4(%eax),%edx
+c01099c3:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+c01099c8:	39 c2                	cmp    %eax,%edx
+c01099ca:	7e 1a                	jle    c01099e6 <get_pid+0xd6>
+c01099cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01099cf:	8b 50 04             	mov    0x4(%eax),%edx
+c01099d2:	a1 84 ca 12 c0       	mov    0xc012ca84,%eax
+c01099d7:	39 c2                	cmp    %eax,%edx
+c01099d9:	7d 0b                	jge    c01099e6 <get_pid+0xd6>
+                next_safe = proc->pid;
+c01099db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01099de:	8b 40 04             	mov    0x4(%eax),%eax
+c01099e1:	a3 84 ca 12 c0       	mov    %eax,0xc012ca84
+c01099e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01099e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01099ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01099ef:	8b 40 04             	mov    0x4(%eax),%eax
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+c01099f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01099f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01099f8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01099fb:	0f 85 66 ff ff ff    	jne    c0109967 <get_pid+0x57>
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+c0109a01:	a1 80 ca 12 c0       	mov    0xc012ca80,%eax
+}
+c0109a06:	c9                   	leave  
+c0109a07:	c3                   	ret    
+
+c0109a08 <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+c0109a08:	55                   	push   %ebp
+c0109a09:	89 e5                	mov    %esp,%ebp
+c0109a0b:	83 ec 28             	sub    $0x28,%esp
+    if (proc != current) {
+c0109a0e:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0109a13:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0109a16:	74 63                	je     c0109a7b <proc_run+0x73>
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c0109a18:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0109a1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109a20:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a23:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c0109a26:	e8 91 f9 ff ff       	call   c01093bc <__intr_save>
+c0109a2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c0109a2e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a31:	a3 28 ee 1a c0       	mov    %eax,0xc01aee28
+            load_esp0(next->kstack + KSTACKSIZE);
+c0109a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109a39:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109a3c:	05 00 20 00 00       	add    $0x2000,%eax
+c0109a41:	89 04 24             	mov    %eax,(%esp)
+c0109a44:	e8 29 b6 ff ff       	call   c0105072 <load_esp0>
+            lcr3(next->cr3);
+c0109a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109a4c:	8b 40 40             	mov    0x40(%eax),%eax
+c0109a4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0109a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109a55:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c0109a58:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109a5b:	8d 50 1c             	lea    0x1c(%eax),%edx
+c0109a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a61:	83 c0 1c             	add    $0x1c,%eax
+c0109a64:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109a68:	89 04 24             	mov    %eax,(%esp)
+c0109a6b:	e8 94 15 00 00       	call   c010b004 <switch_to>
+        }
+        local_intr_restore(intr_flag);
+c0109a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109a73:	89 04 24             	mov    %eax,(%esp)
+c0109a76:	e8 6b f9 ff ff       	call   c01093e6 <__intr_restore>
+    }
+}
+c0109a7b:	c9                   	leave  
+c0109a7c:	c3                   	ret    
+
+c0109a7d <forkret>:
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+c0109a7d:	55                   	push   %ebp
+c0109a7e:	89 e5                	mov    %esp,%ebp
+c0109a80:	83 ec 18             	sub    $0x18,%esp
+    forkrets(current->tf);
+c0109a83:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0109a88:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109a8b:	89 04 24             	mov    %eax,(%esp)
+c0109a8e:	e8 95 90 ff ff       	call   c0102b28 <forkrets>
+}
+c0109a93:	c9                   	leave  
+c0109a94:	c3                   	ret    
+
+c0109a95 <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+c0109a95:	55                   	push   %ebp
+c0109a96:	89 e5                	mov    %esp,%ebp
+c0109a98:	53                   	push   %ebx
+c0109a99:	83 ec 34             	sub    $0x34,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c0109a9c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a9f:	8d 58 60             	lea    0x60(%eax),%ebx
+c0109aa2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109aa5:	8b 40 04             	mov    0x4(%eax),%eax
+c0109aa8:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c0109aaf:	00 
+c0109ab0:	89 04 24             	mov    %eax,(%esp)
+c0109ab3:	e8 32 1c 00 00       	call   c010b6ea <hash32>
+c0109ab8:	c1 e0 03             	shl    $0x3,%eax
+c0109abb:	05 40 ee 1a c0       	add    $0xc01aee40,%eax
+c0109ac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109ac3:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c0109ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ac9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109acf:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0109ad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109ad5:	8b 40 04             	mov    0x4(%eax),%eax
+c0109ad8:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109adb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0109ade:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109ae1:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0109ae4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0109ae7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109aea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109aed:	89 10                	mov    %edx,(%eax)
+c0109aef:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109af2:	8b 10                	mov    (%eax),%edx
+c0109af4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109af7:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109afa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109afd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0109b00:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109b03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109b06:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109b09:	89 10                	mov    %edx,(%eax)
+}
+c0109b0b:	83 c4 34             	add    $0x34,%esp
+c0109b0e:	5b                   	pop    %ebx
+c0109b0f:	5d                   	pop    %ebp
+c0109b10:	c3                   	ret    
+
+c0109b11 <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+c0109b11:	55                   	push   %ebp
+c0109b12:	89 e5                	mov    %esp,%ebp
+c0109b14:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c0109b17:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b1a:	83 c0 60             	add    $0x60,%eax
+c0109b1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0109b20:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109b23:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b26:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109b29:	8b 12                	mov    (%edx),%edx
+c0109b2b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0109b2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0109b31:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109b34:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109b37:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b3d:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0109b40:	89 10                	mov    %edx,(%eax)
+}
+c0109b42:	c9                   	leave  
+c0109b43:	c3                   	ret    
+
+c0109b44 <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+c0109b44:	55                   	push   %ebp
+c0109b45:	89 e5                	mov    %esp,%ebp
+c0109b47:	83 ec 28             	sub    $0x28,%esp
+    if (0 < pid && pid < MAX_PID) {
+c0109b4a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109b4e:	7e 5f                	jle    c0109baf <find_proc+0x6b>
+c0109b50:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c0109b57:	7f 56                	jg     c0109baf <find_proc+0x6b>
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c0109b59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b5c:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c0109b63:	00 
+c0109b64:	89 04 24             	mov    %eax,(%esp)
+c0109b67:	e8 7e 1b 00 00       	call   c010b6ea <hash32>
+c0109b6c:	c1 e0 03             	shl    $0x3,%eax
+c0109b6f:	05 40 ee 1a c0       	add    $0xc01aee40,%eax
+c0109b74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109b77:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list) {
+c0109b7d:	eb 19                	jmp    c0109b98 <find_proc+0x54>
+            struct proc_struct *proc = le2proc(le, hash_link);
+c0109b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b82:	83 e8 60             	sub    $0x60,%eax
+c0109b85:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid) {
+c0109b88:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109b8b:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b8e:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109b91:	75 05                	jne    c0109b98 <find_proc+0x54>
+                return proc;
+c0109b93:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109b96:	eb 1c                	jmp    c0109bb4 <find_proc+0x70>
+c0109b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109b9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109ba1:	8b 40 04             	mov    0x4(%eax),%eax
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+c0109ba4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109baa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0109bad:	75 d0                	jne    c0109b7f <find_proc+0x3b>
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+c0109baf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109bb4:	c9                   	leave  
+c0109bb5:	c3                   	ret    
+
+c0109bb6 <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+c0109bb6:	55                   	push   %ebp
+c0109bb7:	89 e5                	mov    %esp,%ebp
+c0109bb9:	83 ec 68             	sub    $0x68,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c0109bbc:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c0109bc3:	00 
+c0109bc4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109bcb:	00 
+c0109bcc:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109bcf:	89 04 24             	mov    %eax,(%esp)
+c0109bd2:	e8 c0 25 00 00       	call   c010c197 <memset>
+    tf.tf_cs = KERNEL_CS;
+c0109bd7:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c0109bdd:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c0109be3:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0109be7:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c0109beb:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c0109bef:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c0109bf3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109bf6:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c0109bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109bfc:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c0109bff:	b8 73 93 10 c0       	mov    $0xc0109373,%eax
+c0109c04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c0109c07:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109c0a:	80 cc 01             	or     $0x1,%ah
+c0109c0d:	89 c2                	mov    %eax,%edx
+c0109c0f:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109c12:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109c16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109c1d:	00 
+c0109c1e:	89 14 24             	mov    %edx,(%esp)
+c0109c21:	e8 25 03 00 00       	call   c0109f4b <do_fork>
+}
+c0109c26:	c9                   	leave  
+c0109c27:	c3                   	ret    
+
+c0109c28 <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+c0109c28:	55                   	push   %ebp
+c0109c29:	89 e5                	mov    %esp,%ebp
+c0109c2b:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c0109c2e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c0109c35:	e8 86 b5 ff ff       	call   c01051c0 <alloc_pages>
+c0109c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c0109c3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109c41:	74 1a                	je     c0109c5d <setup_kstack+0x35>
+        proc->kstack = (uintptr_t)page2kva(page);
+c0109c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c46:	89 04 24             	mov    %eax,(%esp)
+c0109c49:	e8 96 f8 ff ff       	call   c01094e4 <page2kva>
+c0109c4e:	89 c2                	mov    %eax,%edx
+c0109c50:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c53:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c0109c56:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109c5b:	eb 05                	jmp    c0109c62 <setup_kstack+0x3a>
+    }
+    return -E_NO_MEM;
+c0109c5d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c0109c62:	c9                   	leave  
+c0109c63:	c3                   	ret    
+
+c0109c64 <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+c0109c64:	55                   	push   %ebp
+c0109c65:	89 e5                	mov    %esp,%ebp
+c0109c67:	83 ec 18             	sub    $0x18,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c0109c6a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c6d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109c70:	89 04 24             	mov    %eax,(%esp)
+c0109c73:	e8 c0 f8 ff ff       	call   c0109538 <kva2page>
+c0109c78:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c0109c7f:	00 
+c0109c80:	89 04 24             	mov    %eax,(%esp)
+c0109c83:	e8 a3 b5 ff ff       	call   c010522b <free_pages>
+}
+c0109c88:	c9                   	leave  
+c0109c89:	c3                   	ret    
+
+c0109c8a <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+c0109c8a:	55                   	push   %ebp
+c0109c8b:	89 e5                	mov    %esp,%ebp
+c0109c8d:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+c0109c90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109c97:	e8 24 b5 ff ff       	call   c01051c0 <alloc_pages>
+c0109c9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109c9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109ca3:	75 0a                	jne    c0109caf <setup_pgdir+0x25>
+        return -E_NO_MEM;
+c0109ca5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0109caa:	e9 80 00 00 00       	jmp    c0109d2f <setup_pgdir+0xa5>
+    }
+    pde_t *pgdir = page2kva(page);
+c0109caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cb2:	89 04 24             	mov    %eax,(%esp)
+c0109cb5:	e8 2a f8 ff ff       	call   c01094e4 <page2kva>
+c0109cba:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c0109cbd:	a1 84 ed 1a c0       	mov    0xc01aed84,%eax
+c0109cc2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0109cc9:	00 
+c0109cca:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109cd1:	89 04 24             	mov    %eax,(%esp)
+c0109cd4:	e8 a0 25 00 00       	call   c010c279 <memcpy>
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c0109cd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109cdc:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0109ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ce5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109ce8:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c0109cef:	77 23                	ja     c0109d14 <setup_pgdir+0x8a>
+c0109cf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109cf4:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109cf8:	c7 44 24 08 3c e3 10 	movl   $0xc010e33c,0x8(%esp)
+c0109cff:	c0 
+c0109d00:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
+c0109d07:	00 
+c0109d08:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c0109d0f:	e8 ad 70 ff ff       	call   c0100dc1 <__panic>
+c0109d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109d17:	05 00 00 00 40       	add    $0x40000000,%eax
+c0109d1c:	83 c8 03             	or     $0x3,%eax
+c0109d1f:	89 02                	mov    %eax,(%edx)
+    mm->pgdir = pgdir;
+c0109d21:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d24:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109d27:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c0109d2a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109d2f:	c9                   	leave  
+c0109d30:	c3                   	ret    
+
+c0109d31 <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+c0109d31:	55                   	push   %ebp
+c0109d32:	89 e5                	mov    %esp,%ebp
+c0109d34:	83 ec 18             	sub    $0x18,%esp
+    free_page(kva2page(mm->pgdir));
+c0109d37:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d3a:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109d3d:	89 04 24             	mov    %eax,(%esp)
+c0109d40:	e8 f3 f7 ff ff       	call   c0109538 <kva2page>
+c0109d45:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0109d4c:	00 
+c0109d4d:	89 04 24             	mov    %eax,(%esp)
+c0109d50:	e8 d6 b4 ff ff       	call   c010522b <free_pages>
+}
+c0109d55:	c9                   	leave  
+c0109d56:	c3                   	ret    
+
+c0109d57 <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+c0109d57:	55                   	push   %ebp
+c0109d58:	89 e5                	mov    %esp,%ebp
+c0109d5a:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c0109d5d:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0109d62:	8b 40 18             	mov    0x18(%eax),%eax
+c0109d65:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+c0109d68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0109d6c:	75 0a                	jne    c0109d78 <copy_mm+0x21>
+        return 0;
+c0109d6e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109d73:	e9 f9 00 00 00       	jmp    c0109e71 <copy_mm+0x11a>
+    }
+    if (clone_flags & CLONE_VM) {
+c0109d78:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d7b:	25 00 01 00 00       	and    $0x100,%eax
+c0109d80:	85 c0                	test   %eax,%eax
+c0109d82:	74 08                	je     c0109d8c <copy_mm+0x35>
+        mm = oldmm;
+c0109d84:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c0109d8a:	eb 78                	jmp    c0109e04 <copy_mm+0xad>
+    }
+
+    int ret = -E_NO_MEM;
+c0109d8c:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL) {
+c0109d93:	e8 85 e2 ff ff       	call   c010801d <mm_create>
+c0109d98:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109d9f:	75 05                	jne    c0109da6 <copy_mm+0x4f>
+        goto bad_mm;
+c0109da1:	e9 c8 00 00 00       	jmp    c0109e6e <copy_mm+0x117>
+    }
+    if (setup_pgdir(mm) != 0) {
+c0109da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109da9:	89 04 24             	mov    %eax,(%esp)
+c0109dac:	e8 d9 fe ff ff       	call   c0109c8a <setup_pgdir>
+c0109db1:	85 c0                	test   %eax,%eax
+c0109db3:	74 05                	je     c0109dba <copy_mm+0x63>
+        goto bad_pgdir_cleanup_mm;
+c0109db5:	e9 a9 00 00 00       	jmp    c0109e63 <copy_mm+0x10c>
+    }
+
+    lock_mm(oldmm);
+c0109dba:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dbd:	89 04 24             	mov    %eax,(%esp)
+c0109dc0:	e8 f1 f7 ff ff       	call   c01095b6 <lock_mm>
+    {
+        ret = dup_mmap(mm, oldmm);
+c0109dc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dc8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109dcf:	89 04 24             	mov    %eax,(%esp)
+c0109dd2:	e8 5d e7 ff ff       	call   c0108534 <dup_mmap>
+c0109dd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c0109dda:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109ddd:	89 04 24             	mov    %eax,(%esp)
+c0109de0:	e8 ed f7 ff ff       	call   c01095d2 <unlock_mm>
+
+    if (ret != 0) {
+c0109de5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109de9:	74 19                	je     c0109e04 <copy_mm+0xad>
+        goto bad_dup_cleanup_mmap;
+c0109deb:	90                   	nop
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c0109dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109def:	89 04 24             	mov    %eax,(%esp)
+c0109df2:	e8 3e e8 ff ff       	call   c0108635 <exit_mmap>
+    put_pgdir(mm);
+c0109df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109dfa:	89 04 24             	mov    %eax,(%esp)
+c0109dfd:	e8 2f ff ff ff       	call   c0109d31 <put_pgdir>
+c0109e02:	eb 5f                	jmp    c0109e63 <copy_mm+0x10c>
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+c0109e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e07:	89 04 24             	mov    %eax,(%esp)
+c0109e0a:	e8 73 f7 ff ff       	call   c0109582 <mm_count_inc>
+    proc->mm = mm;
+c0109e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e12:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109e15:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c0109e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e1b:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109e1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109e21:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c0109e28:	77 23                	ja     c0109e4d <copy_mm+0xf6>
+c0109e2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109e2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109e31:	c7 44 24 08 3c e3 10 	movl   $0xc010e33c,0x8(%esp)
+c0109e38:	c0 
+c0109e39:	c7 44 24 04 6c 01 00 	movl   $0x16c,0x4(%esp)
+c0109e40:	00 
+c0109e41:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c0109e48:	e8 74 6f ff ff       	call   c0100dc1 <__panic>
+c0109e4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109e50:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c0109e56:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109e59:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c0109e5c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109e61:	eb 0e                	jmp    c0109e71 <copy_mm+0x11a>
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c0109e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e66:	89 04 24             	mov    %eax,(%esp)
+c0109e69:	e8 08 e5 ff ff       	call   c0108376 <mm_destroy>
+bad_mm:
+    return ret;
+c0109e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0109e71:	c9                   	leave  
+c0109e72:	c3                   	ret    
+
+c0109e73 <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+c0109e73:	55                   	push   %ebp
+c0109e74:	89 e5                	mov    %esp,%ebp
+c0109e76:	57                   	push   %edi
+c0109e77:	56                   	push   %esi
+c0109e78:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c0109e79:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e7c:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109e7f:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c0109e84:	89 c2                	mov    %eax,%edx
+c0109e86:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e89:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c0109e8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e8f:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109e92:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109e95:	bb 4c 00 00 00       	mov    $0x4c,%ebx
+c0109e9a:	89 c1                	mov    %eax,%ecx
+c0109e9c:	83 e1 01             	and    $0x1,%ecx
+c0109e9f:	85 c9                	test   %ecx,%ecx
+c0109ea1:	74 0e                	je     c0109eb1 <copy_thread+0x3e>
+c0109ea3:	0f b6 0a             	movzbl (%edx),%ecx
+c0109ea6:	88 08                	mov    %cl,(%eax)
+c0109ea8:	83 c0 01             	add    $0x1,%eax
+c0109eab:	83 c2 01             	add    $0x1,%edx
+c0109eae:	83 eb 01             	sub    $0x1,%ebx
+c0109eb1:	89 c1                	mov    %eax,%ecx
+c0109eb3:	83 e1 02             	and    $0x2,%ecx
+c0109eb6:	85 c9                	test   %ecx,%ecx
+c0109eb8:	74 0f                	je     c0109ec9 <copy_thread+0x56>
+c0109eba:	0f b7 0a             	movzwl (%edx),%ecx
+c0109ebd:	66 89 08             	mov    %cx,(%eax)
+c0109ec0:	83 c0 02             	add    $0x2,%eax
+c0109ec3:	83 c2 02             	add    $0x2,%edx
+c0109ec6:	83 eb 02             	sub    $0x2,%ebx
+c0109ec9:	89 d9                	mov    %ebx,%ecx
+c0109ecb:	c1 e9 02             	shr    $0x2,%ecx
+c0109ece:	89 c7                	mov    %eax,%edi
+c0109ed0:	89 d6                	mov    %edx,%esi
+c0109ed2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c0109ed4:	89 f2                	mov    %esi,%edx
+c0109ed6:	89 f8                	mov    %edi,%eax
+c0109ed8:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0109edd:	89 de                	mov    %ebx,%esi
+c0109edf:	83 e6 02             	and    $0x2,%esi
+c0109ee2:	85 f6                	test   %esi,%esi
+c0109ee4:	74 0b                	je     c0109ef1 <copy_thread+0x7e>
+c0109ee6:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
+c0109eea:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
+c0109eee:	83 c1 02             	add    $0x2,%ecx
+c0109ef1:	83 e3 01             	and    $0x1,%ebx
+c0109ef4:	85 db                	test   %ebx,%ebx
+c0109ef6:	74 07                	je     c0109eff <copy_thread+0x8c>
+c0109ef8:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
+c0109efc:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+    proc->tf->tf_regs.reg_eax = 0;
+c0109eff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f02:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109f05:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c0109f0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f0f:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109f12:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109f15:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c0109f18:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f1b:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109f1e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109f21:	8b 52 3c             	mov    0x3c(%edx),%edx
+c0109f24:	8b 52 40             	mov    0x40(%edx),%edx
+c0109f27:	80 ce 02             	or     $0x2,%dh
+c0109f2a:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c0109f2d:	ba 7d 9a 10 c0       	mov    $0xc0109a7d,%edx
+c0109f32:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f35:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c0109f38:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f3b:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109f3e:	89 c2                	mov    %eax,%edx
+c0109f40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f43:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c0109f46:	5b                   	pop    %ebx
+c0109f47:	5e                   	pop    %esi
+c0109f48:	5f                   	pop    %edi
+c0109f49:	5d                   	pop    %ebp
+c0109f4a:	c3                   	ret    
+
+c0109f4b <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+c0109f4b:	55                   	push   %ebp
+c0109f4c:	89 e5                	mov    %esp,%ebp
+c0109f4e:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_NO_FREE_PROC;
+c0109f51:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+c0109f58:	a1 40 0e 1b c0       	mov    0xc01b0e40,%eax
+c0109f5d:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0109f62:	7e 05                	jle    c0109f69 <do_fork+0x1e>
+        goto fork_out;
+c0109f64:	e9 f0 00 00 00       	jmp    c010a059 <do_fork+0x10e>
+    }
+    ret = -E_NO_MEM;
+c0109f69:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+     *   proc_list:    the process set's list
+     *   nr_process:   the number of process set
+     */
+
+    //    1. call alloc_proc to allocate a proc_struct
+if ((proc = alloc_proc()) == NULL) goto fork_out;
+c0109f70:	e8 79 f6 ff ff       	call   c01095ee <alloc_proc>
+c0109f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109f78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109f7c:	75 05                	jne    c0109f83 <do_fork+0x38>
+c0109f7e:	e9 d6 00 00 00       	jmp    c010a059 <do_fork+0x10e>
+    assert(current->wait_state == 0);
+c0109f83:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c0109f88:	8b 40 6c             	mov    0x6c(%eax),%eax
+c0109f8b:	85 c0                	test   %eax,%eax
+c0109f8d:	74 24                	je     c0109fb3 <do_fork+0x68>
+c0109f8f:	c7 44 24 0c 74 e3 10 	movl   $0xc010e374,0xc(%esp)
+c0109f96:	c0 
+c0109f97:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c0109f9e:	c0 
+c0109f9f:	c7 44 24 04 a6 01 00 	movl   $0x1a6,0x4(%esp)
+c0109fa6:	00 
+c0109fa7:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c0109fae:	e8 0e 6e ff ff       	call   c0100dc1 <__panic>
+    proc->parent = current;
+c0109fb3:	8b 15 28 ee 1a c0    	mov    0xc01aee28,%edx
+c0109fb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109fbc:	89 50 14             	mov    %edx,0x14(%eax)
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+c0109fbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109fc2:	89 04 24             	mov    %eax,(%esp)
+c0109fc5:	e8 5e fc ff ff       	call   c0109c28 <setup_kstack>
+c0109fca:	85 c0                	test   %eax,%eax
+c0109fcc:	74 05                	je     c0109fd3 <do_fork+0x88>
+c0109fce:	e9 8b 00 00 00       	jmp    c010a05e <do_fork+0x113>
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+c0109fd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109fd6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109fda:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0109fe1:	e8 71 fd ff ff       	call   c0109d57 <copy_mm>
+c0109fe6:	85 c0                	test   %eax,%eax
+c0109fe8:	74 0e                	je     c0109ff8 <do_fork+0xad>
+c0109fea:	90                   	nop
+	
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c0109feb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109fee:	89 04 24             	mov    %eax,(%esp)
+c0109ff1:	e8 6e fc ff ff       	call   c0109c64 <put_kstack>
+c0109ff6:	eb 66                	jmp    c010a05e <do_fork+0x113>
+    //    2. call setup_kstack to allocate a kernel stack for child process
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc;
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    if (copy_mm(0, proc) != 0) goto bad_fork_cleanup_kstack;
+    //    4. call copy_thread to setup tf & context in proc_struct
+    copy_thread(proc, stack, tf);
+c0109ff8:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109ffb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109fff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a002:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a006:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a009:	89 04 24             	mov    %eax,(%esp)
+c010a00c:	e8 62 fe ff ff       	call   c0109e73 <copy_thread>
+    //    5. insert proc_struct into hash_list && proc_list
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010a011:	e8 a6 f3 ff ff       	call   c01093bc <__intr_save>
+c010a016:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        proc->pid = get_pid();
+c010a019:	e8 f2 f8 ff ff       	call   c0109910 <get_pid>
+c010a01e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a021:	89 42 04             	mov    %eax,0x4(%edx)
+        hash_proc(proc);
+c010a024:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a027:	89 04 24             	mov    %eax,(%esp)
+c010a02a:	e8 66 fa ff ff       	call   c0109a95 <hash_proc>
+        set_links(proc);
+c010a02f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a032:	89 04 24             	mov    %eax,(%esp)
+c010a035:	e8 ae f7 ff ff       	call   c01097e8 <set_links>
+    }
+    local_intr_restore(intr_flag);
+c010a03a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a03d:	89 04 24             	mov    %eax,(%esp)
+c010a040:	e8 a1 f3 ff ff       	call   c01093e6 <__intr_restore>
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    wakeup_proc(proc);
+c010a045:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a048:	89 04 24             	mov    %eax,(%esp)
+c010a04b:	e8 52 13 00 00       	call   c010b3a2 <wakeup_proc>
+    //    7. set ret vaule using child proc's pid
+    ret = proc->pid;
+c010a050:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a053:	8b 40 04             	mov    0x4(%eax),%eax
+c010a056:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+	
+fork_out:
+    return ret;
+c010a059:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a05c:	eb 0d                	jmp    c010a06b <do_fork+0x120>
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+c010a05e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a061:	89 04 24             	mov    %eax,(%esp)
+c010a064:	e8 fd ac ff ff       	call   c0104d66 <kfree>
+    goto fork_out;
+c010a069:	eb ee                	jmp    c010a059 <do_fork+0x10e>
+}
+c010a06b:	c9                   	leave  
+c010a06c:	c3                   	ret    
+
+c010a06d <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+c010a06d:	55                   	push   %ebp
+c010a06e:	89 e5                	mov    %esp,%ebp
+c010a070:	83 ec 28             	sub    $0x28,%esp
+    if (current == idleproc) {
+c010a073:	8b 15 28 ee 1a c0    	mov    0xc01aee28,%edx
+c010a079:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010a07e:	39 c2                	cmp    %eax,%edx
+c010a080:	75 1c                	jne    c010a09e <do_exit+0x31>
+        panic("idleproc exit.\n");
+c010a082:	c7 44 24 08 a2 e3 10 	movl   $0xc010e3a2,0x8(%esp)
+c010a089:	c0 
+c010a08a:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
+c010a091:	00 
+c010a092:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a099:	e8 23 6d ff ff       	call   c0100dc1 <__panic>
+    }
+    if (current == initproc) {
+c010a09e:	8b 15 28 ee 1a c0    	mov    0xc01aee28,%edx
+c010a0a4:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a0a9:	39 c2                	cmp    %eax,%edx
+c010a0ab:	75 1c                	jne    c010a0c9 <do_exit+0x5c>
+        panic("initproc exit.\n");
+c010a0ad:	c7 44 24 08 b2 e3 10 	movl   $0xc010e3b2,0x8(%esp)
+c010a0b4:	c0 
+c010a0b5:	c7 44 24 04 d8 01 00 	movl   $0x1d8,0x4(%esp)
+c010a0bc:	00 
+c010a0bd:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a0c4:	e8 f8 6c ff ff       	call   c0100dc1 <__panic>
+    }
+    
+    struct mm_struct *mm = current->mm;
+c010a0c9:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a0ce:	8b 40 18             	mov    0x18(%eax),%eax
+c010a0d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL) {
+c010a0d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a0d8:	74 4a                	je     c010a124 <do_exit+0xb7>
+        lcr3(boot_cr3);
+c010a0da:	a1 8c 0e 1b c0       	mov    0xc01b0e8c,%eax
+c010a0df:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010a0e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a0e5:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010a0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a0eb:	89 04 24             	mov    %eax,(%esp)
+c010a0ee:	e8 a9 f4 ff ff       	call   c010959c <mm_count_dec>
+c010a0f3:	85 c0                	test   %eax,%eax
+c010a0f5:	75 21                	jne    c010a118 <do_exit+0xab>
+            exit_mmap(mm);
+c010a0f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a0fa:	89 04 24             	mov    %eax,(%esp)
+c010a0fd:	e8 33 e5 ff ff       	call   c0108635 <exit_mmap>
+            put_pgdir(mm);
+c010a102:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a105:	89 04 24             	mov    %eax,(%esp)
+c010a108:	e8 24 fc ff ff       	call   c0109d31 <put_pgdir>
+            mm_destroy(mm);
+c010a10d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a110:	89 04 24             	mov    %eax,(%esp)
+c010a113:	e8 5e e2 ff ff       	call   c0108376 <mm_destroy>
+        }
+        current->mm = NULL;
+c010a118:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a11d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c010a124:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a129:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c010a12f:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a134:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a137:	89 50 68             	mov    %edx,0x68(%eax)
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c010a13a:	e8 7d f2 ff ff       	call   c01093bc <__intr_save>
+c010a13f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010a142:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a147:	8b 40 14             	mov    0x14(%eax),%eax
+c010a14a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD) {
+c010a14d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a150:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a153:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a158:	75 10                	jne    c010a16a <do_exit+0xfd>
+            wakeup_proc(proc);
+c010a15a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a15d:	89 04 24             	mov    %eax,(%esp)
+c010a160:	e8 3d 12 00 00       	call   c010b3a2 <wakeup_proc>
+        }
+        while (current->cptr != NULL) {
+c010a165:	e9 8b 00 00 00       	jmp    c010a1f5 <do_exit+0x188>
+c010a16a:	e9 86 00 00 00       	jmp    c010a1f5 <do_exit+0x188>
+            proc = current->cptr;
+c010a16f:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a174:	8b 40 70             	mov    0x70(%eax),%eax
+c010a177:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c010a17a:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a17f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a182:	8b 52 78             	mov    0x78(%edx),%edx
+c010a185:	89 50 70             	mov    %edx,0x70(%eax)
+    
+            proc->yptr = NULL;
+c010a188:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a18b:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+            if ((proc->optr = initproc->cptr) != NULL) {
+c010a192:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a197:	8b 50 70             	mov    0x70(%eax),%edx
+c010a19a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a19d:	89 50 78             	mov    %edx,0x78(%eax)
+c010a1a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1a3:	8b 40 78             	mov    0x78(%eax),%eax
+c010a1a6:	85 c0                	test   %eax,%eax
+c010a1a8:	74 0e                	je     c010a1b8 <do_exit+0x14b>
+                initproc->cptr->yptr = proc;
+c010a1aa:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a1af:	8b 40 70             	mov    0x70(%eax),%eax
+c010a1b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a1b5:	89 50 74             	mov    %edx,0x74(%eax)
+            }
+            proc->parent = initproc;
+c010a1b8:	8b 15 24 ee 1a c0    	mov    0xc01aee24,%edx
+c010a1be:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1c1:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c010a1c4:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a1c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a1cc:	89 50 70             	mov    %edx,0x70(%eax)
+            if (proc->state == PROC_ZOMBIE) {
+c010a1cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a1d2:	8b 00                	mov    (%eax),%eax
+c010a1d4:	83 f8 03             	cmp    $0x3,%eax
+c010a1d7:	75 1c                	jne    c010a1f5 <do_exit+0x188>
+                if (initproc->wait_state == WT_CHILD) {
+c010a1d9:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a1de:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a1e1:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a1e6:	75 0d                	jne    c010a1f5 <do_exit+0x188>
+                    wakeup_proc(initproc);
+c010a1e8:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010a1ed:	89 04 24             	mov    %eax,(%esp)
+c010a1f0:	e8 ad 11 00 00       	call   c010b3a2 <wakeup_proc>
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+c010a1f5:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a1fa:	8b 40 70             	mov    0x70(%eax),%eax
+c010a1fd:	85 c0                	test   %eax,%eax
+c010a1ff:	0f 85 6a ff ff ff    	jne    c010a16f <do_exit+0x102>
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a205:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a208:	89 04 24             	mov    %eax,(%esp)
+c010a20b:	e8 d6 f1 ff ff       	call   c01093e6 <__intr_restore>
+    
+    schedule();
+c010a210:	e8 26 12 00 00       	call   c010b43b <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c010a215:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a21a:	8b 40 04             	mov    0x4(%eax),%eax
+c010a21d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a221:	c7 44 24 08 c4 e3 10 	movl   $0xc010e3c4,0x8(%esp)
+c010a228:	c0 
+c010a229:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
+c010a230:	00 
+c010a231:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a238:	e8 84 6b ff ff       	call   c0100dc1 <__panic>
+
+c010a23d <load_icode>:
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+c010a23d:	55                   	push   %ebp
+c010a23e:	89 e5                	mov    %esp,%ebp
+c010a240:	83 ec 78             	sub    $0x78,%esp
+    if (current->mm != NULL) {
+c010a243:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a248:	8b 40 18             	mov    0x18(%eax),%eax
+c010a24b:	85 c0                	test   %eax,%eax
+c010a24d:	74 1c                	je     c010a26b <load_icode+0x2e>
+        panic("load_icode: current->mm must be empty.\n");
+c010a24f:	c7 44 24 08 e4 e3 10 	movl   $0xc010e3e4,0x8(%esp)
+c010a256:	c0 
+c010a257:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
+c010a25e:	00 
+c010a25f:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a266:	e8 56 6b ff ff       	call   c0100dc1 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010a26b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+c010a272:	e8 a6 dd ff ff       	call   c010801d <mm_create>
+c010a277:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010a27a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010a27e:	75 06                	jne    c010a286 <load_icode+0x49>
+        goto bad_mm;
+c010a280:	90                   	nop
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+c010a281:	e9 ef 05 00 00       	jmp    c010a875 <load_icode+0x638>
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+c010a286:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a289:	89 04 24             	mov    %eax,(%esp)
+c010a28c:	e8 f9 f9 ff ff       	call   c0109c8a <setup_pgdir>
+c010a291:	85 c0                	test   %eax,%eax
+c010a293:	74 05                	je     c010a29a <load_icode+0x5d>
+        goto bad_pgdir_cleanup_mm;
+c010a295:	e9 f6 05 00 00       	jmp    c010a890 <load_icode+0x653>
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c010a29a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a29d:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c010a2a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a2a3:	8b 50 1c             	mov    0x1c(%eax),%edx
+c010a2a6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a2a9:	01 d0                	add    %edx,%eax
+c010a2ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+c010a2ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a2b1:	8b 00                	mov    (%eax),%eax
+c010a2b3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c010a2b8:	74 0c                	je     c010a2c6 <load_icode+0x89>
+        ret = -E_INVAL_ELF;
+c010a2ba:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c010a2c1:	e9 bf 05 00 00       	jmp    c010a885 <load_icode+0x648>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c010a2c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a2c9:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c010a2cd:	0f b7 c0             	movzwl %ax,%eax
+c010a2d0:	c1 e0 05             	shl    $0x5,%eax
+c010a2d3:	89 c2                	mov    %eax,%edx
+c010a2d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2d8:	01 d0                	add    %edx,%eax
+c010a2da:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph ++) {
+c010a2dd:	e9 13 03 00 00       	jmp    c010a5f5 <load_icode+0x3b8>
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+c010a2e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2e5:	8b 00                	mov    (%eax),%eax
+c010a2e7:	83 f8 01             	cmp    $0x1,%eax
+c010a2ea:	74 05                	je     c010a2f1 <load_icode+0xb4>
+            continue ;
+c010a2ec:	e9 00 03 00 00       	jmp    c010a5f1 <load_icode+0x3b4>
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+c010a2f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2f4:	8b 50 10             	mov    0x10(%eax),%edx
+c010a2f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2fa:	8b 40 14             	mov    0x14(%eax),%eax
+c010a2fd:	39 c2                	cmp    %eax,%edx
+c010a2ff:	76 0c                	jbe    c010a30d <load_icode+0xd0>
+            ret = -E_INVAL_ELF;
+c010a301:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010a308:	e9 6d 05 00 00       	jmp    c010a87a <load_icode+0x63d>
+        }
+        if (ph->p_filesz == 0) {
+c010a30d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a310:	8b 40 10             	mov    0x10(%eax),%eax
+c010a313:	85 c0                	test   %eax,%eax
+c010a315:	75 05                	jne    c010a31c <load_icode+0xdf>
+            continue ;
+c010a317:	e9 d5 02 00 00       	jmp    c010a5f1 <load_icode+0x3b4>
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010a31c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010a323:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+c010a32a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a32d:	8b 40 18             	mov    0x18(%eax),%eax
+c010a330:	83 e0 01             	and    $0x1,%eax
+c010a333:	85 c0                	test   %eax,%eax
+c010a335:	74 04                	je     c010a33b <load_icode+0xfe>
+c010a337:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+c010a33b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a33e:	8b 40 18             	mov    0x18(%eax),%eax
+c010a341:	83 e0 02             	and    $0x2,%eax
+c010a344:	85 c0                	test   %eax,%eax
+c010a346:	74 04                	je     c010a34c <load_icode+0x10f>
+c010a348:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+c010a34c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a34f:	8b 40 18             	mov    0x18(%eax),%eax
+c010a352:	83 e0 04             	and    $0x4,%eax
+c010a355:	85 c0                	test   %eax,%eax
+c010a357:	74 04                	je     c010a35d <load_icode+0x120>
+c010a359:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+c010a35d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a360:	83 e0 02             	and    $0x2,%eax
+c010a363:	85 c0                	test   %eax,%eax
+c010a365:	74 04                	je     c010a36b <load_icode+0x12e>
+c010a367:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+c010a36b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a36e:	8b 50 14             	mov    0x14(%eax),%edx
+c010a371:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a374:	8b 40 08             	mov    0x8(%eax),%eax
+c010a377:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a37e:	00 
+c010a37f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c010a382:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010a386:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a38a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a38e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a391:	89 04 24             	mov    %eax,(%esp)
+c010a394:	e8 7f e0 ff ff       	call   c0108418 <mm_map>
+c010a399:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a39c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a3a0:	74 05                	je     c010a3a7 <load_icode+0x16a>
+            goto bad_cleanup_mmap;
+c010a3a2:	e9 d3 04 00 00       	jmp    c010a87a <load_icode+0x63d>
+        }
+        unsigned char *from = binary + ph->p_offset;
+c010a3a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3aa:	8b 50 04             	mov    0x4(%eax),%edx
+c010a3ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a3b0:	01 d0                	add    %edx,%eax
+c010a3b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c010a3b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3b8:	8b 40 08             	mov    0x8(%eax),%eax
+c010a3bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010a3be:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a3c1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010a3c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010a3c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010a3cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c010a3cf:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c010a3d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3d9:	8b 50 08             	mov    0x8(%eax),%edx
+c010a3dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3df:	8b 40 10             	mov    0x10(%eax),%eax
+c010a3e2:	01 d0                	add    %edx,%eax
+c010a3e4:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010a3e7:	e9 90 00 00 00       	jmp    c010a47c <load_icode+0x23f>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010a3ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a3ef:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a3f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a3f5:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a3f9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a3fc:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a400:	89 04 24             	mov    %eax,(%esp)
+c010a403:	e8 86 bc ff ff       	call   c010608e <pgdir_alloc_page>
+c010a408:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a40b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a40f:	75 05                	jne    c010a416 <load_icode+0x1d9>
+                goto bad_cleanup_mmap;
+c010a411:	e9 64 04 00 00       	jmp    c010a87a <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a416:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a419:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a41c:	29 c2                	sub    %eax,%edx
+c010a41e:	89 d0                	mov    %edx,%eax
+c010a420:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a423:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a428:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a42b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a42e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010a435:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a438:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a43b:	73 0d                	jae    c010a44a <load_icode+0x20d>
+                size -= la - end;
+c010a43d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a440:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a443:	29 c2                	sub    %eax,%edx
+c010a445:	89 d0                	mov    %edx,%eax
+c010a447:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c010a44a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a44d:	89 04 24             	mov    %eax,(%esp)
+c010a450:	e8 8f f0 ff ff       	call   c01094e4 <page2kva>
+c010a455:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a458:	01 c2                	add    %eax,%edx
+c010a45a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a45d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a461:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010a464:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a468:	89 14 24             	mov    %edx,(%esp)
+c010a46b:	e8 09 1e 00 00       	call   c010c279 <memcpy>
+            start += size, from += size;
+c010a470:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a473:	01 45 d8             	add    %eax,-0x28(%ebp)
+c010a476:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a479:	01 45 e0             	add    %eax,-0x20(%ebp)
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010a47c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a47f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a482:	0f 82 64 ff ff ff    	jb     c010a3ec <load_icode+0x1af>
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c010a488:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a48b:	8b 50 08             	mov    0x8(%eax),%edx
+c010a48e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a491:	8b 40 14             	mov    0x14(%eax),%eax
+c010a494:	01 d0                	add    %edx,%eax
+c010a496:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        if (start < la) {
+c010a499:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a49c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a49f:	0f 83 b0 00 00 00    	jae    c010a555 <load_icode+0x318>
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+c010a4a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a4a8:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a4ab:	75 05                	jne    c010a4b2 <load_icode+0x275>
+                continue ;
+c010a4ad:	e9 3f 01 00 00       	jmp    c010a5f1 <load_icode+0x3b4>
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c010a4b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a4b5:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a4b8:	29 c2                	sub    %eax,%edx
+c010a4ba:	89 d0                	mov    %edx,%eax
+c010a4bc:	05 00 10 00 00       	add    $0x1000,%eax
+c010a4c1:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a4c4:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a4c9:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a4cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la) {
+c010a4cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a4d2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a4d5:	73 0d                	jae    c010a4e4 <load_icode+0x2a7>
+                size -= la - end;
+c010a4d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a4da:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a4dd:	29 c2                	sub    %eax,%edx
+c010a4df:	89 d0                	mov    %edx,%eax
+c010a4e1:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a4e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a4e7:	89 04 24             	mov    %eax,(%esp)
+c010a4ea:	e8 f5 ef ff ff       	call   c01094e4 <page2kva>
+c010a4ef:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a4f2:	01 c2                	add    %eax,%edx
+c010a4f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a4f7:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a4fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a502:	00 
+c010a503:	89 14 24             	mov    %edx,(%esp)
+c010a506:	e8 8c 1c 00 00       	call   c010c197 <memset>
+            start += size;
+c010a50b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a50e:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c010a511:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a514:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a517:	73 08                	jae    c010a521 <load_icode+0x2e4>
+c010a519:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a51c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a51f:	74 34                	je     c010a555 <load_icode+0x318>
+c010a521:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a524:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a527:	72 08                	jb     c010a531 <load_icode+0x2f4>
+c010a529:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a52c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a52f:	74 24                	je     c010a555 <load_icode+0x318>
+c010a531:	c7 44 24 0c 0c e4 10 	movl   $0xc010e40c,0xc(%esp)
+c010a538:	c0 
+c010a539:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010a540:	c0 
+c010a541:	c7 44 24 04 60 02 00 	movl   $0x260,0x4(%esp)
+c010a548:	00 
+c010a549:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a550:	e8 6c 68 ff ff       	call   c0100dc1 <__panic>
+        }
+        while (start < end) {
+c010a555:	e9 8b 00 00 00       	jmp    c010a5e5 <load_icode+0x3a8>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010a55a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a55d:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a560:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a563:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a567:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a56a:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a56e:	89 04 24             	mov    %eax,(%esp)
+c010a571:	e8 18 bb ff ff       	call   c010608e <pgdir_alloc_page>
+c010a576:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a579:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a57d:	75 05                	jne    c010a584 <load_icode+0x347>
+                goto bad_cleanup_mmap;
+c010a57f:	e9 f6 02 00 00       	jmp    c010a87a <load_icode+0x63d>
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a584:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a587:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010a58a:	29 c2                	sub    %eax,%edx
+c010a58c:	89 d0                	mov    %edx,%eax
+c010a58e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a591:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a596:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a599:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a59c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010a5a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a5a6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a5a9:	73 0d                	jae    c010a5b8 <load_icode+0x37b>
+                size -= la - end;
+c010a5ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010a5ae:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c010a5b1:	29 c2                	sub    %eax,%edx
+c010a5b3:	89 d0                	mov    %edx,%eax
+c010a5b5:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a5b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5bb:	89 04 24             	mov    %eax,(%esp)
+c010a5be:	e8 21 ef ff ff       	call   c01094e4 <page2kva>
+c010a5c3:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010a5c6:	01 c2                	add    %eax,%edx
+c010a5c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a5cb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a5cf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a5d6:	00 
+c010a5d7:	89 14 24             	mov    %edx,(%esp)
+c010a5da:	e8 b8 1b 00 00       	call   c010c197 <memset>
+            start += size;
+c010a5df:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a5e2:	01 45 d8             	add    %eax,-0x28(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+c010a5e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a5e8:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010a5eb:	0f 82 69 ff ff ff    	jb     c010a55a <load_icode+0x31d>
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+c010a5f1:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c010a5f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a5f8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010a5fb:	0f 82 e1 fc ff ff    	jb     c010a2e2 <load_icode+0xa5>
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c010a601:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+c010a608:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a60f:	00 
+c010a610:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a613:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a617:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
+c010a61e:	00 
+c010a61f:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
+c010a626:	af 
+c010a627:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a62a:	89 04 24             	mov    %eax,(%esp)
+c010a62d:	e8 e6 dd ff ff       	call   c0108418 <mm_map>
+c010a632:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a635:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a639:	74 05                	je     c010a640 <load_icode+0x403>
+        goto bad_cleanup_mmap;
+c010a63b:	e9 3a 02 00 00       	jmp    c010a87a <load_icode+0x63d>
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+c010a640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a643:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a646:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a64d:	00 
+c010a64e:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
+c010a655:	af 
+c010a656:	89 04 24             	mov    %eax,(%esp)
+c010a659:	e8 30 ba ff ff       	call   c010608e <pgdir_alloc_page>
+c010a65e:	85 c0                	test   %eax,%eax
+c010a660:	75 24                	jne    c010a686 <load_icode+0x449>
+c010a662:	c7 44 24 0c 48 e4 10 	movl   $0xc010e448,0xc(%esp)
+c010a669:	c0 
+c010a66a:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010a671:	c0 
+c010a672:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
+c010a679:	00 
+c010a67a:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a681:	e8 3b 67 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+c010a686:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a689:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a68c:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a693:	00 
+c010a694:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
+c010a69b:	af 
+c010a69c:	89 04 24             	mov    %eax,(%esp)
+c010a69f:	e8 ea b9 ff ff       	call   c010608e <pgdir_alloc_page>
+c010a6a4:	85 c0                	test   %eax,%eax
+c010a6a6:	75 24                	jne    c010a6cc <load_icode+0x48f>
+c010a6a8:	c7 44 24 0c 8c e4 10 	movl   $0xc010e48c,0xc(%esp)
+c010a6af:	c0 
+c010a6b0:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010a6b7:	c0 
+c010a6b8:	c7 44 24 04 74 02 00 	movl   $0x274,0x4(%esp)
+c010a6bf:	00 
+c010a6c0:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a6c7:	e8 f5 66 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+c010a6cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a6cf:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a6d2:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a6d9:	00 
+c010a6da:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
+c010a6e1:	af 
+c010a6e2:	89 04 24             	mov    %eax,(%esp)
+c010a6e5:	e8 a4 b9 ff ff       	call   c010608e <pgdir_alloc_page>
+c010a6ea:	85 c0                	test   %eax,%eax
+c010a6ec:	75 24                	jne    c010a712 <load_icode+0x4d5>
+c010a6ee:	c7 44 24 0c d0 e4 10 	movl   $0xc010e4d0,0xc(%esp)
+c010a6f5:	c0 
+c010a6f6:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010a6fd:	c0 
+c010a6fe:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
+c010a705:	00 
+c010a706:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a70d:	e8 af 66 ff ff       	call   c0100dc1 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+c010a712:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a715:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a718:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a71f:	00 
+c010a720:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
+c010a727:	af 
+c010a728:	89 04 24             	mov    %eax,(%esp)
+c010a72b:	e8 5e b9 ff ff       	call   c010608e <pgdir_alloc_page>
+c010a730:	85 c0                	test   %eax,%eax
+c010a732:	75 24                	jne    c010a758 <load_icode+0x51b>
+c010a734:	c7 44 24 0c 14 e5 10 	movl   $0xc010e514,0xc(%esp)
+c010a73b:	c0 
+c010a73c:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010a743:	c0 
+c010a744:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
+c010a74b:	00 
+c010a74c:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a753:	e8 69 66 ff ff       	call   c0100dc1 <__panic>
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c010a758:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a75b:	89 04 24             	mov    %eax,(%esp)
+c010a75e:	e8 1f ee ff ff       	call   c0109582 <mm_count_inc>
+    current->mm = mm;
+c010a763:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a768:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010a76b:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c010a76e:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a773:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010a776:	8b 52 0c             	mov    0xc(%edx),%edx
+c010a779:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c010a77c:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c010a783:	77 23                	ja     c010a7a8 <load_icode+0x56b>
+c010a785:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010a788:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a78c:	c7 44 24 08 3c e3 10 	movl   $0xc010e33c,0x8(%esp)
+c010a793:	c0 
+c010a794:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
+c010a79b:	00 
+c010a79c:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a7a3:	e8 19 66 ff ff       	call   c0100dc1 <__panic>
+c010a7a8:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010a7ab:	81 c2 00 00 00 40    	add    $0x40000000,%edx
+c010a7b1:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c010a7b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a7b7:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a7ba:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c010a7bd:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
+c010a7c4:	77 23                	ja     c010a7e9 <load_icode+0x5ac>
+c010a7c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a7c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a7cd:	c7 44 24 08 3c e3 10 	movl   $0xc010e33c,0x8(%esp)
+c010a7d4:	c0 
+c010a7d5:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
+c010a7dc:	00 
+c010a7dd:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a7e4:	e8 d8 65 ff ff       	call   c0100dc1 <__panic>
+c010a7e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a7ec:	05 00 00 00 40       	add    $0x40000000,%eax
+c010a7f1:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c010a7f4:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010a7f7:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c010a7fa:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a7ff:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a802:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c010a805:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c010a80c:	00 
+c010a80d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a814:	00 
+c010a815:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a818:	89 04 24             	mov    %eax,(%esp)
+c010a81b:	e8 77 19 00 00       	call   c010c197 <memset>
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c010a820:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a823:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010a829:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a82c:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c010a832:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a835:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010a839:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a83c:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010a840:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a843:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c010a847:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a84a:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c010a84e:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a851:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c010a858:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a85b:	8b 50 18             	mov    0x18(%eax),%edx
+c010a85e:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a861:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags = 0x00000002 | FL_IF; // to enable interrupt
+c010a864:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a867:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
+    ret = 0;
+c010a86e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c010a875:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a878:	eb 23                	jmp    c010a89d <load_icode+0x660>
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c010a87a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a87d:	89 04 24             	mov    %eax,(%esp)
+c010a880:	e8 b0 dd ff ff       	call   c0108635 <exit_mmap>
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c010a885:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a888:	89 04 24             	mov    %eax,(%esp)
+c010a88b:	e8 a1 f4 ff ff       	call   c0109d31 <put_pgdir>
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010a890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a893:	89 04 24             	mov    %eax,(%esp)
+c010a896:	e8 db da ff ff       	call   c0108376 <mm_destroy>
+bad_mm:
+    goto out;
+c010a89b:	eb d8                	jmp    c010a875 <load_icode+0x638>
+}
+c010a89d:	c9                   	leave  
+c010a89e:	c3                   	ret    
+
+c010a89f <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+c010a89f:	55                   	push   %ebp
+c010a8a0:	89 e5                	mov    %esp,%ebp
+c010a8a2:	83 ec 38             	sub    $0x38,%esp
+    struct mm_struct *mm = current->mm;
+c010a8a5:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a8aa:	8b 40 18             	mov    0x18(%eax),%eax
+c010a8ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+c010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a8b3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010a8ba:	00 
+c010a8bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a8be:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a8c2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a8c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a8c9:	89 04 24             	mov    %eax,(%esp)
+c010a8cc:	e8 d5 e7 ff ff       	call   c01090a6 <user_mem_check>
+c010a8d1:	85 c0                	test   %eax,%eax
+c010a8d3:	75 0a                	jne    c010a8df <do_execve+0x40>
+        return -E_INVAL;
+c010a8d5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010a8da:	e9 f4 00 00 00       	jmp    c010a9d3 <do_execve+0x134>
+    }
+    if (len > PROC_NAME_LEN) {
+c010a8df:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
+c010a8e3:	76 07                	jbe    c010a8ec <do_execve+0x4d>
+        len = PROC_NAME_LEN;
+c010a8e5:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c010a8ec:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c010a8f3:	00 
+c010a8f4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a8fb:	00 
+c010a8fc:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010a8ff:	89 04 24             	mov    %eax,(%esp)
+c010a902:	e8 90 18 00 00       	call   c010c197 <memset>
+    memcpy(local_name, name, len);
+c010a907:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a90a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a90e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a911:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a915:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010a918:	89 04 24             	mov    %eax,(%esp)
+c010a91b:	e8 59 19 00 00       	call   c010c279 <memcpy>
+
+    if (mm != NULL) {
+c010a920:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a924:	74 4a                	je     c010a970 <do_execve+0xd1>
+        lcr3(boot_cr3);
+c010a926:	a1 8c 0e 1b c0       	mov    0xc01b0e8c,%eax
+c010a92b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010a92e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a931:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010a934:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a937:	89 04 24             	mov    %eax,(%esp)
+c010a93a:	e8 5d ec ff ff       	call   c010959c <mm_count_dec>
+c010a93f:	85 c0                	test   %eax,%eax
+c010a941:	75 21                	jne    c010a964 <do_execve+0xc5>
+            exit_mmap(mm);
+c010a943:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a946:	89 04 24             	mov    %eax,(%esp)
+c010a949:	e8 e7 dc ff ff       	call   c0108635 <exit_mmap>
+            put_pgdir(mm);
+c010a94e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a951:	89 04 24             	mov    %eax,(%esp)
+c010a954:	e8 d8 f3 ff ff       	call   c0109d31 <put_pgdir>
+            mm_destroy(mm);
+c010a959:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a95c:	89 04 24             	mov    %eax,(%esp)
+c010a95f:	e8 12 da ff ff       	call   c0108376 <mm_destroy>
+        }
+        current->mm = NULL;
+c010a964:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a969:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+c010a970:	8b 45 14             	mov    0x14(%ebp),%eax
+c010a973:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a977:	8b 45 10             	mov    0x10(%ebp),%eax
+c010a97a:	89 04 24             	mov    %eax,(%esp)
+c010a97d:	e8 bb f8 ff ff       	call   c010a23d <load_icode>
+c010a982:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a985:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a989:	74 2f                	je     c010a9ba <do_execve+0x11b>
+        goto execve_exit;
+c010a98b:	90                   	nop
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+c010a98c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a98f:	89 04 24             	mov    %eax,(%esp)
+c010a992:	e8 d6 f6 ff ff       	call   c010a06d <do_exit>
+    panic("already exit: %e.\n", ret);
+c010a997:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a99a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a99e:	c7 44 24 08 57 e5 10 	movl   $0xc010e557,0x8(%esp)
+c010a9a5:	c0 
+c010a9a6:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
+c010a9ad:	00 
+c010a9ae:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010a9b5:	e8 07 64 ff ff       	call   c0100dc1 <__panic>
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c010a9ba:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a9bf:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010a9c2:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a9c6:	89 04 24             	mov    %eax,(%esp)
+c010a9c9:	e8 95 ed ff ff       	call   c0109763 <set_proc_name>
+    return 0;
+c010a9ce:	b8 00 00 00 00       	mov    $0x0,%eax
+
+execve_exit:
+    do_exit(ret);
+    panic("already exit: %e.\n", ret);
+}
+c010a9d3:	c9                   	leave  
+c010a9d4:	c3                   	ret    
+
+c010a9d5 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+c010a9d5:	55                   	push   %ebp
+c010a9d6:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c010a9d8:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a9dd:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c010a9e4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a9e9:	5d                   	pop    %ebp
+c010a9ea:	c3                   	ret    
+
+c010a9eb <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+c010a9eb:	55                   	push   %ebp
+c010a9ec:	89 e5                	mov    %esp,%ebp
+c010a9ee:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = current->mm;
+c010a9f1:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010a9f6:	8b 40 18             	mov    0x18(%eax),%eax
+c010a9f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL) {
+c010a9fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010aa00:	74 30                	je     c010aa32 <do_wait+0x47>
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+c010aa02:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aa05:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c010aa0c:	00 
+c010aa0d:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+c010aa14:	00 
+c010aa15:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010aa19:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa1c:	89 04 24             	mov    %eax,(%esp)
+c010aa1f:	e8 82 e6 ff ff       	call   c01090a6 <user_mem_check>
+c010aa24:	85 c0                	test   %eax,%eax
+c010aa26:	75 0a                	jne    c010aa32 <do_wait+0x47>
+            return -E_INVAL;
+c010aa28:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010aa2d:	e9 4b 01 00 00       	jmp    c010ab7d <do_wait+0x192>
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+c010aa32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0) {
+c010aa39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010aa3d:	74 39                	je     c010aa78 <do_wait+0x8d>
+        proc = find_proc(pid);
+c010aa3f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa42:	89 04 24             	mov    %eax,(%esp)
+c010aa45:	e8 fa f0 ff ff       	call   c0109b44 <find_proc>
+c010aa4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current) {
+c010aa4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010aa51:	74 54                	je     c010aaa7 <do_wait+0xbc>
+c010aa53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa56:	8b 50 14             	mov    0x14(%eax),%edx
+c010aa59:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aa5e:	39 c2                	cmp    %eax,%edx
+c010aa60:	75 45                	jne    c010aaa7 <do_wait+0xbc>
+            haskid = 1;
+c010aa62:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010aa69:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa6c:	8b 00                	mov    (%eax),%eax
+c010aa6e:	83 f8 03             	cmp    $0x3,%eax
+c010aa71:	75 34                	jne    c010aaa7 <do_wait+0xbc>
+                goto found;
+c010aa73:	e9 80 00 00 00       	jmp    c010aaf8 <do_wait+0x10d>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+c010aa78:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aa7d:	8b 40 70             	mov    0x70(%eax),%eax
+c010aa80:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr) {
+c010aa83:	eb 1c                	jmp    c010aaa1 <do_wait+0xb6>
+            haskid = 1;
+c010aa85:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010aa8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa8f:	8b 00                	mov    (%eax),%eax
+c010aa91:	83 f8 03             	cmp    $0x3,%eax
+c010aa94:	75 02                	jne    c010aa98 <do_wait+0xad>
+                goto found;
+c010aa96:	eb 60                	jmp    c010aaf8 <do_wait+0x10d>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+c010aa98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa9b:	8b 40 78             	mov    0x78(%eax),%eax
+c010aa9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010aaa1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010aaa5:	75 de                	jne    c010aa85 <do_wait+0x9a>
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+c010aaa7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010aaab:	74 41                	je     c010aaee <do_wait+0x103>
+        current->state = PROC_SLEEPING;
+c010aaad:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aab2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010aab8:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aabd:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
+        schedule();
+c010aac4:	e8 72 09 00 00       	call   c010b43b <schedule>
+        if (current->flags & PF_EXITING) {
+c010aac9:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aace:	8b 40 44             	mov    0x44(%eax),%eax
+c010aad1:	83 e0 01             	and    $0x1,%eax
+c010aad4:	85 c0                	test   %eax,%eax
+c010aad6:	74 11                	je     c010aae9 <do_wait+0xfe>
+            do_exit(-E_KILLED);
+c010aad8:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c010aadf:	e8 89 f5 ff ff       	call   c010a06d <do_exit>
+        }
+        goto repeat;
+c010aae4:	e9 49 ff ff ff       	jmp    c010aa32 <do_wait+0x47>
+c010aae9:	e9 44 ff ff ff       	jmp    c010aa32 <do_wait+0x47>
+    }
+    return -E_BAD_PROC;
+c010aaee:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010aaf3:	e9 85 00 00 00       	jmp    c010ab7d <do_wait+0x192>
+
+found:
+    if (proc == idleproc || proc == initproc) {
+c010aaf8:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010aafd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010ab00:	74 0a                	je     c010ab0c <do_wait+0x121>
+c010ab02:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010ab07:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010ab0a:	75 1c                	jne    c010ab28 <do_wait+0x13d>
+        panic("wait idleproc or initproc.\n");
+c010ab0c:	c7 44 24 08 6a e5 10 	movl   $0xc010e56a,0x8(%esp)
+c010ab13:	c0 
+c010ab14:	c7 44 24 04 f7 02 00 	movl   $0x2f7,0x4(%esp)
+c010ab1b:	00 
+c010ab1c:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ab23:	e8 99 62 ff ff       	call   c0100dc1 <__panic>
+    }
+    if (code_store != NULL) {
+c010ab28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010ab2c:	74 0b                	je     c010ab39 <do_wait+0x14e>
+        *code_store = proc->exit_code;
+c010ab2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab31:	8b 50 68             	mov    0x68(%eax),%edx
+c010ab34:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ab37:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010ab39:	e8 7e e8 ff ff       	call   c01093bc <__intr_save>
+c010ab3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010ab41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab44:	89 04 24             	mov    %eax,(%esp)
+c010ab47:	e8 c5 ef ff ff       	call   c0109b11 <unhash_proc>
+        remove_links(proc);
+c010ab4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab4f:	89 04 24             	mov    %eax,(%esp)
+c010ab52:	e8 36 ed ff ff       	call   c010988d <remove_links>
+    }
+    local_intr_restore(intr_flag);
+c010ab57:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ab5a:	89 04 24             	mov    %eax,(%esp)
+c010ab5d:	e8 84 e8 ff ff       	call   c01093e6 <__intr_restore>
+    put_kstack(proc);
+c010ab62:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab65:	89 04 24             	mov    %eax,(%esp)
+c010ab68:	e8 f7 f0 ff ff       	call   c0109c64 <put_kstack>
+    kfree(proc);
+c010ab6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab70:	89 04 24             	mov    %eax,(%esp)
+c010ab73:	e8 ee a1 ff ff       	call   c0104d66 <kfree>
+    return 0;
+c010ab78:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ab7d:	c9                   	leave  
+c010ab7e:	c3                   	ret    
+
+c010ab7f <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+c010ab7f:	55                   	push   %ebp
+c010ab80:	89 e5                	mov    %esp,%ebp
+c010ab82:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+c010ab85:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab88:	89 04 24             	mov    %eax,(%esp)
+c010ab8b:	e8 b4 ef ff ff       	call   c0109b44 <find_proc>
+c010ab90:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ab93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ab97:	74 41                	je     c010abda <do_kill+0x5b>
+        if (!(proc->flags & PF_EXITING)) {
+c010ab99:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab9c:	8b 40 44             	mov    0x44(%eax),%eax
+c010ab9f:	83 e0 01             	and    $0x1,%eax
+c010aba2:	85 c0                	test   %eax,%eax
+c010aba4:	75 2d                	jne    c010abd3 <do_kill+0x54>
+            proc->flags |= PF_EXITING;
+c010aba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aba9:	8b 40 44             	mov    0x44(%eax),%eax
+c010abac:	83 c8 01             	or     $0x1,%eax
+c010abaf:	89 c2                	mov    %eax,%edx
+c010abb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010abb4:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED) {
+c010abb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010abba:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010abbd:	85 c0                	test   %eax,%eax
+c010abbf:	79 0b                	jns    c010abcc <do_kill+0x4d>
+                wakeup_proc(proc);
+c010abc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010abc4:	89 04 24             	mov    %eax,(%esp)
+c010abc7:	e8 d6 07 00 00       	call   c010b3a2 <wakeup_proc>
+            }
+            return 0;
+c010abcc:	b8 00 00 00 00       	mov    $0x0,%eax
+c010abd1:	eb 0c                	jmp    c010abdf <do_kill+0x60>
+        }
+        return -E_KILLED;
+c010abd3:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010abd8:	eb 05                	jmp    c010abdf <do_kill+0x60>
+    }
+    return -E_INVAL;
+c010abda:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010abdf:	c9                   	leave  
+c010abe0:	c3                   	ret    
+
+c010abe1 <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+c010abe1:	55                   	push   %ebp
+c010abe2:	89 e5                	mov    %esp,%ebp
+c010abe4:	57                   	push   %edi
+c010abe5:	56                   	push   %esi
+c010abe6:	53                   	push   %ebx
+c010abe7:	83 ec 2c             	sub    $0x2c,%esp
+    int ret, len = strlen(name);
+c010abea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010abed:	89 04 24             	mov    %eax,(%esp)
+c010abf0:	e8 73 12 00 00       	call   c010be68 <strlen>
+c010abf5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile (
+c010abf8:	b8 04 00 00 00       	mov    $0x4,%eax
+c010abfd:	8b 55 08             	mov    0x8(%ebp),%edx
+c010ac00:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010ac03:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010ac06:	8b 75 10             	mov    0x10(%ebp),%esi
+c010ac09:	89 f7                	mov    %esi,%edi
+c010ac0b:	cd 80                	int    $0x80
+c010ac0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+c010ac10:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010ac13:	83 c4 2c             	add    $0x2c,%esp
+c010ac16:	5b                   	pop    %ebx
+c010ac17:	5e                   	pop    %esi
+c010ac18:	5f                   	pop    %edi
+c010ac19:	5d                   	pop    %ebp
+c010ac1a:	c3                   	ret    
+
+c010ac1b <user_main>:
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+c010ac1b:	55                   	push   %ebp
+c010ac1c:	89 e5                	mov    %esp,%ebp
+c010ac1e:	83 ec 18             	sub    $0x18,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010ac21:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010ac26:	8b 40 04             	mov    0x4(%eax),%eax
+c010ac29:	c7 44 24 08 86 e5 10 	movl   $0xc010e586,0x8(%esp)
+c010ac30:	c0 
+c010ac31:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ac35:	c7 04 24 90 e5 10 c0 	movl   $0xc010e590,(%esp)
+c010ac3c:	e8 17 57 ff ff       	call   c0100358 <cprintf>
+c010ac41:	b8 c7 79 00 00       	mov    $0x79c7,%eax
+c010ac46:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010ac4a:	c7 44 24 04 11 05 18 	movl   $0xc0180511,0x4(%esp)
+c010ac51:	c0 
+c010ac52:	c7 04 24 86 e5 10 c0 	movl   $0xc010e586,(%esp)
+c010ac59:	e8 83 ff ff ff       	call   c010abe1 <kernel_execve>
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010ac5e:	c7 44 24 08 b7 e5 10 	movl   $0xc010e5b7,0x8(%esp)
+c010ac65:	c0 
+c010ac66:	c7 44 24 04 40 03 00 	movl   $0x340,0x4(%esp)
+c010ac6d:	00 
+c010ac6e:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ac75:	e8 47 61 ff ff       	call   c0100dc1 <__panic>
+
+c010ac7a <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+c010ac7a:	55                   	push   %ebp
+c010ac7b:	89 e5                	mov    %esp,%ebp
+c010ac7d:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010ac80:	e8 d8 a5 ff ff       	call   c010525d <nr_free_pages>
+c010ac85:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010ac88:	e8 a1 9f ff ff       	call   c0104c2e <kallocated>
+c010ac8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010ac90:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010ac97:	00 
+c010ac98:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010ac9f:	00 
+c010aca0:	c7 04 24 1b ac 10 c0 	movl   $0xc010ac1b,(%esp)
+c010aca7:	e8 0a ef ff ff       	call   c0109bb6 <kernel_thread>
+c010acac:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010acaf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010acb3:	7f 1c                	jg     c010acd1 <init_main+0x57>
+        panic("create user_main failed.\n");
+c010acb5:	c7 44 24 08 d1 e5 10 	movl   $0xc010e5d1,0x8(%esp)
+c010acbc:	c0 
+c010acbd:	c7 44 24 04 4b 03 00 	movl   $0x34b,0x4(%esp)
+c010acc4:	00 
+c010acc5:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010accc:	e8 f0 60 ff ff       	call   c0100dc1 <__panic>
+    }
+
+    while (do_wait(0, NULL) == 0) {
+c010acd1:	eb 05                	jmp    c010acd8 <init_main+0x5e>
+        schedule();
+c010acd3:	e8 63 07 00 00       	call   c010b43b <schedule>
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+c010acd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010acdf:	00 
+c010ace0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010ace7:	e8 ff fc ff ff       	call   c010a9eb <do_wait>
+c010acec:	85 c0                	test   %eax,%eax
+c010acee:	74 e3                	je     c010acd3 <init_main+0x59>
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010acf0:	c7 04 24 ec e5 10 c0 	movl   $0xc010e5ec,(%esp)
+c010acf7:	e8 5c 56 ff ff       	call   c0100358 <cprintf>
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010acfc:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010ad01:	8b 40 70             	mov    0x70(%eax),%eax
+c010ad04:	85 c0                	test   %eax,%eax
+c010ad06:	75 18                	jne    c010ad20 <init_main+0xa6>
+c010ad08:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010ad0d:	8b 40 74             	mov    0x74(%eax),%eax
+c010ad10:	85 c0                	test   %eax,%eax
+c010ad12:	75 0c                	jne    c010ad20 <init_main+0xa6>
+c010ad14:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010ad19:	8b 40 78             	mov    0x78(%eax),%eax
+c010ad1c:	85 c0                	test   %eax,%eax
+c010ad1e:	74 24                	je     c010ad44 <init_main+0xca>
+c010ad20:	c7 44 24 0c 10 e6 10 	movl   $0xc010e610,0xc(%esp)
+c010ad27:	c0 
+c010ad28:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010ad2f:	c0 
+c010ad30:	c7 44 24 04 53 03 00 	movl   $0x353,0x4(%esp)
+c010ad37:	00 
+c010ad38:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ad3f:	e8 7d 60 ff ff       	call   c0100dc1 <__panic>
+    assert(nr_process == 2);
+c010ad44:	a1 40 0e 1b c0       	mov    0xc01b0e40,%eax
+c010ad49:	83 f8 02             	cmp    $0x2,%eax
+c010ad4c:	74 24                	je     c010ad72 <init_main+0xf8>
+c010ad4e:	c7 44 24 0c 5b e6 10 	movl   $0xc010e65b,0xc(%esp)
+c010ad55:	c0 
+c010ad56:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010ad5d:	c0 
+c010ad5e:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
+c010ad65:	00 
+c010ad66:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ad6d:	e8 4f 60 ff ff       	call   c0100dc1 <__panic>
+c010ad72:	c7 45 e8 70 0f 1b c0 	movl   $0xc01b0f70,-0x18(%ebp)
+c010ad79:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ad7c:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010ad7f:	8b 15 24 ee 1a c0    	mov    0xc01aee24,%edx
+c010ad85:	83 c2 58             	add    $0x58,%edx
+c010ad88:	39 d0                	cmp    %edx,%eax
+c010ad8a:	74 24                	je     c010adb0 <init_main+0x136>
+c010ad8c:	c7 44 24 0c 6c e6 10 	movl   $0xc010e66c,0xc(%esp)
+c010ad93:	c0 
+c010ad94:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010ad9b:	c0 
+c010ad9c:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
+c010ada3:	00 
+c010ada4:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010adab:	e8 11 60 ff ff       	call   c0100dc1 <__panic>
+c010adb0:	c7 45 e4 70 0f 1b c0 	movl   $0xc01b0f70,-0x1c(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010adb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010adba:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010adbc:	8b 15 24 ee 1a c0    	mov    0xc01aee24,%edx
+c010adc2:	83 c2 58             	add    $0x58,%edx
+c010adc5:	39 d0                	cmp    %edx,%eax
+c010adc7:	74 24                	je     c010aded <init_main+0x173>
+c010adc9:	c7 44 24 0c 9c e6 10 	movl   $0xc010e69c,0xc(%esp)
+c010add0:	c0 
+c010add1:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010add8:	c0 
+c010add9:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
+c010ade0:	00 
+c010ade1:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ade8:	e8 d4 5f ff ff       	call   c0100dc1 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010aded:	c7 04 24 cc e6 10 c0 	movl   $0xc010e6cc,(%esp)
+c010adf4:	e8 5f 55 ff ff       	call   c0100358 <cprintf>
+    return 0;
+c010adf9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010adfe:	c9                   	leave  
+c010adff:	c3                   	ret    
+
+c010ae00 <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+c010ae00:	55                   	push   %ebp
+c010ae01:	89 e5                	mov    %esp,%ebp
+c010ae03:	83 ec 28             	sub    $0x28,%esp
+c010ae06:	c7 45 ec 70 0f 1b c0 	movl   $0xc01b0f70,-0x14(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010ae0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ae10:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010ae13:	89 50 04             	mov    %edx,0x4(%eax)
+c010ae16:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ae19:	8b 50 04             	mov    0x4(%eax),%edx
+c010ae1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ae1f:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010ae21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010ae28:	eb 26                	jmp    c010ae50 <proc_init+0x50>
+        list_init(hash_list + i);
+c010ae2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ae2d:	c1 e0 03             	shl    $0x3,%eax
+c010ae30:	05 40 ee 1a c0       	add    $0xc01aee40,%eax
+c010ae35:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ae38:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ae3b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010ae3e:	89 50 04             	mov    %edx,0x4(%eax)
+c010ae41:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ae44:	8b 50 04             	mov    0x4(%eax),%edx
+c010ae47:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ae4a:	89 10                	mov    %edx,(%eax)
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010ae4c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010ae50:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010ae57:	7e d1                	jle    c010ae2a <proc_init+0x2a>
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+c010ae59:	e8 90 e7 ff ff       	call   c01095ee <alloc_proc>
+c010ae5e:	a3 20 ee 1a c0       	mov    %eax,0xc01aee20
+c010ae63:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010ae68:	85 c0                	test   %eax,%eax
+c010ae6a:	75 1c                	jne    c010ae88 <proc_init+0x88>
+        panic("cannot alloc idleproc.\n");
+c010ae6c:	c7 44 24 08 e5 e6 10 	movl   $0xc010e6e5,0x8(%esp)
+c010ae73:	c0 
+c010ae74:	c7 44 24 04 68 03 00 	movl   $0x368,0x4(%esp)
+c010ae7b:	00 
+c010ae7c:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010ae83:	e8 39 5f ff ff       	call   c0100dc1 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010ae88:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010ae8d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010ae94:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010ae99:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010ae9f:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010aea4:	ba 00 a0 12 c0       	mov    $0xc012a000,%edx
+c010aea9:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010aeac:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010aeb1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010aeb8:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010aebd:	c7 44 24 04 fd e6 10 	movl   $0xc010e6fd,0x4(%esp)
+c010aec4:	c0 
+c010aec5:	89 04 24             	mov    %eax,(%esp)
+c010aec8:	e8 96 e8 ff ff       	call   c0109763 <set_proc_name>
+    nr_process ++;
+c010aecd:	a1 40 0e 1b c0       	mov    0xc01b0e40,%eax
+c010aed2:	83 c0 01             	add    $0x1,%eax
+c010aed5:	a3 40 0e 1b c0       	mov    %eax,0xc01b0e40
+
+    current = idleproc;
+c010aeda:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010aedf:	a3 28 ee 1a c0       	mov    %eax,0xc01aee28
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010aee4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010aeeb:	00 
+c010aeec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010aef3:	00 
+c010aef4:	c7 04 24 7a ac 10 c0 	movl   $0xc010ac7a,(%esp)
+c010aefb:	e8 b6 ec ff ff       	call   c0109bb6 <kernel_thread>
+c010af00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (pid <= 0) {
+c010af03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010af07:	7f 1c                	jg     c010af25 <proc_init+0x125>
+        panic("create init_main failed.\n");
+c010af09:	c7 44 24 08 02 e7 10 	movl   $0xc010e702,0x8(%esp)
+c010af10:	c0 
+c010af11:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
+c010af18:	00 
+c010af19:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010af20:	e8 9c 5e ff ff       	call   c0100dc1 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010af25:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010af28:	89 04 24             	mov    %eax,(%esp)
+c010af2b:	e8 14 ec ff ff       	call   c0109b44 <find_proc>
+c010af30:	a3 24 ee 1a c0       	mov    %eax,0xc01aee24
+    set_proc_name(initproc, "init");
+c010af35:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010af3a:	c7 44 24 04 1c e7 10 	movl   $0xc010e71c,0x4(%esp)
+c010af41:	c0 
+c010af42:	89 04 24             	mov    %eax,(%esp)
+c010af45:	e8 19 e8 ff ff       	call   c0109763 <set_proc_name>
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010af4a:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010af4f:	85 c0                	test   %eax,%eax
+c010af51:	74 0c                	je     c010af5f <proc_init+0x15f>
+c010af53:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010af58:	8b 40 04             	mov    0x4(%eax),%eax
+c010af5b:	85 c0                	test   %eax,%eax
+c010af5d:	74 24                	je     c010af83 <proc_init+0x183>
+c010af5f:	c7 44 24 0c 24 e7 10 	movl   $0xc010e724,0xc(%esp)
+c010af66:	c0 
+c010af67:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010af6e:	c0 
+c010af6f:	c7 44 24 04 7c 03 00 	movl   $0x37c,0x4(%esp)
+c010af76:	00 
+c010af77:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010af7e:	e8 3e 5e ff ff       	call   c0100dc1 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010af83:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010af88:	85 c0                	test   %eax,%eax
+c010af8a:	74 0d                	je     c010af99 <proc_init+0x199>
+c010af8c:	a1 24 ee 1a c0       	mov    0xc01aee24,%eax
+c010af91:	8b 40 04             	mov    0x4(%eax),%eax
+c010af94:	83 f8 01             	cmp    $0x1,%eax
+c010af97:	74 24                	je     c010afbd <proc_init+0x1bd>
+c010af99:	c7 44 24 0c 4c e7 10 	movl   $0xc010e74c,0xc(%esp)
+c010afa0:	c0 
+c010afa1:	c7 44 24 08 8d e3 10 	movl   $0xc010e38d,0x8(%esp)
+c010afa8:	c0 
+c010afa9:	c7 44 24 04 7d 03 00 	movl   $0x37d,0x4(%esp)
+c010afb0:	00 
+c010afb1:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
+c010afb8:	e8 04 5e ff ff       	call   c0100dc1 <__panic>
+}
+c010afbd:	c9                   	leave  
+c010afbe:	c3                   	ret    
+
+c010afbf <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+c010afbf:	55                   	push   %ebp
+c010afc0:	89 e5                	mov    %esp,%ebp
+c010afc2:	83 ec 08             	sub    $0x8,%esp
+    while (1) {
+        if (current->need_resched) {
+c010afc5:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010afca:	8b 40 10             	mov    0x10(%eax),%eax
+c010afcd:	85 c0                	test   %eax,%eax
+c010afcf:	74 07                	je     c010afd8 <cpu_idle+0x19>
+            schedule();
+c010afd1:	e8 65 04 00 00       	call   c010b43b <schedule>
+        }
+    }
+c010afd6:	eb ed                	jmp    c010afc5 <cpu_idle+0x6>
+c010afd8:	eb eb                	jmp    c010afc5 <cpu_idle+0x6>
+
+c010afda <lab6_set_priority>:
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+c010afda:	55                   	push   %ebp
+c010afdb:	89 e5                	mov    %esp,%ebp
+    if (priority == 0)
+c010afdd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010afe1:	75 11                	jne    c010aff4 <lab6_set_priority+0x1a>
+        current->lab6_priority = 1;
+c010afe3:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010afe8:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
+c010afef:	00 00 00 
+c010aff2:	eb 0e                	jmp    c010b002 <lab6_set_priority+0x28>
+    else current->lab6_priority = priority;
+c010aff4:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010aff9:	8b 55 08             	mov    0x8(%ebp),%edx
+c010affc:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+}
+c010b002:	5d                   	pop    %ebp
+c010b003:	c3                   	ret    
+
+c010b004 <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c010b004:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c010b008:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c010b00a:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c010b00d:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c010b010:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c010b013:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c010b016:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c010b019:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c010b01c:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c010b01f:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c010b023:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c010b026:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c010b029:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c010b02c:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c010b02f:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c010b032:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c010b035:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c010b038:	ff 30                	pushl  (%eax)
+
+    ret
+c010b03a:	c3                   	ret    
+
+c010b03b <RR_init>:
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+static void
+RR_init(struct run_queue *rq) {
+c010b03b:	55                   	push   %ebp
+c010b03c:	89 e5                	mov    %esp,%ebp
+c010b03e:	83 ec 10             	sub    $0x10,%esp
+    list_init(&(rq->run_list));
+c010b041:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b044:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010b047:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b04a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b04d:	89 50 04             	mov    %edx,0x4(%eax)
+c010b050:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b053:	8b 50 04             	mov    0x4(%eax),%edx
+c010b056:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b059:	89 10                	mov    %edx,(%eax)
+    rq->proc_num = 0;
+c010b05b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b05e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010b065:	c9                   	leave  
+c010b066:	c3                   	ret    
+
+c010b067 <RR_enqueue>:
+
+static void
+RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+c010b067:	55                   	push   %ebp
+c010b068:	89 e5                	mov    %esp,%ebp
+c010b06a:	83 ec 38             	sub    $0x38,%esp
+    assert(list_empty(&(proc->run_link)));
+c010b06d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b070:	83 e8 80             	sub    $0xffffff80,%eax
+c010b073:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010b076:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b079:	8b 40 04             	mov    0x4(%eax),%eax
+c010b07c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b07f:	0f 94 c0             	sete   %al
+c010b082:	0f b6 c0             	movzbl %al,%eax
+c010b085:	85 c0                	test   %eax,%eax
+c010b087:	75 24                	jne    c010b0ad <RR_enqueue+0x46>
+c010b089:	c7 44 24 0c 74 e7 10 	movl   $0xc010e774,0xc(%esp)
+c010b090:	c0 
+c010b091:	c7 44 24 08 92 e7 10 	movl   $0xc010e792,0x8(%esp)
+c010b098:	c0 
+c010b099:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+c010b0a0:	00 
+c010b0a1:	c7 04 24 a7 e7 10 c0 	movl   $0xc010e7a7,(%esp)
+c010b0a8:	e8 14 5d ff ff       	call   c0100dc1 <__panic>
+    list_add_before(&(rq->run_list), &(proc->run_link));
+c010b0ad:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b0b0:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
+c010b0b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b0bc:	89 55 ec             	mov    %edx,-0x14(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c010b0bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0c2:	8b 00                	mov    (%eax),%eax
+c010b0c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b0c7:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b0ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b0cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010b0d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b0d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b0d9:	89 10                	mov    %edx,(%eax)
+c010b0db:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b0de:	8b 10                	mov    (%eax),%edx
+c010b0e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b0e3:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010b0e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b0e9:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010b0ec:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010b0ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b0f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b0f5:	89 10                	mov    %edx,(%eax)
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+c010b0f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b0fa:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b100:	85 c0                	test   %eax,%eax
+c010b102:	74 13                	je     c010b117 <RR_enqueue+0xb0>
+c010b104:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b107:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
+c010b10d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b110:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b113:	39 c2                	cmp    %eax,%edx
+c010b115:	7e 0f                	jle    c010b126 <RR_enqueue+0xbf>
+        proc->time_slice = rq->max_time_slice;
+c010b117:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b11a:	8b 50 0c             	mov    0xc(%eax),%edx
+c010b11d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b120:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+    }
+    proc->rq = rq;
+c010b126:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b129:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b12c:	89 50 7c             	mov    %edx,0x7c(%eax)
+    rq->proc_num ++;
+c010b12f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b132:	8b 40 08             	mov    0x8(%eax),%eax
+c010b135:	8d 50 01             	lea    0x1(%eax),%edx
+c010b138:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b13b:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b13e:	c9                   	leave  
+c010b13f:	c3                   	ret    
+
+c010b140 <RR_dequeue>:
+
+static void
+RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+c010b140:	55                   	push   %ebp
+c010b141:	89 e5                	mov    %esp,%ebp
+c010b143:	83 ec 38             	sub    $0x38,%esp
+    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
+c010b146:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b149:	83 e8 80             	sub    $0xffffff80,%eax
+c010b14c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010b14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b152:	8b 40 04             	mov    0x4(%eax),%eax
+c010b155:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b158:	0f 94 c0             	sete   %al
+c010b15b:	0f b6 c0             	movzbl %al,%eax
+c010b15e:	85 c0                	test   %eax,%eax
+c010b160:	75 0b                	jne    c010b16d <RR_dequeue+0x2d>
+c010b162:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b165:	8b 40 7c             	mov    0x7c(%eax),%eax
+c010b168:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010b16b:	74 24                	je     c010b191 <RR_dequeue+0x51>
+c010b16d:	c7 44 24 0c c8 e7 10 	movl   $0xc010e7c8,0xc(%esp)
+c010b174:	c0 
+c010b175:	c7 44 24 08 92 e7 10 	movl   $0xc010e792,0x8(%esp)
+c010b17c:	c0 
+c010b17d:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+c010b184:	00 
+c010b185:	c7 04 24 a7 e7 10 c0 	movl   $0xc010e7a7,(%esp)
+c010b18c:	e8 30 5c ff ff       	call   c0100dc1 <__panic>
+    list_del_init(&(proc->run_link));
+c010b191:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b194:	83 e8 80             	sub    $0xffffff80,%eax
+c010b197:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b19a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b19d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010b1a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b1a3:	8b 40 04             	mov    0x4(%eax),%eax
+c010b1a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b1a9:	8b 12                	mov    (%edx),%edx
+c010b1ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b1ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010b1b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b1b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b1b7:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010b1ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b1bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b1c0:	89 10                	mov    %edx,(%eax)
+c010b1c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b1c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010b1c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b1cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010b1ce:	89 50 04             	mov    %edx,0x4(%eax)
+c010b1d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b1d4:	8b 50 04             	mov    0x4(%eax),%edx
+c010b1d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b1da:	89 10                	mov    %edx,(%eax)
+    rq->proc_num --;
+c010b1dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1df:	8b 40 08             	mov    0x8(%eax),%eax
+c010b1e2:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1e8:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b1eb:	c9                   	leave  
+c010b1ec:	c3                   	ret    
+
+c010b1ed <RR_pick_next>:
+
+static struct proc_struct *
+RR_pick_next(struct run_queue *rq) {
+c010b1ed:	55                   	push   %ebp
+c010b1ee:	89 e5                	mov    %esp,%ebp
+c010b1f0:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_next(&(rq->run_list));
+c010b1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1f6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010b1f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b1fc:	8b 40 04             	mov    0x4(%eax),%eax
+c010b1ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(rq->run_list)) {
+c010b202:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b205:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010b208:	74 08                	je     c010b212 <RR_pick_next+0x25>
+        return le2proc(le, run_link);
+c010b20a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b20d:	83 c0 80             	add    $0xffffff80,%eax
+c010b210:	eb 05                	jmp    c010b217 <RR_pick_next+0x2a>
+    }
+    return NULL;
+c010b212:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b217:	c9                   	leave  
+c010b218:	c3                   	ret    
+
+c010b219 <RR_proc_tick>:
+
+static void
+RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+c010b219:	55                   	push   %ebp
+c010b21a:	89 e5                	mov    %esp,%ebp
+    if (proc->time_slice > 0) {
+c010b21c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b21f:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b225:	85 c0                	test   %eax,%eax
+c010b227:	7e 15                	jle    c010b23e <RR_proc_tick+0x25>
+        proc->time_slice --;
+c010b229:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b22c:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b232:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b235:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b238:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+    }
+    if (proc->time_slice == 0) {
+c010b23e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b241:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b247:	85 c0                	test   %eax,%eax
+c010b249:	75 0a                	jne    c010b255 <RR_proc_tick+0x3c>
+        proc->need_resched = 1;
+c010b24b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b24e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010b255:	5d                   	pop    %ebp
+c010b256:	c3                   	ret    
+
+c010b257 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010b257:	55                   	push   %ebp
+c010b258:	89 e5                	mov    %esp,%ebp
+c010b25a:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010b25d:	9c                   	pushf  
+c010b25e:	58                   	pop    %eax
+c010b25f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010b262:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010b265:	25 00 02 00 00       	and    $0x200,%eax
+c010b26a:	85 c0                	test   %eax,%eax
+c010b26c:	74 0c                	je     c010b27a <__intr_save+0x23>
+        intr_disable();
+c010b26e:	e8 a6 6d ff ff       	call   c0102019 <intr_disable>
+        return 1;
+c010b273:	b8 01 00 00 00       	mov    $0x1,%eax
+c010b278:	eb 05                	jmp    c010b27f <__intr_save+0x28>
+    }
+    return 0;
+c010b27a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b27f:	c9                   	leave  
+c010b280:	c3                   	ret    
+
+c010b281 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010b281:	55                   	push   %ebp
+c010b282:	89 e5                	mov    %esp,%ebp
+c010b284:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010b287:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b28b:	74 05                	je     c010b292 <__intr_restore+0x11>
+        intr_enable();
+c010b28d:	e8 81 6d ff ff       	call   c0102013 <intr_enable>
+    }
+}
+c010b292:	c9                   	leave  
+c010b293:	c3                   	ret    
+
+c010b294 <sched_class_enqueue>:
+static struct sched_class *sched_class;
+
+static struct run_queue *rq;
+
+static inline void
+sched_class_enqueue(struct proc_struct *proc) {
+c010b294:	55                   	push   %ebp
+c010b295:	89 e5                	mov    %esp,%ebp
+c010b297:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010b29a:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010b29f:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b2a2:	74 1a                	je     c010b2be <sched_class_enqueue+0x2a>
+        sched_class->enqueue(rq, proc);
+c010b2a4:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b2a9:	8b 40 08             	mov    0x8(%eax),%eax
+c010b2ac:	8b 15 60 0e 1b c0    	mov    0xc01b0e60,%edx
+c010b2b2:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b2b5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b2b9:	89 14 24             	mov    %edx,(%esp)
+c010b2bc:	ff d0                	call   *%eax
+    }
+}
+c010b2be:	c9                   	leave  
+c010b2bf:	c3                   	ret    
+
+c010b2c0 <sched_class_dequeue>:
+
+static inline void
+sched_class_dequeue(struct proc_struct *proc) {
+c010b2c0:	55                   	push   %ebp
+c010b2c1:	89 e5                	mov    %esp,%ebp
+c010b2c3:	83 ec 18             	sub    $0x18,%esp
+    sched_class->dequeue(rq, proc);
+c010b2c6:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b2cb:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b2ce:	8b 15 60 0e 1b c0    	mov    0xc01b0e60,%edx
+c010b2d4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b2d7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b2db:	89 14 24             	mov    %edx,(%esp)
+c010b2de:	ff d0                	call   *%eax
+}
+c010b2e0:	c9                   	leave  
+c010b2e1:	c3                   	ret    
+
+c010b2e2 <sched_class_pick_next>:
+
+static inline struct proc_struct *
+sched_class_pick_next(void) {
+c010b2e2:	55                   	push   %ebp
+c010b2e3:	89 e5                	mov    %esp,%ebp
+c010b2e5:	83 ec 18             	sub    $0x18,%esp
+    return sched_class->pick_next(rq);
+c010b2e8:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b2ed:	8b 40 10             	mov    0x10(%eax),%eax
+c010b2f0:	8b 15 60 0e 1b c0    	mov    0xc01b0e60,%edx
+c010b2f6:	89 14 24             	mov    %edx,(%esp)
+c010b2f9:	ff d0                	call   *%eax
+}
+c010b2fb:	c9                   	leave  
+c010b2fc:	c3                   	ret    
+
+c010b2fd <sched_class_proc_tick>:
+
+void
+sched_class_proc_tick(struct proc_struct *proc) {
+c010b2fd:	55                   	push   %ebp
+c010b2fe:	89 e5                	mov    %esp,%ebp
+c010b300:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010b303:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010b308:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b30b:	74 1c                	je     c010b329 <sched_class_proc_tick+0x2c>
+        sched_class->proc_tick(rq, proc);
+c010b30d:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b312:	8b 40 14             	mov    0x14(%eax),%eax
+c010b315:	8b 15 60 0e 1b c0    	mov    0xc01b0e60,%edx
+c010b31b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b31e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b322:	89 14 24             	mov    %edx,(%esp)
+c010b325:	ff d0                	call   *%eax
+c010b327:	eb 0a                	jmp    c010b333 <sched_class_proc_tick+0x36>
+    }
+    else {
+        proc->need_resched = 1;
+c010b329:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b32c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010b333:	c9                   	leave  
+c010b334:	c3                   	ret    
+
+c010b335 <sched_init>:
+
+static struct run_queue __rq;
+
+void
+sched_init(void) {
+c010b335:	55                   	push   %ebp
+c010b336:	89 e5                	mov    %esp,%ebp
+c010b338:	83 ec 28             	sub    $0x28,%esp
+c010b33b:	c7 45 f4 54 0e 1b c0 	movl   $0xc01b0e54,-0xc(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010b342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b345:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b348:	89 50 04             	mov    %edx,0x4(%eax)
+c010b34b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b34e:	8b 50 04             	mov    0x4(%eax),%edx
+c010b351:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b354:	89 10                	mov    %edx,(%eax)
+    list_init(&timer_list);
+
+    sched_class = &default_sched_class;
+c010b356:	c7 05 5c 0e 1b c0 88 	movl   $0xc012ca88,0xc01b0e5c
+c010b35d:	ca 12 c0 
+
+    rq = &__rq;
+c010b360:	c7 05 60 0e 1b c0 64 	movl   $0xc01b0e64,0xc01b0e60
+c010b367:	0e 1b c0 
+    rq->max_time_slice = MAX_TIME_SLICE;
+c010b36a:	a1 60 0e 1b c0       	mov    0xc01b0e60,%eax
+c010b36f:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+    sched_class->init(rq);
+c010b376:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b37b:	8b 40 04             	mov    0x4(%eax),%eax
+c010b37e:	8b 15 60 0e 1b c0    	mov    0xc01b0e60,%edx
+c010b384:	89 14 24             	mov    %edx,(%esp)
+c010b387:	ff d0                	call   *%eax
+
+    cprintf("sched class: %s\n", sched_class->name);
+c010b389:	a1 5c 0e 1b c0       	mov    0xc01b0e5c,%eax
+c010b38e:	8b 00                	mov    (%eax),%eax
+c010b390:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b394:	c7 04 24 06 e8 10 c0 	movl   $0xc010e806,(%esp)
+c010b39b:	e8 b8 4f ff ff       	call   c0100358 <cprintf>
+}
+c010b3a0:	c9                   	leave  
+c010b3a1:	c3                   	ret    
+
+c010b3a2 <wakeup_proc>:
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010b3a2:	55                   	push   %ebp
+c010b3a3:	89 e5                	mov    %esp,%ebp
+c010b3a5:	83 ec 28             	sub    $0x28,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010b3a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3ab:	8b 00                	mov    (%eax),%eax
+c010b3ad:	83 f8 03             	cmp    $0x3,%eax
+c010b3b0:	75 24                	jne    c010b3d6 <wakeup_proc+0x34>
+c010b3b2:	c7 44 24 0c 17 e8 10 	movl   $0xc010e817,0xc(%esp)
+c010b3b9:	c0 
+c010b3ba:	c7 44 24 08 32 e8 10 	movl   $0xc010e832,0x8(%esp)
+c010b3c1:	c0 
+c010b3c2:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
+c010b3c9:	00 
+c010b3ca:	c7 04 24 47 e8 10 c0 	movl   $0xc010e847,(%esp)
+c010b3d1:	e8 eb 59 ff ff       	call   c0100dc1 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b3d6:	e8 7c fe ff ff       	call   c010b257 <__intr_save>
+c010b3db:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010b3de:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3e1:	8b 00                	mov    (%eax),%eax
+c010b3e3:	83 f8 02             	cmp    $0x2,%eax
+c010b3e6:	74 2a                	je     c010b412 <wakeup_proc+0x70>
+            proc->state = PROC_RUNNABLE;
+c010b3e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3eb:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010b3f1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3f4:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+            if (proc != current) {
+c010b3fb:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b400:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b403:	74 29                	je     c010b42e <wakeup_proc+0x8c>
+                sched_class_enqueue(proc);
+c010b405:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b408:	89 04 24             	mov    %eax,(%esp)
+c010b40b:	e8 84 fe ff ff       	call   c010b294 <sched_class_enqueue>
+c010b410:	eb 1c                	jmp    c010b42e <wakeup_proc+0x8c>
+            }
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010b412:	c7 44 24 08 5d e8 10 	movl   $0xc010e85d,0x8(%esp)
+c010b419:	c0 
+c010b41a:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c010b421:	00 
+c010b422:	c7 04 24 47 e8 10 c0 	movl   $0xc010e847,(%esp)
+c010b429:	e8 ff 59 ff ff       	call   c0100e2d <__warn>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b42e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b431:	89 04 24             	mov    %eax,(%esp)
+c010b434:	e8 48 fe ff ff       	call   c010b281 <__intr_restore>
+}
+c010b439:	c9                   	leave  
+c010b43a:	c3                   	ret    
+
+c010b43b <schedule>:
+
+void
+schedule(void) {
+c010b43b:	55                   	push   %ebp
+c010b43c:	89 e5                	mov    %esp,%ebp
+c010b43e:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    struct proc_struct *next;
+    local_intr_save(intr_flag);
+c010b441:	e8 11 fe ff ff       	call   c010b257 <__intr_save>
+c010b446:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        current->need_resched = 0;
+c010b449:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b44e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        if (current->state == PROC_RUNNABLE) {
+c010b455:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b45a:	8b 00                	mov    (%eax),%eax
+c010b45c:	83 f8 02             	cmp    $0x2,%eax
+c010b45f:	75 0d                	jne    c010b46e <schedule+0x33>
+            sched_class_enqueue(current);
+c010b461:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b466:	89 04 24             	mov    %eax,(%esp)
+c010b469:	e8 26 fe ff ff       	call   c010b294 <sched_class_enqueue>
+        }
+        if ((next = sched_class_pick_next()) != NULL) {
+c010b46e:	e8 6f fe ff ff       	call   c010b2e2 <sched_class_pick_next>
+c010b473:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b476:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b47a:	74 0b                	je     c010b487 <schedule+0x4c>
+            sched_class_dequeue(next);
+c010b47c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b47f:	89 04 24             	mov    %eax,(%esp)
+c010b482:	e8 39 fe ff ff       	call   c010b2c0 <sched_class_dequeue>
+        }
+        if (next == NULL) {
+c010b487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b48b:	75 08                	jne    c010b495 <schedule+0x5a>
+            next = idleproc;
+c010b48d:	a1 20 ee 1a c0       	mov    0xc01aee20,%eax
+c010b492:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        next->runs ++;
+c010b495:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b498:	8b 40 08             	mov    0x8(%eax),%eax
+c010b49b:	8d 50 01             	lea    0x1(%eax),%edx
+c010b49e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b4a1:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010b4a4:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b4a9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b4ac:	74 0b                	je     c010b4b9 <schedule+0x7e>
+            proc_run(next);
+c010b4ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b4b1:	89 04 24             	mov    %eax,(%esp)
+c010b4b4:	e8 4f e5 ff ff       	call   c0109a08 <proc_run>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b4b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b4bc:	89 04 24             	mov    %eax,(%esp)
+c010b4bf:	e8 bd fd ff ff       	call   c010b281 <__intr_restore>
+}
+c010b4c4:	c9                   	leave  
+c010b4c5:	c3                   	ret    
+
+c010b4c6 <sys_exit>:
+#include <pmm.h>
+#include <assert.h>
+#include <clock.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010b4c6:	55                   	push   %ebp
+c010b4c7:	89 e5                	mov    %esp,%ebp
+c010b4c9:	83 ec 28             	sub    $0x28,%esp
+    int error_code = (int)arg[0];
+c010b4cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b4cf:	8b 00                	mov    (%eax),%eax
+c010b4d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010b4d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b4d7:	89 04 24             	mov    %eax,(%esp)
+c010b4da:	e8 8e eb ff ff       	call   c010a06d <do_exit>
+}
+c010b4df:	c9                   	leave  
+c010b4e0:	c3                   	ret    
+
+c010b4e1 <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010b4e1:	55                   	push   %ebp
+c010b4e2:	89 e5                	mov    %esp,%ebp
+c010b4e4:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010b4e7:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b4ec:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b4ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010b4f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b4f5:	8b 40 44             	mov    0x44(%eax),%eax
+c010b4f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010b4fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b4fe:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b502:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b505:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b509:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010b510:	e8 36 ea ff ff       	call   c0109f4b <do_fork>
+}
+c010b515:	c9                   	leave  
+c010b516:	c3                   	ret    
+
+c010b517 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010b517:	55                   	push   %ebp
+c010b518:	89 e5                	mov    %esp,%ebp
+c010b51a:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b51d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b520:	8b 00                	mov    (%eax),%eax
+c010b522:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010b525:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b528:	83 c0 04             	add    $0x4,%eax
+c010b52b:	8b 00                	mov    (%eax),%eax
+c010b52d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010b530:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b533:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b537:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b53a:	89 04 24             	mov    %eax,(%esp)
+c010b53d:	e8 a9 f4 ff ff       	call   c010a9eb <do_wait>
+}
+c010b542:	c9                   	leave  
+c010b543:	c3                   	ret    
+
+c010b544 <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010b544:	55                   	push   %ebp
+c010b545:	89 e5                	mov    %esp,%ebp
+c010b547:	83 ec 28             	sub    $0x28,%esp
+    const char *name = (const char *)arg[0];
+c010b54a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b54d:	8b 00                	mov    (%eax),%eax
+c010b54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010b552:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b555:	8b 40 04             	mov    0x4(%eax),%eax
+c010b558:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010b55b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b55e:	83 c0 08             	add    $0x8,%eax
+c010b561:	8b 00                	mov    (%eax),%eax
+c010b563:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010b566:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b569:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b56c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010b56f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b572:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b576:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b579:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b57d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b580:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b584:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b587:	89 04 24             	mov    %eax,(%esp)
+c010b58a:	e8 10 f3 ff ff       	call   c010a89f <do_execve>
+}
+c010b58f:	c9                   	leave  
+c010b590:	c3                   	ret    
+
+c010b591 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010b591:	55                   	push   %ebp
+c010b592:	89 e5                	mov    %esp,%ebp
+c010b594:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010b597:	e8 39 f4 ff ff       	call   c010a9d5 <do_yield>
+}
+c010b59c:	c9                   	leave  
+c010b59d:	c3                   	ret    
+
+c010b59e <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010b59e:	55                   	push   %ebp
+c010b59f:	89 e5                	mov    %esp,%ebp
+c010b5a1:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b5a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5a7:	8b 00                	mov    (%eax),%eax
+c010b5a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010b5ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b5af:	89 04 24             	mov    %eax,(%esp)
+c010b5b2:	e8 c8 f5 ff ff       	call   c010ab7f <do_kill>
+}
+c010b5b7:	c9                   	leave  
+c010b5b8:	c3                   	ret    
+
+c010b5b9 <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010b5b9:	55                   	push   %ebp
+c010b5ba:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010b5bc:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b5c1:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010b5c4:	5d                   	pop    %ebp
+c010b5c5:	c3                   	ret    
+
+c010b5c6 <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010b5c6:	55                   	push   %ebp
+c010b5c7:	89 e5                	mov    %esp,%ebp
+c010b5c9:	83 ec 28             	sub    $0x28,%esp
+    int c = (int)arg[0];
+c010b5cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5cf:	8b 00                	mov    (%eax),%eax
+c010b5d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010b5d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b5d7:	89 04 24             	mov    %eax,(%esp)
+c010b5da:	e8 9f 4d ff ff       	call   c010037e <cputchar>
+    return 0;
+c010b5df:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b5e4:	c9                   	leave  
+c010b5e5:	c3                   	ret    
+
+c010b5e6 <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010b5e6:	55                   	push   %ebp
+c010b5e7:	89 e5                	mov    %esp,%ebp
+c010b5e9:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010b5ec:	e8 bc b6 ff ff       	call   c0106cad <print_pgdir>
+    return 0;
+c010b5f1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b5f6:	c9                   	leave  
+c010b5f7:	c3                   	ret    
+
+c010b5f8 <sys_gettime>:
+
+static int
+sys_gettime(uint32_t arg[]) {
+c010b5f8:	55                   	push   %ebp
+c010b5f9:	89 e5                	mov    %esp,%ebp
+    return (int)ticks;
+c010b5fb:	a1 78 0e 1b c0       	mov    0xc01b0e78,%eax
+}
+c010b600:	5d                   	pop    %ebp
+c010b601:	c3                   	ret    
+
+c010b602 <sys_lab6_set_priority>:
+static int
+sys_lab6_set_priority(uint32_t arg[])
+{
+c010b602:	55                   	push   %ebp
+c010b603:	89 e5                	mov    %esp,%ebp
+c010b605:	83 ec 28             	sub    $0x28,%esp
+    uint32_t priority = (uint32_t)arg[0];
+c010b608:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b60b:	8b 00                	mov    (%eax),%eax
+c010b60d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    lab6_set_priority(priority);
+c010b610:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b613:	89 04 24             	mov    %eax,(%esp)
+c010b616:	e8 bf f9 ff ff       	call   c010afda <lab6_set_priority>
+    return 0;
+c010b61b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b620:	c9                   	leave  
+c010b621:	c3                   	ret    
+
+c010b622 <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010b622:	55                   	push   %ebp
+c010b623:	89 e5                	mov    %esp,%ebp
+c010b625:	83 ec 48             	sub    $0x48,%esp
+    struct trapframe *tf = current->tf;
+c010b628:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b62d:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b630:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010b633:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b636:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010b639:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010b63c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b640:	78 60                	js     c010b6a2 <syscall+0x80>
+c010b642:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b645:	3d ff 00 00 00       	cmp    $0xff,%eax
+c010b64a:	77 56                	ja     c010b6a2 <syscall+0x80>
+        if (syscalls[num] != NULL) {
+c010b64c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b64f:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
+c010b656:	85 c0                	test   %eax,%eax
+c010b658:	74 48                	je     c010b6a2 <syscall+0x80>
+            arg[0] = tf->tf_regs.reg_edx;
+c010b65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b65d:	8b 40 14             	mov    0x14(%eax),%eax
+c010b660:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010b663:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b666:	8b 40 18             	mov    0x18(%eax),%eax
+c010b669:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010b66c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b66f:	8b 40 10             	mov    0x10(%eax),%eax
+c010b672:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010b675:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b678:	8b 00                	mov    (%eax),%eax
+c010b67a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010b67d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b680:	8b 40 04             	mov    0x4(%eax),%eax
+c010b683:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010b686:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b689:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
+c010b690:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010b693:	89 14 24             	mov    %edx,(%esp)
+c010b696:	ff d0                	call   *%eax
+c010b698:	89 c2                	mov    %eax,%edx
+c010b69a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b69d:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010b6a0:	eb 46                	jmp    c010b6e8 <syscall+0xc6>
+        }
+    }
+    print_trapframe(tf);
+c010b6a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b6a5:	89 04 24             	mov    %eax,(%esp)
+c010b6a8:	e8 04 6e ff ff       	call   c01024b1 <print_trapframe>
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010b6ad:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b6b2:	8d 50 48             	lea    0x48(%eax),%edx
+c010b6b5:	a1 28 ee 1a c0       	mov    0xc01aee28,%eax
+c010b6ba:	8b 40 04             	mov    0x4(%eax),%eax
+c010b6bd:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010b6c1:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010b6c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b6c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b6cc:	c7 44 24 08 78 e8 10 	movl   $0xc010e878,0x8(%esp)
+c010b6d3:	c0 
+c010b6d4:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
+c010b6db:	00 
+c010b6dc:	c7 04 24 a4 e8 10 c0 	movl   $0xc010e8a4,(%esp)
+c010b6e3:	e8 d9 56 ff ff       	call   c0100dc1 <__panic>
+            num, current->pid, current->name);
+}
+c010b6e8:	c9                   	leave  
+c010b6e9:	c3                   	ret    
+
+c010b6ea <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010b6ea:	55                   	push   %ebp
+c010b6eb:	89 e5                	mov    %esp,%ebp
+c010b6ed:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010b6f0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6f3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010b6f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010b6fc:	b8 20 00 00 00       	mov    $0x20,%eax
+c010b701:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010b704:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b707:	89 c1                	mov    %eax,%ecx
+c010b709:	d3 ea                	shr    %cl,%edx
+c010b70b:	89 d0                	mov    %edx,%eax
+}
+c010b70d:	c9                   	leave  
+c010b70e:	c3                   	ret    
+
+c010b70f <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010b70f:	55                   	push   %ebp
+c010b710:	89 e5                	mov    %esp,%ebp
+c010b712:	83 ec 58             	sub    $0x58,%esp
+c010b715:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b718:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010b71b:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b71e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010b721:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b724:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b72a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010b72d:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b730:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b733:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b736:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b739:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b73c:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010b73f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b742:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b745:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b749:	74 1c                	je     c010b767 <printnum+0x58>
+c010b74b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b74e:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b753:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b756:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010b759:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b75c:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b761:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b764:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b767:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b76a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b76d:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b770:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b773:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010b776:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b779:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b77c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b77f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010b782:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b785:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010b788:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b78b:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b790:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b793:	77 56                	ja     c010b7eb <printnum+0xdc>
+c010b795:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b798:	72 05                	jb     c010b79f <printnum+0x90>
+c010b79a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010b79d:	77 4c                	ja     c010b7eb <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010b79f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010b7a2:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b7a5:	8b 45 20             	mov    0x20(%ebp),%eax
+c010b7a8:	89 44 24 18          	mov    %eax,0x18(%esp)
+c010b7ac:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010b7b0:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b7b3:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010b7b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b7ba:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b7bd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b7c1:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010b7c5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7c8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b7cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7cf:	89 04 24             	mov    %eax,(%esp)
+c010b7d2:	e8 38 ff ff ff       	call   c010b70f <printnum>
+c010b7d7:	eb 1c                	jmp    c010b7f5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010b7d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b7e0:	8b 45 20             	mov    0x20(%ebp),%eax
+c010b7e3:	89 04 24             	mov    %eax,(%esp)
+c010b7e6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7e9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010b7eb:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c010b7ef:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010b7f3:	7f e4                	jg     c010b7d9 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010b7f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b7f8:	05 c4 e9 10 c0       	add    $0xc010e9c4,%eax
+c010b7fd:	0f b6 00             	movzbl (%eax),%eax
+c010b800:	0f be c0             	movsbl %al,%eax
+c010b803:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b806:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b80a:	89 04 24             	mov    %eax,(%esp)
+c010b80d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b810:	ff d0                	call   *%eax
+}
+c010b812:	c9                   	leave  
+c010b813:	c3                   	ret    
+
+c010b814 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010b814:	55                   	push   %ebp
+c010b815:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b817:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b81b:	7e 14                	jle    c010b831 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010b81d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b820:	8b 00                	mov    (%eax),%eax
+c010b822:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b825:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b828:	89 0a                	mov    %ecx,(%edx)
+c010b82a:	8b 50 04             	mov    0x4(%eax),%edx
+c010b82d:	8b 00                	mov    (%eax),%eax
+c010b82f:	eb 30                	jmp    c010b861 <getuint+0x4d>
+    }
+    else if (lflag) {
+c010b831:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b835:	74 16                	je     c010b84d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010b837:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b83a:	8b 00                	mov    (%eax),%eax
+c010b83c:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b83f:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b842:	89 0a                	mov    %ecx,(%edx)
+c010b844:	8b 00                	mov    (%eax),%eax
+c010b846:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b84b:	eb 14                	jmp    c010b861 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010b84d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b850:	8b 00                	mov    (%eax),%eax
+c010b852:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b855:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b858:	89 0a                	mov    %ecx,(%edx)
+c010b85a:	8b 00                	mov    (%eax),%eax
+c010b85c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010b861:	5d                   	pop    %ebp
+c010b862:	c3                   	ret    
+
+c010b863 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010b863:	55                   	push   %ebp
+c010b864:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b866:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b86a:	7e 14                	jle    c010b880 <getint+0x1d>
+        return va_arg(*ap, long long);
+c010b86c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b86f:	8b 00                	mov    (%eax),%eax
+c010b871:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b874:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b877:	89 0a                	mov    %ecx,(%edx)
+c010b879:	8b 50 04             	mov    0x4(%eax),%edx
+c010b87c:	8b 00                	mov    (%eax),%eax
+c010b87e:	eb 28                	jmp    c010b8a8 <getint+0x45>
+    }
+    else if (lflag) {
+c010b880:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b884:	74 12                	je     c010b898 <getint+0x35>
+        return va_arg(*ap, long);
+c010b886:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b889:	8b 00                	mov    (%eax),%eax
+c010b88b:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b88e:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b891:	89 0a                	mov    %ecx,(%edx)
+c010b893:	8b 00                	mov    (%eax),%eax
+c010b895:	99                   	cltd   
+c010b896:	eb 10                	jmp    c010b8a8 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010b898:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b89b:	8b 00                	mov    (%eax),%eax
+c010b89d:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b8a0:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b8a3:	89 0a                	mov    %ecx,(%edx)
+c010b8a5:	8b 00                	mov    (%eax),%eax
+c010b8a7:	99                   	cltd   
+    }
+}
+c010b8a8:	5d                   	pop    %ebp
+c010b8a9:	c3                   	ret    
+
+c010b8aa <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010b8aa:	55                   	push   %ebp
+c010b8ab:	89 e5                	mov    %esp,%ebp
+c010b8ad:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010b8b0:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b8b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010b8b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b8b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b8bd:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b8c0:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b8c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8c7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b8cb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8ce:	89 04 24             	mov    %eax,(%esp)
+c010b8d1:	e8 02 00 00 00       	call   c010b8d8 <vprintfmt>
+    va_end(ap);
+}
+c010b8d6:	c9                   	leave  
+c010b8d7:	c3                   	ret    
+
+c010b8d8 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010b8d8:	55                   	push   %ebp
+c010b8d9:	89 e5                	mov    %esp,%ebp
+c010b8db:	56                   	push   %esi
+c010b8dc:	53                   	push   %ebx
+c010b8dd:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b8e0:	eb 18                	jmp    c010b8fa <vprintfmt+0x22>
+            if (ch == '\0') {
+c010b8e2:	85 db                	test   %ebx,%ebx
+c010b8e4:	75 05                	jne    c010b8eb <vprintfmt+0x13>
+                return;
+c010b8e6:	e9 d1 03 00 00       	jmp    c010bcbc <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+c010b8eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b8f2:	89 1c 24             	mov    %ebx,(%esp)
+c010b8f5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8f8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b8fa:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b8fd:	8d 50 01             	lea    0x1(%eax),%edx
+c010b900:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b903:	0f b6 00             	movzbl (%eax),%eax
+c010b906:	0f b6 d8             	movzbl %al,%ebx
+c010b909:	83 fb 25             	cmp    $0x25,%ebx
+c010b90c:	75 d4                	jne    c010b8e2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010b90e:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010b912:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010b919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b91c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010b91f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010b926:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b929:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010b92c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b92f:	8d 50 01             	lea    0x1(%eax),%edx
+c010b932:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b935:	0f b6 00             	movzbl (%eax),%eax
+c010b938:	0f b6 d8             	movzbl %al,%ebx
+c010b93b:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010b93e:	83 f8 55             	cmp    $0x55,%eax
+c010b941:	0f 87 44 03 00 00    	ja     c010bc8b <vprintfmt+0x3b3>
+c010b947:	8b 04 85 e8 e9 10 c0 	mov    -0x3fef1618(,%eax,4),%eax
+c010b94e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010b950:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010b954:	eb d6                	jmp    c010b92c <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010b956:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010b95a:	eb d0                	jmp    c010b92c <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b95c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010b963:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b966:	89 d0                	mov    %edx,%eax
+c010b968:	c1 e0 02             	shl    $0x2,%eax
+c010b96b:	01 d0                	add    %edx,%eax
+c010b96d:	01 c0                	add    %eax,%eax
+c010b96f:	01 d8                	add    %ebx,%eax
+c010b971:	83 e8 30             	sub    $0x30,%eax
+c010b974:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010b977:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b97a:	0f b6 00             	movzbl (%eax),%eax
+c010b97d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010b980:	83 fb 2f             	cmp    $0x2f,%ebx
+c010b983:	7e 0b                	jle    c010b990 <vprintfmt+0xb8>
+c010b985:	83 fb 39             	cmp    $0x39,%ebx
+c010b988:	7f 06                	jg     c010b990 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b98a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c010b98e:	eb d3                	jmp    c010b963 <vprintfmt+0x8b>
+            goto process_precision;
+c010b990:	eb 33                	jmp    c010b9c5 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+c010b992:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b995:	8d 50 04             	lea    0x4(%eax),%edx
+c010b998:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b99b:	8b 00                	mov    (%eax),%eax
+c010b99d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010b9a0:	eb 23                	jmp    c010b9c5 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+c010b9a2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b9a6:	79 0c                	jns    c010b9b4 <vprintfmt+0xdc>
+                width = 0;
+c010b9a8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010b9af:	e9 78 ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+c010b9b4:	e9 73 ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+c010b9b9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010b9c0:	e9 67 ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+c010b9c5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b9c9:	79 12                	jns    c010b9dd <vprintfmt+0x105>
+                width = precision, precision = -1;
+c010b9cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b9ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b9d1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010b9d8:	e9 4f ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+c010b9dd:	e9 4a ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010b9e2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c010b9e6:	e9 41 ff ff ff       	jmp    c010b92c <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010b9eb:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b9ee:	8d 50 04             	lea    0x4(%eax),%edx
+c010b9f1:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b9f4:	8b 00                	mov    (%eax),%eax
+c010b9f6:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b9f9:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b9fd:	89 04 24             	mov    %eax,(%esp)
+c010ba00:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba03:	ff d0                	call   *%eax
+            break;
+c010ba05:	e9 ac 02 00 00       	jmp    c010bcb6 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010ba0a:	8b 45 14             	mov    0x14(%ebp),%eax
+c010ba0d:	8d 50 04             	lea    0x4(%eax),%edx
+c010ba10:	89 55 14             	mov    %edx,0x14(%ebp)
+c010ba13:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010ba15:	85 db                	test   %ebx,%ebx
+c010ba17:	79 02                	jns    c010ba1b <vprintfmt+0x143>
+                err = -err;
+c010ba19:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010ba1b:	83 fb 18             	cmp    $0x18,%ebx
+c010ba1e:	7f 0b                	jg     c010ba2b <vprintfmt+0x153>
+c010ba20:	8b 34 9d 60 e9 10 c0 	mov    -0x3fef16a0(,%ebx,4),%esi
+c010ba27:	85 f6                	test   %esi,%esi
+c010ba29:	75 23                	jne    c010ba4e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+c010ba2b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c010ba2f:	c7 44 24 08 d5 e9 10 	movl   $0xc010e9d5,0x8(%esp)
+c010ba36:	c0 
+c010ba37:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ba3a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ba3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba41:	89 04 24             	mov    %eax,(%esp)
+c010ba44:	e8 61 fe ff ff       	call   c010b8aa <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010ba49:	e9 68 02 00 00       	jmp    c010bcb6 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c010ba4e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+c010ba52:	c7 44 24 08 de e9 10 	movl   $0xc010e9de,0x8(%esp)
+c010ba59:	c0 
+c010ba5a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ba5d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ba61:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba64:	89 04 24             	mov    %eax,(%esp)
+c010ba67:	e8 3e fe ff ff       	call   c010b8aa <printfmt>
+            }
+            break;
+c010ba6c:	e9 45 02 00 00       	jmp    c010bcb6 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010ba71:	8b 45 14             	mov    0x14(%ebp),%eax
+c010ba74:	8d 50 04             	lea    0x4(%eax),%edx
+c010ba77:	89 55 14             	mov    %edx,0x14(%ebp)
+c010ba7a:	8b 30                	mov    (%eax),%esi
+c010ba7c:	85 f6                	test   %esi,%esi
+c010ba7e:	75 05                	jne    c010ba85 <vprintfmt+0x1ad>
+                p = "(null)";
+c010ba80:	be e1 e9 10 c0       	mov    $0xc010e9e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010ba85:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010ba89:	7e 3e                	jle    c010bac9 <vprintfmt+0x1f1>
+c010ba8b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010ba8f:	74 38                	je     c010bac9 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010ba91:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+c010ba94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010ba97:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ba9b:	89 34 24             	mov    %esi,(%esp)
+c010ba9e:	e8 ed 03 00 00       	call   c010be90 <strnlen>
+c010baa3:	29 c3                	sub    %eax,%ebx
+c010baa5:	89 d8                	mov    %ebx,%eax
+c010baa7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010baaa:	eb 17                	jmp    c010bac3 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+c010baac:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010bab0:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010bab3:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010bab7:	89 04 24             	mov    %eax,(%esp)
+c010baba:	8b 45 08             	mov    0x8(%ebp),%eax
+c010babd:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010babf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010bac3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010bac7:	7f e3                	jg     c010baac <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010bac9:	eb 38                	jmp    c010bb03 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010bacb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010bacf:	74 1f                	je     c010baf0 <vprintfmt+0x218>
+c010bad1:	83 fb 1f             	cmp    $0x1f,%ebx
+c010bad4:	7e 05                	jle    c010badb <vprintfmt+0x203>
+c010bad6:	83 fb 7e             	cmp    $0x7e,%ebx
+c010bad9:	7e 15                	jle    c010baf0 <vprintfmt+0x218>
+                    putch('?', putdat);
+c010badb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bade:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bae2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+c010bae9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010baec:	ff d0                	call   *%eax
+c010baee:	eb 0f                	jmp    c010baff <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+c010baf0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010baf3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010baf7:	89 1c 24             	mov    %ebx,(%esp)
+c010bafa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bafd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010baff:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010bb03:	89 f0                	mov    %esi,%eax
+c010bb05:	8d 70 01             	lea    0x1(%eax),%esi
+c010bb08:	0f b6 00             	movzbl (%eax),%eax
+c010bb0b:	0f be d8             	movsbl %al,%ebx
+c010bb0e:	85 db                	test   %ebx,%ebx
+c010bb10:	74 10                	je     c010bb22 <vprintfmt+0x24a>
+c010bb12:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010bb16:	78 b3                	js     c010bacb <vprintfmt+0x1f3>
+c010bb18:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c010bb1c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010bb20:	79 a9                	jns    c010bacb <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010bb22:	eb 17                	jmp    c010bb3b <vprintfmt+0x263>
+                putch(' ', putdat);
+c010bb24:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb27:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bb2b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010bb32:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb35:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010bb37:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010bb3b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010bb3f:	7f e3                	jg     c010bb24 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+c010bb41:	e9 70 01 00 00       	jmp    c010bcb6 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010bb46:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bb49:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bb4d:	8d 45 14             	lea    0x14(%ebp),%eax
+c010bb50:	89 04 24             	mov    %eax,(%esp)
+c010bb53:	e8 0b fd ff ff       	call   c010b863 <getint>
+c010bb58:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bb5b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010bb5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bb61:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bb64:	85 d2                	test   %edx,%edx
+c010bb66:	79 26                	jns    c010bb8e <vprintfmt+0x2b6>
+                putch('-', putdat);
+c010bb68:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb6b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bb6f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+c010bb76:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb79:	ff d0                	call   *%eax
+                num = -(long long)num;
+c010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bb7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bb81:	f7 d8                	neg    %eax
+c010bb83:	83 d2 00             	adc    $0x0,%edx
+c010bb86:	f7 da                	neg    %edx
+c010bb88:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bb8b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010bb8e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010bb95:	e9 a8 00 00 00       	jmp    c010bc42 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010bb9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bb9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bba1:	8d 45 14             	lea    0x14(%ebp),%eax
+c010bba4:	89 04 24             	mov    %eax,(%esp)
+c010bba7:	e8 68 fc ff ff       	call   c010b814 <getuint>
+c010bbac:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bbaf:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010bbb2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010bbb9:	e9 84 00 00 00       	jmp    c010bc42 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010bbbe:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bbc1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bbc5:	8d 45 14             	lea    0x14(%ebp),%eax
+c010bbc8:	89 04 24             	mov    %eax,(%esp)
+c010bbcb:	e8 44 fc ff ff       	call   c010b814 <getuint>
+c010bbd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bbd3:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010bbd6:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010bbdd:	eb 63                	jmp    c010bc42 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010bbdf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbe2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bbe6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+c010bbed:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbf0:	ff d0                	call   *%eax
+            putch('x', putdat);
+c010bbf2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbf5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bbf9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+c010bc00:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc03:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010bc05:	8b 45 14             	mov    0x14(%ebp),%eax
+c010bc08:	8d 50 04             	lea    0x4(%eax),%edx
+c010bc0b:	89 55 14             	mov    %edx,0x14(%ebp)
+c010bc0e:	8b 00                	mov    (%eax),%eax
+c010bc10:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bc13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010bc1a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010bc21:	eb 1f                	jmp    c010bc42 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010bc23:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bc26:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bc2a:	8d 45 14             	lea    0x14(%ebp),%eax
+c010bc2d:	89 04 24             	mov    %eax,(%esp)
+c010bc30:	e8 df fb ff ff       	call   c010b814 <getuint>
+c010bc35:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bc38:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010bc3b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010bc42:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010bc46:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bc49:	89 54 24 18          	mov    %edx,0x18(%esp)
+c010bc4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010bc50:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010bc54:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010bc58:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bc5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bc5e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010bc62:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010bc66:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc69:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bc6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc70:	89 04 24             	mov    %eax,(%esp)
+c010bc73:	e8 97 fa ff ff       	call   c010b70f <printnum>
+            break;
+c010bc78:	eb 3c                	jmp    c010bcb6 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010bc7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc7d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bc81:	89 1c 24             	mov    %ebx,(%esp)
+c010bc84:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc87:	ff d0                	call   *%eax
+            break;
+c010bc89:	eb 2b                	jmp    c010bcb6 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010bc8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc8e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bc92:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+c010bc99:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc9c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010bc9e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010bca2:	eb 04                	jmp    c010bca8 <vprintfmt+0x3d0>
+c010bca4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010bca8:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bcab:	83 e8 01             	sub    $0x1,%eax
+c010bcae:	0f b6 00             	movzbl (%eax),%eax
+c010bcb1:	3c 25                	cmp    $0x25,%al
+c010bcb3:	75 ef                	jne    c010bca4 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+c010bcb5:	90                   	nop
+        }
+    }
+c010bcb6:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010bcb7:	e9 3e fc ff ff       	jmp    c010b8fa <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c010bcbc:	83 c4 40             	add    $0x40,%esp
+c010bcbf:	5b                   	pop    %ebx
+c010bcc0:	5e                   	pop    %esi
+c010bcc1:	5d                   	pop    %ebp
+c010bcc2:	c3                   	ret    
+
+c010bcc3 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010bcc3:	55                   	push   %ebp
+c010bcc4:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010bcc6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcc9:	8b 40 08             	mov    0x8(%eax),%eax
+c010bccc:	8d 50 01             	lea    0x1(%eax),%edx
+c010bccf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcd2:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010bcd5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcd8:	8b 10                	mov    (%eax),%edx
+c010bcda:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcdd:	8b 40 04             	mov    0x4(%eax),%eax
+c010bce0:	39 c2                	cmp    %eax,%edx
+c010bce2:	73 12                	jae    c010bcf6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010bce4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bce7:	8b 00                	mov    (%eax),%eax
+c010bce9:	8d 48 01             	lea    0x1(%eax),%ecx
+c010bcec:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010bcef:	89 0a                	mov    %ecx,(%edx)
+c010bcf1:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bcf4:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010bcf6:	5d                   	pop    %ebp
+c010bcf7:	c3                   	ret    
+
+c010bcf8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010bcf8:	55                   	push   %ebp
+c010bcf9:	89 e5                	mov    %esp,%ebp
+c010bcfb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010bcfe:	8d 45 14             	lea    0x14(%ebp),%eax
+c010bd01:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010bd04:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd07:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010bd0b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bd0e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010bd12:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd15:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bd19:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd1c:	89 04 24             	mov    %eax,(%esp)
+c010bd1f:	e8 08 00 00 00       	call   c010bd2c <vsnprintf>
+c010bd24:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010bd27:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010bd2a:	c9                   	leave  
+c010bd2b:	c3                   	ret    
+
+c010bd2c <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010bd2c:	55                   	push   %ebp
+c010bd2d:	89 e5                	mov    %esp,%ebp
+c010bd2f:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010bd32:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd35:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010bd38:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd3b:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010bd3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd41:	01 d0                	add    %edx,%eax
+c010bd43:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bd46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010bd4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010bd51:	74 0a                	je     c010bd5d <vsnprintf+0x31>
+c010bd53:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010bd56:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd59:	39 c2                	cmp    %eax,%edx
+c010bd5b:	76 07                	jbe    c010bd64 <vsnprintf+0x38>
+        return -E_INVAL;
+c010bd5d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010bd62:	eb 2a                	jmp    c010bd8e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010bd64:	8b 45 14             	mov    0x14(%ebp),%eax
+c010bd67:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010bd6b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bd6e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010bd72:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010bd75:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010bd79:	c7 04 24 c3 bc 10 c0 	movl   $0xc010bcc3,(%esp)
+c010bd80:	e8 53 fb ff ff       	call   c010b8d8 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+c010bd85:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bd88:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010bd8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010bd8e:	c9                   	leave  
+c010bd8f:	c3                   	ret    
+
+c010bd90 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010bd90:	55                   	push   %ebp
+c010bd91:	89 e5                	mov    %esp,%ebp
+c010bd93:	57                   	push   %edi
+c010bd94:	56                   	push   %esi
+c010bd95:	53                   	push   %ebx
+c010bd96:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010bd99:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
+c010bd9e:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
+c010bda4:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010bdaa:	6b f0 05             	imul   $0x5,%eax,%esi
+c010bdad:	01 f7                	add    %esi,%edi
+c010bdaf:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+c010bdb4:	f7 e6                	mul    %esi
+c010bdb6:	8d 34 17             	lea    (%edi,%edx,1),%esi
+c010bdb9:	89 f2                	mov    %esi,%edx
+c010bdbb:	83 c0 0b             	add    $0xb,%eax
+c010bdbe:	83 d2 00             	adc    $0x0,%edx
+c010bdc1:	89 c7                	mov    %eax,%edi
+c010bdc3:	83 e7 ff             	and    $0xffffffff,%edi
+c010bdc6:	89 f9                	mov    %edi,%ecx
+c010bdc8:	0f b7 da             	movzwl %dx,%ebx
+c010bdcb:	89 0d a0 ce 12 c0    	mov    %ecx,0xc012cea0
+c010bdd1:	89 1d a4 ce 12 c0    	mov    %ebx,0xc012cea4
+    unsigned long long result = (next >> 12);
+c010bdd7:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
+c010bddc:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
+c010bde2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010bde6:	c1 ea 0c             	shr    $0xc,%edx
+c010bde9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010bdec:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010bdef:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010bdf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bdf9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010bdfc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010bdff:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010be02:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010be05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010be08:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010be0c:	74 1c                	je     c010be2a <rand+0x9a>
+c010be0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010be11:	ba 00 00 00 00       	mov    $0x0,%edx
+c010be16:	f7 75 dc             	divl   -0x24(%ebp)
+c010be19:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010be1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010be1f:	ba 00 00 00 00       	mov    $0x0,%edx
+c010be24:	f7 75 dc             	divl   -0x24(%ebp)
+c010be27:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010be2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010be2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010be30:	f7 75 dc             	divl   -0x24(%ebp)
+c010be33:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010be36:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010be39:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010be3c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010be3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010be42:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010be45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010be48:	83 c4 24             	add    $0x24,%esp
+c010be4b:	5b                   	pop    %ebx
+c010be4c:	5e                   	pop    %esi
+c010be4d:	5f                   	pop    %edi
+c010be4e:	5d                   	pop    %ebp
+c010be4f:	c3                   	ret    
+
+c010be50 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010be50:	55                   	push   %ebp
+c010be51:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010be53:	8b 45 08             	mov    0x8(%ebp),%eax
+c010be56:	ba 00 00 00 00       	mov    $0x0,%edx
+c010be5b:	a3 a0 ce 12 c0       	mov    %eax,0xc012cea0
+c010be60:	89 15 a4 ce 12 c0    	mov    %edx,0xc012cea4
+}
+c010be66:	5d                   	pop    %ebp
+c010be67:	c3                   	ret    
+
+c010be68 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010be68:	55                   	push   %ebp
+c010be69:	89 e5                	mov    %esp,%ebp
+c010be6b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010be6e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010be75:	eb 04                	jmp    c010be7b <strlen+0x13>
+        cnt ++;
+c010be77:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c010be7b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010be7e:	8d 50 01             	lea    0x1(%eax),%edx
+c010be81:	89 55 08             	mov    %edx,0x8(%ebp)
+c010be84:	0f b6 00             	movzbl (%eax),%eax
+c010be87:	84 c0                	test   %al,%al
+c010be89:	75 ec                	jne    c010be77 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010be8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010be8e:	c9                   	leave  
+c010be8f:	c3                   	ret    
+
+c010be90 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010be90:	55                   	push   %ebp
+c010be91:	89 e5                	mov    %esp,%ebp
+c010be93:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010be96:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010be9d:	eb 04                	jmp    c010bea3 <strnlen+0x13>
+        cnt ++;
+c010be9f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c010bea3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bea6:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010bea9:	73 10                	jae    c010bebb <strnlen+0x2b>
+c010beab:	8b 45 08             	mov    0x8(%ebp),%eax
+c010beae:	8d 50 01             	lea    0x1(%eax),%edx
+c010beb1:	89 55 08             	mov    %edx,0x8(%ebp)
+c010beb4:	0f b6 00             	movzbl (%eax),%eax
+c010beb7:	84 c0                	test   %al,%al
+c010beb9:	75 e4                	jne    c010be9f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010bebb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010bebe:	c9                   	leave  
+c010bebf:	c3                   	ret    
+
+c010bec0 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010bec0:	55                   	push   %ebp
+c010bec1:	89 e5                	mov    %esp,%ebp
+c010bec3:	57                   	push   %edi
+c010bec4:	56                   	push   %esi
+c010bec5:	83 ec 20             	sub    $0x20,%esp
+c010bec8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010becb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bece:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010bed4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010bed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010beda:	89 d1                	mov    %edx,%ecx
+c010bedc:	89 c2                	mov    %eax,%edx
+c010bede:	89 ce                	mov    %ecx,%esi
+c010bee0:	89 d7                	mov    %edx,%edi
+c010bee2:	ac                   	lods   %ds:(%esi),%al
+c010bee3:	aa                   	stos   %al,%es:(%edi)
+c010bee4:	84 c0                	test   %al,%al
+c010bee6:	75 fa                	jne    c010bee2 <strcpy+0x22>
+c010bee8:	89 fa                	mov    %edi,%edx
+c010beea:	89 f1                	mov    %esi,%ecx
+c010beec:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010beef:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010bef2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010bef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010bef8:	83 c4 20             	add    $0x20,%esp
+c010befb:	5e                   	pop    %esi
+c010befc:	5f                   	pop    %edi
+c010befd:	5d                   	pop    %ebp
+c010befe:	c3                   	ret    
+
+c010beff <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010beff:	55                   	push   %ebp
+c010bf00:	89 e5                	mov    %esp,%ebp
+c010bf02:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010bf05:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf08:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010bf0b:	eb 21                	jmp    c010bf2e <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c010bf0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bf10:	0f b6 10             	movzbl (%eax),%edx
+c010bf13:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bf16:	88 10                	mov    %dl,(%eax)
+c010bf18:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bf1b:	0f b6 00             	movzbl (%eax),%eax
+c010bf1e:	84 c0                	test   %al,%al
+c010bf20:	74 04                	je     c010bf26 <strncpy+0x27>
+            src ++;
+c010bf22:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c010bf26:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010bf2a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c010bf2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bf32:	75 d9                	jne    c010bf0d <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c010bf34:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010bf37:	c9                   	leave  
+c010bf38:	c3                   	ret    
+
+c010bf39 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010bf39:	55                   	push   %ebp
+c010bf3a:	89 e5                	mov    %esp,%ebp
+c010bf3c:	57                   	push   %edi
+c010bf3d:	56                   	push   %esi
+c010bf3e:	83 ec 20             	sub    $0x20,%esp
+c010bf41:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bf47:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bf4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c010bf4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bf50:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bf53:	89 d1                	mov    %edx,%ecx
+c010bf55:	89 c2                	mov    %eax,%edx
+c010bf57:	89 ce                	mov    %ecx,%esi
+c010bf59:	89 d7                	mov    %edx,%edi
+c010bf5b:	ac                   	lods   %ds:(%esi),%al
+c010bf5c:	ae                   	scas   %es:(%edi),%al
+c010bf5d:	75 08                	jne    c010bf67 <strcmp+0x2e>
+c010bf5f:	84 c0                	test   %al,%al
+c010bf61:	75 f8                	jne    c010bf5b <strcmp+0x22>
+c010bf63:	31 c0                	xor    %eax,%eax
+c010bf65:	eb 04                	jmp    c010bf6b <strcmp+0x32>
+c010bf67:	19 c0                	sbb    %eax,%eax
+c010bf69:	0c 01                	or     $0x1,%al
+c010bf6b:	89 fa                	mov    %edi,%edx
+c010bf6d:	89 f1                	mov    %esi,%ecx
+c010bf6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010bf72:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010bf75:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c010bf78:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010bf7b:	83 c4 20             	add    $0x20,%esp
+c010bf7e:	5e                   	pop    %esi
+c010bf7f:	5f                   	pop    %edi
+c010bf80:	5d                   	pop    %ebp
+c010bf81:	c3                   	ret    
+
+c010bf82 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010bf82:	55                   	push   %ebp
+c010bf83:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010bf85:	eb 0c                	jmp    c010bf93 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c010bf87:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010bf8b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010bf8f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010bf93:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bf97:	74 1a                	je     c010bfb3 <strncmp+0x31>
+c010bf99:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf9c:	0f b6 00             	movzbl (%eax),%eax
+c010bf9f:	84 c0                	test   %al,%al
+c010bfa1:	74 10                	je     c010bfb3 <strncmp+0x31>
+c010bfa3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bfa6:	0f b6 10             	movzbl (%eax),%edx
+c010bfa9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bfac:	0f b6 00             	movzbl (%eax),%eax
+c010bfaf:	38 c2                	cmp    %al,%dl
+c010bfb1:	74 d4                	je     c010bf87 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010bfb3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bfb7:	74 18                	je     c010bfd1 <strncmp+0x4f>
+c010bfb9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bfbc:	0f b6 00             	movzbl (%eax),%eax
+c010bfbf:	0f b6 d0             	movzbl %al,%edx
+c010bfc2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bfc5:	0f b6 00             	movzbl (%eax),%eax
+c010bfc8:	0f b6 c0             	movzbl %al,%eax
+c010bfcb:	29 c2                	sub    %eax,%edx
+c010bfcd:	89 d0                	mov    %edx,%eax
+c010bfcf:	eb 05                	jmp    c010bfd6 <strncmp+0x54>
+c010bfd1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bfd6:	5d                   	pop    %ebp
+c010bfd7:	c3                   	ret    
+
+c010bfd8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010bfd8:	55                   	push   %ebp
+c010bfd9:	89 e5                	mov    %esp,%ebp
+c010bfdb:	83 ec 04             	sub    $0x4,%esp
+c010bfde:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bfe1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010bfe4:	eb 14                	jmp    c010bffa <strchr+0x22>
+        if (*s == c) {
+c010bfe6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bfe9:	0f b6 00             	movzbl (%eax),%eax
+c010bfec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010bfef:	75 05                	jne    c010bff6 <strchr+0x1e>
+            return (char *)s;
+c010bff1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bff4:	eb 13                	jmp    c010c009 <strchr+0x31>
+        }
+        s ++;
+c010bff6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c010bffa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bffd:	0f b6 00             	movzbl (%eax),%eax
+c010c000:	84 c0                	test   %al,%al
+c010c002:	75 e2                	jne    c010bfe6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c010c004:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c009:	c9                   	leave  
+c010c00a:	c3                   	ret    
+
+c010c00b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010c00b:	55                   	push   %ebp
+c010c00c:	89 e5                	mov    %esp,%ebp
+c010c00e:	83 ec 04             	sub    $0x4,%esp
+c010c011:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c014:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010c017:	eb 11                	jmp    c010c02a <strfind+0x1f>
+        if (*s == c) {
+c010c019:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c01c:	0f b6 00             	movzbl (%eax),%eax
+c010c01f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010c022:	75 02                	jne    c010c026 <strfind+0x1b>
+            break;
+c010c024:	eb 0e                	jmp    c010c034 <strfind+0x29>
+        }
+        s ++;
+c010c026:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c010c02a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c02d:	0f b6 00             	movzbl (%eax),%eax
+c010c030:	84 c0                	test   %al,%al
+c010c032:	75 e5                	jne    c010c019 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+c010c034:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010c037:	c9                   	leave  
+c010c038:	c3                   	ret    
+
+c010c039 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010c039:	55                   	push   %ebp
+c010c03a:	89 e5                	mov    %esp,%ebp
+c010c03c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010c03f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010c046:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010c04d:	eb 04                	jmp    c010c053 <strtol+0x1a>
+        s ++;
+c010c04f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010c053:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c056:	0f b6 00             	movzbl (%eax),%eax
+c010c059:	3c 20                	cmp    $0x20,%al
+c010c05b:	74 f2                	je     c010c04f <strtol+0x16>
+c010c05d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c060:	0f b6 00             	movzbl (%eax),%eax
+c010c063:	3c 09                	cmp    $0x9,%al
+c010c065:	74 e8                	je     c010c04f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010c067:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c06a:	0f b6 00             	movzbl (%eax),%eax
+c010c06d:	3c 2b                	cmp    $0x2b,%al
+c010c06f:	75 06                	jne    c010c077 <strtol+0x3e>
+        s ++;
+c010c071:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c075:	eb 15                	jmp    c010c08c <strtol+0x53>
+    }
+    else if (*s == '-') {
+c010c077:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c07a:	0f b6 00             	movzbl (%eax),%eax
+c010c07d:	3c 2d                	cmp    $0x2d,%al
+c010c07f:	75 0b                	jne    c010c08c <strtol+0x53>
+        s ++, neg = 1;
+c010c081:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c085:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010c08c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c090:	74 06                	je     c010c098 <strtol+0x5f>
+c010c092:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010c096:	75 24                	jne    c010c0bc <strtol+0x83>
+c010c098:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c09b:	0f b6 00             	movzbl (%eax),%eax
+c010c09e:	3c 30                	cmp    $0x30,%al
+c010c0a0:	75 1a                	jne    c010c0bc <strtol+0x83>
+c010c0a2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0a5:	83 c0 01             	add    $0x1,%eax
+c010c0a8:	0f b6 00             	movzbl (%eax),%eax
+c010c0ab:	3c 78                	cmp    $0x78,%al
+c010c0ad:	75 0d                	jne    c010c0bc <strtol+0x83>
+        s += 2, base = 16;
+c010c0af:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010c0b3:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010c0ba:	eb 2a                	jmp    c010c0e6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010c0bc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c0c0:	75 17                	jne    c010c0d9 <strtol+0xa0>
+c010c0c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0c5:	0f b6 00             	movzbl (%eax),%eax
+c010c0c8:	3c 30                	cmp    $0x30,%al
+c010c0ca:	75 0d                	jne    c010c0d9 <strtol+0xa0>
+        s ++, base = 8;
+c010c0cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c0d0:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010c0d7:	eb 0d                	jmp    c010c0e6 <strtol+0xad>
+    }
+    else if (base == 0) {
+c010c0d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c0dd:	75 07                	jne    c010c0e6 <strtol+0xad>
+        base = 10;
+c010c0df:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010c0e6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0e9:	0f b6 00             	movzbl (%eax),%eax
+c010c0ec:	3c 2f                	cmp    $0x2f,%al
+c010c0ee:	7e 1b                	jle    c010c10b <strtol+0xd2>
+c010c0f0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0f3:	0f b6 00             	movzbl (%eax),%eax
+c010c0f6:	3c 39                	cmp    $0x39,%al
+c010c0f8:	7f 11                	jg     c010c10b <strtol+0xd2>
+            dig = *s - '0';
+c010c0fa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0fd:	0f b6 00             	movzbl (%eax),%eax
+c010c100:	0f be c0             	movsbl %al,%eax
+c010c103:	83 e8 30             	sub    $0x30,%eax
+c010c106:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c109:	eb 48                	jmp    c010c153 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010c10b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c10e:	0f b6 00             	movzbl (%eax),%eax
+c010c111:	3c 60                	cmp    $0x60,%al
+c010c113:	7e 1b                	jle    c010c130 <strtol+0xf7>
+c010c115:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c118:	0f b6 00             	movzbl (%eax),%eax
+c010c11b:	3c 7a                	cmp    $0x7a,%al
+c010c11d:	7f 11                	jg     c010c130 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c010c11f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c122:	0f b6 00             	movzbl (%eax),%eax
+c010c125:	0f be c0             	movsbl %al,%eax
+c010c128:	83 e8 57             	sub    $0x57,%eax
+c010c12b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c12e:	eb 23                	jmp    c010c153 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010c130:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c133:	0f b6 00             	movzbl (%eax),%eax
+c010c136:	3c 40                	cmp    $0x40,%al
+c010c138:	7e 3d                	jle    c010c177 <strtol+0x13e>
+c010c13a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c13d:	0f b6 00             	movzbl (%eax),%eax
+c010c140:	3c 5a                	cmp    $0x5a,%al
+c010c142:	7f 33                	jg     c010c177 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+c010c144:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c147:	0f b6 00             	movzbl (%eax),%eax
+c010c14a:	0f be c0             	movsbl %al,%eax
+c010c14d:	83 e8 37             	sub    $0x37,%eax
+c010c150:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010c153:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c156:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010c159:	7c 02                	jl     c010c15d <strtol+0x124>
+            break;
+c010c15b:	eb 1a                	jmp    c010c177 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+c010c15d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c161:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c164:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010c168:	89 c2                	mov    %eax,%edx
+c010c16a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c16d:	01 d0                	add    %edx,%eax
+c010c16f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c010c172:	e9 6f ff ff ff       	jmp    c010c0e6 <strtol+0xad>
+
+    if (endptr) {
+c010c177:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c17b:	74 08                	je     c010c185 <strtol+0x14c>
+        *endptr = (char *) s;
+c010c17d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c180:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c183:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010c185:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010c189:	74 07                	je     c010c192 <strtol+0x159>
+c010c18b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c18e:	f7 d8                	neg    %eax
+c010c190:	eb 03                	jmp    c010c195 <strtol+0x15c>
+c010c192:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010c195:	c9                   	leave  
+c010c196:	c3                   	ret    
+
+c010c197 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010c197:	55                   	push   %ebp
+c010c198:	89 e5                	mov    %esp,%ebp
+c010c19a:	57                   	push   %edi
+c010c19b:	83 ec 24             	sub    $0x24,%esp
+c010c19e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010c1a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010c1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c1ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010c1ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010c1b1:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c1b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010c1b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010c1ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010c1be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010c1c1:	89 d7                	mov    %edx,%edi
+c010c1c3:	f3 aa                	rep stos %al,%es:(%edi)
+c010c1c5:	89 fa                	mov    %edi,%edx
+c010c1c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010c1ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010c1cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010c1d0:	83 c4 24             	add    $0x24,%esp
+c010c1d3:	5f                   	pop    %edi
+c010c1d4:	5d                   	pop    %ebp
+c010c1d5:	c3                   	ret    
+
+c010c1d6 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010c1d6:	55                   	push   %ebp
+c010c1d7:	89 e5                	mov    %esp,%ebp
+c010c1d9:	57                   	push   %edi
+c010c1da:	56                   	push   %esi
+c010c1db:	53                   	push   %ebx
+c010c1dc:	83 ec 30             	sub    $0x30,%esp
+c010c1df:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c1e5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c1eb:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c1ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010c1f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c1f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010c1f7:	73 42                	jae    c010c23b <memmove+0x65>
+c010c1f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c1fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010c1ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c202:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c205:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c208:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010c20b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c20e:	c1 e8 02             	shr    $0x2,%eax
+c010c211:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010c213:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c216:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c219:	89 d7                	mov    %edx,%edi
+c010c21b:	89 c6                	mov    %eax,%esi
+c010c21d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010c21f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010c222:	83 e1 03             	and    $0x3,%ecx
+c010c225:	74 02                	je     c010c229 <memmove+0x53>
+c010c227:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c229:	89 f0                	mov    %esi,%eax
+c010c22b:	89 fa                	mov    %edi,%edx
+c010c22d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010c230:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010c233:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010c236:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c239:	eb 36                	jmp    c010c271 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010c23b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c23e:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c241:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c244:	01 c2                	add    %eax,%edx
+c010c246:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c249:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010c24c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c24f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c010c252:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c255:	89 c1                	mov    %eax,%ecx
+c010c257:	89 d8                	mov    %ebx,%eax
+c010c259:	89 d6                	mov    %edx,%esi
+c010c25b:	89 c7                	mov    %eax,%edi
+c010c25d:	fd                   	std    
+c010c25e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c260:	fc                   	cld    
+c010c261:	89 f8                	mov    %edi,%eax
+c010c263:	89 f2                	mov    %esi,%edx
+c010c265:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010c268:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010c26b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c010c26e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010c271:	83 c4 30             	add    $0x30,%esp
+c010c274:	5b                   	pop    %ebx
+c010c275:	5e                   	pop    %esi
+c010c276:	5f                   	pop    %edi
+c010c277:	5d                   	pop    %ebp
+c010c278:	c3                   	ret    
+
+c010c279 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010c279:	55                   	push   %ebp
+c010c27a:	89 e5                	mov    %esp,%ebp
+c010c27c:	57                   	push   %edi
+c010c27d:	56                   	push   %esi
+c010c27e:	83 ec 20             	sub    $0x20,%esp
+c010c281:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c284:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c287:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c28a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c28d:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c290:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010c293:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c296:	c1 e8 02             	shr    $0x2,%eax
+c010c299:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010c29b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c29e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c2a1:	89 d7                	mov    %edx,%edi
+c010c2a3:	89 c6                	mov    %eax,%esi
+c010c2a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010c2a7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010c2aa:	83 e1 03             	and    $0x3,%ecx
+c010c2ad:	74 02                	je     c010c2b1 <memcpy+0x38>
+c010c2af:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c2b1:	89 f0                	mov    %esi,%eax
+c010c2b3:	89 fa                	mov    %edi,%edx
+c010c2b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010c2b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010c2bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010c2be:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010c2c1:	83 c4 20             	add    $0x20,%esp
+c010c2c4:	5e                   	pop    %esi
+c010c2c5:	5f                   	pop    %edi
+c010c2c6:	5d                   	pop    %ebp
+c010c2c7:	c3                   	ret    
+
+c010c2c8 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010c2c8:	55                   	push   %ebp
+c010c2c9:	89 e5                	mov    %esp,%ebp
+c010c2cb:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010c2ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010c2d4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c2d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010c2da:	eb 30                	jmp    c010c30c <memcmp+0x44>
+        if (*s1 != *s2) {
+c010c2dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c2df:	0f b6 10             	movzbl (%eax),%edx
+c010c2e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c2e5:	0f b6 00             	movzbl (%eax),%eax
+c010c2e8:	38 c2                	cmp    %al,%dl
+c010c2ea:	74 18                	je     c010c304 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010c2ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c2ef:	0f b6 00             	movzbl (%eax),%eax
+c010c2f2:	0f b6 d0             	movzbl %al,%edx
+c010c2f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c2f8:	0f b6 00             	movzbl (%eax),%eax
+c010c2fb:	0f b6 c0             	movzbl %al,%eax
+c010c2fe:	29 c2                	sub    %eax,%edx
+c010c300:	89 d0                	mov    %edx,%eax
+c010c302:	eb 1a                	jmp    c010c31e <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c010c304:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010c308:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c010c30c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c30f:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c312:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c315:	85 c0                	test   %eax,%eax
+c010c317:	75 c3                	jne    c010c2dc <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c010c319:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c31e:	c9                   	leave  
+c010c31f:	c3                   	ret    
diff -r -u -P _lab6/obj/kernel.sym lab6/obj/kernel.sym
--- _lab6/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kernel.sym	2020-05-28 03:11:59.081519207 +0800
@@ -0,0 +1,725 @@
+c0100000 .text
+c010c320 .rodata
+c010eb40 .stab
+c0123829 .stabstr
+c012a000 .data
+c01adde0 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c012c018 __gdtdesc
+c0100019 relocated
+c0100028 spin
+c012c000 __gdt
+00000000 init.c
+c0100146 lab1_print_cur_status
+c01adde0 round.2003
+c010020c lab1_switch_to_user
+c0100211 lab1_switch_to_kernel
+c0100216 lab1_switch_test
+00000000 readline.c
+c01ade00 buf
+00000000 stdio.c
+c0100305 cputch
+00000000 kdebug.c
+c01003f9 stab_binsearch
+c0100abd read_eip
+00000000 kmonitor.c
+c012c020 commands
+c0100b74 parse
+c0100c2e runcmd
+00000000 panic.c
+c01ae200 is_panic
+00000000 clock.c
+00000000 console.c
+c0100ee0 __intr_save
+c0100f0a __intr_restore
+c0100f1d delay
+c01ae220 crt_buf
+c01ae224 crt_pos
+c01ae226 addr_6845
+c0100f65 cga_init
+c01ae228 serial_exists
+c010104b serial_init
+c010112e lpt_putc_sub
+c01011a7 lpt_putc
+c01011e6 cga_putc
+c01013ba serial_putc_sub
+c0101413 serial_putc
+c01ae240 cons
+c0101452 cons_intr
+c010149d serial_proc_data
+c012c060 shiftcode
+c012c160 togglecode
+c012c260 normalmap
+c012c360 shiftmap
+c012c460 ctlmap
+c012c560 charcode
+c0101511 kbd_proc_data
+c01ae448 shift.1642
+c010169a kbd_intr
+c01016ae kbd_init
+00000000 ide.c
+c010c678 channels
+c01ae460 ide_devices
+c010179e ide_wait_ready
+00000000 intr.c
+00000000 picirq.c
+c012c570 irq_mask
+c01ae540 did_init
+c010201f pic_setmask
+00000000 trap.c
+c01021e0 print_ticks
+c01ae560 idt
+c012c580 idt_pd
+c010246a trapname
+c010cc20 excnames.1884
+c012c5a0 IA32flags
+c010272d print_pgfault
+c01027aa pgfault_handler
+c01aed60 in_swap_tick_event
+c0102876 trap_dispatch
+00000000 default_pmm.c
+c01035a1 page2ppn
+c01035b5 page2pa
+c01035cb page_ref
+c01035d5 set_page_ref
+c01035e2 default_init
+c010360f default_init_memmap
+c0103763 default_alloc_pages
+c01038e9 default_free_pages
+c0103bb5 default_nr_free_pages
+c0103bbf basic_check
+c01040fb default_check
+00000000 kmalloc.c
+c0104753 __intr_save
+c010477d __intr_restore
+c0104790 page2ppn
+c01047a4 page2pa
+c01047ba pa2page
+c01047ff page2kva
+c0104853 kva2page
+c012ca00 arena
+c012ca08 slobfree
+c01aed64 bigblocks
+c010489d __slob_get_free_pages
+c01048d6 __slob_free_pages
+c010490a slob_alloc
+c0104adf slob_free
+c0104c38 find_order
+c0104c5c __kmalloc
+00000000 pmm.c
+c0104ea2 page2ppn
+c0104eb6 page2pa
+c0104ecc pa2page
+c0104f11 page2kva
+c0104f65 pte2page
+c0104fa3 pde2page
+c0104fbb page_ref
+c0104fc5 set_page_ref
+c0104fd2 page_ref_inc
+c0104fe9 page_ref_dec
+c0105000 __intr_save
+c010502a __intr_restore
+c01aeda0 ts
+c012ca20 gdt
+c012ca50 gdt_pd
+c010503d lgdt
+c010507f gdt_init
+c010516e init_pmm_manager
+c01051a1 init_memmap
+c0105288 page_init
+c0105669 enable_paging
+c01056a2 boot_map_segment
+c01057af boot_alloc_page
+c0106162 check_alloc_page
+c0106180 check_pgdir
+c010681b check_boot_pgdir
+c0105ab8 page_remove_pte
+c0106ba9 perm2str
+c01aee08 str.2035
+c0106bf7 get_pgtable_items
+00000000 swap.c
+c0106e1b pa2page
+c0106e60 pte2page
+c0106e9e pde2page
+c01aee14 sm
+c01073e5 check_swap
+c0107215 check_content_set
+c01073cd check_content_access
+00000000 swap_fifo.c
+c0107a83 _fifo_init_mm
+c0107ab5 _fifo_map_swappable
+c0107b48 _fifo_swap_out_victim
+c0107c26 _fifo_check_swap
+c0107f7b _fifo_init
+c0107f85 _fifo_set_unswappable
+c0107f8f _fifo_tick_event
+00000000 vmm.c
+c0107f99 lock_init
+c0107fa7 mm_count
+c0107fb2 set_mm_count
+c0107fc0 pa2page
+c0108005 pde2page
+c01081a2 check_vma_overlap
+c01087bd check_vmm
+c01087e3 check_vma_struct
+c0108c7c check_pgfault
+00000000 swapfs.c
+c01091c9 page2ppn
+c01091dd page2pa
+c01091f3 page2kva
+00000000 proc.c
+c010937c test_and_set_bit
+c010939c test_and_clear_bit
+c01093bc __intr_save
+c01093e6 __intr_restore
+c01093f9 try_lock
+c010941c lock
+c010943a unlock
+c0109475 page2ppn
+c0109489 page2pa
+c010949f pa2page
+c01094e4 page2kva
+c0109538 kva2page
+c0109582 mm_count_inc
+c010959c mm_count_dec
+c01095b6 lock_mm
+c01095d2 unlock_mm
+c01aee40 hash_list
+c01b0e40 nr_process
+c01095ee alloc_proc
+c01b0e44 name.1909
+c01097e8 set_links
+c010988d remove_links
+c0109910 get_pid
+c012ca80 last_pid.1925
+c012ca84 next_safe.1924
+c0109a7d forkret
+c0109a95 hash_proc
+c0109b11 unhash_proc
+c0109c28 setup_kstack
+c0109c64 put_kstack
+c0109c8a setup_pgdir
+c0109d31 put_pgdir
+c0109d57 copy_mm
+c0109e73 copy_thread
+c010a23d load_icode
+c010abe1 kernel_execve
+c010ac1b user_main
+c010ac7a init_main
+00000000 default_sched.c
+c010b03b RR_init
+c010b067 RR_enqueue
+c010b140 RR_dequeue
+c010b1ed RR_pick_next
+c010b219 RR_proc_tick
+00000000 sched.c
+c010b257 __intr_save
+c010b281 __intr_restore
+c01b0e54 timer_list
+c01b0e5c sched_class
+c01b0e60 rq
+c010b294 sched_class_enqueue
+c010b2c0 sched_class_dequeue
+c010b2e2 sched_class_pick_next
+c01b0e64 __rq
+00000000 syscall.c
+c010b4c6 sys_exit
+c010b4e1 sys_fork
+c010b517 sys_wait
+c010b544 sys_exec
+c010b591 sys_yield
+c010b59e sys_kill
+c010b5b9 sys_getpid
+c010b5c6 sys_putc
+c010b5e6 sys_pgdir
+c010b5f8 sys_gettime
+c010b602 sys_lab6_set_priority
+c012caa0 syscalls
+00000000 hash.c
+00000000 printfmt.c
+c010e960 error_string
+c010b70f printnum
+c010b814 getuint
+c010b863 getint
+c010bcc3 sprintputch
+00000000 rand.c
+c012cea0 next
+00000000 string.c
+00000000 
+c01034f9 vector242
+c0102f50 vector119
+c0100984 print_kerninfo
+c0102e30 vector87
+c0102e27 vector86
+c0103565 vector251
+c010bec0 strcpy
+c0101b11 ide_device_valid
+c0102e54 vector91
+c0102c4a vector33
+c0103139 vector162
+c010339d vector213
+c0102eed vector108
+c0102ca4 vector43
+0000792d _binary_obj___user_yield_out_size
+c0104c24 slob_allocated
+c0100000 kern_entry
+c0100daf mon_backtrace
+c010315d vector165
+c01347d6 _binary_obj___user_badsegment_out_start
+c010324d vector185
+c0102f2c vector115
+c0102f6b vector122
+0000792d _binary_obj___user_hello_out_size
+c010870d copy_from_user
+c0161f80 _binary_obj___user_forktest_out_end
+c0105f78 page_insert
+c01030f1 vector156
+c010351d vector245
+c010327d vector189
+c0102b70 vector7
+c0102d46 vector61
+c0102bf9 vector24
+c0102f08 vector111
+c0103301 vector200
+00007984 _binary_obj___user_testbss_out_size
+c0102d7c vector67
+c010b3a2 wakeup_proc
+c0104c2e kallocated
+c010608e pgdir_alloc_page
+c0103019 vector138
+c0102dbb vector74
+c010c1d6 memmove
+c0102d22 vector57
+c014b3ce _binary_obj___user_exit_out_end
+c010801d mm_create
+c010bcf8 snprintf
+c010b622 syscall
+c01024b1 print_trapframe
+c01033a9 vector214
+c010b8d8 vprintfmt
+c0102e9c vector99
+c0105a5f get_page
+c0102b06 __alltraps
+c010172f cons_getc
+c010303d vector141
+c0100e73 is_kernel_panic
+c01031b1 vector172
+c0100ace print_stackframe
+c01034ed vector241
+c01b0f64 pra_list_head
+c010357d vector253
+c0102b4c vector3
+c0102b28 forkrets
+c0102b43 vector2
+c0109f4b do_fork
+c0103445 vector227
+c0109bb6 kernel_thread
+c0103379 vector210
+c01aee20 idleproc
+c0103421 vector224
+c0102c92 vector41
+c012ca60 swap_manager_fifo
+c0100358 cprintf
+c019eab7 _binary_obj___user_testbss_out_end
+c01b0f70 proc_list
+c0102bde vector21
+c01031ed vector177
+c0102f47 vector118
+c0102d97 vector70
+c0108418 mm_map
+c0102d8e vector69
+c01034bd vector237
+c0102d61 vector64
+c0102c14 vector27
+c0108534 dup_mmap
+c01087b0 vmm_init
+c0102fd1 vector132
+c012cea8 _binary_obj___user_badarg_out_start
+c0108635 exit_mmap
+c0103259 vector186
+0000792e _binary_obj___user_badarg_out_size
+c01033cd vector217
+c0108376 mm_destroy
+c0109373 kernel_thread_entry
+c010a9eb do_wait
+c010c279 memcpy
+c0102b3a vector1
+c01031f9 vector178
+c0102c77 vector38
+c0104d66 kfree
+c0180511 _binary_obj___user_pgdir_out_end
+c01034c9 vector238
+c01a64a7 _binary_obj___user_yield_out_start
+c010024f readline
+c01698e3 _binary_obj___user_hello_out_start
+c0102fdd vector133
+c0102db2 vector73
+c0103061 vector144
+c010d170 vpd
+c010002a kern_init
+c0143a88 _binary_obj___user_exit_out_start
+c0103589 vector254
+c0102eae vector101
+c0103385 vector211
+c01031c9 vector174
+c0103505 vector243
+c0105d14 copy_range
+c0102fa1 vector128
+c0178be4 _binary_obj___user_matrix_out_end
+c0102dfa vector81
+c010afda lab6_set_priority
+c010522b free_pages
+c0102b9c vector13
+c010bd2c vsnprintf
+c0102cec vector51
+c0102bb3 vector16
+c01addd4 edata
+c01016c7 cons_init
+c010713f swap_in
+c0101dd1 ide_write_secs
+c01b0e88 pmm_manager
+c01034e1 vector240
+c0102d07 vector54
+c0102bcc vector19
+c0123828 __STAB_END__
+c0102e5d vector92
+c0103511 vector244
+c01aee0c swap_init_ok
+c0105072 load_esp0
+c0103031 vector140
+c0102cb6 vector45
+c0102de8 vector79
+c010345d vector229
+c0106eb6 swap_init
+c0103109 vector158
+c0102077 pic_enable
+c0109247 swapfs_init
+c01b0ea0 check_rp
+0000792f _binary_obj___user_softint_out_size
+c0105c0d exit_range
+c0102c80 vector39
+c0103181 vector168
+c01a64a7 _binary_obj___user_waitkill_out_end
+c0102c5c vector35
+c0102f1a vector113
+c0123829 __STABSTR_BEGIN__
+c010ab7f do_kill
+c0102f86 vector125
+c0100dc1 __panic
+c0171210 _binary_obj___user_hello_out_end
+c01aee24 initproc
+c01033c1 vector216
+c0102d58 vector63
+c0102c0b vector26
+c01014f4 serial_intr
+c01032ad vector193
+c01032d1 vector196
+c0100107 grade_backtrace0
+c010336d vector209
+c0102b55 vector4
+c0103199 vector170
+c010b43b schedule
+c0103001 vector136
+c0102b87 vector10
+c018f807 _binary_obj___user_softint_out_end
+c0103349 vector206
+c0103595 vector255
+c010321d vector181
+c0102d34 vector59
+c0100121 grade_backtrace
+c0102e1e vector85
+c0102e15 vector84
+c010b004 switch_to
+c0103235 vector183
+c0103115 vector159
+c0103391 vector212
+c0102cc8 vector47
+c010c039 strtol
+c0103451 vector228
+c0102c9b vector42
+c0102f23 vector114
+c010be90 strnlen
+c0187ed8 _binary_obj___user_softint_out_start
+c014b3ce _binary_obj___user_faultread_out_start
+c01031d5 vector175
+c0103055 vector143
+c0102fb9 vector130
+c010cfe8 default_pmm_manager
+c0103529 vector246
+c0102b80 vector9
+c0103049 vector142
+c0102ea5 vector100
+00007963 _binary_obj___user_forktree_out_size
+c010b2fd sched_class_proc_tick
+c010330d vector201
+c0102222 idt_init
+c0100a1a print_debuginfo
+c01080f1 find_vma
+c01b0ec0 swap_in_seq_no
+c0161f80 _binary_obj___user_forktree_out_start
+c0102d3d vector60
+c0102bf0 vector23
+c01034b1 vector236
+c01aed80 npage
+c0108ec1 do_pgfault
+c0103475 vector231
+00007980 _binary_obj___user_divzero_out_size
+c0109763 set_proc_name
+c0102d73 vector66
+c0102c26 vector29
+c0106cad print_pgdir
+c0102ff5 vector135
+c0100ce0 kmonitor
+00007932 _binary_obj___user_badsegment_out_size
+c0102dd6 vector77
+c0103211 vector180
+c0100e7d clock_init
+c0103361 vector208
+c0102e93 vector98
+c0102e8a vector97
+c010525d nr_free_pages
+c0104e22 ksize
+0000792d _binary_obj___user_pgdir_out_size
+c01031e1 vector176
+c0197133 _binary_obj___user_testbss_out_start
+c01032b9 vector194
+c0102c41 vector32
+c01b0e8c boot_cr3
+c01b0f78 end
+c01032f5 vector199
+c010a06d do_exit
+c0102fc5 vector131
+c0103571 vector252
+c0102b31 vector0
+c0152cff _binary_obj___user_faultreadkernel_out_start
+c013c108 _binary_obj___user_badsegment_out_end
+c010c00b strfind
+000079f0 _binary_obj___user_waitkill_out_size
+c01016f3 cons_putc
+c01b0f00 swap_out_seq_no
+c010c320 etext
+c010306d vector145
+c0102ee4 vector107
+c01aed84 boot_pgdir
+c0102c89 vector40
+c0102013 intr_enable
+c0102eb7 vector102
+c0197133 _binary_obj___user_spin_out_end
+c0102d19 vector56
+c0102d85 vector68
+c0102b67 vector6
+c010bd90 rand
+c0102fad vector129
+c01032dd vector197
+c01030c1 vector152
+c012c600 __vectors
+c0103469 vector230
+c010bf82 strncmp
+c0104bf7 slob_init
+c0105927 get_pte
+c0101b50 ide_device_size
+c0102c6e vector37
+c01b0f28 check_swap_addr
+c010333d vector205
+c010312d vector161
+c01aee28 current
+c010beff strncpy
+c010875e copy_to_user
+c0102da0 vector71
+c0103121 vector160
+c015a636 _binary_obj___user_forktest_out_start
+c0104c0b kmalloc_init
+c01033b5 vector215
+0000792c _binary_obj___user_spin_out_size
+c01030fd vector157
+c0102019 intr_disable
+c0102676 print_regs
+c0102f11 vector112
+c01000b6 grade_backtrace2
+c0103229 vector182
+c0102b95 vector12
+c010c2c8 memcmp
+c0102ef6 vector109
+c0102bd5 vector20
+c0102cfe vector53
+c0102bc3 vector18
+c010afbf cpu_idle
+c0102e78 vector95
+c010a89f do_execve
+c0103439 vector226
+c0102cda vector49
+c0102cad vector44
+c0102ddf vector78
+c01031bd vector173
+c010928f swapfs_read
+c0102f3e vector117
+c010249b trap_in_kernel
+c0106fa3 swap_set_unswappable
+c0102e03 vector82
+c0103409 vector222
+c0102b79 vector8
+c010309d vector149
+c010037e cputchar
+c010c197 memset
+c0103481 vector232
+c0101b8f ide_read_secs
+c0102edb vector106
+c01033f1 vector220
+c0102e4b vector90
+c0103145 vector163
+c010be50 srand
+c0103499 vector234
+c0106f76 swap_map_swappable
+c0102d4f vector62
+c0102c02 vector25
+c01032e9 vector198
+c0102f59 vector120
+c01347d6 _binary_obj___user_badarg_out_end
+c01003e0 getchar
+c0105f34 page_remove
+c010b6ea hash32
+c0102ce3 vector50
+c0102baa vector15
+c01aee10 swap_out_num
+c010b8aa printfmt
+c015a636 _binary_obj___user_faultreadkernel_out_end
+c010a9d5 do_yield
+c01030b5 vector151
+c0102e0c vector83
+c0102e42 vector89
+c0102e39 vector88
+c0102a7c trap
+c0103205 vector179
+c0102c53 vector34
+c0129887 __STABSTR_END__
+c0102cbf vector46
+c010bf39 strcmp
+c0102fe9 vector134
+c0103415 vector223
+c01033d9 vector218
+c010054f debuginfo_eip
+c01b0f3c max_swap_offset
+00007937 _binary_obj___user_faultreadkernel_out_size
+c0108246 insert_vma_struct
+c01020a5 pic_init
+c010342d vector225
+c0103265 vector187
+c01057f3 pmm_init
+c0102c2f vector30
+c0102f98 vector127
+c01b0e78 ticks
+c01032a1 vector192
+c0103169 vector166
+c0102dcd vector76
+c0102dc4 vector75
+c01032c5 vector195
+c01030a9 vector150
+c0102d2b vector58
+c0103541 vector248
+c01698e3 _binary_obj___user_forktree_out_end
+c0102f74 vector123
+c0102e81 vector96
+00007946 _binary_obj___user_exit_out_size
+c0102c38 vector31
+c0103325 vector203
+c01051c0 alloc_pages
+c019eab7 _binary_obj___user_waitkill_out_start
+c0103025 vector139
+c01030cd vector153
+c0103151 vector164
+c0187ed8 _binary_obj___user_priority_out_end
+c0102f62 vector121
+c0102b5e vector5
+c018f807 _binary_obj___user_spin_out_start
+c0103175 vector167
+c01030e5 vector155
+c010354d vector249
+c010d16c vpt
+c0103559 vector250
+c0102f7d vector124
+c0102eff vector110
+c0103331 vector204
+c0152cff _binary_obj___user_faultread_out_end
+c01b0f40 swap_page
+c0178be4 _binary_obj___user_pgdir_out_start
+c0102b1d __trapret
+c0171210 _binary_obj___user_matrix_out_start
+c0100325 vcprintf
+c010300d vector137
+00007931 _binary_obj___user_faultread_out_size
+c0100e2d __warn
+c0103535 vector247
+c0102be7 vector22
+c0103319 vector202
+c0102da9 vector72
+c0102d10 vector55
+c0100391 cputs
+c012c000 bootstacktop
+c0109b44 find_proc
+c0102f8f vector126
+c0102d6a vector65
+c0102c1d vector28
+c010318d vector169
+c0106f5e swap_tick_event
+c010348d vector233
+000079d4 _binary_obj___user_matrix_out_size
+c0106fc2 swap_out
+c0104d4b kmalloc
+c0143a88 _binary_obj___user_divzero_out_end
+c01080b6 vma_create
+c0103085 vector147
+c0109a08 proc_run
+c012a000 bootstack
+c0102ec9 vector104
+c01b0e7c free_area
+c0102f35 vector116
+c013c108 _binary_obj___user_divzero_out_start
+000079c7 _binary_obj___user_priority_out_size
+c0109301 swapfs_write
+c010eb40 __STAB_BEGIN__
+c01090a6 user_mem_check
+c010b335 sched_init
+c01b0f54 check_ptep
+c0102cf5 vector52
+c0102bbc vector17
+c0103241 vector184
+c010be68 strlen
+c012ca88 default_sched_class
+c01097a6 get_proc_name
+c0180511 _binary_obj___user_priority_out_start
+c01aee18 pgfault_num
+c0103355 vector207
+c01addd4 _binary_obj___user_yield_out_end
+c0103289 vector190
+c01017f8 ide_init
+c01034d5 vector239
+c0102e6f vector94
+c0102e66 vector93
+c0103271 vector188
+c010bfd8 strchr
+c0102cd1 vector48
+c01b0f6c check_mm_struct
+c0106f46 swap_init_mm
+c01000da grade_backtrace1
+c01033e5 vector219
+c0103091 vector148
+c01033fd vector221
+c0102df1 vector80
+c01031a5 vector171
+c01030d9 vector154
+c0102c65 vector36
+c01034a5 vector235
+c0102ed2 vector105
+c0100d9d mon_kerninfo
+c01b0e90 pages
+c0103079 vector146
+c0105b19 unmap_range
+c0103295 vector191
+c010ae00 proc_init
+c0102ec0 vector103
+c0100d40 mon_help
+c0102b8e vector11
+0000794a _binary_obj___user_forktest_out_size
+c0106031 tlb_invalidate
+c0102ba3 vector14
diff -r -u -P _lab6/obj/libs/hash.d lab6/obj/libs/hash.d
--- _lab6/obj/libs/hash.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/hash.d	2020-05-28 03:10:53.737519207 +0800
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
Binary files _lab6/obj/libs/hash.o and lab6/obj/libs/hash.o differ
diff -r -u -P _lab6/obj/libs/printfmt.d lab6/obj/libs/printfmt.d
--- _lab6/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/printfmt.d	2020-05-28 03:10:53.753519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files _lab6/obj/libs/printfmt.o and lab6/obj/libs/printfmt.o differ
diff -r -u -P _lab6/obj/libs/rand.d lab6/obj/libs/rand.d
--- _lab6/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/rand.d	2020-05-28 03:10:53.733519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files _lab6/obj/libs/rand.o and lab6/obj/libs/rand.o differ
diff -r -u -P _lab6/obj/libs/string.d lab6/obj/libs/string.d
--- _lab6/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/string.d	2020-05-28 03:10:53.733519207 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files _lab6/obj/libs/string.o and lab6/obj/libs/string.o differ
diff -r -u -P _lab6/obj/sign/tools/sign.d lab6/obj/sign/tools/sign.d
--- _lab6/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/sign/tools/sign.d	2020-05-28 03:10:53.389519207 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files _lab6/obj/sign/tools/sign.o and lab6/obj/sign/tools/sign.o differ
diff -r -u -P _lab6/obj/user/badarg.asm lab6/obj/user/badarg.asm
--- _lab6/obj/user/badarg.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.asm	2020-05-28 03:10:56.801519207 +0800
@@ -0,0 +1,2614 @@
+
+obj/__user_badarg.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 11 80 00 	movl   $0x801140,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 11 80 00 	movl   $0x80115c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 78 11 80 00 	movl   $0x801178,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 a4 12 80 00       	add    $0x8012a4,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 c8 12 80 00 	mov    0x8012c8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 40 12 80 00 	mov    0x801240(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 b5 12 80 	movl   $0x8012b5,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 be 12 80 	movl   $0x8012be,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be c1 12 80 00       	mov    $0x8012c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  800fe9:	e8 06 f3 ff ff       	call   8002f4 <fork>
+  800fee:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800ff2:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800ff7:	75 33                	jne    80102c <main+0x4c>
+        cprintf("fork ok.\n");
+  800ff9:	c7 04 24 20 14 80 00 	movl   $0x801420,(%esp)
+  801000:	e8 13 f1 ff ff       	call   800118 <cprintf>
+        int i;
+        for (i = 0; i < 10; i ++) {
+  801005:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80100c:	00 
+  80100d:	eb 0a                	jmp    801019 <main+0x39>
+            yield();
+  80100f:	e8 23 f3 ff ff       	call   800337 <yield>
+main(void) {
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+        cprintf("fork ok.\n");
+        int i;
+        for (i = 0; i < 10; i ++) {
+  801014:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801019:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
+  80101e:	7e ef                	jle    80100f <main+0x2f>
+            yield();
+        }
+        exit(0xbeaf);
+  801020:	c7 04 24 af be 00 00 	movl   $0xbeaf,(%esp)
+  801027:	e8 a9 f2 ff ff       	call   8002d5 <exit>
+    }
+    assert(pid > 0);
+  80102c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801031:	7f 24                	jg     801057 <main+0x77>
+  801033:	c7 44 24 0c 2a 14 80 	movl   $0x80142a,0xc(%esp)
+  80103a:	00 
+  80103b:	c7 44 24 08 32 14 80 	movl   $0x801432,0x8(%esp)
+  801042:	00 
+  801043:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+  80104a:	00 
+  80104b:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  801052:	e8 d8 ef ff ff       	call   80002f <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  801057:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80105e:	00 
+  80105f:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801066:	e8 b2 f2 ff ff       	call   80031d <waitpid>
+  80106b:	85 c0                	test   %eax,%eax
+  80106d:	75 24                	jne    801093 <main+0xb3>
+  80106f:	c7 44 24 0c 55 14 80 	movl   $0x801455,0xc(%esp)
+  801076:	00 
+  801077:	c7 44 24 08 32 14 80 	movl   $0x801432,0x8(%esp)
+  80107e:	00 
+  80107f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+  801086:	00 
+  801087:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  80108e:	e8 9c ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  801093:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+  80109a:	c0 
+  80109b:	8b 44 24 18          	mov    0x18(%esp),%eax
+  80109f:	89 04 24             	mov    %eax,(%esp)
+  8010a2:	e8 76 f2 ff ff       	call   80031d <waitpid>
+  8010a7:	85 c0                	test   %eax,%eax
+  8010a9:	75 24                	jne    8010cf <main+0xef>
+  8010ab:	c7 44 24 0c 6c 14 80 	movl   $0x80146c,0xc(%esp)
+  8010b2:	00 
+  8010b3:	c7 44 24 08 32 14 80 	movl   $0x801432,0x8(%esp)
+  8010ba:	00 
+  8010bb:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
+  8010c2:	00 
+  8010c3:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  8010ca:	e8 60 ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  8010cf:	8d 44 24 14          	lea    0x14(%esp),%eax
+  8010d3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010d7:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010db:	89 04 24             	mov    %eax,(%esp)
+  8010de:	e8 3a f2 ff ff       	call   80031d <waitpid>
+  8010e3:	85 c0                	test   %eax,%eax
+  8010e5:	75 0b                	jne    8010f2 <main+0x112>
+  8010e7:	8b 44 24 14          	mov    0x14(%esp),%eax
+  8010eb:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  8010f0:	74 24                	je     801116 <main+0x136>
+  8010f2:	c7 44 24 0c 94 14 80 	movl   $0x801494,0xc(%esp)
+  8010f9:	00 
+  8010fa:	c7 44 24 08 32 14 80 	movl   $0x801432,0x8(%esp)
+  801101:	00 
+  801102:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  801109:	00 
+  80110a:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  801111:	e8 19 ef ff ff       	call   80002f <__panic>
+    cprintf("badarg pass.\n");
+  801116:	c7 04 24 c9 14 80 00 	movl   $0x8014c9,(%esp)
+  80111d:	e8 f6 ef ff ff       	call   800118 <cprintf>
+    return 0;
+  801122:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801127:	c9                   	leave  
+  801128:	c3                   	ret    
diff -r -u -P _lab6/obj/user/badarg.d lab6/obj/user/badarg.d
--- _lab6/obj/user/badarg.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.d	2020-05-28 03:10:53.677519207 +0800
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/badarg.o and lab6/obj/user/badarg.o differ
diff -r -u -P _lab6/obj/user/badarg.sym lab6/obj/user/badarg.sym
--- _lab6/obj/user/badarg.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.sym	2020-05-28 03:10:56.901519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801140 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c39 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801240 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badarg.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c38 __STAB_END__
+00800248 sys_kill
+00202c39 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002039e1 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/badsegment.asm lab6/obj/user/badsegment.asm
--- _lab6/obj/user/badsegment.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.asm	2020-05-28 03:10:56.761519207 +0800
@@ -0,0 +1,2525 @@
+
+obj/__user_badsegment.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  800fe9:	66 b8 28 00          	mov    $0x28,%ax
+  800fed:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  800fef:	c7 44 24 08 00 13 80 	movl   $0x801300,0x8(%esp)
+  800ff6:	00 
+  800ff7:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  800ffe:	00 
+  800fff:	c7 04 24 0b 13 80 00 	movl   $0x80130b,(%esp)
+  801006:	e8 24 f0 ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/badsegment.d lab6/obj/user/badsegment.d
--- _lab6/obj/user/badsegment.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.d	2020-05-28 03:10:53.637519207 +0800
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/badsegment.o and lab6/obj/user/badsegment.o differ
diff -r -u -P _lab6/obj/user/badsegment.sym lab6/obj/user/badsegment.sym
--- _lab6/obj/user/badsegment.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.sym	2020-05-28 03:10:56.913519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b19 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 badsegment.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b18 __STAB_END__
+00800248 sys_kill
+00202b19 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038ab __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/divzero.asm lab6/obj/user/divzero.asm
--- _lab6/obj/user/divzero.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.asm	2020-05-28 03:10:56.941519207 +0800
@@ -0,0 +1,2530 @@
+
+obj/__user_divzero.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 40 10 80 00 	movl   $0x801040,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 5c 10 80 00 	movl   $0x80105c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 5a 10 80 00 	movl   $0x80105a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 78 10 80 00 	movl   $0x801078,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 b5 11 80 	movl   $0x8011b5,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 be 11 80 	movl   $0x8011be,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  800fe9:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  800fef:	b8 01 00 00 00       	mov    $0x1,%eax
+  800ff4:	99                   	cltd   
+  800ff5:	f7 f9                	idiv   %ecx
+  800ff7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ffb:	c7 04 24 20 13 80 00 	movl   $0x801320,(%esp)
+  801002:	e8 11 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  801007:	c7 44 24 08 2e 13 80 	movl   $0x80132e,0x8(%esp)
+  80100e:	00 
+  80100f:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  801016:	00 
+  801017:	c7 04 24 39 13 80 00 	movl   $0x801339,(%esp)
+  80101e:	e8 0c f0 ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/divzero.d lab6/obj/user/divzero.d
--- _lab6/obj/user/divzero.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.d	2020-05-28 03:10:53.609519207 +0800
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/divzero.o and lab6/obj/user/divzero.o differ
diff -r -u -P _lab6/obj/user/divzero.sym lab6/obj/user/divzero.sym
--- _lab6/obj/user/divzero.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.sym	2020-05-28 03:10:56.981519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202b25 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801140 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 divzero.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b24 __STAB_END__
+00800248 sys_kill
+00202b25 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038c0 __STABSTR_END__
+00800bf9 strcmp
+00802008 zero
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/exit.asm lab6/obj/user/exit.asm
--- _lab6/obj/user/exit.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.asm	2020-05-28 03:10:57.117519207 +0800
@@ -0,0 +1,2621 @@
+
+obj/__user_exit.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 11 80 00 	movl   $0x801160,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 11 80 00 	movl   $0x80117c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 98 11 80 00 	movl   $0x801198,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 c4 12 80 00       	add    $0x8012c4,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 e8 12 80 00 	mov    0x8012e8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 60 12 80 00 	mov    0x801260(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 d5 12 80 	movl   $0x8012d5,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 de 12 80 	movl   $0x8012de,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be e1 12 80 00       	mov    $0x8012e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  800fe9:	c7 04 24 40 14 80 00 	movl   $0x801440,(%esp)
+  800ff0:	e8 23 f1 ff ff       	call   800118 <cprintf>
+    if ((pid = fork()) == 0) {
+  800ff5:	e8 fa f2 ff ff       	call   8002f4 <fork>
+  800ffa:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800ffe:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801003:	75 3c                	jne    801041 <main+0x61>
+        cprintf("I am the child.\n");
+  801005:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  80100c:	e8 07 f1 ff ff       	call   800118 <cprintf>
+        yield();
+  801011:	e8 21 f3 ff ff       	call   800337 <yield>
+        yield();
+  801016:	e8 1c f3 ff ff       	call   800337 <yield>
+        yield();
+  80101b:	e8 17 f3 ff ff       	call   800337 <yield>
+        yield();
+  801020:	e8 12 f3 ff ff       	call   800337 <yield>
+        yield();
+  801025:	e8 0d f3 ff ff       	call   800337 <yield>
+        yield();
+  80102a:	e8 08 f3 ff ff       	call   800337 <yield>
+        yield();
+  80102f:	e8 03 f3 ff ff       	call   800337 <yield>
+        exit(magic);
+  801034:	a1 08 20 80 00       	mov    0x802008,%eax
+  801039:	89 04 24             	mov    %eax,(%esp)
+  80103c:	e8 94 f2 ff ff       	call   8002d5 <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  801041:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801049:	c7 04 24 78 14 80 00 	movl   $0x801478,(%esp)
+  801050:	e8 c3 f0 ff ff       	call   800118 <cprintf>
+    }
+    assert(pid > 0);
+  801055:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  80105a:	7f 24                	jg     801080 <main+0xa0>
+  80105c:	c7 44 24 0c 9a 14 80 	movl   $0x80149a,0xc(%esp)
+  801063:	00 
+  801064:	c7 44 24 08 a2 14 80 	movl   $0x8014a2,0x8(%esp)
+  80106b:	00 
+  80106c:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%esp)
+  801073:	00 
+  801074:	c7 04 24 b7 14 80 00 	movl   $0x8014b7,(%esp)
+  80107b:	e8 af ef ff ff       	call   80002f <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  801080:	c7 04 24 c4 14 80 00 	movl   $0x8014c4,(%esp)
+  801087:	e8 8c f0 ff ff       	call   800118 <cprintf>
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  80108c:	8d 44 24 18          	lea    0x18(%esp),%eax
+  801090:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801094:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801098:	89 04 24             	mov    %eax,(%esp)
+  80109b:	e8 7d f2 ff ff       	call   80031d <waitpid>
+  8010a0:	85 c0                	test   %eax,%eax
+  8010a2:	75 0d                	jne    8010b1 <main+0xd1>
+  8010a4:	8b 54 24 18          	mov    0x18(%esp),%edx
+  8010a8:	a1 08 20 80 00       	mov    0x802008,%eax
+  8010ad:	39 c2                	cmp    %eax,%edx
+  8010af:	74 24                	je     8010d5 <main+0xf5>
+  8010b1:	c7 44 24 0c e4 14 80 	movl   $0x8014e4,0xc(%esp)
+  8010b8:	00 
+  8010b9:	c7 44 24 08 a2 14 80 	movl   $0x8014a2,0x8(%esp)
+  8010c0:	00 
+  8010c1:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
+  8010c8:	00 
+  8010c9:	c7 04 24 b7 14 80 00 	movl   $0x8014b7,(%esp)
+  8010d0:	e8 5a ef ff ff       	call   80002f <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  8010d5:	8d 44 24 18          	lea    0x18(%esp),%eax
+  8010d9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010dd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010e1:	89 04 24             	mov    %eax,(%esp)
+  8010e4:	e8 34 f2 ff ff       	call   80031d <waitpid>
+  8010e9:	85 c0                	test   %eax,%eax
+  8010eb:	74 09                	je     8010f6 <main+0x116>
+  8010ed:	e8 0f f2 ff ff       	call   800301 <wait>
+  8010f2:	85 c0                	test   %eax,%eax
+  8010f4:	75 24                	jne    80111a <main+0x13a>
+  8010f6:	c7 44 24 0c 10 15 80 	movl   $0x801510,0xc(%esp)
+  8010fd:	00 
+  8010fe:	c7 44 24 08 a2 14 80 	movl   $0x8014a2,0x8(%esp)
+  801105:	00 
+  801106:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  80110d:	00 
+  80110e:	c7 04 24 b7 14 80 00 	movl   $0x8014b7,(%esp)
+  801115:	e8 15 ef ff ff       	call   80002f <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  80111a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80111e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801122:	c7 04 24 38 15 80 00 	movl   $0x801538,(%esp)
+  801129:	e8 ea ef ff ff       	call   800118 <cprintf>
+
+    cprintf("exit pass.\n");
+  80112e:	c7 04 24 48 15 80 00 	movl   $0x801548,(%esp)
+  801135:	e8 de ef ff ff       	call   800118 <cprintf>
+    return 0;
+  80113a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80113f:	c9                   	leave  
+  801140:	c3                   	ret    
diff -r -u -P _lab6/obj/user/exit.d lab6/obj/user/exit.d
--- _lab6/obj/user/exit.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.d	2020-05-28 03:10:53.617519207 +0800
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/exit.o and lab6/obj/user/exit.o differ
diff -r -u -P _lab6/obj/user/exit.sym lab6/obj/user/exit.sym
--- _lab6/obj/user/exit.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.sym	2020-05-28 03:10:57.149519207 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801160 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c69 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801260 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 exit.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c68 __STAB_END__
+00800248 sys_kill
+00202c69 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00203a17 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+00802008 magic
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/faultread.asm lab6/obj/user/faultread.asm
--- _lab6/obj/user/faultread.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.asm	2020-05-28 03:10:56.961519207 +0800
@@ -0,0 +1,2527 @@
+
+obj/__user_faultread.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  800fe9:	b8 00 00 00 00       	mov    $0x0,%eax
+  800fee:	8b 00                	mov    (%eax),%eax
+  800ff0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff4:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800ffb:	e8 18 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  801000:	c7 44 24 08 14 13 80 	movl   $0x801314,0x8(%esp)
+  801007:	00 
+  801008:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  80100f:	00 
+  801010:	c7 04 24 1f 13 80 00 	movl   $0x80131f,(%esp)
+  801017:	e8 13 f0 ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/faultread.d lab6/obj/user/faultread.d
--- _lab6/obj/user/faultread.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.d	2020-05-28 03:10:53.665519207 +0800
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -r -u -P _lab6/obj/user/faultreadkernel.asm lab6/obj/user/faultreadkernel.asm
--- _lab6/obj/user/faultreadkernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.asm	2020-05-28 03:10:56.969519207 +0800
@@ -0,0 +1,2527 @@
+
+obj/__user_faultreadkernel.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  800fe9:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  800fee:	8b 00                	mov    (%eax),%eax
+  800ff0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff4:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800ffb:	e8 18 f1 ff ff       	call   800118 <cprintf>
+    panic("FAIL: T.T\n");
+  801000:	c7 44 24 08 1e 13 80 	movl   $0x80131e,0x8(%esp)
+  801007:	00 
+  801008:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  80100f:	00 
+  801010:	c7 04 24 29 13 80 00 	movl   $0x801329,(%esp)
+  801017:	e8 13 f0 ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/faultreadkernel.d lab6/obj/user/faultreadkernel.d
--- _lab6/obj/user/faultreadkernel.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.d	2020-05-28 03:10:53.493519207 +0800
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
Binary files _lab6/obj/user/faultreadkernel.o and lab6/obj/user/faultreadkernel.o differ
diff -r -u -P _lab6/obj/user/faultreadkernel.sym lab6/obj/user/faultreadkernel.sym
--- _lab6/obj/user/faultreadkernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.sym	2020-05-28 03:10:57.021519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b19 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultreadkernel.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b18 __STAB_END__
+00800248 sys_kill
+00202b19 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038b0 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
Binary files _lab6/obj/user/faultread.o and lab6/obj/user/faultread.o differ
diff -r -u -P _lab6/obj/user/faultread.sym lab6/obj/user/faultread.sym
--- _lab6/obj/user/faultread.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.sym	2020-05-28 03:10:57.053519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b19 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 faultread.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b18 __STAB_END__
+00800248 sys_kill
+00202b19 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038aa __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/forktest.asm lab6/obj/user/forktest.asm
--- _lab6/obj/user/forktest.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.asm	2020-05-28 03:10:57.053519207 +0800
@@ -0,0 +1,2623 @@
+
+obj/__user_forktest.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 64 12 80 00       	add    $0x801264,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800fe9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800ff0:	00 
+  800ff1:	eb 60                	jmp    801053 <main+0x73>
+        if ((pid = fork()) == 0) {
+  800ff3:	e8 fc f2 ff ff       	call   8002f4 <fork>
+  800ff8:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800ffc:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801001:	75 20                	jne    801023 <main+0x43>
+            cprintf("I am child %d\n", n);
+  801003:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801007:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80100b:	c7 04 24 e4 13 80 00 	movl   $0x8013e4,(%esp)
+  801012:	e8 01 f1 ff ff       	call   800118 <cprintf>
+            exit(0);
+  801017:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  80101e:	e8 b2 f2 ff ff       	call   8002d5 <exit>
+        }
+        assert(pid > 0);
+  801023:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801028:	7f 24                	jg     80104e <main+0x6e>
+  80102a:	c7 44 24 0c f3 13 80 	movl   $0x8013f3,0xc(%esp)
+  801031:	00 
+  801032:	c7 44 24 08 fb 13 80 	movl   $0x8013fb,0x8(%esp)
+  801039:	00 
+  80103a:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  801041:	00 
+  801042:	c7 04 24 10 14 80 00 	movl   $0x801410,(%esp)
+  801049:	e8 e1 ef ff ff       	call   80002f <__panic>
+const int max_child = 32;
+
+int
+main(void) {
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  80104e:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801053:	b8 20 00 00 00       	mov    $0x20,%eax
+  801058:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  80105c:	7c 95                	jl     800ff3 <main+0x13>
+            exit(0);
+        }
+        assert(pid > 0);
+    }
+
+    if (n > max_child) {
+  80105e:	b8 20 00 00 00       	mov    $0x20,%eax
+  801063:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  801067:	7e 24                	jle    80108d <main+0xad>
+        panic("fork claimed to work %d times!\n", n);
+  801069:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80106d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801071:	c7 44 24 08 20 14 80 	movl   $0x801420,0x8(%esp)
+  801078:	00 
+  801079:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  801080:	00 
+  801081:	c7 04 24 10 14 80 00 	movl   $0x801410,(%esp)
+  801088:	e8 a2 ef ff ff       	call   80002f <__panic>
+    }
+
+    for (; n > 0; n --) {
+  80108d:	eb 2a                	jmp    8010b9 <main+0xd9>
+        if (wait() != 0) {
+  80108f:	e8 6d f2 ff ff       	call   800301 <wait>
+  801094:	85 c0                	test   %eax,%eax
+  801096:	74 1c                	je     8010b4 <main+0xd4>
+            panic("wait stopped early\n");
+  801098:	c7 44 24 08 40 14 80 	movl   $0x801440,0x8(%esp)
+  80109f:	00 
+  8010a0:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010a7:	00 
+  8010a8:	c7 04 24 10 14 80 00 	movl   $0x801410,(%esp)
+  8010af:	e8 7b ef ff ff       	call   80002f <__panic>
+
+    if (n > max_child) {
+        panic("fork claimed to work %d times!\n", n);
+    }
+
+    for (; n > 0; n --) {
+  8010b4:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
+  8010b9:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  8010be:	7f cf                	jg     80108f <main+0xaf>
+        if (wait() != 0) {
+            panic("wait stopped early\n");
+        }
+    }
+
+    if (wait() == 0) {
+  8010c0:	e8 3c f2 ff ff       	call   800301 <wait>
+  8010c5:	85 c0                	test   %eax,%eax
+  8010c7:	75 1c                	jne    8010e5 <main+0x105>
+        panic("wait got too many\n");
+  8010c9:	c7 44 24 08 54 14 80 	movl   $0x801454,0x8(%esp)
+  8010d0:	00 
+  8010d1:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  8010d8:	00 
+  8010d9:	c7 04 24 10 14 80 00 	movl   $0x801410,(%esp)
+  8010e0:	e8 4a ef ff ff       	call   80002f <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  8010e5:	c7 04 24 67 14 80 00 	movl   $0x801467,(%esp)
+  8010ec:	e8 27 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010f1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010f6:	c9                   	leave  
+  8010f7:	c3                   	ret    
diff -r -u -P _lab6/obj/user/forktest.d lab6/obj/user/forktest.d
--- _lab6/obj/user/forktest.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.d	2020-05-28 03:10:53.625519207 +0800
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab6/obj/user/forktest.o and lab6/obj/user/forktest.o differ
diff -r -u -P _lab6/obj/user/forktest.sym lab6/obj/user/forktest.sym
--- _lab6/obj/user/forktest.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.sym	2020-05-28 03:10:57.089519207 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c39 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktest.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c38 __STAB_END__
+00800248 sys_kill
+00202c39 __STABSTR_BEGIN__
+0080002f __panic
+008013e0 max_child
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002039ec __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/forktree.asm lab6/obj/user/forktree.asm
--- _lab6/obj/user/forktree.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.asm	2020-05-28 03:10:57.153519207 +0800
@@ -0,0 +1,2603 @@
+
+obj/__user_forktree.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 10 80 00 	movl   $0x8010c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 10 80 00 	movl   $0x8010dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 10 80 00 	movl   $0x8010da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 f8 10 80 00 	movl   $0x8010f8,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 fb 0c 00 00       	call   801097 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 24 12 80 00       	add    $0x801224,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 35 12 80 	movl   $0x801235,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 3e 12 80 	movl   $0x80123e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 ec 38             	sub    $0x38,%esp
+  800fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fe9:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  800fec:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fef:	89 04 24             	mov    %eax,(%esp)
+  800ff2:	e8 31 fb ff ff       	call   800b28 <strlen>
+  800ff7:	83 f8 03             	cmp    $0x3,%eax
+  800ffa:	77 4f                	ja     80104b <forkchild+0x6b>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  800ffc:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  801000:	89 44 24 10          	mov    %eax,0x10(%esp)
+  801004:	8b 45 08             	mov    0x8(%ebp),%eax
+  801007:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80100b:	c7 44 24 08 a0 13 80 	movl   $0x8013a0,0x8(%esp)
+  801012:	00 
+  801013:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+  80101a:	00 
+  80101b:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  80101e:	89 04 24             	mov    %eax,(%esp)
+  801021:	e8 92 f9 ff ff       	call   8009b8 <snprintf>
+    if (fork() == 0) {
+  801026:	e8 c9 f2 ff ff       	call   8002f4 <fork>
+  80102b:	85 c0                	test   %eax,%eax
+  80102d:	75 1c                	jne    80104b <forkchild+0x6b>
+        forktree(nxt);
+  80102f:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  801032:	89 04 24             	mov    %eax,(%esp)
+  801035:	e8 13 00 00 00       	call   80104d <forktree>
+        yield();
+  80103a:	e8 f8 f2 ff ff       	call   800337 <yield>
+        exit(0);
+  80103f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801046:	e8 8a f2 ff ff       	call   8002d5 <exit>
+    }
+}
+  80104b:	c9                   	leave  
+  80104c:	c3                   	ret    
+
+0080104d <forktree>:
+
+void
+forktree(const char *cur) {
+  80104d:	55                   	push   %ebp
+  80104e:	89 e5                	mov    %esp,%ebp
+  801050:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  801053:	e8 ff f2 ff ff       	call   800357 <getpid>
+  801058:	8b 55 08             	mov    0x8(%ebp),%edx
+  80105b:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80105f:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801063:	c7 04 24 a5 13 80 00 	movl   $0x8013a5,(%esp)
+  80106a:	e8 a9 f0 ff ff       	call   800118 <cprintf>
+
+    forkchild(cur, '0');
+  80106f:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
+  801076:	00 
+  801077:	8b 45 08             	mov    0x8(%ebp),%eax
+  80107a:	89 04 24             	mov    %eax,(%esp)
+  80107d:	e8 5e ff ff ff       	call   800fe0 <forkchild>
+    forkchild(cur, '1');
+  801082:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
+  801089:	00 
+  80108a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80108d:	89 04 24             	mov    %eax,(%esp)
+  801090:	e8 4b ff ff ff       	call   800fe0 <forkchild>
+}
+  801095:	c9                   	leave  
+  801096:	c3                   	ret    
+
+00801097 <main>:
+
+int
+main(void) {
+  801097:	55                   	push   %ebp
+  801098:	89 e5                	mov    %esp,%ebp
+  80109a:	83 e4 f0             	and    $0xfffffff0,%esp
+  80109d:	83 ec 10             	sub    $0x10,%esp
+    forktree("");
+  8010a0:	c7 04 24 b6 13 80 00 	movl   $0x8013b6,(%esp)
+  8010a7:	e8 a1 ff ff ff       	call   80104d <forktree>
+    return 0;
+  8010ac:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010b1:	c9                   	leave  
+  8010b2:	c3                   	ret    
diff -r -u -P _lab6/obj/user/forktree.d lab6/obj/user/forktree.d
--- _lab6/obj/user/forktree.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.d	2020-05-28 03:10:53.477519207 +0800
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files _lab6/obj/user/forktree.o and lab6/obj/user/forktree.o differ
diff -r -u -P _lab6/obj/user/forktree.sym lab6/obj/user/forktree.sym
--- _lab6/obj/user/forktree.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.sym	2020-05-28 03:10:57.177519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c39 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008011c0 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 forktree.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c38 __STAB_END__
+00800248 sys_kill
+00202c39 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+0080104d forktree
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00801097 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00203a5a __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
+00800fe0 forkchild
diff -r -u -P _lab6/obj/user/hello.asm lab6/obj/user/hello.asm
--- _lab6/obj/user/hello.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.asm	2020-05-28 03:10:56.989519207 +0800
@@ -0,0 +1,2530 @@
+
+obj/__user_hello.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    cprintf("Hello world!!.\n");
+  800fe9:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800ff0:	e8 23 f1 ff ff       	call   800118 <cprintf>
+    cprintf("I am process %d.\n", getpid());
+  800ff5:	e8 5d f3 ff ff       	call   800357 <getpid>
+  800ffa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ffe:	c7 04 24 10 13 80 00 	movl   $0x801310,(%esp)
+  801005:	e8 0e f1 ff ff       	call   800118 <cprintf>
+    cprintf("hello pass.\n");
+  80100a:	c7 04 24 22 13 80 00 	movl   $0x801322,(%esp)
+  801011:	e8 02 f1 ff ff       	call   800118 <cprintf>
+    return 0;
+  801016:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80101b:	c9                   	leave  
+  80101c:	c3                   	ret    
diff -r -u -P _lab6/obj/user/hello.d lab6/obj/user/hello.d
--- _lab6/obj/user/hello.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.d	2020-05-28 03:10:53.505519207 +0800
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/hello.o and lab6/obj/user/hello.o differ
diff -r -u -P _lab6/obj/user/hello.sym lab6/obj/user/hello.sym
--- _lab6/obj/user/hello.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.sym	2020-05-28 03:10:57.069519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b3d .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 hello.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b3c __STAB_END__
+00800248 sys_kill
+00202b3d __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038ca __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/libs/initcode.d lab6/obj/user/libs/initcode.d
--- _lab6/obj/user/libs/initcode.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/initcode.d	2020-05-28 03:10:53.693519207 +0800
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
Binary files _lab6/obj/user/libs/initcode.o and lab6/obj/user/libs/initcode.o differ
diff -r -u -P _lab6/obj/user/libs/panic.d lab6/obj/user/libs/panic.d
--- _lab6/obj/user/libs/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/panic.d	2020-05-28 03:10:53.721519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
Binary files _lab6/obj/user/libs/panic.o and lab6/obj/user/libs/panic.o differ
diff -r -u -P _lab6/obj/user/libs/stdio.d lab6/obj/user/libs/stdio.d
--- _lab6/obj/user/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/stdio.d	2020-05-28 03:10:53.653519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
Binary files _lab6/obj/user/libs/stdio.o and lab6/obj/user/libs/stdio.o differ
diff -r -u -P _lab6/obj/user/libs/syscall.d lab6/obj/user/libs/syscall.d
--- _lab6/obj/user/libs/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/syscall.d	2020-05-28 03:10:53.685519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
Binary files _lab6/obj/user/libs/syscall.o and lab6/obj/user/libs/syscall.o differ
diff -r -u -P _lab6/obj/user/libs/ulib.d lab6/obj/user/libs/ulib.d
--- _lab6/obj/user/libs/ulib.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/ulib.d	2020-05-28 03:10:53.709519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/libs/ulib.o and lab6/obj/user/libs/ulib.o differ
diff -r -u -P _lab6/obj/user/libs/umain.d lab6/obj/user/libs/umain.d
--- _lab6/obj/user/libs/umain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/umain.d	2020-05-28 03:10:53.701519207 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
Binary files _lab6/obj/user/libs/umain.o and lab6/obj/user/libs/umain.o differ
diff -r -u -P _lab6/obj/user/matrix.asm lab6/obj/user/matrix.asm
--- _lab6/obj/user/matrix.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.asm	2020-05-28 03:10:57.325519207 +0800
@@ -0,0 +1,2953 @@
+
+obj/__user_matrix.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 fa 13 80 00 	movl   $0x8013fa,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 fc 13 80 00 	movl   $0x8013fc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 fa 13 80 00 	movl   $0x8013fa,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 18 14 80 00 	movl   $0x801418,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 7c 0e 00 00       	call   801218 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 44 15 80 00       	add    $0x801544,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 68 15 80 00 	mov    0x801568(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d e0 14 80 00 	mov    0x8014e0(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 55 15 80 	movl   $0x801555,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 5e 15 80 	movl   $0x80155e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 61 15 80 00       	mov    $0x801561,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <work>:
+static int mata[MATSIZE][MATSIZE];
+static int matb[MATSIZE][MATSIZE];
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	53                   	push   %ebx
+  800fe4:	83 ec 24             	sub    $0x24,%esp
+    int i, j, k, size = MATSIZE;
+  800fe7:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)
+    for (i = 0; i < size; i ++) {
+  800fee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800ff5:	eb 65                	jmp    80105c <work+0x7c>
+        for (j = 0; j < size; j ++) {
+  800ff7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  800ffe:	eb 50                	jmp    801050 <work+0x70>
+            mata[i][j] = matb[i][j] = 1;
+  801000:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801003:	89 d0                	mov    %edx,%eax
+  801005:	c1 e0 02             	shl    $0x2,%eax
+  801008:	01 d0                	add    %edx,%eax
+  80100a:	01 c0                	add    %eax,%eax
+  80100c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80100f:	01 d0                	add    %edx,%eax
+  801011:	c7 04 85 c0 21 80 00 	movl   $0x1,0x8021c0(,%eax,4)
+  801018:	01 00 00 00 
+  80101c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80101f:	89 d0                	mov    %edx,%eax
+  801021:	c1 e0 02             	shl    $0x2,%eax
+  801024:	01 d0                	add    %edx,%eax
+  801026:	01 c0                	add    %eax,%eax
+  801028:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80102b:	01 d0                	add    %edx,%eax
+  80102d:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  801034:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801037:	89 d0                	mov    %edx,%eax
+  801039:	c1 e0 02             	shl    $0x2,%eax
+  80103c:	01 d0                	add    %edx,%eax
+  80103e:	01 c0                	add    %eax,%eax
+  801040:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801043:	01 d0                	add    %edx,%eax
+  801045:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+        for (j = 0; j < size; j ++) {
+  80104c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  801050:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801053:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801056:	7c a8                	jl     801000 <work+0x20>
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+  801058:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80105f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801062:	7c 93                	jl     800ff7 <work+0x17>
+        for (j = 0; j < size; j ++) {
+            mata[i][j] = matb[i][j] = 1;
+        }
+    }
+
+    yield();
+  801064:	e8 ce f2 ff ff       	call   800337 <yield>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+  801069:	e8 e9 f2 ff ff       	call   800357 <getpid>
+  80106e:	8b 55 08             	mov    0x8(%ebp),%edx
+  801071:	89 54 24 08          	mov    %edx,0x8(%esp)
+  801075:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801079:	c7 04 24 c0 16 80 00 	movl   $0x8016c0,(%esp)
+  801080:	e8 93 f0 ff ff       	call   800118 <cprintf>
+
+    while (times -- > 0) {
+  801085:	e9 5c 01 00 00       	jmp    8011e6 <work+0x206>
+        for (i = 0; i < size; i ++) {
+  80108a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801091:	e9 b6 00 00 00       	jmp    80114c <work+0x16c>
+            for (j = 0; j < size; j ++) {
+  801096:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  80109d:	e9 9a 00 00 00       	jmp    80113c <work+0x15c>
+                matc[i][j] = 0;
+  8010a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010a5:	89 d0                	mov    %edx,%eax
+  8010a7:	c1 e0 02             	shl    $0x2,%eax
+  8010aa:	01 d0                	add    %edx,%eax
+  8010ac:	01 c0                	add    %eax,%eax
+  8010ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010b1:	01 d0                	add    %edx,%eax
+  8010b3:	c7 04 85 60 23 80 00 	movl   $0x0,0x802360(,%eax,4)
+  8010ba:	00 00 00 00 
+                for (k = 0; k < size; k ++) {
+  8010be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  8010c5:	eb 69                	jmp    801130 <work+0x150>
+                    matc[i][j] += mata[i][k] * matb[k][j];
+  8010c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010ca:	89 d0                	mov    %edx,%eax
+  8010cc:	c1 e0 02             	shl    $0x2,%eax
+  8010cf:	01 d0                	add    %edx,%eax
+  8010d1:	01 c0                	add    %eax,%eax
+  8010d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010d6:	01 d0                	add    %edx,%eax
+  8010d8:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  8010df:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010e2:	89 d0                	mov    %edx,%eax
+  8010e4:	c1 e0 02             	shl    $0x2,%eax
+  8010e7:	01 d0                	add    %edx,%eax
+  8010e9:	01 c0                	add    %eax,%eax
+  8010eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8010ee:	01 d0                	add    %edx,%eax
+  8010f0:	8b 1c 85 20 20 80 00 	mov    0x802020(,%eax,4),%ebx
+  8010f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8010fa:	89 d0                	mov    %edx,%eax
+  8010fc:	c1 e0 02             	shl    $0x2,%eax
+  8010ff:	01 d0                	add    %edx,%eax
+  801101:	01 c0                	add    %eax,%eax
+  801103:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801106:	01 d0                	add    %edx,%eax
+  801108:	8b 04 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%eax
+  80110f:	0f af c3             	imul   %ebx,%eax
+  801112:	01 c1                	add    %eax,%ecx
+  801114:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801117:	89 d0                	mov    %edx,%eax
+  801119:	c1 e0 02             	shl    $0x2,%eax
+  80111c:	01 d0                	add    %edx,%eax
+  80111e:	01 c0                	add    %eax,%eax
+  801120:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801123:	01 d0                	add    %edx,%eax
+  801125:	89 0c 85 60 23 80 00 	mov    %ecx,0x802360(,%eax,4)
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+                matc[i][j] = 0;
+                for (k = 0; k < size; k ++) {
+  80112c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+  801130:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801133:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801136:	7c 8f                	jl     8010c7 <work+0xe7>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  801138:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  80113c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80113f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801142:	0f 8c 5a ff ff ff    	jl     8010a2 <work+0xc2>
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+  801148:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80114c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80114f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801152:	0f 8c 3e ff ff ff    	jl     801096 <work+0xb6>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  801158:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  80115f:	eb 79                	jmp    8011da <work+0x1fa>
+            for (j = 0; j < size; j ++) {
+  801161:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  801168:	eb 64                	jmp    8011ce <work+0x1ee>
+                mata[i][j] = matb[i][j] = matc[i][j];
+  80116a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80116d:	89 d0                	mov    %edx,%eax
+  80116f:	c1 e0 02             	shl    $0x2,%eax
+  801172:	01 d0                	add    %edx,%eax
+  801174:	01 c0                	add    %eax,%eax
+  801176:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801179:	01 d0                	add    %edx,%eax
+  80117b:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  801182:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801185:	89 d0                	mov    %edx,%eax
+  801187:	c1 e0 02             	shl    $0x2,%eax
+  80118a:	01 d0                	add    %edx,%eax
+  80118c:	01 c0                	add    %eax,%eax
+  80118e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801191:	01 d0                	add    %edx,%eax
+  801193:	89 0c 85 c0 21 80 00 	mov    %ecx,0x8021c0(,%eax,4)
+  80119a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80119d:	89 d0                	mov    %edx,%eax
+  80119f:	c1 e0 02             	shl    $0x2,%eax
+  8011a2:	01 d0                	add    %edx,%eax
+  8011a4:	01 c0                	add    %eax,%eax
+  8011a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011a9:	01 d0                	add    %edx,%eax
+  8011ab:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  8011b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011b5:	89 d0                	mov    %edx,%eax
+  8011b7:	c1 e0 02             	shl    $0x2,%eax
+  8011ba:	01 d0                	add    %edx,%eax
+  8011bc:	01 c0                	add    %eax,%eax
+  8011be:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011c1:	01 d0                	add    %edx,%eax
+  8011c3:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  8011ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8011ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8011d1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8011d4:	7c 94                	jl     80116a <work+0x18a>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  8011d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8011da:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011dd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8011e0:	0f 8c 7b ff ff ff    	jl     801161 <work+0x181>
+
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+  8011e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8011e9:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8011ec:	89 55 08             	mov    %edx,0x8(%ebp)
+  8011ef:	85 c0                	test   %eax,%eax
+  8011f1:	0f 85 93 fe ff ff    	jne    80108a <work+0xaa>
+            for (j = 0; j < size; j ++) {
+                mata[i][j] = matb[i][j] = matc[i][j];
+            }
+        }
+    }
+    cprintf("pid %d done!.\n", getpid());
+  8011f7:	e8 5b f1 ff ff       	call   800357 <getpid>
+  8011fc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801200:	c7 04 24 e0 16 80 00 	movl   $0x8016e0,(%esp)
+  801207:	e8 0c ef ff ff       	call   800118 <cprintf>
+    exit(0);
+  80120c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801213:	e8 bd f0 ff ff       	call   8002d5 <exit>
+
+00801218 <main>:
+}
+
+const int total = 21;
+
+int
+main(void) {
+  801218:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  80121c:	83 e4 f0             	and    $0xfffffff0,%esp
+  80121f:	ff 71 fc             	pushl  -0x4(%ecx)
+  801222:	55                   	push   %ebp
+  801223:	89 e5                	mov    %esp,%ebp
+  801225:	56                   	push   %esi
+  801226:	53                   	push   %ebx
+  801227:	51                   	push   %ecx
+  801228:	83 ec 2c             	sub    $0x2c,%esp
+  80122b:	89 e0                	mov    %esp,%eax
+  80122d:	89 c3                	mov    %eax,%ebx
+    int pids[total];
+  80122f:	b8 15 00 00 00       	mov    $0x15,%eax
+  801234:	83 e8 01             	sub    $0x1,%eax
+  801237:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80123a:	b8 15 00 00 00       	mov    $0x15,%eax
+  80123f:	c1 e0 02             	shl    $0x2,%eax
+  801242:	8d 50 03             	lea    0x3(%eax),%edx
+  801245:	b8 10 00 00 00       	mov    $0x10,%eax
+  80124a:	83 e8 01             	sub    $0x1,%eax
+  80124d:	01 d0                	add    %edx,%eax
+  80124f:	be 10 00 00 00       	mov    $0x10,%esi
+  801254:	ba 00 00 00 00       	mov    $0x0,%edx
+  801259:	f7 f6                	div    %esi
+  80125b:	6b c0 10             	imul   $0x10,%eax,%eax
+  80125e:	29 c4                	sub    %eax,%esp
+  801260:	8d 44 24 0c          	lea    0xc(%esp),%eax
+  801264:	83 c0 03             	add    $0x3,%eax
+  801267:	c1 e8 02             	shr    $0x2,%eax
+  80126a:	c1 e0 02             	shl    $0x2,%eax
+  80126d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    memset(pids, 0, sizeof(pids));
+  801270:	b8 15 00 00 00       	mov    $0x15,%eax
+  801275:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  80127c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80127f:	89 54 24 08          	mov    %edx,0x8(%esp)
+  801283:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80128a:	00 
+  80128b:	89 04 24             	mov    %eax,(%esp)
+  80128e:	e8 c4 fb ff ff       	call   800e57 <memset>
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  801293:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  80129a:	eb 70                	jmp    80130c <main+0xf4>
+        if ((pids[i] = fork()) == 0) {
+  80129c:	e8 53 f0 ff ff       	call   8002f4 <fork>
+  8012a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
+  8012a4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+  8012a7:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
+  8012aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8012ad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8012b0:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012b3:	85 c0                	test   %eax,%eax
+  8012b5:	75 42                	jne    8012f9 <main+0xe1>
+            srand(i * i);
+  8012b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8012ba:	0f af 45 e4          	imul   -0x1c(%ebp),%eax
+  8012be:	89 04 24             	mov    %eax,(%esp)
+  8012c1:	e8 4a f8 ff ff       	call   800b10 <srand>
+            int times = (((unsigned int)rand()) % total);
+  8012c6:	e8 85 f7 ff ff       	call   800a50 <rand>
+  8012cb:	ba 15 00 00 00       	mov    $0x15,%edx
+  8012d0:	89 d1                	mov    %edx,%ecx
+  8012d2:	ba 00 00 00 00       	mov    $0x0,%edx
+  8012d7:	f7 f1                	div    %ecx
+  8012d9:	89 d0                	mov    %edx,%eax
+  8012db:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            times = (times * times + 10) * 100;
+  8012de:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8012e1:	0f af 45 d8          	imul   -0x28(%ebp),%eax
+  8012e5:	83 c0 0a             	add    $0xa,%eax
+  8012e8:	6b c0 64             	imul   $0x64,%eax,%eax
+  8012eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            work(times);
+  8012ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8012f1:	89 04 24             	mov    %eax,(%esp)
+  8012f4:	e8 e7 fc ff ff       	call   800fe0 <work>
+        }
+        if (pids[i] < 0) {
+  8012f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8012fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  8012ff:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801302:	85 c0                	test   %eax,%eax
+  801304:	79 02                	jns    801308 <main+0xf0>
+            goto failed;
+  801306:	eb 5d                	jmp    801365 <main+0x14d>
+main(void) {
+    int pids[total];
+    memset(pids, 0, sizeof(pids));
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  801308:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  80130c:	b8 15 00 00 00       	mov    $0x15,%eax
+  801311:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  801314:	7c 86                	jl     80129c <main+0x84>
+        if (pids[i] < 0) {
+            goto failed;
+        }
+    }
+
+    cprintf("fork ok.\n");
+  801316:	c7 04 24 f4 16 80 00 	movl   $0x8016f4,(%esp)
+  80131d:	e8 f6 ed ff ff       	call   800118 <cprintf>
+
+    for (i = 0; i < total; i ++) {
+  801322:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  801329:	eb 1b                	jmp    801346 <main+0x12e>
+        if (wait() != 0) {
+  80132b:	e8 d1 ef ff ff       	call   800301 <wait>
+  801330:	85 c0                	test   %eax,%eax
+  801332:	74 0e                	je     801342 <main+0x12a>
+            cprintf("wait failed.\n");
+  801334:	c7 04 24 fe 16 80 00 	movl   $0x8016fe,(%esp)
+  80133b:	e8 d8 ed ff ff       	call   800118 <cprintf>
+            goto failed;
+  801340:	eb 23                	jmp    801365 <main+0x14d>
+        }
+    }
+
+    cprintf("fork ok.\n");
+
+    for (i = 0; i < total; i ++) {
+  801342:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  801346:	b8 15 00 00 00       	mov    $0x15,%eax
+  80134b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  80134e:	7c db                	jl     80132b <main+0x113>
+            cprintf("wait failed.\n");
+            goto failed;
+        }
+    }
+
+    cprintf("matrix pass.\n");
+  801350:	c7 04 24 0c 17 80 00 	movl   $0x80170c,(%esp)
+  801357:	e8 bc ed ff ff       	call   800118 <cprintf>
+    return 0;
+  80135c:	b8 00 00 00 00       	mov    $0x0,%eax
+  801361:	89 dc                	mov    %ebx,%esp
+  801363:	eb 51                	jmp    8013b6 <main+0x19e>
+
+failed:
+    for (i = 0; i < total; i ++) {
+  801365:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  80136c:	eb 22                	jmp    801390 <main+0x178>
+        if (pids[i] > 0) {
+  80136e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  801371:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  801374:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801377:	85 c0                	test   %eax,%eax
+  801379:	7e 11                	jle    80138c <main+0x174>
+            kill(pids[i]);
+  80137b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80137e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  801381:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801384:	89 04 24             	mov    %eax,(%esp)
+  801387:	e8 b8 ef ff ff       	call   800344 <kill>
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  80138c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+  801390:	b8 15 00 00 00       	mov    $0x15,%eax
+  801395:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+  801398:	7c d4                	jl     80136e <main+0x156>
+        if (pids[i] > 0) {
+            kill(pids[i]);
+        }
+    }
+    panic("FAIL: T.T\n");
+  80139a:	c7 44 24 08 1a 17 80 	movl   $0x80171a,0x8(%esp)
+  8013a1:	00 
+  8013a2:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
+  8013a9:	00 
+  8013aa:	c7 04 24 25 17 80 00 	movl   $0x801725,(%esp)
+  8013b1:	e8 79 ec ff ff       	call   80002f <__panic>
+}
+  8013b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  8013b9:	59                   	pop    %ecx
+  8013ba:	5b                   	pop    %ebx
+  8013bb:	5e                   	pop    %esi
+  8013bc:	5d                   	pop    %ebp
+  8013bd:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  8013c0:	c3                   	ret    
diff -r -u -P _lab6/obj/user/matrix.d lab6/obj/user/matrix.d
--- _lab6/obj/user/matrix.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.d	2020-05-28 03:10:53.425519207 +0800
@@ -0,0 +1,2 @@
+obj/user/matrix.o obj/user/matrix.d: user/matrix.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files _lab6/obj/user/matrix.o and lab6/obj/user/matrix.o differ
diff -r -u -P _lab6/obj/user/matrix.sym lab6/obj/user/matrix.sym
--- _lab6/obj/user/matrix.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.sym	2020-05-28 03:10:57.373519207 +0800
@@ -0,0 +1,83 @@
+00800020 .text
+008013e0 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202ec1 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008014e0 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 matrix.c
+00802020 mata
+008021c0 matb
+00802360 matc
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202ec0 __STAB_END__
+00800248 sys_kill
+00202ec1 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00801218 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00203d01 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008016f0 total
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
+00800fe0 work
diff -r -u -P _lab6/obj/user/pgdir.asm lab6/obj/user/pgdir.asm
--- _lab6/obj/user/pgdir.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.asm	2020-05-28 03:10:57.045519207 +0800
@@ -0,0 +1,2529 @@
+
+obj/__user_pgdir.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  800fe9:	e8 69 f3 ff ff       	call   800357 <getpid>
+  800fee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff2:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800ff9:	e8 1a f1 ff ff       	call   800118 <cprintf>
+    print_pgdir();
+  800ffe:	e8 61 f3 ff ff       	call   800364 <print_pgdir>
+    cprintf("pgdir pass.\n");
+  801003:	c7 04 24 17 13 80 00 	movl   $0x801317,(%esp)
+  80100a:	e8 09 f1 ff ff       	call   800118 <cprintf>
+    return 0;
+  80100f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801014:	c9                   	leave  
+  801015:	c3                   	ret    
diff -r -u -P _lab6/obj/user/pgdir.d lab6/obj/user/pgdir.d
--- _lab6/obj/user/pgdir.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.d	2020-05-28 03:10:53.465519207 +0800
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/pgdir.o and lab6/obj/user/pgdir.o differ
diff -r -u -P _lab6/obj/user/pgdir.sym lab6/obj/user/pgdir.sym
--- _lab6/obj/user/pgdir.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.sym	2020-05-28 03:10:57.101519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b3d .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 pgdir.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b3c __STAB_END__
+00800248 sys_kill
+00202b3d __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038ca __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/priority.asm lab6/obj/user/priority.asm
--- _lab6/obj/user/priority.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.asm	2020-05-28 03:10:56.977519207 +0800
@@ -0,0 +1,2797 @@
+
+obj/__user_priority.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 c0 12 80 00 	movl   $0x8012c0,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 da 12 80 00 	movl   $0x8012da,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 dc 12 80 00 	movl   $0x8012dc,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 da 12 80 00 	movl   $0x8012da,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 f8 12 80 00 	movl   $0x8012f8,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 70 0c 00 00       	call   80100c <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 24 14 80 00       	add    $0x801424,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 48 14 80 00 	mov    0x801448(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d c0 13 80 00 	mov    0x8013c0(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 35 14 80 	movl   $0x801435,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 3e 14 80 	movl   $0x80143e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 41 14 80 00       	mov    $0x801441,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <spin_delay>:
+int status[TOTAL];
+int pids[TOTAL];
+
+static void
+spin_delay(void)
+{
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 ec 10             	sub    $0x10,%esp
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800fe6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  800fed:	eb 12                	jmp    801001 <spin_delay+0x21>
+     {
+          j = !j;
+  800fef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800ff2:	85 c0                	test   %eax,%eax
+  800ff4:	0f 94 c0             	sete   %al
+  800ff7:	0f b6 c0             	movzbl %al,%eax
+  800ffa:	89 45 f8             	mov    %eax,-0x8(%ebp)
+static void
+spin_delay(void)
+{
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800ffd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  801001:	81 7d fc c8 00 00 00 	cmpl   $0xc8,-0x4(%ebp)
+  801008:	75 e5                	jne    800fef <spin_delay+0xf>
+     {
+          j = !j;
+     }
+}
+  80100a:	c9                   	leave  
+  80100b:	c3                   	ret    
+
+0080100c <main>:
+
+int
+main(void) {
+  80100c:	55                   	push   %ebp
+  80100d:	89 e5                	mov    %esp,%ebp
+  80100f:	56                   	push   %esi
+  801010:	53                   	push   %ebx
+  801011:	83 e4 f0             	and    $0xfffffff0,%esp
+  801014:	83 ec 20             	sub    $0x20,%esp
+     int i,time;
+     memset(pids, 0, sizeof(pids));
+  801017:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
+  80101e:	00 
+  80101f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801026:	00 
+  801027:	c7 04 24 30 20 80 00 	movl   $0x802030,(%esp)
+  80102e:	e8 24 fe ff ff       	call   800e57 <memset>
+     lab6_set_priority(TOTAL + 1);
+  801033:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+  80103a:	e8 3f f3 ff ff       	call   80037e <lab6_set_priority>
+
+     for (i = 0; i < TOTAL; i ++) {
+  80103f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801046:	00 
+  801047:	e9 0e 01 00 00       	jmp    80115a <main+0x14e>
+          acc[i]=0;
+  80104c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801050:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  801057:	00 00 00 00 
+          if ((pids[i] = fork()) == 0) {
+  80105b:	e8 94 f2 ff ff       	call   8002f4 <fork>
+  801060:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801064:	89 04 95 30 20 80 00 	mov    %eax,0x802030(,%edx,4)
+  80106b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80106f:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801076:	85 c0                	test   %eax,%eax
+  801078:	0f 85 ba 00 00 00    	jne    801138 <main+0x12c>
+               lab6_set_priority(i + 1);
+  80107e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801082:	83 c0 01             	add    $0x1,%eax
+  801085:	89 04 24             	mov    %eax,(%esp)
+  801088:	e8 f1 f2 ff ff       	call   80037e <lab6_set_priority>
+               acc[i] = 0;
+  80108d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801091:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  801098:	00 00 00 00 
+               while (1) {
+                    spin_delay();
+  80109c:	e8 3f ff ff ff       	call   800fe0 <spin_delay>
+                    ++ acc[i];
+  8010a1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010a5:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  8010ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8010af:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010b3:	89 14 85 08 20 80 00 	mov    %edx,0x802008(,%eax,4)
+                    if(acc[i]%4000==0) {
+  8010ba:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010be:	8b 0c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ecx
+  8010c5:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+  8010ca:	89 c8                	mov    %ecx,%eax
+  8010cc:	f7 e2                	mul    %edx
+  8010ce:	89 d0                	mov    %edx,%eax
+  8010d0:	c1 e8 08             	shr    $0x8,%eax
+  8010d3:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
+  8010d9:	29 c1                	sub    %eax,%ecx
+  8010db:	89 c8                	mov    %ecx,%eax
+  8010dd:	85 c0                	test   %eax,%eax
+  8010df:	75 52                	jne    801133 <main+0x127>
+                        if((time=gettime_msec())>MAX_TIME) {
+  8010e1:	e8 8b f2 ff ff       	call   800371 <gettime_msec>
+  8010e6:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8010ea:	81 7c 24 18 e8 03 00 	cmpl   $0x3e8,0x18(%esp)
+  8010f1:	00 
+  8010f2:	7e 3f                	jle    801133 <main+0x127>
+                            cprintf("child pid %d, acc %d, time %d\n",getpid(),acc[i],time);
+  8010f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010f8:	8b 1c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ebx
+  8010ff:	e8 53 f2 ff ff       	call   800357 <getpid>
+  801104:	8b 54 24 18          	mov    0x18(%esp),%edx
+  801108:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80110c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+  801110:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801114:	c7 04 24 a0 15 80 00 	movl   $0x8015a0,(%esp)
+  80111b:	e8 f8 ef ff ff       	call   800118 <cprintf>
+                            exit(acc[i]);
+  801120:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801124:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  80112b:	89 04 24             	mov    %eax,(%esp)
+  80112e:	e8 a2 f1 ff ff       	call   8002d5 <exit>
+                        }
+                    }
+               }
+  801133:	e9 64 ff ff ff       	jmp    80109c <main+0x90>
+               
+          }
+          if (pids[i] < 0) {
+  801138:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80113c:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801143:	85 c0                	test   %eax,%eax
+  801145:	79 0e                	jns    801155 <main+0x149>
+               goto failed;
+  801147:	90                   	nop
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  801148:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80114f:	00 
+  801150:	e9 32 01 00 00       	jmp    801287 <main+0x27b>
+main(void) {
+     int i,time;
+     memset(pids, 0, sizeof(pids));
+     lab6_set_priority(TOTAL + 1);
+
+     for (i = 0; i < TOTAL; i ++) {
+  801155:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  80115a:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  80115f:	0f 8e e7 fe ff ff    	jle    80104c <main+0x40>
+          if (pids[i] < 0) {
+               goto failed;
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+  801165:	c7 04 24 c0 15 80 00 	movl   $0x8015c0,(%esp)
+  80116c:	e8 a7 ef ff ff       	call   800118 <cprintf>
+
+     for (i = 0; i < TOTAL; i ++) {
+  801171:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801178:	00 
+  801179:	eb 6b                	jmp    8011e6 <main+0x1da>
+         status[i]=0;
+  80117b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80117f:	c7 04 85 1c 20 80 00 	movl   $0x0,0x80201c(,%eax,4)
+  801186:	00 00 00 00 
+         waitpid(pids[i],&status[i]);
+  80118a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80118e:	c1 e0 02             	shl    $0x2,%eax
+  801191:	8d 90 1c 20 80 00    	lea    0x80201c(%eax),%edx
+  801197:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80119b:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011a2:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8011a6:	89 04 24             	mov    %eax,(%esp)
+  8011a9:	e8 6f f1 ff ff       	call   80031d <waitpid>
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+  8011ae:	e8 be f1 ff ff       	call   800371 <gettime_msec>
+  8011b3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  8011b7:	8b 0c 95 1c 20 80 00 	mov    0x80201c(,%edx,4),%ecx
+  8011be:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  8011c2:	8b 14 95 30 20 80 00 	mov    0x802030(,%edx,4),%edx
+  8011c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8011cd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+  8011d1:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8011d5:	c7 04 24 e8 15 80 00 	movl   $0x8015e8,(%esp)
+  8011dc:	e8 37 ef ff ff       	call   800118 <cprintf>
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+
+     for (i = 0; i < TOTAL; i ++) {
+  8011e1:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  8011e6:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  8011eb:	7e 8e                	jle    80117b <main+0x16f>
+         status[i]=0;
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+  8011ed:	c7 04 24 07 16 80 00 	movl   $0x801607,(%esp)
+  8011f4:	e8 1f ef ff ff       	call   800118 <cprintf>
+     cprintf("stride sched correct result:");
+  8011f9:	c7 04 24 1d 16 80 00 	movl   $0x80161d,(%esp)
+  801200:	e8 13 ef ff ff       	call   800118 <cprintf>
+     for (i = 0; i < TOTAL; i ++)
+  801205:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  80120c:	00 
+  80120d:	eb 37                	jmp    801246 <main+0x23a>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+  80120f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801213:	8b 04 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%eax
+  80121a:	01 c0                	add    %eax,%eax
+  80121c:	8b 35 1c 20 80 00    	mov    0x80201c,%esi
+  801222:	99                   	cltd   
+  801223:	f7 fe                	idiv   %esi
+  801225:	83 c0 01             	add    $0x1,%eax
+  801228:	89 c2                	mov    %eax,%edx
+  80122a:	c1 ea 1f             	shr    $0x1f,%edx
+  80122d:	01 d0                	add    %edx,%eax
+  80122f:	d1 f8                	sar    %eax
+  801231:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801235:	c7 04 24 3a 16 80 00 	movl   $0x80163a,(%esp)
+  80123c:	e8 d7 ee ff ff       	call   800118 <cprintf>
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+     cprintf("stride sched correct result:");
+     for (i = 0; i < TOTAL; i ++)
+  801241:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801246:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  80124b:	7e c2                	jle    80120f <main+0x203>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+     }
+     cprintf("\n");
+  80124d:	c7 04 24 3e 16 80 00 	movl   $0x80163e,(%esp)
+  801254:	e8 bf ee ff ff       	call   800118 <cprintf>
+
+     return 0;
+  801259:	b8 00 00 00 00       	mov    $0x0,%eax
+  80125e:	eb 4a                	jmp    8012aa <main+0x29e>
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+          if (pids[i] > 0) {
+  801260:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801264:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80126b:	85 c0                	test   %eax,%eax
+  80126d:	7e 13                	jle    801282 <main+0x276>
+               kill(pids[i]);
+  80126f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801273:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80127a:	89 04 24             	mov    %eax,(%esp)
+  80127d:	e8 c2 f0 ff ff       	call   800344 <kill>
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  801282:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801287:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  80128c:	7e d2                	jle    801260 <main+0x254>
+          if (pids[i] > 0) {
+               kill(pids[i]);
+          }
+     }
+     panic("FAIL: T.T\n");
+  80128e:	c7 44 24 08 40 16 80 	movl   $0x801640,0x8(%esp)
+  801295:	00 
+  801296:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
+  80129d:	00 
+  80129e:	c7 04 24 4b 16 80 00 	movl   $0x80164b,(%esp)
+  8012a5:	e8 85 ed ff ff       	call   80002f <__panic>
+}
+  8012aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  8012ad:	5b                   	pop    %ebx
+  8012ae:	5e                   	pop    %esi
+  8012af:	5d                   	pop    %ebp
+  8012b0:	c3                   	ret    
diff -r -u -P _lab6/obj/user/priority.d lab6/obj/user/priority.d
--- _lab6/obj/user/priority.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.d	2020-05-28 03:10:53.497519207 +0800
@@ -0,0 +1,2 @@
+obj/user/priority.o obj/user/priority.d: user/priority.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files _lab6/obj/user/priority.o and lab6/obj/user/priority.o differ
diff -r -u -P _lab6/obj/user/priority.sym lab6/obj/user/priority.sym
--- _lab6/obj/user/priority.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.sym	2020-05-28 03:10:57.069519207 +0800
@@ -0,0 +1,82 @@
+00800020 .text
+008012c0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202dc5 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+008013c0 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 priority.c
+00800fe0 spin_delay
+00000000 
+00800b80 strcpy
+00800337 yield
+00802008 acc
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202dc4 __STAB_END__
+00800248 sys_kill
+00202dc5 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+0080100c main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00203bdf __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
+0080201c status
+00802030 pids
diff -r -u -P _lab6/obj/user/softint.asm lab6/obj/user/softint.asm
--- _lab6/obj/user/softint.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.asm	2020-05-28 03:10:57.053519207 +0800
@@ -0,0 +1,2523 @@
+
+obj/__user_softint.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 84 11 80 00       	add    $0x801184,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("int $14");
+  800fe9:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  800feb:	c7 44 24 08 00 13 80 	movl   $0x801300,0x8(%esp)
+  800ff2:	00 
+  800ff3:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800ffa:	00 
+  800ffb:	c7 04 24 0b 13 80 00 	movl   $0x80130b,(%esp)
+  801002:	e8 28 f0 ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/softint.d lab6/obj/user/softint.d
--- _lab6/obj/user/softint.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.d	2020-05-28 03:10:53.753519207 +0800
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/softint.o and lab6/obj/user/softint.o differ
diff -r -u -P _lab6/obj/user/softint.sym lab6/obj/user/softint.sym
--- _lab6/obj/user/softint.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.sym	2020-05-28 03:10:57.097519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202b19 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801120 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 softint.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202b18 __STAB_END__
+00800248 sys_kill
+00202b19 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002038a8 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/spin.asm lab6/obj/user/spin.asm
--- _lab6/obj/user/spin.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.asm	2020-05-28 03:10:57.089519207 +0800
@@ -0,0 +1,2596 @@
+
+obj/__user_spin.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 64 12 80 00       	add    $0x801264,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  800fe9:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  800ff0:	e8 23 f1 ff ff       	call   800118 <cprintf>
+    if ((pid = fork()) == 0) {
+  800ff5:	e8 fa f2 ff ff       	call   8002f4 <fork>
+  800ffa:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800ffe:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801003:	75 0e                	jne    801013 <main+0x33>
+        cprintf("I am the child. spinning ...\n");
+  801005:	c7 04 24 07 14 80 00 	movl   $0x801407,(%esp)
+  80100c:	e8 07 f1 ff ff       	call   800118 <cprintf>
+        while (1);
+  801011:	eb fe                	jmp    801011 <main+0x31>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  801013:	c7 04 24 28 14 80 00 	movl   $0x801428,(%esp)
+  80101a:	e8 f9 f0 ff ff       	call   800118 <cprintf>
+
+    yield();
+  80101f:	e8 13 f3 ff ff       	call   800337 <yield>
+    yield();
+  801024:	e8 0e f3 ff ff       	call   800337 <yield>
+    yield();
+  801029:	e8 09 f3 ff ff       	call   800337 <yield>
+
+    cprintf("I am the parent.  Killing the child...\n");
+  80102e:	c7 04 24 50 14 80 00 	movl   $0x801450,(%esp)
+  801035:	e8 de f0 ff ff       	call   800118 <cprintf>
+
+    assert((ret = kill(pid)) == 0);
+  80103a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80103e:	89 04 24             	mov    %eax,(%esp)
+  801041:	e8 fe f2 ff ff       	call   800344 <kill>
+  801046:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80104a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  80104f:	74 24                	je     801075 <main+0x95>
+  801051:	c7 44 24 0c 78 14 80 	movl   $0x801478,0xc(%esp)
+  801058:	00 
+  801059:	c7 44 24 08 8f 14 80 	movl   $0x80148f,0x8(%esp)
+  801060:	00 
+  801061:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+  801068:	00 
+  801069:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  801070:	e8 ba ef ff ff       	call   80002f <__panic>
+    cprintf("kill returns %d\n", ret);
+  801075:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801079:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80107d:	c7 04 24 b0 14 80 00 	movl   $0x8014b0,(%esp)
+  801084:	e8 8f f0 ff ff       	call   800118 <cprintf>
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  801089:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801090:	00 
+  801091:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801095:	89 04 24             	mov    %eax,(%esp)
+  801098:	e8 80 f2 ff ff       	call   80031d <waitpid>
+  80109d:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8010a1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  8010a6:	74 24                	je     8010cc <main+0xec>
+  8010a8:	c7 44 24 0c c4 14 80 	movl   $0x8014c4,0xc(%esp)
+  8010af:	00 
+  8010b0:	c7 44 24 08 8f 14 80 	movl   $0x80148f,0x8(%esp)
+  8010b7:	00 
+  8010b8:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010bf:	00 
+  8010c0:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  8010c7:	e8 63 ef ff ff       	call   80002f <__panic>
+    cprintf("wait returns %d\n", ret);
+  8010cc:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010d4:	c7 04 24 e4 14 80 00 	movl   $0x8014e4,(%esp)
+  8010db:	e8 38 f0 ff ff       	call   800118 <cprintf>
+
+    cprintf("spin may pass.\n");
+  8010e0:	c7 04 24 f5 14 80 00 	movl   $0x8014f5,(%esp)
+  8010e7:	e8 2c f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  8010ec:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010f1:	c9                   	leave  
+  8010f2:	c3                   	ret    
diff -r -u -P _lab6/obj/user/spin.d lab6/obj/user/spin.d
--- _lab6/obj/user/spin.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.d	2020-05-28 03:10:53.449519207 +0800
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/spin.o and lab6/obj/user/spin.o differ
diff -r -u -P _lab6/obj/user/spin.sym lab6/obj/user/spin.sym
--- _lab6/obj/user/spin.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.sym	2020-05-28 03:10:57.125519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c09 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 spin.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c08 __STAB_END__
+00800248 sys_kill
+00202c09 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+0020399f __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/testbss.asm lab6/obj/user/testbss.asm
--- _lab6/obj/user/testbss.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.asm	2020-05-28 03:10:57.189519207 +0800
@@ -0,0 +1,2624 @@
+
+obj/__user_testbss.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 64 12 80 00       	add    $0x801264,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    cprintf("Making sure bss works right...\n");
+  800fe9:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  800ff0:	e8 23 f1 ff ff       	call   800118 <cprintf>
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800ff5:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800ffc:	00 
+  800ffd:	eb 38                	jmp    801037 <main+0x57>
+        if (bigarray[i] != 0) {
+  800fff:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801003:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  80100a:	85 c0                	test   %eax,%eax
+  80100c:	74 24                	je     801032 <main+0x52>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  80100e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801012:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801016:	c7 44 24 08 00 14 80 	movl   $0x801400,0x8(%esp)
+  80101d:	00 
+  80101e:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  801025:	00 
+  801026:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  80102d:	e8 fd ef ff ff       	call   80002f <__panic>
+
+int
+main(void) {
+    cprintf("Making sure bss works right...\n");
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801032:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  801037:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  80103e:	00 
+  80103f:	7e be                	jle    800fff <main+0x1f>
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801041:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801048:	00 
+  801049:	eb 14                	jmp    80105f <main+0x7f>
+        bigarray[i] = i;
+  80104b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  80104f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801053:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80105a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  80105f:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  801066:	00 
+  801067:	7e e2                	jle    80104b <main+0x6b>
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801069:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801070:	00 
+  801071:	eb 3c                	jmp    8010af <main+0xcf>
+        if (bigarray[i] != i) {
+  801073:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801077:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  80107e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801082:	39 c2                	cmp    %eax,%edx
+  801084:	74 24                	je     8010aa <main+0xca>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  801086:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80108a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80108e:	c7 44 24 08 2c 14 80 	movl   $0x80142c,0x8(%esp)
+  801095:	00 
+  801096:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
+  80109d:	00 
+  80109e:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  8010a5:	e8 85 ef ff ff       	call   80002f <__panic>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  8010aa:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  8010af:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  8010b6:	00 
+  8010b7:	7e ba                	jle    801073 <main+0x93>
+        if (bigarray[i] != i) {
+            panic("bigarray[%d] didn't hold its value!\n", i);
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  8010b9:	c7 04 24 54 14 80 00 	movl   $0x801454,(%esp)
+  8010c0:	e8 53 f0 ff ff       	call   800118 <cprintf>
+    cprintf("testbss may pass.\n");
+  8010c5:	c7 04 24 87 14 80 00 	movl   $0x801487,(%esp)
+  8010cc:	e8 47 f0 ff ff       	call   800118 <cprintf>
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  8010d1:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  8010d8:	00 00 00 
+    asm volatile ("int $0x14");
+  8010db:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  8010dd:	c7 44 24 08 9a 14 80 	movl   $0x80149a,0x8(%esp)
+  8010e4:	00 
+  8010e5:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
+  8010ec:	00 
+  8010ed:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  8010f4:	e8 36 ef ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/testbss.d lab6/obj/user/testbss.d
--- _lab6/obj/user/testbss.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.d	2020-05-28 03:10:53.445519207 +0800
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files _lab6/obj/user/testbss.o and lab6/obj/user/testbss.o differ
diff -r -u -P _lab6/obj/user/testbss.sym lab6/obj/user/testbss.sym
--- _lab6/obj/user/testbss.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.sym	2020-05-28 03:10:57.261519207 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202c21 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801200 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 testbss.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202c20 __STAB_END__
+00800248 sys_kill
+00202c21 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00802020 bigarray
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+002039f0 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
diff -r -u -P _lab6/obj/user/waitkill.asm lab6/obj/user/waitkill.asm
--- _lab6/obj/user/waitkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.asm	2020-05-28 03:10:57.237519207 +0800
@@ -0,0 +1,2666 @@
+
+obj/__user_waitkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 80 11 80 00 	movl   $0x801180,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 9a 11 80 00 	movl   $0x80119a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 9c 11 80 00 	movl   $0x80119c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 9a 11 80 00 	movl   $0x80119a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 b8 11 80 00 	movl   $0x8011b8,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 ec 0c 00 00       	call   801088 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 e4 12 80 00       	add    $0x8012e4,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 08 13 80 00 	mov    0x801308(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 80 12 80 00 	mov    0x801280(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 f5 12 80 	movl   $0x8012f5,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 fe 12 80 	movl   $0x8012fe,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be 01 13 80 00       	mov    $0x801301,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  800fe6:	e8 4c f3 ff ff       	call   800337 <yield>
+    yield();
+  800feb:	e8 47 f3 ff ff       	call   800337 <yield>
+    yield();
+  800ff0:	e8 42 f3 ff ff       	call   800337 <yield>
+    yield();
+  800ff5:	e8 3d f3 ff ff       	call   800337 <yield>
+    yield();
+  800ffa:	e8 38 f3 ff ff       	call   800337 <yield>
+    yield();
+  800fff:	e8 33 f3 ff ff       	call   800337 <yield>
+}
+  801004:	c9                   	leave  
+  801005:	c3                   	ret    
+
+00801006 <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  801006:	55                   	push   %ebp
+  801007:	89 e5                	mov    %esp,%ebp
+  801009:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 1.\n");
+  80100c:	c7 04 24 60 14 80 00 	movl   $0x801460,(%esp)
+  801013:	e8 00 f1 ff ff       	call   800118 <cprintf>
+    while (1);
+  801018:	eb fe                	jmp    801018 <loop+0x12>
+
+0080101a <work>:
+}
+
+void
+work(void) {
+  80101a:	55                   	push   %ebp
+  80101b:	89 e5                	mov    %esp,%ebp
+  80101d:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 2.\n");
+  801020:	c7 04 24 6a 14 80 00 	movl   $0x80146a,(%esp)
+  801027:	e8 ec f0 ff ff       	call   800118 <cprintf>
+    do_yield();
+  80102c:	e8 af ff ff ff       	call   800fe0 <do_yield>
+    if (kill(parent) == 0) {
+  801031:	a1 08 20 80 00       	mov    0x802008,%eax
+  801036:	89 04 24             	mov    %eax,(%esp)
+  801039:	e8 06 f3 ff ff       	call   800344 <kill>
+  80103e:	85 c0                	test   %eax,%eax
+  801040:	75 3a                	jne    80107c <work+0x62>
+        cprintf("kill parent ok.\n");
+  801042:	c7 04 24 74 14 80 00 	movl   $0x801474,(%esp)
+  801049:	e8 ca f0 ff ff       	call   800118 <cprintf>
+        do_yield();
+  80104e:	e8 8d ff ff ff       	call   800fe0 <do_yield>
+        if (kill(pid1) == 0) {
+  801053:	a1 10 20 80 00       	mov    0x802010,%eax
+  801058:	89 04 24             	mov    %eax,(%esp)
+  80105b:	e8 e4 f2 ff ff       	call   800344 <kill>
+  801060:	85 c0                	test   %eax,%eax
+  801062:	75 18                	jne    80107c <work+0x62>
+            cprintf("kill child1 ok.\n");
+  801064:	c7 04 24 85 14 80 00 	movl   $0x801485,(%esp)
+  80106b:	e8 a8 f0 ff ff       	call   800118 <cprintf>
+            exit(0);
+  801070:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801077:	e8 59 f2 ff ff       	call   8002d5 <exit>
+        }
+    }
+    exit(-1);
+  80107c:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801083:	e8 4d f2 ff ff       	call   8002d5 <exit>
+
+00801088 <main>:
+}
+
+int
+main(void) {
+  801088:	55                   	push   %ebp
+  801089:	89 e5                	mov    %esp,%ebp
+  80108b:	83 e4 f0             	and    $0xfffffff0,%esp
+  80108e:	83 ec 10             	sub    $0x10,%esp
+    parent = getpid();
+  801091:	e8 c1 f2 ff ff       	call   800357 <getpid>
+  801096:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  80109b:	e8 54 f2 ff ff       	call   8002f4 <fork>
+  8010a0:	a3 10 20 80 00       	mov    %eax,0x802010
+  8010a5:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010aa:	85 c0                	test   %eax,%eax
+  8010ac:	75 05                	jne    8010b3 <main+0x2b>
+        loop();
+  8010ae:	e8 53 ff ff ff       	call   801006 <loop>
+    }
+
+    assert(pid1 > 0);
+  8010b3:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010b8:	85 c0                	test   %eax,%eax
+  8010ba:	7f 24                	jg     8010e0 <main+0x58>
+  8010bc:	c7 44 24 0c 96 14 80 	movl   $0x801496,0xc(%esp)
+  8010c3:	00 
+  8010c4:	c7 44 24 08 9f 14 80 	movl   $0x80149f,0x8(%esp)
+  8010cb:	00 
+  8010cc:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
+  8010d3:	00 
+  8010d4:	c7 04 24 b4 14 80 00 	movl   $0x8014b4,(%esp)
+  8010db:	e8 4f ef ff ff       	call   80002f <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  8010e0:	e8 0f f2 ff ff       	call   8002f4 <fork>
+  8010e5:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  8010ea:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010ef:	85 c0                	test   %eax,%eax
+  8010f1:	75 05                	jne    8010f8 <main+0x70>
+        work();
+  8010f3:	e8 22 ff ff ff       	call   80101a <work>
+    }
+    if (pid2 > 0) {
+  8010f8:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010fd:	85 c0                	test   %eax,%eax
+  8010ff:	7e 46                	jle    801147 <main+0xbf>
+        cprintf("wait child 1.\n");
+  801101:	c7 04 24 c4 14 80 00 	movl   $0x8014c4,(%esp)
+  801108:	e8 0b f0 ff ff       	call   800118 <cprintf>
+        waitpid(pid1, NULL);
+  80110d:	a1 10 20 80 00       	mov    0x802010,%eax
+  801112:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801119:	00 
+  80111a:	89 04 24             	mov    %eax,(%esp)
+  80111d:	e8 fb f1 ff ff       	call   80031d <waitpid>
+        panic("waitpid %d returns\n", pid1);
+  801122:	a1 10 20 80 00       	mov    0x802010,%eax
+  801127:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80112b:	c7 44 24 08 d3 14 80 	movl   $0x8014d3,0x8(%esp)
+  801132:	00 
+  801133:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+  80113a:	00 
+  80113b:	c7 04 24 b4 14 80 00 	movl   $0x8014b4,(%esp)
+  801142:	e8 e8 ee ff ff       	call   80002f <__panic>
+    }
+    else {
+        kill(pid1);
+  801147:	a1 10 20 80 00       	mov    0x802010,%eax
+  80114c:	89 04 24             	mov    %eax,(%esp)
+  80114f:	e8 f0 f1 ff ff       	call   800344 <kill>
+    }
+    panic("FAIL: T.T\n");
+  801154:	c7 44 24 08 e7 14 80 	movl   $0x8014e7,0x8(%esp)
+  80115b:	00 
+  80115c:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
+  801163:	00 
+  801164:	c7 04 24 b4 14 80 00 	movl   $0x8014b4,(%esp)
+  80116b:	e8 bf ee ff ff       	call   80002f <__panic>
diff -r -u -P _lab6/obj/user/waitkill.d lab6/obj/user/waitkill.d
--- _lab6/obj/user/waitkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.d	2020-05-28 03:10:53.413519207 +0800
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab6/obj/user/waitkill.o and lab6/obj/user/waitkill.o differ
diff -r -u -P _lab6/obj/user/waitkill.sym lab6/obj/user/waitkill.sym
--- _lab6/obj/user/waitkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.sym	2020-05-28 03:10:57.273519207 +0800
@@ -0,0 +1,84 @@
+00800020 .text
+00801180 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202ced .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801280 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 waitkill.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00801006 loop
+00800357 getpid
+00800f39 memcpy
+00802008 parent
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202cec __STAB_END__
+00800248 sys_kill
+00202ced __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+0080200c pid2
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00801088 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00800fe0 do_yield
+00203ace __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+00802010 pid1
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
+0080101a work
diff -r -u -P _lab6/obj/user/yield.asm lab6/obj/user/yield.asm
--- _lab6/obj/user/yield.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.asm	2020-05-28 03:10:57.273519207 +0800
@@ -0,0 +1,2558 @@
+
+obj/__user_yield.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  800020:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800025:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800028:	e8 64 03 00 00       	call   800391 <umain>
+1:  jmp 1b
+  80002d:	eb fe                	jmp    80002d <_start+0xd>
+
+0080002f <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  80002f:	55                   	push   %ebp
+  800030:	89 e5                	mov    %esp,%ebp
+  800032:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800035:	8d 45 14             	lea    0x14(%ebp),%eax
+  800038:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80003b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80003e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800042:	8b 45 08             	mov    0x8(%ebp),%eax
+  800045:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800049:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800050:	e8 c3 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  800055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800058:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80005c:	8b 45 10             	mov    0x10(%ebp),%eax
+  80005f:	89 04 24             	mov    %eax,(%esp)
+  800062:	e8 7e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  800067:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80006e:	e8 a5 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800073:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80007a:	e8 56 02 00 00       	call   8002d5 <exit>
+
+0080007f <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80007f:	55                   	push   %ebp
+  800080:	89 e5                	mov    %esp,%ebp
+  800082:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800085:	8d 45 14             	lea    0x14(%ebp),%eax
+  800088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80008b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80008e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800092:	8b 45 08             	mov    0x8(%ebp),%eax
+  800095:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800099:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  8000a0:	e8 73 00 00 00       	call   800118 <cprintf>
+    vcprintf(fmt, ap);
+  8000a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8000a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8000ac:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000af:	89 04 24             	mov    %eax,(%esp)
+  8000b2:	e8 2e 00 00 00       	call   8000e5 <vcprintf>
+    cprintf("\n");
+  8000b7:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000be:	e8 55 00 00 00       	call   800118 <cprintf>
+    va_end(ap);
+}
+  8000c3:	c9                   	leave  
+  8000c4:	c3                   	ret    
+
+008000c5 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8000c5:	55                   	push   %ebp
+  8000c6:	89 e5                	mov    %esp,%ebp
+  8000c8:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8000cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000ce:	89 04 24             	mov    %eax,(%esp)
+  8000d1:	e8 a1 01 00 00       	call   800277 <sys_putc>
+    (*cnt) ++;
+  8000d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000d9:	8b 00                	mov    (%eax),%eax
+  8000db:	8d 50 01             	lea    0x1(%eax),%edx
+  8000de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000e1:	89 10                	mov    %edx,(%eax)
+}
+  8000e3:	c9                   	leave  
+  8000e4:	c3                   	ret    
+
+008000e5 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8000e5:	55                   	push   %ebp
+  8000e6:	89 e5                	mov    %esp,%ebp
+  8000e8:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8000eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8000f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800100:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  800103:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800107:	c7 04 24 c5 00 80 00 	movl   $0x8000c5,(%esp)
+  80010e:	e8 85 04 00 00       	call   800598 <vprintfmt>
+    return cnt;
+  800113:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800116:	c9                   	leave  
+  800117:	c3                   	ret    
+
+00800118 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800118:	55                   	push   %ebp
+  800119:	89 e5                	mov    %esp,%ebp
+  80011b:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  80011e:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  800124:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800127:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80012b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80012e:	89 04 24             	mov    %eax,(%esp)
+  800131:	e8 af ff ff ff       	call   8000e5 <vcprintf>
+  800136:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800139:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80013c:	c9                   	leave  
+  80013d:	c3                   	ret    
+
+0080013e <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  80013e:	55                   	push   %ebp
+  80013f:	89 e5                	mov    %esp,%ebp
+  800141:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  800144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80014b:	eb 13                	jmp    800160 <cputs+0x22>
+        cputch(c, &cnt);
+  80014d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800151:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800154:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800158:	89 04 24             	mov    %eax,(%esp)
+  80015b:	e8 65 ff ff ff       	call   8000c5 <cputch>
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800160:	8b 45 08             	mov    0x8(%ebp),%eax
+  800163:	8d 50 01             	lea    0x1(%eax),%edx
+  800166:	89 55 08             	mov    %edx,0x8(%ebp)
+  800169:	0f b6 00             	movzbl (%eax),%eax
+  80016c:	88 45 f7             	mov    %al,-0x9(%ebp)
+  80016f:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800173:	75 d8                	jne    80014d <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800175:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800178:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800183:	e8 3d ff ff ff       	call   8000c5 <cputch>
+    return cnt;
+  800188:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80018b:	c9                   	leave  
+  80018c:	c3                   	ret    
+
+0080018d <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  80018d:	55                   	push   %ebp
+  80018e:	89 e5                	mov    %esp,%ebp
+  800190:	57                   	push   %edi
+  800191:	56                   	push   %esi
+  800192:	53                   	push   %ebx
+  800193:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  800196:	8d 45 0c             	lea    0xc(%ebp),%eax
+  800199:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  80019c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8001a3:	eb 16                	jmp    8001bb <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8001a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8001a8:	8d 50 04             	lea    0x4(%eax),%edx
+  8001ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8001ae:	8b 10                	mov    (%eax),%edx
+  8001b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8001b3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8001b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8001bb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8001bf:	7e e4                	jle    8001a5 <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8001c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8001c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8001c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8001ca:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8001cd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8001d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001d3:	cd 80                	int    $0x80
+  8001d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  8001d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  8001db:	83 c4 20             	add    $0x20,%esp
+  8001de:	5b                   	pop    %ebx
+  8001df:	5e                   	pop    %esi
+  8001e0:	5f                   	pop    %edi
+  8001e1:	5d                   	pop    %ebp
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8001f7:	e8 91 ff ff ff       	call   80018d <syscall>
+}
+  8001fc:	c9                   	leave  
+  8001fd:	c3                   	ret    
+
+008001fe <sys_fork>:
+
+int
+sys_fork(void) {
+  8001fe:	55                   	push   %ebp
+  8001ff:	89 e5                	mov    %esp,%ebp
+  800201:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  800204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  80020b:	e8 7d ff ff ff       	call   80018d <syscall>
+}
+  800210:	c9                   	leave  
+  800211:	c3                   	ret    
+
+00800212 <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  800212:	55                   	push   %ebp
+  800213:	89 e5                	mov    %esp,%ebp
+  800215:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800218:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80021b:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80021f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800222:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800226:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  80022d:	e8 5b ff ff ff       	call   80018d <syscall>
+}
+  800232:	c9                   	leave  
+  800233:	c3                   	ret    
+
+00800234 <sys_yield>:
+
+int
+sys_yield(void) {
+  800234:	55                   	push   %ebp
+  800235:	89 e5                	mov    %esp,%ebp
+  800237:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  80023a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  800241:	e8 47 ff ff ff       	call   80018d <syscall>
+}
+  800246:	c9                   	leave  
+  800247:	c3                   	ret    
+
+00800248 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800248:	55                   	push   %ebp
+  800249:	89 e5                	mov    %esp,%ebp
+  80024b:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  80024e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800251:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800255:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  80025c:	e8 2c ff ff ff       	call   80018d <syscall>
+}
+  800261:	c9                   	leave  
+  800262:	c3                   	ret    
+
+00800263 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800263:	55                   	push   %ebp
+  800264:	89 e5                	mov    %esp,%ebp
+  800266:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800269:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800270:	e8 18 ff ff ff       	call   80018d <syscall>
+}
+  800275:	c9                   	leave  
+  800276:	c3                   	ret    
+
+00800277 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800277:	55                   	push   %ebp
+  800278:	89 e5                	mov    %esp,%ebp
+  80027a:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  80027d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800280:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800284:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  80028b:	e8 fd fe ff ff       	call   80018d <syscall>
+}
+  800290:	c9                   	leave  
+  800291:	c3                   	ret    
+
+00800292 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800292:	55                   	push   %ebp
+  800293:	89 e5                	mov    %esp,%ebp
+  800295:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  800298:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  80029f:	e8 e9 fe ff ff       	call   80018d <syscall>
+}
+  8002a4:	c9                   	leave  
+  8002a5:	c3                   	ret    
+
+008002a6 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8002a6:	55                   	push   %ebp
+  8002a7:	89 e5                	mov    %esp,%ebp
+  8002a9:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8002ac:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8002b3:	e8 d5 fe ff ff       	call   80018d <syscall>
+}
+  8002b8:	c9                   	leave  
+  8002b9:	c3                   	ret    
+
+008002ba <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8002ba:	55                   	push   %ebp
+  8002bb:	89 e5                	mov    %esp,%ebp
+  8002bd:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8002c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002c3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8002c7:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8002ce:	e8 ba fe ff ff       	call   80018d <syscall>
+}
+  8002d3:	c9                   	leave  
+  8002d4:	c3                   	ret    
+
+008002d5 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8002d5:	55                   	push   %ebp
+  8002d6:	89 e5                	mov    %esp,%ebp
+  8002d8:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  8002db:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002de:	89 04 24             	mov    %eax,(%esp)
+  8002e1:	e8 fd fe ff ff       	call   8001e3 <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  8002e6:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  8002ed:	e8 26 fe ff ff       	call   800118 <cprintf>
+    while (1);
+  8002f2:	eb fe                	jmp    8002f2 <exit+0x1d>
+
+008002f4 <fork>:
+}
+
+int
+fork(void) {
+  8002f4:	55                   	push   %ebp
+  8002f5:	89 e5                	mov    %esp,%ebp
+  8002f7:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8002fa:	e8 ff fe ff ff       	call   8001fe <sys_fork>
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <wait>:
+
+int
+wait(void) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80030e:	00 
+  80030f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800316:	e8 f7 fe ff ff       	call   800212 <sys_wait>
+}
+  80031b:	c9                   	leave  
+  80031c:	c3                   	ret    
+
+0080031d <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  80031d:	55                   	push   %ebp
+  80031e:	89 e5                	mov    %esp,%ebp
+  800320:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  800323:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800326:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80032a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80032d:	89 04 24             	mov    %eax,(%esp)
+  800330:	e8 dd fe ff ff       	call   800212 <sys_wait>
+}
+  800335:	c9                   	leave  
+  800336:	c3                   	ret    
+
+00800337 <yield>:
+
+void
+yield(void) {
+  800337:	55                   	push   %ebp
+  800338:	89 e5                	mov    %esp,%ebp
+  80033a:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  80033d:	e8 f2 fe ff ff       	call   800234 <sys_yield>
+}
+  800342:	c9                   	leave  
+  800343:	c3                   	ret    
+
+00800344 <kill>:
+
+int
+kill(int pid) {
+  800344:	55                   	push   %ebp
+  800345:	89 e5                	mov    %esp,%ebp
+  800347:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	89 04 24             	mov    %eax,(%esp)
+  800350:	e8 f3 fe ff ff       	call   800248 <sys_kill>
+}
+  800355:	c9                   	leave  
+  800356:	c3                   	ret    
+
+00800357 <getpid>:
+
+int
+getpid(void) {
+  800357:	55                   	push   %ebp
+  800358:	89 e5                	mov    %esp,%ebp
+  80035a:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  80035d:	e8 01 ff ff ff       	call   800263 <sys_getpid>
+}
+  800362:	c9                   	leave  
+  800363:	c3                   	ret    
+
+00800364 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  800364:	55                   	push   %ebp
+  800365:	89 e5                	mov    %esp,%ebp
+  800367:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  80036a:	e8 23 ff ff ff       	call   800292 <sys_pgdir>
+}
+  80036f:	c9                   	leave  
+  800370:	c3                   	ret    
+
+00800371 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800371:	55                   	push   %ebp
+  800372:	89 e5                	mov    %esp,%ebp
+  800374:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800377:	e8 2a ff ff ff       	call   8002a6 <sys_gettime>
+}
+  80037c:	c9                   	leave  
+  80037d:	c3                   	ret    
+
+0080037e <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  80037e:	55                   	push   %ebp
+  80037f:	89 e5                	mov    %esp,%ebp
+  800381:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  800384:	8b 45 08             	mov    0x8(%ebp),%eax
+  800387:	89 04 24             	mov    %eax,(%esp)
+  80038a:	e8 2b ff ff ff       	call   8002ba <sys_lab6_set_priority>
+}
+  80038f:	c9                   	leave  
+  800390:	c3                   	ret    
+
+00800391 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800391:	55                   	push   %ebp
+  800392:	89 e5                	mov    %esp,%ebp
+  800394:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  800397:	e8 44 0c 00 00       	call   800fe0 <main>
+  80039c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a2:	89 04 24             	mov    %eax,(%esp)
+  8003a5:	e8 2b ff ff ff       	call   8002d5 <exit>
+
+008003aa <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  8003aa:	55                   	push   %ebp
+  8003ab:	89 e5                	mov    %esp,%ebp
+  8003ad:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  8003b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003b3:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  8003b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  8003bc:	b8 20 00 00 00       	mov    $0x20,%eax
+  8003c1:	2b 45 0c             	sub    0xc(%ebp),%eax
+  8003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  8003c7:	89 c1                	mov    %eax,%ecx
+  8003c9:	d3 ea                	shr    %cl,%edx
+  8003cb:	89 d0                	mov    %edx,%eax
+}
+  8003cd:	c9                   	leave  
+  8003ce:	c3                   	ret    
+
+008003cf <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  8003cf:	55                   	push   %ebp
+  8003d0:	89 e5                	mov    %esp,%ebp
+  8003d2:	83 ec 58             	sub    $0x58,%esp
+  8003d5:	8b 45 10             	mov    0x10(%ebp),%eax
+  8003d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  8003db:	8b 45 14             	mov    0x14(%ebp),%eax
+  8003de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  8003e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  8003e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  8003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8003ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  8003ed:	8b 45 18             	mov    0x18(%ebp),%eax
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  8003f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8003f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8003f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8003fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  8003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800409:	74 1c                	je     800427 <printnum+0x58>
+  80040b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80040e:	ba 00 00 00 00       	mov    $0x0,%edx
+  800413:	f7 75 e4             	divl   -0x1c(%ebp)
+  800416:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800419:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80041c:	ba 00 00 00 00       	mov    $0x0,%edx
+  800421:	f7 75 e4             	divl   -0x1c(%ebp)
+  800424:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800427:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80042a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80042d:	f7 75 e4             	divl   -0x1c(%ebp)
+  800430:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800433:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800436:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800439:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80043c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80043f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800442:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800445:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  800448:	8b 45 18             	mov    0x18(%ebp),%eax
+  80044b:	ba 00 00 00 00       	mov    $0x0,%edx
+  800450:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800453:	77 56                	ja     8004ab <printnum+0xdc>
+  800455:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  800458:	72 05                	jb     80045f <printnum+0x90>
+  80045a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  80045d:	77 4c                	ja     8004ab <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  80045f:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  800462:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800465:	8b 45 20             	mov    0x20(%ebp),%eax
+  800468:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80046c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800470:	8b 45 18             	mov    0x18(%ebp),%eax
+  800473:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800477:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80047a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80047d:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800481:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800485:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800488:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80048c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80048f:	89 04 24             	mov    %eax,(%esp)
+  800492:	e8 38 ff ff ff       	call   8003cf <printnum>
+  800497:	eb 1c                	jmp    8004b5 <printnum+0xe6>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800499:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80049c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8004a0:	8b 45 20             	mov    0x20(%ebp),%eax
+  8004a3:	89 04 24             	mov    %eax,(%esp)
+  8004a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a9:	ff d0                	call   *%eax
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8004ab:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8004af:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8004b3:	7f e4                	jg     800499 <printnum+0xca>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8004b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8004b8:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8004bd:	0f b6 00             	movzbl (%eax),%eax
+  8004c0:	0f be c0             	movsbl %al,%eax
+  8004c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8004c6:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8004ca:	89 04 24             	mov    %eax,(%esp)
+  8004cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004d0:	ff d0                	call   *%eax
+}
+  8004d2:	c9                   	leave  
+  8004d3:	c3                   	ret    
+
+008004d4 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  8004d4:	55                   	push   %ebp
+  8004d5:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8004d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8004db:	7e 14                	jle    8004f1 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  8004dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e0:	8b 00                	mov    (%eax),%eax
+  8004e2:	8d 48 08             	lea    0x8(%eax),%ecx
+  8004e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8004e8:	89 0a                	mov    %ecx,(%edx)
+  8004ea:	8b 50 04             	mov    0x4(%eax),%edx
+  8004ed:	8b 00                	mov    (%eax),%eax
+  8004ef:	eb 30                	jmp    800521 <getuint+0x4d>
+    }
+    else if (lflag) {
+  8004f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8004f5:	74 16                	je     80050d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  8004f7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fa:	8b 00                	mov    (%eax),%eax
+  8004fc:	8d 48 04             	lea    0x4(%eax),%ecx
+  8004ff:	8b 55 08             	mov    0x8(%ebp),%edx
+  800502:	89 0a                	mov    %ecx,(%edx)
+  800504:	8b 00                	mov    (%eax),%eax
+  800506:	ba 00 00 00 00       	mov    $0x0,%edx
+  80050b:	eb 14                	jmp    800521 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80050d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800510:	8b 00                	mov    (%eax),%eax
+  800512:	8d 48 04             	lea    0x4(%eax),%ecx
+  800515:	8b 55 08             	mov    0x8(%ebp),%edx
+  800518:	89 0a                	mov    %ecx,(%edx)
+  80051a:	8b 00                	mov    (%eax),%eax
+  80051c:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800521:	5d                   	pop    %ebp
+  800522:	c3                   	ret    
+
+00800523 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800523:	55                   	push   %ebp
+  800524:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800526:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80052a:	7e 14                	jle    800540 <getint+0x1d>
+        return va_arg(*ap, long long);
+  80052c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052f:	8b 00                	mov    (%eax),%eax
+  800531:	8d 48 08             	lea    0x8(%eax),%ecx
+  800534:	8b 55 08             	mov    0x8(%ebp),%edx
+  800537:	89 0a                	mov    %ecx,(%edx)
+  800539:	8b 50 04             	mov    0x4(%eax),%edx
+  80053c:	8b 00                	mov    (%eax),%eax
+  80053e:	eb 28                	jmp    800568 <getint+0x45>
+    }
+    else if (lflag) {
+  800540:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800544:	74 12                	je     800558 <getint+0x35>
+        return va_arg(*ap, long);
+  800546:	8b 45 08             	mov    0x8(%ebp),%eax
+  800549:	8b 00                	mov    (%eax),%eax
+  80054b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80054e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800551:	89 0a                	mov    %ecx,(%edx)
+  800553:	8b 00                	mov    (%eax),%eax
+  800555:	99                   	cltd   
+  800556:	eb 10                	jmp    800568 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800558:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055b:	8b 00                	mov    (%eax),%eax
+  80055d:	8d 48 04             	lea    0x4(%eax),%ecx
+  800560:	8b 55 08             	mov    0x8(%ebp),%edx
+  800563:	89 0a                	mov    %ecx,(%edx)
+  800565:	8b 00                	mov    (%eax),%eax
+  800567:	99                   	cltd   
+    }
+}
+  800568:	5d                   	pop    %ebp
+  800569:	c3                   	ret    
+
+0080056a <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  80056a:	55                   	push   %ebp
+  80056b:	89 e5                	mov    %esp,%ebp
+  80056d:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800570:	8d 45 14             	lea    0x14(%ebp),%eax
+  800573:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  800576:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800579:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80057d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800580:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800584:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800587:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80058b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80058e:	89 04 24             	mov    %eax,(%esp)
+  800591:	e8 02 00 00 00       	call   800598 <vprintfmt>
+    va_end(ap);
+}
+  800596:	c9                   	leave  
+  800597:	c3                   	ret    
+
+00800598 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800598:	55                   	push   %ebp
+  800599:	89 e5                	mov    %esp,%ebp
+  80059b:	56                   	push   %esi
+  80059c:	53                   	push   %ebx
+  80059d:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005a0:	eb 18                	jmp    8005ba <vprintfmt+0x22>
+            if (ch == '\0') {
+  8005a2:	85 db                	test   %ebx,%ebx
+  8005a4:	75 05                	jne    8005ab <vprintfmt+0x13>
+                return;
+  8005a6:	e9 d1 03 00 00       	jmp    80097c <vprintfmt+0x3e4>
+            }
+            putch(ch, putdat);
+  8005ab:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8005ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8005b2:	89 1c 24             	mov    %ebx,(%esp)
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	ff d0                	call   *%eax
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8005ba:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005bd:	8d 50 01             	lea    0x1(%eax),%edx
+  8005c0:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005c3:	0f b6 00             	movzbl (%eax),%eax
+  8005c6:	0f b6 d8             	movzbl %al,%ebx
+  8005c9:	83 fb 25             	cmp    $0x25,%ebx
+  8005cc:	75 d4                	jne    8005a2 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  8005ce:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  8005d2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  8005d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  8005dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  8005df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  8005e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8005e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  8005ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8005ef:	8d 50 01             	lea    0x1(%eax),%edx
+  8005f2:	89 55 10             	mov    %edx,0x10(%ebp)
+  8005f5:	0f b6 00             	movzbl (%eax),%eax
+  8005f8:	0f b6 d8             	movzbl %al,%ebx
+  8005fb:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  8005fe:	83 f8 55             	cmp    $0x55,%eax
+  800601:	0f 87 44 03 00 00    	ja     80094b <vprintfmt+0x3b3>
+  800607:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  80060e:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800610:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800614:	eb d6                	jmp    8005ec <vprintfmt+0x54>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800616:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  80061a:	eb d0                	jmp    8005ec <vprintfmt+0x54>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80061c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800626:	89 d0                	mov    %edx,%eax
+  800628:	c1 e0 02             	shl    $0x2,%eax
+  80062b:	01 d0                	add    %edx,%eax
+  80062d:	01 c0                	add    %eax,%eax
+  80062f:	01 d8                	add    %ebx,%eax
+  800631:	83 e8 30             	sub    $0x30,%eax
+  800634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800637:	8b 45 10             	mov    0x10(%ebp),%eax
+  80063a:	0f b6 00             	movzbl (%eax),%eax
+  80063d:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800640:	83 fb 2f             	cmp    $0x2f,%ebx
+  800643:	7e 0b                	jle    800650 <vprintfmt+0xb8>
+  800645:	83 fb 39             	cmp    $0x39,%ebx
+  800648:	7f 06                	jg     800650 <vprintfmt+0xb8>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  80064a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  80064e:	eb d3                	jmp    800623 <vprintfmt+0x8b>
+            goto process_precision;
+  800650:	eb 33                	jmp    800685 <vprintfmt+0xed>
+
+        case '*':
+            precision = va_arg(ap, int);
+  800652:	8b 45 14             	mov    0x14(%ebp),%eax
+  800655:	8d 50 04             	lea    0x4(%eax),%edx
+  800658:	89 55 14             	mov    %edx,0x14(%ebp)
+  80065b:	8b 00                	mov    (%eax),%eax
+  80065d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800660:	eb 23                	jmp    800685 <vprintfmt+0xed>
+
+        case '.':
+            if (width < 0)
+  800662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800666:	79 0c                	jns    800674 <vprintfmt+0xdc>
+                width = 0;
+  800668:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  80066f:	e9 78 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  800674:	e9 73 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        case '#':
+            altflag = 1;
+  800679:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800680:	e9 67 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        process_precision:
+            if (width < 0)
+  800685:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800689:	79 12                	jns    80069d <vprintfmt+0x105>
+                width = precision, precision = -1;
+  80068b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  80068e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800691:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800698:	e9 4f ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+  80069d:	e9 4a ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  8006a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  8006a6:	e9 41 ff ff ff       	jmp    8005ec <vprintfmt+0x54>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  8006ab:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006ae:	8d 50 04             	lea    0x4(%eax),%edx
+  8006b1:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006b4:	8b 00                	mov    (%eax),%eax
+  8006b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8006b9:	89 54 24 04          	mov    %edx,0x4(%esp)
+  8006bd:	89 04 24             	mov    %eax,(%esp)
+  8006c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006c3:	ff d0                	call   *%eax
+            break;
+  8006c5:	e9 ac 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  8006ca:	8b 45 14             	mov    0x14(%ebp),%eax
+  8006cd:	8d 50 04             	lea    0x4(%eax),%edx
+  8006d0:	89 55 14             	mov    %edx,0x14(%ebp)
+  8006d3:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  8006d5:	85 db                	test   %ebx,%ebx
+  8006d7:	79 02                	jns    8006db <vprintfmt+0x143>
+                err = -err;
+  8006d9:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  8006db:	83 fb 18             	cmp    $0x18,%ebx
+  8006de:	7f 0b                	jg     8006eb <vprintfmt+0x153>
+  8006e0:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  8006e7:	85 f6                	test   %esi,%esi
+  8006e9:	75 23                	jne    80070e <vprintfmt+0x176>
+                printfmt(putch, putdat, "error %d", err);
+  8006eb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  8006ef:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  8006f6:	00 
+  8006f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8006fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800701:	89 04 24             	mov    %eax,(%esp)
+  800704:	e8 61 fe ff ff       	call   80056a <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800709:	e9 68 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  80070e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800712:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800719:	00 
+  80071a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80071d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800721:	8b 45 08             	mov    0x8(%ebp),%eax
+  800724:	89 04 24             	mov    %eax,(%esp)
+  800727:	e8 3e fe ff ff       	call   80056a <printfmt>
+            }
+            break;
+  80072c:	e9 45 02 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800731:	8b 45 14             	mov    0x14(%ebp),%eax
+  800734:	8d 50 04             	lea    0x4(%eax),%edx
+  800737:	89 55 14             	mov    %edx,0x14(%ebp)
+  80073a:	8b 30                	mov    (%eax),%esi
+  80073c:	85 f6                	test   %esi,%esi
+  80073e:	75 05                	jne    800745 <vprintfmt+0x1ad>
+                p = "(null)";
+  800740:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800745:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800749:	7e 3e                	jle    800789 <vprintfmt+0x1f1>
+  80074b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  80074f:	74 38                	je     800789 <vprintfmt+0x1f1>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800751:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  800754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800757:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80075b:	89 34 24             	mov    %esi,(%esp)
+  80075e:	e8 ed 03 00 00       	call   800b50 <strnlen>
+  800763:	29 c3                	sub    %eax,%ebx
+  800765:	89 d8                	mov    %ebx,%eax
+  800767:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80076a:	eb 17                	jmp    800783 <vprintfmt+0x1eb>
+                    putch(padc, putdat);
+  80076c:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800770:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800773:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800777:	89 04 24             	mov    %eax,(%esp)
+  80077a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80077d:	ff d0                	call   *%eax
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  80077f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800787:	7f e3                	jg     80076c <vprintfmt+0x1d4>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800789:	eb 38                	jmp    8007c3 <vprintfmt+0x22b>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  80078b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  80078f:	74 1f                	je     8007b0 <vprintfmt+0x218>
+  800791:	83 fb 1f             	cmp    $0x1f,%ebx
+  800794:	7e 05                	jle    80079b <vprintfmt+0x203>
+  800796:	83 fb 7e             	cmp    $0x7e,%ebx
+  800799:	7e 15                	jle    8007b0 <vprintfmt+0x218>
+                    putch('?', putdat);
+  80079b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80079e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007a2:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  8007a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ac:	ff d0                	call   *%eax
+  8007ae:	eb 0f                	jmp    8007bf <vprintfmt+0x227>
+                }
+                else {
+                    putch(ch, putdat);
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007b7:	89 1c 24             	mov    %ebx,(%esp)
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	ff d0                	call   *%eax
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  8007bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007c3:	89 f0                	mov    %esi,%eax
+  8007c5:	8d 70 01             	lea    0x1(%eax),%esi
+  8007c8:	0f b6 00             	movzbl (%eax),%eax
+  8007cb:	0f be d8             	movsbl %al,%ebx
+  8007ce:	85 db                	test   %ebx,%ebx
+  8007d0:	74 10                	je     8007e2 <vprintfmt+0x24a>
+  8007d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007d6:	78 b3                	js     80078b <vprintfmt+0x1f3>
+  8007d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  8007dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  8007e0:	79 a9                	jns    80078b <vprintfmt+0x1f3>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007e2:	eb 17                	jmp    8007fb <vprintfmt+0x263>
+                putch(' ', putdat);
+  8007e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8007eb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  8007f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007f5:	ff d0                	call   *%eax
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  8007f7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  8007fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  8007ff:	7f e3                	jg     8007e4 <vprintfmt+0x24c>
+                putch(' ', putdat);
+            }
+            break;
+  800801:	e9 70 01 00 00       	jmp    800976 <vprintfmt+0x3de>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800806:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800809:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80080d:	8d 45 14             	lea    0x14(%ebp),%eax
+  800810:	89 04 24             	mov    %eax,(%esp)
+  800813:	e8 0b fd ff ff       	call   800523 <getint>
+  800818:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80081b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  80081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800821:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800824:	85 d2                	test   %edx,%edx
+  800826:	79 26                	jns    80084e <vprintfmt+0x2b6>
+                putch('-', putdat);
+  800828:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80082b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80082f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800836:	8b 45 08             	mov    0x8(%ebp),%eax
+  800839:	ff d0                	call   *%eax
+                num = -(long long)num;
+  80083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80083e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800841:	f7 d8                	neg    %eax
+  800843:	83 d2 00             	adc    $0x0,%edx
+  800846:	f7 da                	neg    %edx
+  800848:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80084b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  80084e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800855:	e9 a8 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  80085a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80085d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800861:	8d 45 14             	lea    0x14(%ebp),%eax
+  800864:	89 04 24             	mov    %eax,(%esp)
+  800867:	e8 68 fc ff ff       	call   8004d4 <getuint>
+  80086c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80086f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800872:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800879:	e9 84 00 00 00       	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  80087e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800881:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800885:	8d 45 14             	lea    0x14(%ebp),%eax
+  800888:	89 04 24             	mov    %eax,(%esp)
+  80088b:	e8 44 fc ff ff       	call   8004d4 <getuint>
+  800890:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800893:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800896:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  80089d:	eb 63                	jmp    800902 <vprintfmt+0x36a>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  80089f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008a2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008a6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  8008ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008b0:	ff d0                	call   *%eax
+            putch('x', putdat);
+  8008b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008b9:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  8008c0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008c3:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  8008c5:	8b 45 14             	mov    0x14(%ebp),%eax
+  8008c8:	8d 50 04             	lea    0x4(%eax),%edx
+  8008cb:	89 55 14             	mov    %edx,0x14(%ebp)
+  8008ce:	8b 00                	mov    (%eax),%eax
+  8008d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  8008da:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  8008e1:	eb 1f                	jmp    800902 <vprintfmt+0x36a>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  8008e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8008ea:	8d 45 14             	lea    0x14(%ebp),%eax
+  8008ed:	89 04 24             	mov    %eax,(%esp)
+  8008f0:	e8 df fb ff ff       	call   8004d4 <getuint>
+  8008f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  8008fb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800902:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800906:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800909:	89 54 24 18          	mov    %edx,0x18(%esp)
+  80090d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800910:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800914:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800918:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80091b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80091e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800922:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800926:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80092d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800930:	89 04 24             	mov    %eax,(%esp)
+  800933:	e8 97 fa ff ff       	call   8003cf <printnum>
+            break;
+  800938:	eb 3c                	jmp    800976 <vprintfmt+0x3de>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  80093a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80093d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800941:	89 1c 24             	mov    %ebx,(%esp)
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	ff d0                	call   *%eax
+            break;
+  800949:	eb 2b                	jmp    800976 <vprintfmt+0x3de>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  80094b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80094e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800952:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800959:	8b 45 08             	mov    0x8(%ebp),%eax
+  80095c:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  80095e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800962:	eb 04                	jmp    800968 <vprintfmt+0x3d0>
+  800964:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800968:	8b 45 10             	mov    0x10(%ebp),%eax
+  80096b:	83 e8 01             	sub    $0x1,%eax
+  80096e:	0f b6 00             	movzbl (%eax),%eax
+  800971:	3c 25                	cmp    $0x25,%al
+  800973:	75 ef                	jne    800964 <vprintfmt+0x3cc>
+                /* do nothing */;
+            break;
+  800975:	90                   	nop
+        }
+    }
+  800976:	90                   	nop
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800977:	e9 3e fc ff ff       	jmp    8005ba <vprintfmt+0x22>
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  80097c:	83 c4 40             	add    $0x40,%esp
+  80097f:	5b                   	pop    %ebx
+  800980:	5e                   	pop    %esi
+  800981:	5d                   	pop    %ebp
+  800982:	c3                   	ret    
+
+00800983 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800983:	55                   	push   %ebp
+  800984:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800986:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800989:	8b 40 08             	mov    0x8(%eax),%eax
+  80098c:	8d 50 01             	lea    0x1(%eax),%edx
+  80098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800992:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800995:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800998:	8b 10                	mov    (%eax),%edx
+  80099a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80099d:	8b 40 04             	mov    0x4(%eax),%eax
+  8009a0:	39 c2                	cmp    %eax,%edx
+  8009a2:	73 12                	jae    8009b6 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  8009a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009a7:	8b 00                	mov    (%eax),%eax
+  8009a9:	8d 48 01             	lea    0x1(%eax),%ecx
+  8009ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+  8009af:	89 0a                	mov    %ecx,(%edx)
+  8009b1:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b4:	88 10                	mov    %dl,(%eax)
+    }
+}
+  8009b6:	5d                   	pop    %ebp
+  8009b7:	c3                   	ret    
+
+008009b8 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  8009b8:	55                   	push   %ebp
+  8009b9:	89 e5                	mov    %esp,%ebp
+  8009bb:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  8009be:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  8009c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8009c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  8009cb:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009ce:	89 44 24 08          	mov    %eax,0x8(%esp)
+  8009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8009d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009dc:	89 04 24             	mov    %eax,(%esp)
+  8009df:	e8 08 00 00 00       	call   8009ec <vsnprintf>
+  8009e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  8009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8009ea:	c9                   	leave  
+  8009eb:	c3                   	ret    
+
+008009ec <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  8009ec:	55                   	push   %ebp
+  8009ed:	89 e5                	mov    %esp,%ebp
+  8009ef:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  8009f2:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8009f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8009fb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8009fe:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a01:	01 d0                	add    %edx,%eax
+  800a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800a0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800a11:	74 0a                	je     800a1d <vsnprintf+0x31>
+  800a13:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800a19:	39 c2                	cmp    %eax,%edx
+  800a1b:	76 07                	jbe    800a24 <vsnprintf+0x38>
+        return -E_INVAL;
+  800a1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800a22:	eb 2a                	jmp    800a4e <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800a24:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a2b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a32:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800a35:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a39:	c7 04 24 83 09 80 00 	movl   $0x800983,(%esp)
+  800a40:	e8 53 fb ff ff       	call   800598 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800a48:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800a4e:	c9                   	leave  
+  800a4f:	c3                   	ret    
+
+00800a50 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800a50:	55                   	push   %ebp
+  800a51:	89 e5                	mov    %esp,%ebp
+  800a53:	57                   	push   %edi
+  800a54:	56                   	push   %esi
+  800a55:	53                   	push   %ebx
+  800a56:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800a59:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a5e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800a64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800a6a:	6b f0 05             	imul   $0x5,%eax,%esi
+  800a6d:	01 f7                	add    %esi,%edi
+  800a6f:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
+  800a74:	f7 e6                	mul    %esi
+  800a76:	8d 34 17             	lea    (%edi,%edx,1),%esi
+  800a79:	89 f2                	mov    %esi,%edx
+  800a7b:	83 c0 0b             	add    $0xb,%eax
+  800a7e:	83 d2 00             	adc    $0x0,%edx
+  800a81:	89 c7                	mov    %eax,%edi
+  800a83:	83 e7 ff             	and    $0xffffffff,%edi
+  800a86:	89 f9                	mov    %edi,%ecx
+  800a88:	0f b7 da             	movzwl %dx,%ebx
+  800a8b:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800a91:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800a97:	a1 00 20 80 00       	mov    0x802000,%eax
+  800a9c:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800aa2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800aa6:	c1 ea 0c             	shr    $0xc,%edx
+  800aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800aac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800aaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800abf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ac8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800acc:	74 1c                	je     800aea <rand+0x9a>
+  800ace:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ad1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ad6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ad9:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800adc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800adf:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ae4:	f7 75 dc             	divl   -0x24(%ebp)
+  800ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800aed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800af0:	f7 75 dc             	divl   -0x24(%ebp)
+  800af3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800af6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800aff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800b02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800b05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800b08:	83 c4 24             	add    $0x24,%esp
+  800b0b:	5b                   	pop    %ebx
+  800b0c:	5e                   	pop    %esi
+  800b0d:	5f                   	pop    %edi
+  800b0e:	5d                   	pop    %ebp
+  800b0f:	c3                   	ret    
+
+00800b10 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800b10:	55                   	push   %ebp
+  800b11:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800b13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b16:	ba 00 00 00 00       	mov    $0x0,%edx
+  800b1b:	a3 00 20 80 00       	mov    %eax,0x802000
+  800b20:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800b26:	5d                   	pop    %ebp
+  800b27:	c3                   	ret    
+
+00800b28 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800b28:	55                   	push   %ebp
+  800b29:	89 e5                	mov    %esp,%ebp
+  800b2b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800b35:	eb 04                	jmp    800b3b <strlen+0x13>
+        cnt ++;
+  800b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b3e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b41:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b44:	0f b6 00             	movzbl (%eax),%eax
+  800b47:	84 c0                	test   %al,%al
+  800b49:	75 ec                	jne    800b37 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b4e:	c9                   	leave  
+  800b4f:	c3                   	ret    
+
+00800b50 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  800b50:	55                   	push   %ebp
+  800b51:	89 e5                	mov    %esp,%ebp
+  800b53:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800b56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  800b5d:	eb 04                	jmp    800b63 <strnlen+0x13>
+        cnt ++;
+  800b5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  800b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800b66:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  800b69:	73 10                	jae    800b7b <strnlen+0x2b>
+  800b6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b6e:	8d 50 01             	lea    0x1(%eax),%edx
+  800b71:	89 55 08             	mov    %edx,0x8(%ebp)
+  800b74:	0f b6 00             	movzbl (%eax),%eax
+  800b77:	84 c0                	test   %al,%al
+  800b79:	75 e4                	jne    800b5f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800b7e:	c9                   	leave  
+  800b7f:	c3                   	ret    
+
+00800b80 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800b80:	55                   	push   %ebp
+  800b81:	89 e5                	mov    %esp,%ebp
+  800b83:	57                   	push   %edi
+  800b84:	56                   	push   %esi
+  800b85:	83 ec 20             	sub    $0x20,%esp
+  800b88:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800b9a:	89 d1                	mov    %edx,%ecx
+  800b9c:	89 c2                	mov    %eax,%edx
+  800b9e:	89 ce                	mov    %ecx,%esi
+  800ba0:	89 d7                	mov    %edx,%edi
+  800ba2:	ac                   	lods   %ds:(%esi),%al
+  800ba3:	aa                   	stos   %al,%es:(%edi)
+  800ba4:	84 c0                	test   %al,%al
+  800ba6:	75 fa                	jne    800ba2 <strcpy+0x22>
+  800ba8:	89 fa                	mov    %edi,%edx
+  800baa:	89 f1                	mov    %esi,%ecx
+  800bac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800baf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  800bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  800bb8:	83 c4 20             	add    $0x20,%esp
+  800bbb:	5e                   	pop    %esi
+  800bbc:	5f                   	pop    %edi
+  800bbd:	5d                   	pop    %ebp
+  800bbe:	c3                   	ret    
+
+00800bbf <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800bbf:	55                   	push   %ebp
+  800bc0:	89 e5                	mov    %esp,%ebp
+  800bc2:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800bc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800bcb:	eb 21                	jmp    800bee <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800bd0:	0f b6 10             	movzbl (%eax),%edx
+  800bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bd6:	88 10                	mov    %dl,(%eax)
+  800bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800bdb:	0f b6 00             	movzbl (%eax),%eax
+  800bde:	84 c0                	test   %al,%al
+  800be0:	74 04                	je     800be6 <strncpy+0x27>
+            src ++;
+  800be2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800be6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800bea:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800bf2:	75 d9                	jne    800bcd <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800bf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800bf7:	c9                   	leave  
+  800bf8:	c3                   	ret    
+
+00800bf9 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800bf9:	55                   	push   %ebp
+  800bfa:	89 e5                	mov    %esp,%ebp
+  800bfc:	57                   	push   %edi
+  800bfd:	56                   	push   %esi
+  800bfe:	83 ec 20             	sub    $0x20,%esp
+  800c01:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800c07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c13:	89 d1                	mov    %edx,%ecx
+  800c15:	89 c2                	mov    %eax,%edx
+  800c17:	89 ce                	mov    %ecx,%esi
+  800c19:	89 d7                	mov    %edx,%edi
+  800c1b:	ac                   	lods   %ds:(%esi),%al
+  800c1c:	ae                   	scas   %es:(%edi),%al
+  800c1d:	75 08                	jne    800c27 <strcmp+0x2e>
+  800c1f:	84 c0                	test   %al,%al
+  800c21:	75 f8                	jne    800c1b <strcmp+0x22>
+  800c23:	31 c0                	xor    %eax,%eax
+  800c25:	eb 04                	jmp    800c2b <strcmp+0x32>
+  800c27:	19 c0                	sbb    %eax,%eax
+  800c29:	0c 01                	or     $0x1,%al
+  800c2b:	89 fa                	mov    %edi,%edx
+  800c2d:	89 f1                	mov    %esi,%ecx
+  800c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800c32:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  800c3b:	83 c4 20             	add    $0x20,%esp
+  800c3e:	5e                   	pop    %esi
+  800c3f:	5f                   	pop    %edi
+  800c40:	5d                   	pop    %ebp
+  800c41:	c3                   	ret    
+
+00800c42 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800c42:	55                   	push   %ebp
+  800c43:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c45:	eb 0c                	jmp    800c53 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800c47:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800c4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800c4f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c57:	74 1a                	je     800c73 <strncmp+0x31>
+  800c59:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c5c:	0f b6 00             	movzbl (%eax),%eax
+  800c5f:	84 c0                	test   %al,%al
+  800c61:	74 10                	je     800c73 <strncmp+0x31>
+  800c63:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c66:	0f b6 10             	movzbl (%eax),%edx
+  800c69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c6c:	0f b6 00             	movzbl (%eax),%eax
+  800c6f:	38 c2                	cmp    %al,%dl
+  800c71:	74 d4                	je     800c47 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800c77:	74 18                	je     800c91 <strncmp+0x4f>
+  800c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c7c:	0f b6 00             	movzbl (%eax),%eax
+  800c7f:	0f b6 d0             	movzbl %al,%edx
+  800c82:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c85:	0f b6 00             	movzbl (%eax),%eax
+  800c88:	0f b6 c0             	movzbl %al,%eax
+  800c8b:	29 c2                	sub    %eax,%edx
+  800c8d:	89 d0                	mov    %edx,%eax
+  800c8f:	eb 05                	jmp    800c96 <strncmp+0x54>
+  800c91:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800c96:	5d                   	pop    %ebp
+  800c97:	c3                   	ret    
+
+00800c98 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800c98:	55                   	push   %ebp
+  800c99:	89 e5                	mov    %esp,%ebp
+  800c9b:	83 ec 04             	sub    $0x4,%esp
+  800c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800ca4:	eb 14                	jmp    800cba <strchr+0x22>
+        if (*s == c) {
+  800ca6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ca9:	0f b6 00             	movzbl (%eax),%eax
+  800cac:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800caf:	75 05                	jne    800cb6 <strchr+0x1e>
+            return (char *)s;
+  800cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb4:	eb 13                	jmp    800cc9 <strchr+0x31>
+        }
+        s ++;
+  800cb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800cba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cbd:	0f b6 00             	movzbl (%eax),%eax
+  800cc0:	84 c0                	test   %al,%al
+  800cc2:	75 e2                	jne    800ca6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800cc4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800cc9:	c9                   	leave  
+  800cca:	c3                   	ret    
+
+00800ccb <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800ccb:	55                   	push   %ebp
+  800ccc:	89 e5                	mov    %esp,%ebp
+  800cce:	83 ec 04             	sub    $0x4,%esp
+  800cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800cd4:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800cd7:	eb 11                	jmp    800cea <strfind+0x1f>
+        if (*s == c) {
+  800cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cdc:	0f b6 00             	movzbl (%eax),%eax
+  800cdf:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800ce2:	75 02                	jne    800ce6 <strfind+0x1b>
+            break;
+  800ce4:	eb 0e                	jmp    800cf4 <strfind+0x29>
+        }
+        s ++;
+  800ce6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800cea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ced:	0f b6 00             	movzbl (%eax),%eax
+  800cf0:	84 c0                	test   %al,%al
+  800cf2:	75 e5                	jne    800cd9 <strfind+0xe>
+        if (*s == c) {
+            break;
+        }
+        s ++;
+    }
+    return (char *)s;
+  800cf4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800cf7:	c9                   	leave  
+  800cf8:	c3                   	ret    
+
+00800cf9 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800cf9:	55                   	push   %ebp
+  800cfa:	89 e5                	mov    %esp,%ebp
+  800cfc:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800d06:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d0d:	eb 04                	jmp    800d13 <strtol+0x1a>
+        s ++;
+  800d0f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800d13:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d16:	0f b6 00             	movzbl (%eax),%eax
+  800d19:	3c 20                	cmp    $0x20,%al
+  800d1b:	74 f2                	je     800d0f <strtol+0x16>
+  800d1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d20:	0f b6 00             	movzbl (%eax),%eax
+  800d23:	3c 09                	cmp    $0x9,%al
+  800d25:	74 e8                	je     800d0f <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800d27:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2a:	0f b6 00             	movzbl (%eax),%eax
+  800d2d:	3c 2b                	cmp    $0x2b,%al
+  800d2f:	75 06                	jne    800d37 <strtol+0x3e>
+        s ++;
+  800d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d35:	eb 15                	jmp    800d4c <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800d37:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3a:	0f b6 00             	movzbl (%eax),%eax
+  800d3d:	3c 2d                	cmp    $0x2d,%al
+  800d3f:	75 0b                	jne    800d4c <strtol+0x53>
+        s ++, neg = 1;
+  800d41:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d45:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  800d4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d50:	74 06                	je     800d58 <strtol+0x5f>
+  800d52:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800d56:	75 24                	jne    800d7c <strtol+0x83>
+  800d58:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d5b:	0f b6 00             	movzbl (%eax),%eax
+  800d5e:	3c 30                	cmp    $0x30,%al
+  800d60:	75 1a                	jne    800d7c <strtol+0x83>
+  800d62:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d65:	83 c0 01             	add    $0x1,%eax
+  800d68:	0f b6 00             	movzbl (%eax),%eax
+  800d6b:	3c 78                	cmp    $0x78,%al
+  800d6d:	75 0d                	jne    800d7c <strtol+0x83>
+        s += 2, base = 16;
+  800d6f:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  800d73:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  800d7a:	eb 2a                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  800d7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d80:	75 17                	jne    800d99 <strtol+0xa0>
+  800d82:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d85:	0f b6 00             	movzbl (%eax),%eax
+  800d88:	3c 30                	cmp    $0x30,%al
+  800d8a:	75 0d                	jne    800d99 <strtol+0xa0>
+        s ++, base = 8;
+  800d8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800d90:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800d97:	eb 0d                	jmp    800da6 <strtol+0xad>
+    }
+    else if (base == 0) {
+  800d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800d9d:	75 07                	jne    800da6 <strtol+0xad>
+        base = 10;
+  800d9f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800da6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800da9:	0f b6 00             	movzbl (%eax),%eax
+  800dac:	3c 2f                	cmp    $0x2f,%al
+  800dae:	7e 1b                	jle    800dcb <strtol+0xd2>
+  800db0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800db3:	0f b6 00             	movzbl (%eax),%eax
+  800db6:	3c 39                	cmp    $0x39,%al
+  800db8:	7f 11                	jg     800dcb <strtol+0xd2>
+            dig = *s - '0';
+  800dba:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dbd:	0f b6 00             	movzbl (%eax),%eax
+  800dc0:	0f be c0             	movsbl %al,%eax
+  800dc3:	83 e8 30             	sub    $0x30,%eax
+  800dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dc9:	eb 48                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800dcb:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dce:	0f b6 00             	movzbl (%eax),%eax
+  800dd1:	3c 60                	cmp    $0x60,%al
+  800dd3:	7e 1b                	jle    800df0 <strtol+0xf7>
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	0f b6 00             	movzbl (%eax),%eax
+  800ddb:	3c 7a                	cmp    $0x7a,%al
+  800ddd:	7f 11                	jg     800df0 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de2:	0f b6 00             	movzbl (%eax),%eax
+  800de5:	0f be c0             	movsbl %al,%eax
+  800de8:	83 e8 57             	sub    $0x57,%eax
+  800deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800dee:	eb 23                	jmp    800e13 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800df0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800df3:	0f b6 00             	movzbl (%eax),%eax
+  800df6:	3c 40                	cmp    $0x40,%al
+  800df8:	7e 3d                	jle    800e37 <strtol+0x13e>
+  800dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dfd:	0f b6 00             	movzbl (%eax),%eax
+  800e00:	3c 5a                	cmp    $0x5a,%al
+  800e02:	7f 33                	jg     800e37 <strtol+0x13e>
+            dig = *s - 'A' + 10;
+  800e04:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e07:	0f b6 00             	movzbl (%eax),%eax
+  800e0a:	0f be c0             	movsbl %al,%eax
+  800e0d:	83 e8 37             	sub    $0x37,%eax
+  800e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e16:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800e19:	7c 02                	jl     800e1d <strtol+0x124>
+            break;
+  800e1b:	eb 1a                	jmp    800e37 <strtol+0x13e>
+        }
+        s ++, val = (val * base) + dig;
+  800e1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e24:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800e28:	89 c2                	mov    %eax,%edx
+  800e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800e2d:	01 d0                	add    %edx,%eax
+  800e2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800e32:	e9 6f ff ff ff       	jmp    800da6 <strtol+0xad>
+
+    if (endptr) {
+  800e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800e3b:	74 08                	je     800e45 <strtol+0x14c>
+        *endptr = (char *) s;
+  800e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e40:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e43:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800e45:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800e49:	74 07                	je     800e52 <strtol+0x159>
+  800e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800e4e:	f7 d8                	neg    %eax
+  800e50:	eb 03                	jmp    800e55 <strtol+0x15c>
+  800e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800e55:	c9                   	leave  
+  800e56:	c3                   	ret    
+
+00800e57 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800e57:	55                   	push   %ebp
+  800e58:	89 e5                	mov    %esp,%ebp
+  800e5a:	57                   	push   %edi
+  800e5b:	83 ec 24             	sub    $0x24,%esp
+  800e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e61:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  800e64:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  800e68:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e6b:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  800e6e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800e71:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  800e77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  800e7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  800e7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  800e81:	89 d7                	mov    %edx,%edi
+  800e83:	f3 aa                	rep stos %al,%es:(%edi)
+  800e85:	89 fa                	mov    %edi,%edx
+  800e87:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800e8a:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800e8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800e90:	83 c4 24             	add    $0x24,%esp
+  800e93:	5f                   	pop    %edi
+  800e94:	5d                   	pop    %ebp
+  800e95:	c3                   	ret    
+
+00800e96 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  800e96:	55                   	push   %ebp
+  800e97:	89 e5                	mov    %esp,%ebp
+  800e99:	57                   	push   %edi
+  800e9a:	56                   	push   %esi
+  800e9b:	53                   	push   %ebx
+  800e9c:	83 ec 30             	sub    $0x30,%esp
+  800e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eab:	8b 45 10             	mov    0x10(%ebp),%eax
+  800eae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  800eb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800eb7:	73 42                	jae    800efb <memmove+0x65>
+  800eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800ece:	c1 e8 02             	shr    $0x2,%eax
+  800ed1:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800ed3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ed9:	89 d7                	mov    %edx,%edi
+  800edb:	89 c6                	mov    %eax,%esi
+  800edd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800edf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800ee2:	83 e1 03             	and    $0x3,%ecx
+  800ee5:	74 02                	je     800ee9 <memmove+0x53>
+  800ee7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800ee9:	89 f0                	mov    %esi,%eax
+  800eeb:	89 fa                	mov    %edi,%edx
+  800eed:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800ef0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800ef3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ef9:	eb 36                	jmp    800f31 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800efb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efe:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f04:	01 c2                	add    %eax,%edx
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f15:	89 c1                	mov    %eax,%ecx
+  800f17:	89 d8                	mov    %ebx,%eax
+  800f19:	89 d6                	mov    %edx,%esi
+  800f1b:	89 c7                	mov    %eax,%edi
+  800f1d:	fd                   	std    
+  800f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f20:	fc                   	cld    
+  800f21:	89 f8                	mov    %edi,%eax
+  800f23:	89 f2                	mov    %esi,%edx
+  800f25:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800f28:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800f2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800f31:	83 c4 30             	add    $0x30,%esp
+  800f34:	5b                   	pop    %ebx
+  800f35:	5e                   	pop    %esi
+  800f36:	5f                   	pop    %edi
+  800f37:	5d                   	pop    %ebp
+  800f38:	c3                   	ret    
+
+00800f39 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  800f39:	55                   	push   %ebp
+  800f3a:	89 e5                	mov    %esp,%ebp
+  800f3c:	57                   	push   %edi
+  800f3d:	56                   	push   %esi
+  800f3e:	83 ec 20             	sub    $0x20,%esp
+  800f41:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f47:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800f50:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800f56:	c1 e8 02             	shr    $0x2,%eax
+  800f59:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800f5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f61:	89 d7                	mov    %edx,%edi
+  800f63:	89 c6                	mov    %eax,%esi
+  800f65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  800f6a:	83 e1 03             	and    $0x3,%ecx
+  800f6d:	74 02                	je     800f71 <memcpy+0x38>
+  800f6f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800f71:	89 f0                	mov    %esi,%eax
+  800f73:	89 fa                	mov    %edi,%edx
+  800f75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800f78:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  800f81:	83 c4 20             	add    $0x20,%esp
+  800f84:	5e                   	pop    %esi
+  800f85:	5f                   	pop    %edi
+  800f86:	5d                   	pop    %ebp
+  800f87:	c3                   	ret    
+
+00800f88 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800f88:	55                   	push   %ebp
+  800f89:	89 e5                	mov    %esp,%ebp
+  800f8b:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f91:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  800f94:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f97:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800f9a:	eb 30                	jmp    800fcc <memcmp+0x44>
+        if (*s1 != *s2) {
+  800f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800f9f:	0f b6 10             	movzbl (%eax),%edx
+  800fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fa5:	0f b6 00             	movzbl (%eax),%eax
+  800fa8:	38 c2                	cmp    %al,%dl
+  800faa:	74 18                	je     800fc4 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800faf:	0f b6 00             	movzbl (%eax),%eax
+  800fb2:	0f b6 d0             	movzbl %al,%edx
+  800fb5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fb8:	0f b6 00             	movzbl (%eax),%eax
+  800fbb:	0f b6 c0             	movzbl %al,%eax
+  800fbe:	29 c2                	sub    %eax,%edx
+  800fc0:	89 d0                	mov    %edx,%eax
+  800fc2:	eb 1a                	jmp    800fde <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800fc4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800fc8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800fcc:	8b 45 10             	mov    0x10(%ebp),%eax
+  800fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800fd2:	89 55 10             	mov    %edx,0x10(%ebp)
+  800fd5:	85 c0                	test   %eax,%eax
+  800fd7:	75 c3                	jne    800f9c <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800fd9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fde:	c9                   	leave  
+  800fdf:	c3                   	ret    
+
+00800fe0 <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  800fe0:	55                   	push   %ebp
+  800fe1:	89 e5                	mov    %esp,%ebp
+  800fe3:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fe6:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  800fe9:	e8 69 f3 ff ff       	call   800357 <getpid>
+  800fee:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff2:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  800ff9:	e8 1a f1 ff ff       	call   800118 <cprintf>
+    for (i = 0; i < 5; i ++) {
+  800ffe:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801005:	00 
+  801006:	eb 27                	jmp    80102f <main+0x4f>
+        yield();
+  801008:	e8 2a f3 ff ff       	call   800337 <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  80100d:	e8 45 f3 ff ff       	call   800357 <getpid>
+  801012:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801016:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80101a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80101e:	c7 04 24 5c 13 80 00 	movl   $0x80135c,(%esp)
+  801025:	e8 ee f0 ff ff       	call   800118 <cprintf>
+
+int
+main(void) {
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+    for (i = 0; i < 5; i ++) {
+  80102a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
+  80102f:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801034:	7e d2                	jle    801008 <main+0x28>
+        yield();
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+    }
+    cprintf("All done in process %d.\n", getpid());
+  801036:	e8 1c f3 ff ff       	call   800357 <getpid>
+  80103b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80103f:	c7 04 24 7f 13 80 00 	movl   $0x80137f,(%esp)
+  801046:	e8 cd f0 ff ff       	call   800118 <cprintf>
+    cprintf("yield pass.\n");
+  80104b:	c7 04 24 98 13 80 00 	movl   $0x801398,(%esp)
+  801052:	e8 c1 f0 ff ff       	call   800118 <cprintf>
+    return 0;
+  801057:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80105c:	c9                   	leave  
+  80105d:	c3                   	ret    
diff -r -u -P _lab6/obj/user/yield.d lab6/obj/user/yield.d
--- _lab6/obj/user/yield.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.d	2020-05-28 03:10:53.285519207 +0800
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files _lab6/obj/user/yield.o and lab6/obj/user/yield.o differ
diff -r -u -P _lab6/obj/user/yield.sym lab6/obj/user/yield.sym
--- _lab6/obj/user/yield.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.sym	2020-05-28 03:10:57.309519207 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ba9 .stabstr
+00000000 panic.c
+00000000 stdio.c
+008000c5 cputch
+00000000 syscall.c
+0080018d syscall
+00000000 ulib.c
+00000000 umain.c
+00000000 hash.c
+00000000 printfmt.c
+00801160 error_string
+008003cf printnum
+008004d4 getuint
+00800523 getint
+00800983 sprintputch
+00000000 rand.c
+00802000 next
+00000000 string.c
+00000000 yield.c
+00000000 
+00800b80 strcpy
+00800337 yield
+0080031d waitpid
+00800234 sys_yield
+00800e96 memmove
+008009b8 snprintf
+00800598 vprintfmt
+008001fe sys_fork
+00800118 cprintf
+00800357 getpid
+00800f39 memcpy
+0080037e lab6_set_priority
+008009ec vsnprintf
+00800391 umain
+00202ba8 __STAB_END__
+00800248 sys_kill
+00202ba9 __STABSTR_BEGIN__
+0080002f __panic
+00800cf9 strtol
+00800b50 strnlen
+00800364 print_pgdir
+00800344 kill
+00800ccb strfind
+00800301 wait
+00800020 _start
+00800a50 rand
+00800c42 strncmp
+00800277 sys_putc
+00800bbf strncpy
+00800f88 memcmp
+008002f4 fork
+00800e57 memset
+00800fe0 main
+00800b10 srand
+008003aa hash32
+0080056a printfmt
+00203936 __STABSTR_END__
+00800bf9 strcmp
+00800371 gettime_msec
+008002a6 sys_gettime
+008000e5 vcprintf
+0080007f __warn
+0080013e cputs
+008002ba sys_lab6_set_priority
+008002d5 exit
+00800212 sys_wait
+008001e3 sys_exit
+00200010 __STAB_BEGIN__
+00800b28 strlen
+00800292 sys_pgdir
+00800c98 strchr
+00800263 sys_getpid
Binary files _lab6/obj/__user_badarg.out and lab6/obj/__user_badarg.out differ
Binary files _lab6/obj/__user_badsegment.out and lab6/obj/__user_badsegment.out differ
Binary files _lab6/obj/__user_divzero.out and lab6/obj/__user_divzero.out differ
Binary files _lab6/obj/__user_exit.out and lab6/obj/__user_exit.out differ
Binary files _lab6/obj/__user_faultreadkernel.out and lab6/obj/__user_faultreadkernel.out differ
Binary files _lab6/obj/__user_faultread.out and lab6/obj/__user_faultread.out differ
Binary files _lab6/obj/__user_forktest.out and lab6/obj/__user_forktest.out differ
Binary files _lab6/obj/__user_forktree.out and lab6/obj/__user_forktree.out differ
Binary files _lab6/obj/__user_hello.out and lab6/obj/__user_hello.out differ
Binary files _lab6/obj/__user_matrix.out and lab6/obj/__user_matrix.out differ
Binary files _lab6/obj/__user_pgdir.out and lab6/obj/__user_pgdir.out differ
Binary files _lab6/obj/__user_priority.out and lab6/obj/__user_priority.out differ
Binary files _lab6/obj/__user_softint.out and lab6/obj/__user_softint.out differ
Binary files _lab6/obj/__user_spin.out and lab6/obj/__user_spin.out differ
Binary files _lab6/obj/__user_testbss.out and lab6/obj/__user_testbss.out differ
Binary files _lab6/obj/__user_waitkill.out and lab6/obj/__user_waitkill.out differ
Binary files _lab6/obj/__user_yield.out and lab6/obj/__user_yield.out differ
diff -r -u -P _lab6/.qemu.out lab6/.qemu.out
--- _lab6/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.qemu.out	2020-05-28 03:12:11.481519207 +0800
@@ -0,0 +1,116 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010c320 (phys)
+  edata  0xc01addd4 (phys)
+  end    0xc01b0f78 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf38 eip:0xc0100ae5 args:0x00010094 0x00000000 0xc012bf68 0xc01000d8
+    kern/debug/kdebug.c:352: print_stackframe+22
+ebp:0xc012bf48 eip:0xc0100dba args:0x00000000 0x00000000 0x00000000 0xc012bfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf68 eip:0xc01000d8 args:0x00000000 0xc012bf90 0xffff0000 0xc012bf94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012bf88 eip:0xc0100101 args:0x00000000 0xffff0000 0xc012bfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012bfa8 eip:0xc010011f args:0x00000000 0xc010002a 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012bfc8 eip:0xc0100144 args:0xc010c33c 0xc010c320 0x000031a4 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012bff8 eip:0xc010007f args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07efe000, [00100000, 07ffdfff], type = 1.
+  memory: 00002000, [07ffe000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: RR_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31849
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "priority".
+main: fork ok,now need to wait pids.
+child pid 3, acc 156000, time 1002
+child pid 4, acc 152000, time 1006
+child pid 5, acc 152000, time 1009
+child pid 6, acc 152000, time 1013
+child pid 7, acc 156000, time 1017
+main: pid 3, acc 156000, time 1017
+main: pid 4, acc 152000, time 1017
+main: pid 5, acc 152000, time 1017
+main: pid 6, acc 152000, time 1017
+main: pid 7, acc 156000, time 1017
+main: wait pids over
+stride sched correct result: 1 1 1 1 1
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:472:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P _lab6/tools/grade.sh lab6/tools/grade.sh
--- _lab6/tools/grade.sh	2020-05-26 17:16:54.406663000 +0800
+++ lab6/tools/grade.sh	2020-05-28 01:27:48.048204547 +0800
@@ -105,7 +105,7 @@
     echo $1
     shift
     if [ $# -gt 0 ]; then
-        echo -e "$@" | awk '{printf "   %s\n", $0}'
+        echo "$@" | awk '{printf "   %s\n", $0}'
         echo
     fi
 }
@@ -146,13 +146,9 @@
     if [ -n "$brkfun" ]; then
         # find the address of the kernel $brkfun function
         brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
-        brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
         (
             echo "target remote localhost:$gdbport"
             echo "break *0x$brkaddr"
-            if [ "$brkaddr" != "$brkaddr_phys" ]; then
-                echo "break *0x$brkaddr_phys"
-            fi
             echo "continue"
         ) > $gdb_in
 
@@ -183,8 +179,6 @@
     run_qemu
 
     show_time
-
-    cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
 }
 
 check_result() {
@@ -584,3 +578,4 @@
 
 ## print final-score
 show_final
+
diff -r -u -P _lab6/tools/grade.sh.orig lab6/tools/grade.sh.orig
--- _lab6/tools/grade.sh.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab6/tools/grade.sh.orig	2020-05-26 17:16:54.406663000 +0800
@@ -0,0 +1,586 @@
+#!/bin/sh
+
+verbose=false
+if [ "x$1" = "x-v" ]; then
+    verbose=true
+    out=/dev/stdout
+    err=/dev/stderr
+else
+    out=/dev/null
+    err=/dev/null
+fi
+
+## make & makeopts
+if gmake --version > /dev/null 2>&1; then
+    make=gmake;
+else
+    make=make;
+fi
+
+makeopts="--quiet --no-print-directory -j"
+
+make_print() {
+    echo `$make $makeopts print-$1`
+}
+
+## command tools
+awk='awk'
+bc='bc'
+date='date'
+grep='grep'
+rm='rm -f'
+sed='sed'
+
+## symbol table
+sym_table='obj/kernel.sym'
+
+## gdb & gdbopts
+gdb="$(make_print GDB)"
+gdbport='1234'
+
+gdb_in="$(make_print GRADE_GDB_IN)"
+
+## qemu & qemuopts
+qemu="$(make_print qemu)"
+
+qemu_out="$(make_print GRADE_QEMU_OUT)"
+
+if $qemu -nographic -help | grep -q '^-gdb'; then
+    qemugdb="-gdb tcp::$gdbport"
+else
+    qemugdb="-s -p $gdbport"
+fi
+
+## default variables
+default_timeout=30
+default_pts=5
+
+pts=5
+part=0
+part_pos=0
+total=0
+total_pos=0
+
+## default functions
+update_score() {
+    total=`expr $total + $part`
+    total_pos=`expr $total_pos + $part_pos`
+    part=0
+    part_pos=0
+}
+
+get_time() {
+    echo `$date +%s.%N 2> /dev/null`
+}
+
+show_part() {
+    echo "Part $1 Score: $part/$part_pos"
+    echo
+    update_score
+}
+
+show_final() {
+    update_score
+    echo "Total Score: $total/$total_pos"
+    if [ $total -lt $total_pos ]; then
+        exit 1
+    fi
+}
+
+show_time() {
+    t1=$(get_time)
+    time=`echo "scale=1; ($t1-$t0)/1" | $sed 's/.N/.0/g' | $bc 2> /dev/null`
+    echo "(${time}s)"
+}
+
+show_build_tag() {
+    echo "$1:" | $awk '{printf "%-24s ", $0}'
+}
+
+show_check_tag() {
+    echo "$1:" | $awk '{printf "  -%-40s  ", $0}'
+}
+
+show_msg() {
+    echo $1
+    shift
+    if [ $# -gt 0 ]; then
+        echo -e "$@" | awk '{printf "   %s\n", $0}'
+        echo
+    fi
+}
+
+pass() {
+    show_msg OK "$@"
+    part=`expr $part + $pts`
+    part_pos=`expr $part_pos + $pts`
+}
+
+fail() {
+    show_msg WRONG "$@"
+    part_pos=`expr $part_pos + $pts`
+}
+
+run_qemu() {
+    # Run qemu with serial output redirected to $qemu_out. If $brkfun is non-empty,
+    # wait until $brkfun is reached or $timeout expires, then kill QEMU
+    qemuextra=
+    if [ "$brkfun" ]; then
+        qemuextra="-S $qemugdb"
+    fi
+
+    if [ -z "$timeout" ] || [ $timeout -le 0 ]; then
+        timeout=$default_timeout;
+    fi
+
+    t0=$(get_time)
+    (
+        ulimit -t $timeout
+        exec $qemu -nographic $qemuopts -serial file:$qemu_out -monitor null -no-reboot $qemuextra
+    ) > $out 2> $err &
+    pid=$!
+
+    # wait for QEMU to start
+    sleep 1
+
+    if [ -n "$brkfun" ]; then
+        # find the address of the kernel $brkfun function
+        brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
+        brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
+        (
+            echo "target remote localhost:$gdbport"
+            echo "break *0x$brkaddr"
+            if [ "$brkaddr" != "$brkaddr_phys" ]; then
+                echo "break *0x$brkaddr_phys"
+            fi
+            echo "continue"
+        ) > $gdb_in
+
+        $gdb -batch -nx -x $gdb_in > /dev/null 2>&1
+
+        # make sure that QEMU is dead
+        # on OS X, exiting gdb doesn't always exit qemu
+        kill $pid > /dev/null 2>&1
+    fi
+}
+
+build_run() {
+    # usage: build_run <tag> <args>
+    show_build_tag "$1"
+    shift
+
+    if $verbose; then
+        echo "$make $@ ..."
+    fi
+    $make $makeopts $@ 'DEFS+=-DDEBUG_GRADE' > $out 2> $err
+
+    if [ $? -ne 0 ]; then
+        echo $make $@ failed
+        exit 1
+    fi
+
+    # now run qemu and save the output
+    run_qemu
+
+    show_time
+
+    cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
+}
+
+check_result() {
+    # usage: check_result <tag> <check> <check args...>
+    show_check_tag "$1"
+    shift
+
+    # give qemu some time to run (for asynchronous mode)
+    if [ ! -s $qemu_out ]; then
+        sleep 4
+    fi
+
+    if [ ! -s $qemu_out ]; then
+        fail > /dev/null
+        echo 'no $qemu_out'
+    else
+        check=$1
+        shift
+        $check "$@"
+    fi
+}
+
+check_regexps() {
+    okay=yes
+    not=0
+    reg=0
+    error=
+    for i do
+        if [ "x$i" = "x!" ]; then
+            not=1
+        elif [ "x$i" = "x-" ]; then
+            reg=1
+        else
+            if [ $reg -ne 0 ]; then
+                $grep '-E' "^$i\$" $qemu_out > /dev/null
+            else
+                $grep '-F' "$i" $qemu_out > /dev/null
+            fi
+            found=$(($? == 0))
+            if [ $found -eq $not ]; then
+                if [ $found -eq 0 ]; then
+                    msg="!! error: missing '$i'"
+                else
+                    msg="!! error: got unexpected line '$i'"
+                fi
+                okay=no
+                if [ -z "$error" ]; then
+                    error="$msg"
+                else
+                    error="$error\n$msg"
+                fi
+            fi
+            not=0
+            reg=0
+        fi
+    done
+    if [ "$okay" = "yes" ]; then
+        pass
+    else
+        fail "$error"
+        if $verbose; then
+            exit 1
+        fi
+    fi
+}
+
+run_test() {
+    # usage: run_test [-tag <tag>] [-prog <prog>] [-Ddef...] [-check <check>] checkargs ...
+    tag=
+    prog=
+    check=check_regexps
+    while true; do
+        select=
+        case $1 in
+            -tag|-prog)
+                select=`expr substr $1 2 ${#1}`
+                eval $select='$2'
+                ;;
+        esac
+        if [ -z "$select" ]; then
+            break
+        fi
+        shift
+        shift
+    done
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
+    if [ "x$1" = "x-check" ]; then
+        check=$2
+        shift
+        shift
+    fi
+
+    if [ -z "$prog" ]; then
+        $make $makeopts touch > /dev/null 2>&1
+        args="$defs"
+    else
+        if [ -z "$tag" ]; then
+            tag="$prog"
+        fi
+        args="build-$prog $defs"
+    fi
+
+    build_run "$tag" "$args"
+
+    check_result 'check result' "$check" "$@"
+}
+
+quick_run() {
+    # usage: quick_run <tag> [-Ddef...]
+    tag="$1"
+    shift
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
+
+    $make $makeopts touch > /dev/null 2>&1
+    build_run "$tag" "$defs"
+}
+
+quick_check() {
+    # usage: quick_check <tag> checkargs ...
+    tag="$1"
+    shift
+    check_result "$tag" check_regexps "$@"
+}
+
+## kernel image
+osimg=$(make_print ucoreimg)
+
+## swap image
+swapimg=$(make_print swapimg)
+
+## set default qemu-options
+qemuopts="-hda $osimg -drive file=$swapimg,media=disk,cache=writeback"
+
+## set break-function, default is readline
+brkfun=readline
+
+default_check() {
+    pts=7
+    check_regexps "$@"
+
+    pts=3
+    quick_check 'check output'                                  \
+    'memory management: default_pmm_manager'                      \
+    'check_alloc_page() succeeded!'                             \
+    'check_pgdir() succeeded!'                                  \
+    'check_boot_pgdir() succeeded!'				\
+    'PDE(0e0) c0000000-f8000000 38000000 urw'                   \
+    '  |-- PTE(38000) c0000000-f8000000 38000000 -rw'           \
+    'PDE(001) fac00000-fb000000 00400000 -rw'                   \
+    '  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw'           \
+    '  |-- PTE(00001) fafeb000-fafec000 00001000 -rw'		\
+    'check_vma_struct() succeeded!'                             \
+    'page fault at 0x00000100: K/W [no page found].'            \
+    'check_pgfault() succeeded!'                                \
+    'check_vmm() succeeded.'					\
+    'page fault at 0x00001000: K/W [no page found].'            \
+    'page fault at 0x00002000: K/W [no page found].'            \
+    'page fault at 0x00003000: K/W [no page found].'            \
+    'page fault at 0x00004000: K/W [no page found].'            \
+    'write Virt Page e in fifo_check_swap'			\
+    'page fault at 0x00005000: K/W [no page found].'		\
+    'page fault at 0x00001000: K/W [no page found]'		\
+    'page fault at 0x00002000: K/W [no page found].'		\
+    'page fault at 0x00003000: K/W [no page found].'		\
+    'page fault at 0x00004000: K/W [no page found].'		\
+    'check_swap() succeeded!'					\
+    '++ setup timer interrupts'
+}
+
+## check now!!
+
+run_test -prog 'badsegment' -check default_check                \
+        'kernel_execve: pid = 2, name = "badsegment".'          \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000d General Protection'                    \
+        '  err  0x00000028'                                     \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'divzero' -check default_check                   \
+        'kernel_execve: pid = 2, name = "divzero".'             \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x00000000 Divide error'                          \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'softint' -check default_check                   \
+        'kernel_execve: pid = 2, name = "softint".'             \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000d General Protection'                    \
+        '  err  0x00000072'                                     \
+      - '  eip  0x008.....'                                     \
+      - '  esp  0xaff.....'                                     \
+        '  cs   0x----001b'                                     \
+        '  ss   0x----0023'                                     \
+    ! - 'user panic at .*'
+
+pts=10
+
+run_test -prog 'faultread'  -check default_check                                     \
+        'kernel_execve: pid = 2, name = "faultread".'           \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000004'                                     \
+      - '  eip  0x008.....'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'faultreadkernel' -check default_check                                \
+        'kernel_execve: pid = 2, name = "faultreadkernel".'     \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000005'                                     \
+      - '  eip  0x008.....'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'hello' -check default_check                                          \
+        'kernel_execve: pid = 2, name = "hello".'               \
+        'Hello world!!.'                                        \
+        'I am process 2.'                                       \
+        'hello pass.'
+
+run_test -prog 'testbss' -check default_check                                        \
+        'kernel_execve: pid = 2, name = "testbss".'             \
+        'Making sure bss works right...'                        \
+        'Yes, good.  Now doing a wild write off the end...'     \
+        'testbss may pass.'                                     \
+      - 'trapframe at 0xc.......'                               \
+        'trap 0x0000000e Page Fault'                            \
+        '  err  0x00000006'                                     \
+      - '  eip  0x008.....'                                     \
+        'killed by kernel.'                                     \
+    ! - 'user panic at .*'
+
+run_test -prog 'pgdir' -check default_check                                          \
+        'kernel_execve: pid = 2, name = "pgdir".'               \
+        'I am 2, print pgdir.'                                  \
+        'PDE(001) 00800000-00c00000 00400000 urw'               \
+        '  |-- PTE(00002) 00800000-00802000 00002000 ur-'       \
+        '  |-- PTE(00001) 00802000-00803000 00001000 urw'       \
+        'PDE(001) afc00000-b0000000 00400000 urw'               \
+        '  |-- PTE(00004) afffc000-b0000000 00004000 urw'       \
+        'PDE(0e0) c0000000-f8000000 38000000 urw'               \
+        '  |-- PTE(38000) c0000000-f8000000 38000000 -rw'       \
+        'pgdir pass.'
+
+run_test -prog 'yield' -check default_check                                          \
+        'kernel_execve: pid = 2, name = "yield".'               \
+        'Hello, I am process 2.'                                \
+        'Back in process 2, iteration 0.'                       \
+        'Back in process 2, iteration 1.'                       \
+        'Back in process 2, iteration 2.'                       \
+        'Back in process 2, iteration 3.'                       \
+        'Back in process 2, iteration 4.'                       \
+        'All done in process 2.'                                \
+        'yield pass.'
+
+
+run_test -prog 'badarg' -check default_check                    \
+        'kernel_execve: pid = 2, name = "badarg".'              \
+        'fork ok.'                                              \
+        'badarg pass.'                                          \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=10
+
+run_test -prog 'exit'  -check default_check                                          \
+        'kernel_execve: pid = 2, name = "exit".'                \
+        'I am the parent. Forking the child...'                 \
+        'I am the parent, waiting now..'                        \
+        'I am the child.'                                       \
+      - 'waitpid [0-9]+ ok\.'                                   \
+        'exit pass.'                                            \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+run_test -prog 'spin'  -check default_check                                          \
+        'kernel_execve: pid = 2, name = "spin".'                \
+        'I am the parent. Forking the child...'                 \
+        'I am the parent. Running the child...'                 \
+        'I am the child. spinning ...'                          \
+        'I am the parent.  Killing the child...'                \
+        'kill returns 0'                                        \
+        'wait returns 0'                                        \
+        'spin may pass.'                                        \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+run_test -prog 'waitkill'  -check default_check                                      \
+        'kernel_execve: pid = 2, name = "waitkill".'            \
+        'wait child 1.'                                         \
+        'child 2.'                                              \
+        'child 1.'                                              \
+        'kill parent ok.'                                       \
+        'kill child1 ok.'                                       \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=15
+
+run_test -prog 'forktest'   -check default_check                                     \
+        'kernel_execve: pid = 2, name = "forktest".'            \
+        'I am child 31'                                         \
+        'I am child 19'                                         \
+        'I am child 13'                                         \
+        'I am child 0'                                          \
+        'forktest pass.'                                        \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'fork claimed to work [0-9]+ times!'                    \
+    !   'wait stopped early'                                    \
+    !   'wait got too many'                                     \
+    ! - 'user panic at .*'
+
+pts=10
+run_test -prog 'forktree'    -check default_check               \
+        'kernel_execve: pid = 2, name = "forktree".'            \
+      - '....: I am '\'''\'                                     \
+      - '....: I am '\''0'\'                                    \
+      - '....: I am '\'''\'                                     \
+      - '....: I am '\''1'\'                                    \
+      - '....: I am '\''0'\'                                    \
+      - '....: I am '\''01'\'                                   \
+      - '....: I am '\''00'\'                                   \
+      - '....: I am '\''11'\'                                   \
+      - '....: I am '\''10'\'                                   \
+      - '....: I am '\''101'\'                                  \
+      - '....: I am '\''100'\'                                  \
+      - '....: I am '\''111'\'                                  \
+      - '....: I am '\''110'\'                                  \
+      - '....: I am '\''001'\'                                  \
+      - '....: I am '\''000'\'                                  \
+      - '....: I am '\''011'\'                                  \
+      - '....: I am '\''010'\'                                  \
+      - '....: I am '\''0101'\'                                 \
+      - '....: I am '\''0100'\'                                 \
+      - '....: I am '\''0111'\'                                 \
+      - '....: I am '\''0110'\'                                 \
+      - '....: I am '\''0001'\'                                 \
+      - '....: I am '\''0000'\'                                 \
+      - '....: I am '\''0011'\'                                 \
+      - '....: I am '\''0010'\'                                 \
+      - '....: I am '\''1101'\'                                 \
+      - '....: I am '\''1100'\'                                 \
+      - '....: I am '\''1111'\'                                 \
+      - '....: I am '\''1110'\'                                 \
+      - '....: I am '\''1001'\'                                 \
+      - '....: I am '\''1000'\'                                 \
+      - '....: I am '\''1011'\'                                 \
+      - '....: I am '\''1010'\'                                 \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'
+
+pts=20
+timeout=500
+run_test -prog 'matrix'     -check default_check                \
+        'kernel_execve: pid = 2, name = "matrix".'              \
+        'fork ok.'                                              \
+        'pid 4 done!.'                                          \
+        'pid 7 done!.'                                          \
+        'pid 13 done!.'                                         \
+        'pid 17 done!.'                                         \
+        'pid 23 done!.'                                         \
+        'matrix pass.'                                          \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+pts=20
+timeout=150
+run_test -prog 'priority'      -check default_check             \
+	'sched class: stride_scheduler'                         \
+        'kernel_execve: pid = 2, name = "priority".'            \
+        'main: fork ok,now need to wait pids.'                  \
+        'stride sched correct result: 1 2 3 4 5'                \
+        'all user-mode processes have quit.'                    \
+        'init check memory pass.'                               \
+    ! - 'user panic at .*'
+
+## print final-score
+show_final
diff -r -u -P _lab6/tools/kernel.ld lab6/tools/kernel.ld
--- _lab6/tools/kernel.ld	2020-05-26 17:16:54.406663000 +0800
+++ lab6/tools/kernel.ld	2020-05-28 01:27:48.048204547 +0800
@@ -44,11 +44,6 @@
         *(.data)
     }
 
-    . = ALIGN(0x1000);
-    .data.pgdir : {
-        *(.data.pgdir)
-    }
-
     PROVIDE(edata = .);
 
     .bss : {
diff -r -u -P _lab6/tools/vector.c lab6/tools/vector.c
--- _lab6/tools/vector.c	2020-05-26 17:16:54.406663000 +0800
+++ lab6/tools/vector.c	2020-05-28 01:27:48.048204547 +0800
@@ -10,7 +10,7 @@
     for (i = 0; i < 256; i ++) {
         printf(".globl vector%d\n", i);
         printf("vector%d:\n", i);
-        if (i != 8 && (i < 10 || i > 14) && i != 17) {
+        if ((i < 8 || i > 14) && i != 17) {
             printf("  pushl $0\n");
         }
         printf("  pushl $%d\n", i);
